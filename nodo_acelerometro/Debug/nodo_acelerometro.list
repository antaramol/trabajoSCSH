
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b60  08013ed8  08013ed8  00023ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a38  08015a38  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08015a38  08015a38  00025a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a40  08015a40  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a40  08015a40  00025a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a44  08015a44  00025a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08015a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003648  20000228  08015c70  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003870  08015c70  00033870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000362c8  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000698f  00000000  00000000  00066520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  0006ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b58  00000000  00000000  0006fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008eba  00000000  00000000  000727d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031fc3  00000000  00000000  0007b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110ef8  00000000  00000000  000ad655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001be54d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d77c  00000000  00000000  001be5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ec0 	.word	0x08013ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08013ec0 	.word	0x08013ec0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ecc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	e000      	b.n	8000ed8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f001 fc64 	bl	80027ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f857 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 fa21 	bl	8001350 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f0e:	f000 f8b5 	bl	800107c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f12:	f000 f8eb 	bl	80010ec <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f16:	f000 f929 	bl	800116c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f1a:	f000 f94d 	bl	80011b8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f1e:	f000 f989 	bl	8001234 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f22:	f000 f9b7 	bl	8001294 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f26:	f000 f9e5 	bl	80012f4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  ACCELERO_StatusTypeDef status_acc;
  status_acc = BSP_ACCELERO_Init_INT();
 8000f2a:	f000 fbe5 	bl	80016f8 <BSP_ACCELERO_Init_INT>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if(status_acc == ACCELERO_OK){
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <main+0x42>
	  printf("Inicializado ACCELERO\r\n");
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <main+0x8c>)
 8000f3a:	f010 ff91 	bl	8011e60 <puts>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f3e:	f00c fc3f 	bl	800d7c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Acelero */
  AceleroHandle = osMessageQueueNew (128, sizeof(uint16_t), &Acelero_attributes);
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <main+0x90>)
 8000f44:	2102      	movs	r1, #2
 8000f46:	2080      	movs	r0, #128	; 0x80
 8000f48:	f00c fe16 	bl	800db78 <osMessageQueueNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <main+0x94>)
 8000f50:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendAccel */
  sendAccelHandle = osThreadNew(sendAccel_func, NULL, &sendAccel_attributes);
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <main+0x98>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <main+0x9c>)
 8000f58:	f00c fc91 	bl	800d87e <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <main+0xa0>)
 8000f60:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <main+0xa4>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <main+0xa8>)
 8000f68:	f00c fc89 	bl	800d87e <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <main+0xac>)
 8000f70:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_function, NULL, &wifiStartTask_attributes);
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <main+0xb0>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <main+0xb4>)
 8000f78:	f00c fc81 	bl	800d87e <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <main+0xb8>)
 8000f80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f82:	f00c fc41 	bl	800d808 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <main+0x8a>
 8000f88:	08013f08 	.word	0x08013f08
 8000f8c:	080152dc 	.word	0x080152dc
 8000f90:	2000088c 	.word	0x2000088c
 8000f94:	08015270 	.word	0x08015270
 8000f98:	08001995 	.word	0x08001995
 8000f9c:	20000880 	.word	0x20000880
 8000fa0:	08015294 	.word	0x08015294
 8000fa4:	080019f9 	.word	0x080019f9
 8000fa8:	20000884 	.word	0x20000884
 8000fac:	080152b8 	.word	0x080152b8
 8000fb0:	08001aa5 	.word	0x08001aa5
 8000fb4:	20000888 	.word	0x20000888

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	; 0x58
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2244      	movs	r2, #68	; 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f010 f863 	bl	8011092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fde:	f003 f8a1 	bl	8004124 <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe8:	f000 fd7a 	bl	8001ae0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fec:	f003 f87c 	bl	80040e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SystemClock_Config+0xc0>)
 8000ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <SystemClock_Config+0xc0>)
 8000ff8:	f023 0318 	bic.w	r3, r3, #24
 8000ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001000:	2314      	movs	r3, #20
 8001002:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001018:	2301      	movs	r3, #1
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001020:	2328      	movs	r3, #40	; 0x28
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001024:	2307      	movs	r3, #7
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f003 f997 	bl	8004368 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001040:	f000 fd4e 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2303      	movs	r3, #3
 800104a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	2104      	movs	r1, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fd6b 	bl	8004b38 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001068:	f000 fd3a 	bl	8001ae0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800106c:	f004 fa86 	bl	800557c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001070:	bf00      	nop
 8001072:	3758      	adds	r7, #88	; 0x58
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <MX_DFSDM1_Init+0x6c>)
 8001084:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 8001088:	2201      	movs	r2, #1
 800108a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 8001094:	2202      	movs	r2, #2
 8001096:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010aa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_DFSDM1_Init+0x68>)
 80010d2:	f001 fced 	bl	8002ab0 <HAL_DFSDM_ChannelInit>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80010dc:	f000 fd00 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000244 	.word	0x20000244
 80010e8:	40016020 	.word	0x40016020

080010ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_I2C2_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_I2C2_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_I2C2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_I2C2_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_I2C2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_I2C2_Init+0x74>)
 8001128:	f002 f8f6 	bl	8003318 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 fcd5 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_I2C2_Init+0x74>)
 800113a:	f002 fdf5 	bl	8003d28 <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 fccc 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_I2C2_Init+0x74>)
 800114c:	f002 fe37 	bl	8003dbe <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fcc3 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000027c 	.word	0x2000027c
 8001164:	40005800 	.word	0x40005800
 8001168:	10909cec 	.word	0x10909cec

0800116c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_QUADSPI_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001178:	2202      	movs	r2, #2
 800117a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800117e:	2204      	movs	r2, #4
 8001180:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001184:	2210      	movs	r2, #16
 8001186:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800118a:	2217      	movs	r2, #23
 800118c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800119c:	f003 f828 	bl	80041f0 <HAL_QSPI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011a6:	f000 fc9b 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002c8 	.word	0x200002c8
 80011b4:	a0001000 	.word	0xa0001000

080011b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_SPI3_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_SPI3_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_SPI3_Init+0x74>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_SPI3_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI3_Init+0x74>)
 80011d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI3_Init+0x74>)
 80011e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_SPI3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI3_Init+0x74>)
 8001206:	2207      	movs	r2, #7
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_SPI3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI3_Init+0x74>)
 8001212:	2208      	movs	r2, #8
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_SPI3_Init+0x74>)
 8001218:	f004 fb92 	bl	8005940 <HAL_SPI_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fc5d 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000030c 	.word	0x2000030c
 8001230:	40003c00 	.word	0x40003c00

08001234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART1_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART1_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001278:	f006 f960 	bl	800753c <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001282:	f000 fc2d 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000370 	.word	0x20000370
 8001290:	40013800 	.word	0x40013800

08001294 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USART3_UART_Init+0x58>)
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <MX_USART3_UART_Init+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012d8:	f006 f930 	bl	800753c <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fbfd 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200003f4 	.word	0x200003f4
 80012f0:	40004800 	.word	0x40004800

080012f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2206      	movs	r2, #6
 8001304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2202      	movs	r2, #2
 800130a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2202      	movs	r2, #2
 8001310:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001338:	f002 fd8d 	bl	8003e56 <HAL_PCD_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 fbcd 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000478 	.word	0x20000478

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	4bba      	ldr	r3, [pc, #744]	; (8001650 <MX_GPIO_Init+0x300>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4ab9      	ldr	r2, [pc, #740]	; (8001650 <MX_GPIO_Init+0x300>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4bb7      	ldr	r3, [pc, #732]	; (8001650 <MX_GPIO_Init+0x300>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4bb4      	ldr	r3, [pc, #720]	; (8001650 <MX_GPIO_Init+0x300>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4ab3      	ldr	r2, [pc, #716]	; (8001650 <MX_GPIO_Init+0x300>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4bb1      	ldr	r3, [pc, #708]	; (8001650 <MX_GPIO_Init+0x300>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4bae      	ldr	r3, [pc, #696]	; (8001650 <MX_GPIO_Init+0x300>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4aad      	ldr	r2, [pc, #692]	; (8001650 <MX_GPIO_Init+0x300>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4bab      	ldr	r3, [pc, #684]	; (8001650 <MX_GPIO_Init+0x300>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4ba8      	ldr	r3, [pc, #672]	; (8001650 <MX_GPIO_Init+0x300>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4aa7      	ldr	r2, [pc, #668]	; (8001650 <MX_GPIO_Init+0x300>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4ba5      	ldr	r3, [pc, #660]	; (8001650 <MX_GPIO_Init+0x300>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	4ba2      	ldr	r3, [pc, #648]	; (8001650 <MX_GPIO_Init+0x300>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4aa1      	ldr	r2, [pc, #644]	; (8001650 <MX_GPIO_Init+0x300>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b9f      	ldr	r3, [pc, #636]	; (8001650 <MX_GPIO_Init+0x300>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80013e4:	489b      	ldr	r0, [pc, #620]	; (8001654 <MX_GPIO_Init+0x304>)
 80013e6:	f001 ff67 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f248 1104 	movw	r1, #33028	; 0x8104
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f001 ff60 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f24f 0114 	movw	r1, #61460	; 0xf014
 80013fe:	4896      	ldr	r0, [pc, #600]	; (8001658 <MX_GPIO_Init+0x308>)
 8001400:	f001 ff5a 	bl	80032b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f241 0181 	movw	r1, #4225	; 0x1081
 800140a:	4894      	ldr	r0, [pc, #592]	; (800165c <MX_GPIO_Init+0x30c>)
 800140c:	f001 ff54 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	4891      	ldr	r0, [pc, #580]	; (800165c <MX_GPIO_Init+0x30c>)
 8001418:	f001 ff4e 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001422:	488f      	ldr	r0, [pc, #572]	; (8001660 <MX_GPIO_Init+0x310>)
 8001424:	f001 ff48 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	488a      	ldr	r0, [pc, #552]	; (8001658 <MX_GPIO_Init+0x308>)
 800142e:	f001 ff43 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2101      	movs	r1, #1
 8001436:	4887      	ldr	r0, [pc, #540]	; (8001654 <MX_GPIO_Init+0x304>)
 8001438:	f001 ff3e 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800143c:	f240 1315 	movw	r3, #277	; 0x115
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	487f      	ldr	r0, [pc, #508]	; (8001654 <MX_GPIO_Init+0x304>)
 8001456:	f001 fc79 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800145a:	236a      	movs	r3, #106	; 0x6a
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <MX_GPIO_Init+0x314>)
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4879      	ldr	r0, [pc, #484]	; (8001654 <MX_GPIO_Init+0x304>)
 800146e:	f001 fc6d 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001478:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <MX_GPIO_Init+0x318>)
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4876      	ldr	r0, [pc, #472]	; (8001660 <MX_GPIO_Init+0x310>)
 8001488:	f001 fc60 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800148c:	233f      	movs	r3, #63	; 0x3f
 800148e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001490:	230b      	movs	r3, #11
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4870      	ldr	r0, [pc, #448]	; (8001660 <MX_GPIO_Init+0x310>)
 80014a0:	f001 fc54 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014a4:	2303      	movs	r3, #3
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014b4:	2308      	movs	r3, #8
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f001 fc43 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80014c6:	f248 1304 	movw	r3, #33028	; 0x8104
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f001 fc33 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80014e6:	2308      	movs	r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 fc22 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001508:	2310      	movs	r3, #16
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800150c:	230b      	movs	r3, #11
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 fc15 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001522:	23e0      	movs	r3, #224	; 0xe0
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001532:	2305      	movs	r3, #5
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f001 fc04 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001544:	2301      	movs	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <MX_GPIO_Init+0x314>)
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4840      	ldr	r0, [pc, #256]	; (8001658 <MX_GPIO_Init+0x308>)
 8001558:	f001 fbf8 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001560:	230b      	movs	r3, #11
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	483a      	ldr	r0, [pc, #232]	; (8001658 <MX_GPIO_Init+0x308>)
 8001570:	f001 fbec 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001574:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001578:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4832      	ldr	r0, [pc, #200]	; (8001658 <MX_GPIO_Init+0x308>)
 800158e:	f001 fbdd 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001592:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001596:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <MX_GPIO_Init+0x314>)
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	482d      	ldr	r0, [pc, #180]	; (800165c <MX_GPIO_Init+0x30c>)
 80015a8:	f001 fbd0 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015ac:	f243 0381 	movw	r3, #12417	; 0x3081
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4825      	ldr	r0, [pc, #148]	; (800165c <MX_GPIO_Init+0x30c>)
 80015c6:	f001 fbc1 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <MX_GPIO_Init+0x310>)
 80015e4:	f001 fbb2 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80015e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_GPIO_Init+0x314>)
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_GPIO_Init+0x310>)
 80015fe:	f001 fba5 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001612:	2305      	movs	r3, #5
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_GPIO_Init+0x30c>)
 800161e:	f001 fb95 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001622:	2378      	movs	r3, #120	; 0x78
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_GPIO_Init+0x30c>)
 800163e:	f001 fb85 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	e00d      	b.n	800166c <MX_GPIO_Init+0x31c>
 8001650:	40021000 	.word	0x40021000
 8001654:	48001000 	.word	0x48001000
 8001658:	48000400 	.word	0x48000400
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48000800 	.word	0x48000800
 8001664:	10110000 	.word	0x10110000
 8001668:	10210000 	.word	0x10210000
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001672:	2304      	movs	r3, #4
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <MX_GPIO_Init+0x36c>)
 800167e:	f001 fb65 	bl	8002d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	2007      	movs	r0, #7
 8001688:	f001 f9da 	bl	8002a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800168c:	2007      	movs	r0, #7
 800168e:	f001 f9f3 	bl	8002a78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	2017      	movs	r0, #23
 8001698:	f001 f9d2 	bl	8002a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169c:	2017      	movs	r0, #23
 800169e:	f001 f9eb 	bl	8002a78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2028      	movs	r0, #40	; 0x28
 80016a8:	f001 f9ca 	bl	8002a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ac:	2028      	movs	r0, #40	; 0x28
 80016ae:	f001 f9e3 	bl	8002a78 <HAL_NVIC_EnableIRQ>

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	48000400 	.word	0x48000400

080016c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx=0; DataIdx<len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e009      	b.n	80016e6 <_write+0x26>
{
ITM_SendChar(*ptr++);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fbe6 	bl	8000eac <ITM_SendChar>
for(DataIdx=0; DataIdx<len; DataIdx++)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf1      	blt.n	80016d2 <_write+0x12>
}
return len;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <BSP_ACCELERO_Init_INT>:


ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
ACCELERO_StatusTypeDef ret;
ret = BSP_ACCELERO_Init();
 80016fe:	f006 ff71 	bl	80085e4 <BSP_ACCELERO_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
if (ret == ACCELERO_OK)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12f      	bne.n	800176c <BSP_ACCELERO_Init_INT+0x74>
{
/* Initialize interruption*/
uint8_t tmp;
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 800170c:	210b      	movs	r1, #11
 800170e:	20d4      	movs	r0, #212	; 0xd4
 8001710:	f006 ff2c 	bl	800856c <SENSOR_IO_Read>
 8001714:	4603      	mov	r3, r0
 8001716:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800171e:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	461a      	mov	r2, r3
 8001724:	210b      	movs	r1, #11
 8001726:	20d4      	movs	r0, #212	; 0xd4
 8001728:	f006 ff06 	bl	8008538 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 800172c:	210d      	movs	r1, #13
 800172e:	20d4      	movs	r0, #212	; 0xd4
 8001730:	f006 ff1c 	bl	800856c <SENSOR_IO_Read>
 8001734:	4603      	mov	r3, r0
 8001736:	71bb      	strb	r3, [r7, #6]
tmp |=0b00000001;
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	461a      	mov	r2, r3
 8001744:	210d      	movs	r1, #13
 8001746:	20d4      	movs	r0, #212	; 0xd4
 8001748:	f006 fef6 	bl	8008538 <SENSOR_IO_Write>
tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 800174c:	211a      	movs	r1, #26
 800174e:	20d4      	movs	r0, #212	; 0xd4
 8001750:	f006 ff0c 	bl	800856c <SENSOR_IO_Read>
 8001754:	4603      	mov	r3, r0
 8001756:	71bb      	strb	r3, [r7, #6]
tmp |=0b10000000;
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800175e:	71bb      	strb	r3, [r7, #6]
SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	461a      	mov	r2, r3
 8001764:	211a      	movs	r1, #26
 8001766:	20d4      	movs	r0, #212	; 0xd4
 8001768:	f006 fee6 	bl	8008538 <SENSOR_IO_Write>
}
return ret;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001788:	d105      	bne.n	8001796 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		/* Aquí escribiremos nuestra funcionalidad*/
		osThreadFlagsSet(sendAccelHandle, 0x00000001U);
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x48>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f00c f907 	bl	800d9a4 <osThreadFlagsSet>
	}
	if (GPIO_Pin == BOTON_Pin){
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179c:	d105      	bne.n	80017aa <HAL_GPIO_EXTI_Callback+0x32>
		/* Aquí escribiremos nuestra funcionalidad*/
		osThreadFlagsSet(readAccelHandle, 0x00000001U);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c f8fd 	bl	800d9a4 <osThreadFlagsSet>
	}

	switch (GPIO_Pin)
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_GPIO_EXTI_Callback+0x3e>
	  {
	    case (GPIO_PIN_1):
	    {
	      SPI_WIFI_ISR();
 80017b0:	f008 fb84 	bl	8009ebc <SPI_WIFI_ISR>
	      break;
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_EXTI_Callback+0x40>
	    }
	    default:
	    {
	      break;
 80017b6:	bf00      	nop
	    }
	  }

}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000880 	.word	0x20000880
 80017c4:	20000884 	.word	0x20000884

080017c8 <wifi_start>:

static int wifi_start(void)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <wifi_start+0x7c>)
 80017d0:	f010 fb46 	bl	8011e60 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80017d4:	f008 fb82 	bl	8009edc <WIFI_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d129      	bne.n	8001832 <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 80017de:	481a      	ldr	r0, [pc, #104]	; (8001848 <wifi_start+0x80>)
 80017e0:	f010 fb3e 	bl	8011e60 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 80017e4:	4819      	ldr	r0, [pc, #100]	; (800184c <wifi_start+0x84>)
 80017e6:	f010 fb3b 	bl	8011e60 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 fbc3 	bl	8009f78 <WIFI_GetMAC_Address>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d116      	bne.n	8001826 <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <wifi_start+0x88>)
 80017fa:	f010 fb31 	bl	8011e60 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 80017fe:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001800:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001802:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001804:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001806:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001808:	461d      	mov	r5, r3
               MAC_Addr[3],
 800180a:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 800180c:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 800180e:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001810:	9102      	str	r1, [sp, #8]
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	462b      	mov	r3, r5
 8001818:	4622      	mov	r2, r4
 800181a:	4601      	mov	r1, r0
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <wifi_start+0x8c>)
 800181e:	f010 fa99 	bl	8011d54 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 8001822:	2300      	movs	r3, #0
 8001824:	e00a      	b.n	800183c <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <wifi_start+0x90>)
 8001828:	f010 fb1a 	bl	8011e60 <puts>
      return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e004      	b.n	800183c <wifi_start+0x74>
	printf("Errorfifi\r\n");
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <wifi_start+0x94>)
 8001834:	f010 fb14 	bl	8011e60 <puts>
    return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	08013f20 	.word	0x08013f20
 8001848:	08013f2c 	.word	0x08013f2c
 800184c:	08013f38 	.word	0x08013f38
 8001850:	08013f50 	.word	0x08013f50
 8001854:	08013f60 	.word	0x08013f60
 8001858:	08013fa0 	.word	0x08013fa0
 800185c:	08013fc4 	.word	0x08013fc4

08001860 <wifi_connect>:

int wifi_connect(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af02      	add	r7, sp, #8

  wifi_start();
 8001866:	f7ff ffaf 	bl	80017c8 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 800186a:	4919      	ldr	r1, [pc, #100]	; (80018d0 <wifi_connect+0x70>)
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <wifi_connect+0x74>)
 800186e:	f010 fa71 	bl	8011d54 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001872:	2203      	movs	r2, #3
 8001874:	4918      	ldr	r1, [pc, #96]	; (80018d8 <wifi_connect+0x78>)
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <wifi_connect+0x70>)
 8001878:	f008 fb5c 	bl	8009f34 <WIFI_Connect>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11d      	bne.n	80018be <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001882:	4816      	ldr	r0, [pc, #88]	; (80018dc <wifi_connect+0x7c>)
 8001884:	f008 fb8e 	bl	8009fa4 <WIFI_GetIP_Address>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d111      	bne.n	80018b2 <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <wifi_connect+0x7c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001892:	4619      	mov	r1, r3
               IP_Addr[1],
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <wifi_connect+0x7c>)
 8001896:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001898:	461a      	mov	r2, r3
               IP_Addr[2],
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <wifi_connect+0x7c>)
 800189c:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 800189e:	4618      	mov	r0, r3
               IP_Addr[3]);
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <wifi_connect+0x7c>)
 80018a2:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4603      	mov	r3, r0
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <wifi_connect+0x80>)
 80018aa:	f010 fa53 	bl	8011d54 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e00a      	b.n	80018c8 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80018b2:	480c      	ldr	r0, [pc, #48]	; (80018e4 <wifi_connect+0x84>)
 80018b4:	f010 fad4 	bl	8011e60 <puts>
      return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	e004      	b.n	80018c8 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <wifi_connect+0x88>)
 80018c0:	f010 face 	bl	8011e60 <puts>
     return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	08013fd0 	.word	0x08013fd0
 80018d4:	08013fe0 	.word	0x08013fe0
 80018d8:	08013ff4 	.word	0x08013ff4
 80018dc:	20000890 	.word	0x20000890
 80018e0:	08014000 	.word	0x08014000
 80018e4:	0801403c 	.word	0x0801403c
 80018e8:	0801406c 	.word	0x0801406c

080018ec <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <SPI3_IRQHandler+0x10>)
 80018f2:	f004 fe21 	bl	8006538 <HAL_SPI_IRQHandler>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000d54 	.word	0x20000d54

08001900 <MQTTTask>:

void MQTTTask(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09e      	sub	sp, #120	; 0x78
 8001904:	af00      	add	r7, sp, #0
	const uint32_t ulMaxPublishCount = 5UL;
 8001906:	2305      	movs	r3, #5
 8001908:	677b      	str	r3, [r7, #116]	; 0x74
	NetworkContext_t xNetworkContext = { 0 };
 800190a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
	TransportStatus_t xNetworkStatus;
	float ftemp;
	char payLoad[16];
	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext );
 8001914:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f8e7 	bl	8001aec <prvConnectToServer>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001924:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00a      	beq.n	8001942 <MQTTTask+0x42>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001930:	f383 8811 	msr	BASEPRI, r3
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	66bb      	str	r3, [r7, #104]	; 0x68
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800193e:	bf00      	nop
 8001940:	e7fe      	b.n	8001940 <MQTTTask+0x40>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001942:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f917 	bl	8001b80 <prvCreateMQTTConnectionWithBroker>
	for( ; ; )
	{
		/* Publicar cada 5 segundos */
		osDelay(5000);
 8001952:	f241 3088 	movw	r0, #5000	; 0x1388
 8001956:	f00c f8f4 	bl	800db42 <osDelay>
		ftemp=23.45;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MQTTTask+0x88>)
 800195c:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(payLoad,"%02.2f",ftemp);
 800195e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4638      	mov	r0, r7
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <MQTTTask+0x8c>)
 800196c:	f010 fafa 	bl	8011f64 <siprintf>
//		prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
		MQTT_ProcessLoop(&xMQTTContext);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f009 ffe8 	bl	800b94a <MQTT_ProcessLoop>
		prvMQTTSubscribeToTopic(&xMQTTContext, pcTempTopic);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4904      	ldr	r1, [pc, #16]	; (8001990 <MQTTTask+0x90>)
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f979 	bl	8001c78 <prvMQTTSubscribeToTopic>
		osDelay(5000);
 8001986:	e7e4      	b.n	8001952 <MQTTTask+0x52>
 8001988:	41bb999a 	.word	0x41bb999a
 800198c:	08014094 	.word	0x08014094
 8001990:	0801409c 	.word	0x0801409c

08001994 <sendAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendAccel_func */
void sendAccel_func(void *argument)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	61fb      	str	r3, [r7, #28]
	uint32_t tick;
	uint32_t espacio_cola;
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295
 80019a6:	2100      	movs	r1, #0
 80019a8:	2001      	movs	r0, #1
 80019aa:	f00c f849 	bl	800da40 <osThreadFlagsWait>
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80019ae:	69f8      	ldr	r0, [r7, #28]
 80019b0:	f006 fe56 	bl	8008660 <BSP_ACCELERO_AccGetXYZ>
		tick = osKernelGetTickCount();
 80019b4:	f00b ff4e 	bl	800d854 <osKernelGetTickCount>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
		//printf("Tick: %ld Eje x: %d Eje y: %d Eje z: %d \r\n", tick, DataXYZ[0], DataXYZ[1], DataXYZ[2]);
		//printf("Recogida datos\r\n");
		espacio_cola=osMessageQueueGetSpace(AceleroHandle);
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <sendAccel_func+0x60>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00c fa0b 	bl	800dddc <osMessageQueueGetSpace>
 80019c6:	61b8      	str	r0, [r7, #24]
		//if(espacio_cola!=0){
//		printf("Espacio en la cola: %d\r\n",espacio_cola);
		//}
		if (espacio_cola != 0){
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0e9      	beq.n	80019a2 <sendAccel_func+0xe>
			osMessageQueuePut(AceleroHandle,&DataXYZ[2],0,pdMS_TO_TICKS(10));
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <sendAccel_func+0x60>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	1d19      	adds	r1, r3, #4
 80019d8:	230a      	movs	r3, #10
 80019da:	2200      	movs	r2, #0
 80019dc:	f00c f940 	bl	800dc60 <osMessageQueuePut>
			osMessageQueuePut(AceleroHandle,&tick,0,pdMS_TO_TICKS(10));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <sendAccel_func+0x60>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f107 010c 	add.w	r1, r7, #12
 80019e8:	230a      	movs	r3, #10
 80019ea:	2200      	movs	r2, #0
 80019ec:	f00c f938 	bl	800dc60 <osMessageQueuePut>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80019f0:	e7d7      	b.n	80019a2 <sendAccel_func+0xe>
 80019f2:	bf00      	nop
 80019f4:	2000088c 	.word	0x2000088c

080019f8 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0c6      	sub	sp, #280	; 0x118
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a06:	6018      	str	r0, [r3, #0]
	uint16_t dato_cola;
	uint16_t datos_cola[128];
	/* Infinite loop */
	for(;;)
	{
		read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8001a08:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f00c f816 	bl	800da40 <osThreadFlagsWait>
 8001a14:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		//Cojo los datos:
		if(read_estado_flag == 0x00000001U){
 8001a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d103      	bne.n	8001a28 <readAccel_func+0x30>
			printf("Le he dado al boton\r\n");
 8001a20:	481d      	ldr	r0, [pc, #116]	; (8001a98 <readAccel_func+0xa0>)
 8001a22:	f010 fa1d 	bl	8011e60 <puts>
 8001a26:	e007      	b.n	8001a38 <readAccel_func+0x40>
		}
		else if(read_estado_flag == osErrorTimeout){
 8001a28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a2c:	f113 0f02 	cmn.w	r3, #2
 8001a30:	d102      	bne.n	8001a38 <readAccel_func+0x40>
			printf("Ha saltado el timeout\r\n");
 8001a32:	481a      	ldr	r0, [pc, #104]	; (8001a9c <readAccel_func+0xa4>)
 8001a34:	f010 fa14 	bl	8011e60 <puts>
		}
		if(osMessageQueueGetSpace(AceleroHandle)==0){
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <readAccel_func+0xa8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00c f9cd 	bl	800dddc <osMessageQueueGetSpace>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d120      	bne.n	8001a8a <readAccel_func+0x92>
			for(int i=0; i<128; i++){
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a4e:	e017      	b.n	8001a80 <readAccel_func+0x88>
				osMessageQueueGet(AceleroHandle, dato_cola, NULL, pdMS_TO_TICKS(10));
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <readAccel_func+0xa8>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001a58:	4619      	mov	r1, r3
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f00c f95f 	bl	800dd20 <osMessageQueueGet>
				datos_cola[i]=dato_cola;
 8001a62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a6e:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 8001a72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(int i=0; i<128; i++){
 8001a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a84:	2b7f      	cmp	r3, #127	; 0x7f
 8001a86:	dde3      	ble.n	8001a50 <readAccel_func+0x58>
 8001a88:	e7be      	b.n	8001a08 <readAccel_func+0x10>
				//contador_cola = osMessageQueueGetCount(AceleroHandle);
			}
		}
		else{
			osMessageQueueReset(AceleroHandle);
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <readAccel_func+0xa8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00c f9d9 	bl	800de46 <osMessageQueueReset>
		read_estado_flag=osThreadFlagsWait(0x00000001U, osFlagsWaitAny, pdMS_TO_TICKS(7000)); //Cada diez segundos
 8001a94:	e7b8      	b.n	8001a08 <readAccel_func+0x10>
 8001a96:	bf00      	nop
 8001a98:	080140bc 	.word	0x080140bc
 8001a9c:	080140d4 	.word	0x080140d4
 8001aa0:	2000088c 	.word	0x2000088c

08001aa4 <wifiStartTask_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_function */
void wifiStartTask_function(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_function */
  /* Infinite loop */
  wifi_connect();
 8001aac:	f7ff fed8 	bl	8001860 <wifi_connect>
  for(;;)
  {
	MQTTTask();
 8001ab0:	f7ff ff26 	bl	8001900 <MQTTTask>
    osDelay(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f00c f844 	bl	800db42 <osDelay>
	MQTTTask();
 8001aba:	e7f9      	b.n	8001ab0 <wifiStartTask_function+0xc>

08001abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ace:	f000 fe97 	bl	8002800 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40001000 	.word	0x40001000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <prvConnectToServer+0x80>)
 8001af6:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        printf("Create a TCP connection to %s:%d.\n",
 8001af8:	f240 725b 	movw	r2, #1883	; 0x75b
 8001afc:	491c      	ldr	r1, [pc, #112]	; (8001b70 <prvConnectToServer+0x84>)
 8001afe:	481d      	ldr	r0, [pc, #116]	; (8001b74 <prvConnectToServer+0x88>)
 8001b00:	f010 f928 	bl	8011d54 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT);
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	2200      	movs	r2, #0
 8001b0a:	9201      	str	r2, [sp, #4]
 8001b0c:	f240 725b 	movw	r2, #1883	; 0x75b
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <prvConnectToServer+0x8c>)
 8001b14:	2100      	movs	r1, #0
 8001b16:	2000      	movs	r0, #0
 8001b18:	f008 fa60 	bl	8009fdc <WIFI_OpenClientConnection>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <prvConnectToServer+0x4e>
			printf("Error in opening MQTT connection: %d\n",ret);
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4814      	ldr	r0, [pc, #80]	; (8001b7c <prvConnectToServer+0x90>)
 8001b2c:	f010 f912 	bl	8011d54 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001b30:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b34:	f00c f805 	bl	800db42 <osDelay>
 8001b38:	e00f      	b.n	8001b5a <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f240 725b 	movw	r2, #1883	; 0x75b
 8001b54:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d1cb      	bne.n	8001af8 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	5e5d795b 	.word	0x5e5d795b
 8001b70:	0801410c 	.word	0x0801410c
 8001b74:	08014120 	.word	0x08014120
 8001b78:	08014144 	.word	0x08014144
 8001b7c:	0801414c 	.word	0x0801414c

08001b80 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	; 0x50
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	7818      	ldrb	r0, [r3, #0]
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	f00b fda9 	bl	800d6ec <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001ba4:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f009 fd88 	bl	800b6bc <MQTT_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001bb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001bcc:	bf00      	nop
 8001bce:	e7fe      	b.n	8001bce <prvCreateMQTTConnectionWithBroker+0x4e>
    printf(("MQTT initialized\n"));
 8001bd0:	4826      	ldr	r0, [pc, #152]	; (8001c6c <prvCreateMQTTConnectionWithBroker+0xec>)
 8001bd2:	f010 f945 	bl	8011e60 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	221c      	movs	r2, #28
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00f fa57 	bl	8011092 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001bee:	231d      	movs	r3, #29
 8001bf0:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7fe faea 	bl	80001d0 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7fe fae2 	bl	80001d0 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001c12:	233c      	movs	r3, #60	; 0x3c
 8001c14:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001c16:	f107 0120 	add.w	r1, r7, #32
 8001c1a:	f107 031f 	add.w	r3, r7, #31
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c24:	2200      	movs	r2, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f009 fd9d 	bl	800b766 <MQTT_Connect>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001c32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001c4c:	bf00      	nop
 8001c4e:	e7fe      	b.n	8001c4e <prvCreateMQTTConnectionWithBroker+0xce>
    printf(("MQTT connected to broker\n"));
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001c52:	f010 f905 	bl	8011e60 <puts>

}
 8001c56:	bf00      	nop
 8001c58:	3748      	adds	r7, #72	; 0x48
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	08001e45 	.word	0x08001e45
 8001c68:	08001e15 	.word	0x08001e15
 8001c6c:	08014174 	.word	0x08014174
 8001c70:	08014188 	.word	0x08014188
 8001c74:	080141a8 	.word	0x080141a8

08001c78 <prvMQTTSubscribeToTopic>:
    if(xResult==MQTTSuccess) printf(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	220c      	movs	r2, #12
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00f f9fd 	bl	8011092 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f009 fe76 	bl	800b98a <MQTT_GetPacketId>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <prvMQTTSubscribeToTopic+0xa4>)
 8001ca4:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f7fe fa8e 	bl	80001d0 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <prvMQTTSubscribeToTopic+0xa4>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f107 0108 	add.w	r1, r7, #8
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f009 fdc6 	bl	800b856 <MQTT_Subscribe>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) printf("Subscription to %s, result: %d, success\n",topic,xResult);
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <prvMQTTSubscribeToTopic+0x6a>
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	4811      	ldr	r0, [pc, #68]	; (8001d20 <prvMQTTSubscribeToTopic+0xa8>)
 8001cdc:	f010 f83a 	bl	8011d54 <iprintf>
 8001ce0:	e005      	b.n	8001cee <prvMQTTSubscribeToTopic+0x76>
        else printf("Subscription to %s, result: %d, failed\n",topic,xResult);
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	480e      	ldr	r0, [pc, #56]	; (8001d24 <prvMQTTSubscribeToTopic+0xac>)
 8001cea:	f010 f833 	bl	8011d54 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f009 fe2b 	bl	800b94a <MQTT_ProcessLoop>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <prvMQTTSubscribeToTopic+0xb0>)
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d102      	bne.n	8001d0a <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8001d04:	2301      	movs	r3, #1
 8001d06:	75bb      	strb	r3, [r7, #22]
            break;
 8001d08:	e003      	b.n	8001d12 <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8001d0a:	7dbb      	ldrb	r3, [r7, #22]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1d4      	bne.n	8001cba <prvMQTTSubscribeToTopic+0x42>
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000c7c 	.word	0x20000c7c
 8001d20:	080141c4 	.word	0x080141c4
 8001d24:	080141f0 	.word	0x080141f0
 8001d28:	20000008 	.word	0x20000008

08001d2c <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0c2      	sub	sp, #264	; 0x108
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d3a:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68d9      	ldr	r1, [r3, #12]
 8001d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b7f      	cmp	r3, #127	; 0x7f
 8001d56:	bf28      	it	cs
 8001d58:	237f      	movcs	r3, #127	; 0x7f
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00f f96e 	bl	8011042 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d76:	4293      	cmp	r3, r2
 8001d78:	bf28      	it	cs
 8001d7a:	4613      	movcs	r3, r2
 8001d7c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d80:	443b      	add	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	891b      	ldrh	r3, [r3, #8]
 8001da0:	2b7f      	cmp	r3, #127	; 0x7f
 8001da2:	bf28      	it	cs
 8001da4:	237f      	movcs	r3, #127	; 0x7f
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00f f947 	bl	8011042 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	891b      	ldrh	r3, [r3, #8]
 8001dc0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf28      	it	cs
 8001dc8:	4613      	movcs	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8001dda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4619      	mov	r1, r3
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <prvMQTTProcessIncomingPublish+0xe4>)
 8001de6:	f00f ffb5 	bl	8011d54 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') BSP_LED_On(LED2);
 8001dea:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001dee:	2b31      	cmp	r3, #49	; 0x31
 8001df0:	d102      	bne.n	8001df8 <prvMQTTProcessIncomingPublish+0xcc>
 8001df2:	2000      	movs	r0, #0
 8001df4:	f006 fa7a 	bl	80082ec <BSP_LED_On>
	if(buffer1[0]=='0') BSP_LED_Off(LED2);
 8001df8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001dfc:	2b30      	cmp	r3, #48	; 0x30
 8001dfe:	d102      	bne.n	8001e06 <prvMQTTProcessIncomingPublish+0xda>
 8001e00:	2000      	movs	r0, #0
 8001e02:	f006 fa89 	bl	8008318 <BSP_LED_Off>

}
 8001e06:	bf00      	nop
 8001e08:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	08014218 	.word	0x08014218

08001e14 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001e22:	f00d f9ed 	bl	800f200 <xTaskGetTickCount>
 8001e26:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <prvGetTimeMs+0x2c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001e36:	683b      	ldr	r3, [r7, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000c80 	.word	0x20000c80

08001e44 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e58:	2b30      	cmp	r3, #48	; 0x30
 8001e5a:	d104      	bne.n	8001e66 <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff63 	bl	8001d2c <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6613      	str	r3, [r2, #96]	; 0x60
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_MspInit+0x4c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	f06f 0001 	mvn.w	r0, #1
 8001eae:	f000 fdc7 	bl	8002a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0ac      	sub	sp, #176	; 0xb0
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2288      	movs	r2, #136	; 0x88
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00f f8d6 	bl	8011092 <memset>
  if(DFSDM1_Init == 0)
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d142      	bne.n	8001f74 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f852 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001f0a:	f7ff fde9 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001f3e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f58:	2306      	movs	r3, #6
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001f66:	f000 fef1 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a02      	ldr	r2, [pc, #8]	; (8001f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001f72:	6013      	str	r3, [r2, #0]
  }

}
 8001f74:	bf00      	nop
 8001f76:	37b0      	adds	r7, #176	; 0xb0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000c84 	.word	0x20000c84
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48001000 	.word	0x48001000

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0ac      	sub	sp, #176	; 0xb0
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2288      	movs	r2, #136	; 0x88
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00f f872 	bl	8011092 <memset>
  if(hi2c->Instance==I2C2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_I2C_MspInit+0xb0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d13b      	bne.n	8002030 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 ffef 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fd0:	f7ff fd86 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002006:	2304      	movs	r3, #4
 8002008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_I2C_MspInit+0xb8>)
 8002014:	f000 fe9a 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_I2C_MspInit+0xb4>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_I2C_MspInit+0xb4>)
 800201e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	37b0      	adds	r7, #176	; 0xb0
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005800 	.word	0x40005800
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400

08002044 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_I2C_MspDeInit+0x3c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10f      	bne.n	8002076 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_I2C_MspDeInit+0x40>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_I2C_MspDeInit+0x40>)
 800205c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002066:	4808      	ldr	r0, [pc, #32]	; (8002088 <HAL_I2C_MspDeInit+0x44>)
 8002068:	f001 f81a 	bl	80030a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800206c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_I2C_MspDeInit+0x44>)
 8002072:	f001 f815 	bl	80030a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005800 	.word	0x40005800
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_QSPI_MspInit+0x7c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d128      	bne.n	8002100 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6513      	str	r3, [r2, #80]	; 0x50
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_QSPI_MspInit+0x80>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80020de:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80020e2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020f0:	230a      	movs	r3, #10
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_QSPI_MspInit+0x84>)
 80020fc:	f000 fe26 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	a0001000 	.word	0xa0001000
 800210c:	40021000 	.word	0x40021000
 8002110:	48001000 	.word	0x48001000

08002114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_SPI_MspInit+0x8c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d130      	bne.n	8002198 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_SPI_MspInit+0x90>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002166:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002178:	2306      	movs	r3, #6
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <HAL_SPI_MspInit+0x94>)
 8002184:	f000 fde2 	bl	8002d4c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2105      	movs	r1, #5
 800218c:	2033      	movs	r0, #51	; 0x33
 800218e:	f000 fc57 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002192:	2033      	movs	r0, #51	; 0x33
 8002194:	f000 fc70 	bl	8002a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40003c00 	.word	0x40003c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	48000800 	.word	0x48000800

080021ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_SPI_MspDeInit+0x38>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10d      	bne.n	80021da <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_SPI_MspDeInit+0x3c>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <HAL_SPI_MspDeInit+0x3c>)
 80021c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80021ca:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <HAL_SPI_MspDeInit+0x40>)
 80021d0:	f000 ff66 	bl	80030a0 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80021d4:	2033      	movs	r0, #51	; 0x33
 80021d6:	f000 fc5d 	bl	8002a94 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40003c00 	.word	0x40003c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000800 	.word	0x48000800

080021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ae      	sub	sp, #184	; 0xb8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2288      	movs	r2, #136	; 0x88
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f00e ff3e 	bl	8011092 <memset>
  if(huart->Instance==USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a42      	ldr	r2, [pc, #264]	; (8002324 <HAL_UART_MspInit+0x134>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d13b      	bne.n	8002298 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002220:	2301      	movs	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002224:	2300      	movs	r3, #0
 8002226:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4618      	mov	r0, r3
 800222e:	f002 febb 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002238:	f7ff fc52 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_UART_MspInit+0x138>)
 800223e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002240:	4a39      	ldr	r2, [pc, #228]	; (8002328 <HAL_UART_MspInit+0x138>)
 8002242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002246:	6613      	str	r3, [r2, #96]	; 0x60
 8002248:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_UART_MspInit+0x138>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_UART_MspInit+0x138>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	4a33      	ldr	r2, [pc, #204]	; (8002328 <HAL_UART_MspInit+0x138>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_UART_MspInit+0x138>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800228e:	4619      	mov	r1, r3
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <HAL_UART_MspInit+0x13c>)
 8002292:	f000 fd5b 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002296:	e040      	b.n	800231a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_UART_MspInit+0x140>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d13b      	bne.n	800231a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a2:	2304      	movs	r3, #4
 80022a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fe7a 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0xce>
      Error_Handler();
 80022ba:	f7ff fc11 	bl	8001ae0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_UART_MspInit+0x138>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80022ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002308:	2307      	movs	r3, #7
 800230a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002312:	4619      	mov	r1, r3
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <HAL_UART_MspInit+0x144>)
 8002316:	f000 fd19 	bl	8002d4c <HAL_GPIO_Init>
}
 800231a:	bf00      	nop
 800231c:	37b8      	adds	r7, #184	; 0xb8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40013800 	.word	0x40013800
 8002328:	40021000 	.word	0x40021000
 800232c:	48000400 	.word	0x48000400
 8002330:	40004800 	.word	0x40004800
 8002334:	48000c00 	.word	0x48000c00

08002338 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0ac      	sub	sp, #176	; 0xb0
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2288      	movs	r2, #136	; 0x88
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f00e fe9a 	bl	8011092 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002366:	d17c      	bne.n	8002462 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800236e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800237e:	2318      	movs	r3, #24
 8002380:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002382:	2307      	movs	r3, #7
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002386:	2302      	movs	r3, #2
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800238a:	2302      	movs	r3, #2
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800238e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f002 fe05 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80023a4:	f7ff fb9c 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023de:	f000 fcb5 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023fc:	230a      	movs	r3, #10
 80023fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f000 fc9e 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800241a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_PCD_MspInit+0x134>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_PCD_MspInit+0x134>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_PCD_MspInit+0x134>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800244c:	f001 fec0 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800245c:	e001      	b.n	8002462 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800245e:	f001 feb7 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
}
 8002462:	bf00      	nop
 8002464:	37b0      	adds	r7, #176	; 0xb0
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08e      	sub	sp, #56	; 0x38
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_InitTick+0xe0>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a33      	ldr	r2, [pc, #204]	; (8002550 <HAL_InitTick+0xe0>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_InitTick+0xe0>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002496:	f107 0210 	add.w	r2, r7, #16
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fcef 	bl	8004e84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fcbc 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 80024b4:	6378      	str	r0, [r7, #52]	; 0x34
 80024b6:	e004      	b.n	80024c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024b8:	f002 fcb8 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_InitTick+0xe4>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	3b01      	subs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_InitTick+0xe8>)
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_InitTick+0xec>)
 80024d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_InitTick+0xe8>)
 80024d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_InitTick+0xe8>)
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_InitTick+0xe8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_InitTick+0xe8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_InitTick+0xe8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024f6:	4818      	ldr	r0, [pc, #96]	; (8002558 <HAL_InitTick+0xe8>)
 80024f8:	f004 fd4f 	bl	8006f9a <HAL_TIM_Base_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002502:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11b      	bne.n	8002542 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800250a:	4813      	ldr	r0, [pc, #76]	; (8002558 <HAL_InitTick+0xe8>)
 800250c:	f004 fda6 	bl	800705c <HAL_TIM_Base_Start_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800251a:	2b00      	cmp	r3, #0
 800251c:	d111      	bne.n	8002542 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800251e:	2036      	movs	r0, #54	; 0x36
 8002520:	f000 faaa 	bl	8002a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	d808      	bhi.n	800253c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800252a:	2200      	movs	r2, #0
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	2036      	movs	r0, #54	; 0x36
 8002530:	f000 fa86 	bl	8002a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_InitTick+0xf0>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e002      	b.n	8002542 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002546:	4618      	mov	r0, r3
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	431bde83 	.word	0x431bde83
 8002558:	20000c88 	.word	0x20000c88
 800255c:	40001000 	.word	0x40001000
 8002560:	20000014 	.word	0x20000014

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <NMI_Handler+0x4>

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002594:	2002      	movs	r0, #2
 8002596:	f000 fea7 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80025a2:	2020      	movs	r0, #32
 80025a4:	f000 fea0 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80025a8:	2040      	movs	r0, #64	; 0x40
 80025aa:	f000 fe9d 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80025ae:	2080      	movs	r0, #128	; 0x80
 80025b0:	f000 fe9a 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80025b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025b8:	f000 fe96 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80025c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025c8:	f000 fe8e 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80025cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025d0:	f000 fe8a 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80025d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025d8:	f000 fe86 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80025dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025e0:	f000 fe82 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80025e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025e8:	f000 fe7e 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM6_DAC_IRQHandler+0x10>)
 80025f6:	f004 fda1 	bl	800713c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000c88 	.word	0x20000c88

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800261e:	f00e fbcb 	bl	8010db8 <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
	return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002646:	e7fe      	b.n	8002646 <_exit+0x12>

08002648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e00a      	b.n	8002670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800265a:	f3af 8000 	nop.w
 800265e:	4601      	mov	r1, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60ba      	str	r2, [r7, #8]
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	dbf0      	blt.n	800265a <_read+0x12>
	}

return len;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	return -1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026aa:	605a      	str	r2, [r3, #4]
	return 0;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <_isatty>:

int _isatty(int file)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
	return 1;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f00e fb4c 	bl	8010db8 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20018000 	.word	0x20018000
 800274c:	00000400 	.word	0x00000400
 8002750:	20000cd4 	.word	0x20000cd4
 8002754:	20003870 	.word	0x20003870

08002758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <SystemInit+0x20>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <SystemInit+0x20>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002780:	f7ff ffea 	bl	8002758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002784:	480c      	ldr	r0, [pc, #48]	; (80027b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002786:	490d      	ldr	r1, [pc, #52]	; (80027bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <LoopForever+0xe>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800279c:	4c0a      	ldr	r4, [pc, #40]	; (80027c8 <LoopForever+0x16>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027aa:	f00e fc13 	bl	8010fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ae:	f7fe fba5 	bl	8000efc <main>

080027b2 <LoopForever>:

LoopForever:
    b LoopForever
 80027b2:	e7fe      	b.n	80027b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80027c0:	08015a48 	.word	0x08015a48
  ldr r2, =_sbss
 80027c4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80027c8:	20003870 	.word	0x20003870

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>

080027ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 f926 	bl	8002a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027de:	200f      	movs	r0, #15
 80027e0:	f7ff fe46 	bl	8002470 <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	e001      	b.n	80027f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f0:	f7ff fb3e 	bl	8001e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x20>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_IncTick+0x24>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000018 	.word	0x20000018
 8002824:	20000cd8 	.word	0x20000cd8

08002828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000cd8 	.word	0x20000cd8

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffde 	bl	8002828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000018 	.word	0x20000018

08002888 <__NVIC_SetPriorityGrouping>:
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ba:	4a04      	ldr	r2, [pc, #16]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	60d3      	str	r3, [r2, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_GetPriorityGrouping>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_GetPriorityGrouping+0x18>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	f003 0307 	and.w	r3, r3, #7
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_EnableIRQ>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db0b      	blt.n	8002916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4907      	ldr	r1, [pc, #28]	; (8002924 <__NVIC_EnableIRQ+0x38>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	2001      	movs	r0, #1
 800290e:	fa00 f202 	lsl.w	r2, r0, r2
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_DisableIRQ>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db12      	blt.n	8002960 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	490a      	ldr	r1, [pc, #40]	; (800296c <__NVIC_DisableIRQ+0x44>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	3320      	adds	r3, #32
 8002950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002954:	f3bf 8f4f 	dsb	sy
}
 8002958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800295a:	f3bf 8f6f 	isb	sy
}
 800295e:	bf00      	nop
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	; (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ff28 	bl	8002888 <__NVIC_SetPriorityGrouping>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a52:	f7ff ff3d 	bl	80028d0 <__NVIC_GetPriorityGrouping>
 8002a56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	6978      	ldr	r0, [r7, #20]
 8002a5e:	f7ff ffb1 	bl	80029c4 <NVIC_EncodePriority>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff80 	bl	8002970 <__NVIC_SetPriority>
}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff30 	bl	80028ec <__NVIC_EnableIRQ>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff40 	bl	8002928 <__NVIC_DisableIRQ>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0ac      	b.n	8002c1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f8b2 	bl	8002c30 <DFSDM_GetChannelFromInstance>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4a55      	ldr	r2, [pc, #340]	; (8002c24 <HAL_DFSDM_ChannelInit+0x174>)
 8002ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e09f      	b.n	8002c1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff f9ef 	bl	8001ec0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_DFSDM_ChannelInit+0x178>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <HAL_DFSDM_ChannelInit+0x178>)
 8002aea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002aec:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <HAL_DFSDM_ChannelInit+0x178>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d125      	bne.n	8002b40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002afe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b00:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4948      	ldr	r1, [pc, #288]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a46      	ldr	r2, [pc, #280]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b22:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	493f      	ldr	r1, [pc, #252]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3c      	ldr	r2, [pc, #240]	; (8002c2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020f 	bic.w	r2, r2, #15
 8002b7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ba4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 0207 	and.w	r2, r2, #7
 8002bd0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f810 	bl	8002c30 <DFSDM_GetChannelFromInstance>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4904      	ldr	r1, [pc, #16]	; (8002c24 <HAL_DFSDM_ChannelInit+0x174>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000ce0 	.word	0x20000ce0
 8002c28:	20000cdc 	.word	0x20000cdc
 8002c2c:	40016000 	.word	0x40016000

08002c30 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <DFSDM_GetChannelFromInstance+0x7c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e02b      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <DFSDM_GetChannelFromInstance+0x80>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d102      	bne.n	8002c54 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e024      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <DFSDM_GetChannelFromInstance+0x84>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e01d      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <DFSDM_GetChannelFromInstance+0x88>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d102      	bne.n	8002c70 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e016      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <DFSDM_GetChannelFromInstance+0x8c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c78:	2305      	movs	r3, #5
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e00f      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <DFSDM_GetChannelFromInstance+0x90>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d102      	bne.n	8002c8c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c86:	2306      	movs	r3, #6
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e008      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <DFSDM_GetChannelFromInstance+0x94>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c94:	2307      	movs	r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e001      	b.n	8002c9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40016000 	.word	0x40016000
 8002cb0:	40016020 	.word	0x40016020
 8002cb4:	40016040 	.word	0x40016040
 8002cb8:	40016080 	.word	0x40016080
 8002cbc:	400160a0 	.word	0x400160a0
 8002cc0:	400160c0 	.word	0x400160c0
 8002cc4:	400160e0 	.word	0x400160e0

08002cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d005      	beq.n	8002cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e029      	b.n	8002d40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020e 	bic.w	r2, r2, #14
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 021c 	and.w	r2, r3, #28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
    }
  }
  return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5a:	e17f      	b.n	800305c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8171 	beq.w	8003056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00b      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d007      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d130      	bne.n	8002df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dca:	2201      	movs	r2, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0201 	and.w	r2, r3, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d118      	bne.n	8002e34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x128>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d123      	bne.n	8002ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	6939      	ldr	r1, [r7, #16]
 8002eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80ac 	beq.w	8003056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	4a5e      	ldr	r2, [pc, #376]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6613      	str	r3, [r2, #96]	; 0x60
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_GPIO_Init+0x334>)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x242>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4f      	ldr	r2, [pc, #316]	; (8003084 <HAL_GPIO_Init+0x338>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x23e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <HAL_GPIO_Init+0x33c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x23a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_GPIO_Init+0x340>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x236>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4c      	ldr	r2, [pc, #304]	; (8003090 <HAL_GPIO_Init+0x344>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x232>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_GPIO_Init+0x348>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x22e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_GPIO_Init+0x34c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x22a>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa0:	4937      	ldr	r1, [pc, #220]	; (8003080 <HAL_GPIO_Init+0x334>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_GPIO_Init+0x350>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_GPIO_Init+0x350>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_GPIO_Init+0x350>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_GPIO_Init+0x350>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_GPIO_Init+0x350>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f47f ae78 	bne.w	8002d5c <HAL_GPIO_Init+0x10>
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800
 800308c:	48000c00 	.word	0x48000c00
 8003090:	48001000 	.word	0x48001000
 8003094:	48001400 	.word	0x48001400
 8003098:	48001800 	.word	0x48001800
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030ae:	e0cd      	b.n	800324c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80c0 	beq.w	8003246 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ee:	d025      	beq.n	800313c <HAL_GPIO_DeInit+0x9c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_GPIO_DeInit+0x1cc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01f      	beq.n	8003138 <HAL_GPIO_DeInit+0x98>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <HAL_GPIO_DeInit+0x1d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d019      	beq.n	8003134 <HAL_GPIO_DeInit+0x94>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_GPIO_DeInit+0x1d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_GPIO_DeInit+0x90>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a5b      	ldr	r2, [pc, #364]	; (8003278 <HAL_GPIO_DeInit+0x1d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00d      	beq.n	800312c <HAL_GPIO_DeInit+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_GPIO_DeInit+0x1dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <HAL_GPIO_DeInit+0x88>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a59      	ldr	r2, [pc, #356]	; (8003280 <HAL_GPIO_DeInit+0x1e0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_GPIO_DeInit+0x84>
 8003120:	2306      	movs	r3, #6
 8003122:	e00c      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003124:	2307      	movs	r3, #7
 8003126:	e00a      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003128:	2305      	movs	r3, #5
 800312a:	e008      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 800312c:	2304      	movs	r3, #4
 800312e:	e006      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003130:	2303      	movs	r3, #3
 8003132:	e004      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003134:	2302      	movs	r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 800313c:	2300      	movs	r3, #0
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	f002 0203 	and.w	r2, r2, #3
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	4093      	lsls	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d132      	bne.n	80031b4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800314e:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	494b      	ldr	r1, [pc, #300]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003158:	4013      	ands	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	4947      	ldr	r1, [pc, #284]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003166:	4013      	ands	r3, r2
 8003168:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800316a:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	4944      	ldr	r1, [pc, #272]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003174:	4013      	ands	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	4940      	ldr	r1, [pc, #256]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003182:	4013      	ands	r3, r2
 8003184:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	4830      	ldr	r0, [pc, #192]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	400a      	ands	r2, r1
 80031ae:	3302      	adds	r3, #2
 80031b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2103      	movs	r1, #3
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	08d2      	lsrs	r2, r2, #3
 80031e8:	4019      	ands	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2103      	movs	r1, #3
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2103      	movs	r1, #3
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	401a      	ands	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	2101      	movs	r1, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	401a      	ands	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af2b 	bne.w	80030b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	48001400 	.word	0x48001400
 8003280:	48001800 	.word	0x48001800
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e001      	b.n	80032aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fa36 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e081      	b.n	800342e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fe22 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e006      	b.n	80033a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800339e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d104      	bne.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69d9      	ldr	r1, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e021      	b.n	800348c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fdef 	bl	8002044 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 80f9 	bne.w	80036ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x34>
 80034c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0ed      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x4e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0e6      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ea:	f7ff f99d 	bl	8002828 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2319      	movs	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fac3 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0d1      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2221      	movs	r2, #33	; 0x21
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003534:	88f8      	ldrh	r0, [r7, #6]
 8003536:	893a      	ldrh	r2, [r7, #8]
 8003538:	8979      	ldrh	r1, [r7, #10]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4603      	mov	r3, r0
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9d3 	bl	80038f0 <I2C_RequestMemoryWrite>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0a9      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d90e      	bls.n	8003584 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fba5 	bl	8003ccc <I2C_TransferConfig>
 8003582:	e00f      	b.n	80035a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	b2da      	uxtb	r2, r3
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb94 	bl	8003ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 faad 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e07b      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d034      	beq.n	800365c <HAL_I2C_Mem_Write+0x1c8>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d130      	bne.n	800365c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fa3f 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e04d      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2bff      	cmp	r3, #255	; 0xff
 800361c:	d90e      	bls.n	800363c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fb49 	bl	8003ccc <I2C_TransferConfig>
 800363a:	e00f      	b.n	800365c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	b2da      	uxtb	r2, r3
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb38 	bl	8003ccc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d19e      	bne.n	80035a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa8c 	bl	8003b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e01a      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2220      	movs	r2, #32
 8003680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_I2C_Mem_Write+0x224>)
 800368e:	400b      	ands	r3, r1
 8003690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 80fd 	bne.w	80038de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x34>
 80036ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0f1      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_I2C_Mem_Read+0x4e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ea      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003712:	f7ff f889 	bl	8002828 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2319      	movs	r3, #25
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9af 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d5      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800375c:	88f8      	ldrh	r0, [r7, #6]
 800375e:	893a      	ldrh	r2, [r7, #8]
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4603      	mov	r3, r0
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f913 	bl	8003998 <I2C_RequestMemoryRead>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0ad      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d90e      	bls.n	80037ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_I2C_Mem_Read+0x22c>)
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fa91 	bl	8003ccc <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_I2C_Mem_Read+0x22c>)
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa80 	bl	8003ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2200      	movs	r2, #0
 80037d4:	2104      	movs	r1, #4
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f956 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07c      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d034      	beq.n	800388c <HAL_I2C_Mem_Read+0x1d0>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d130      	bne.n	800388c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	2200      	movs	r2, #0
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f927 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e04d      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2bff      	cmp	r3, #255	; 0xff
 800384c:	d90e      	bls.n	800386c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	8979      	ldrh	r1, [r7, #10]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa31 	bl	8003ccc <I2C_TransferConfig>
 800386a:	e00f      	b.n	800388c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	b2da      	uxtb	r2, r3
 800387c:	8979      	ldrh	r1, [r7, #10]
 800387e:	2300      	movs	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa20 	bl	8003ccc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d19a      	bne.n	80037cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f974 	bl	8003b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01a      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2220      	movs	r2, #32
 80038b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_I2C_Mem_Read+0x230>)
 80038be:	400b      	ands	r3, r1
 80038c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	80002400 	.word	0x80002400
 80038ec:	fe00e800 	.word	0xfe00e800

080038f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <I2C_RequestMemoryWrite+0xa4>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f9d7 	bl	8003ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f8f0 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e02c      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003938:	893b      	ldrh	r3, [r7, #8]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
 8003942:	e015      	b.n	8003970 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	b29b      	uxth	r3, r3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8d6 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e012      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f884 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	80002000 	.word	0x80002000

08003998 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	460b      	mov	r3, r1
 80039ac:	813b      	strh	r3, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <I2C_RequestMemoryRead+0xa4>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2300      	movs	r3, #0
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f984 	bl	8003ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f89d 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e02c      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e015      	b.n	8003a16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f883 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e012      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f831 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	80002000 	.word	0x80002000

08003a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d103      	bne.n	8003a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d007      	beq.n	8003a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	619a      	str	r2, [r3, #24]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	e022      	b.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d01e      	beq.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fec1 	bl	8002828 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d113      	bne.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e00f      	b.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d0cd      	beq.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b14:	e02c      	b.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f870 	bl	8003c00 <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02a      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d01e      	beq.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe fe79 	bl	8002828 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d113      	bne.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d1cb      	bne.n	8003b16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b94:	e028      	b.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f830 	bl	8003c00 <I2C_IsAcknowledgeFailed>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e026      	b.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe fe3d 	bl	8002828 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e007      	b.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d1cf      	bne.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d151      	bne.n	8003cbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1a:	e022      	b.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d01e      	beq.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fe fe00 	bl	8002828 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <I2C_IsAcknowledgeFailed+0x3a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d113      	bne.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02e      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d1d5      	bne.n	8003c1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fedd 	bl	8003a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	0d5b      	lsrs	r3, r3, #21
 8003ce8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <I2C_TransferConfig+0x58>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	ea02 0103 	and.w	r1, r2, r3
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cfc:	7a7b      	ldrb	r3, [r7, #9]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	03ff63ff 	.word	0x03ff63ff

08003d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d138      	bne.n	8003db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e032      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d139      	bne.n	8003e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e033      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e58:	b08f      	sub	sp, #60	; 0x3c
 8003e5a:	af0a      	add	r7, sp, #40	; 0x28
 8003e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e116      	b.n	8004096 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fa58 	bl	8002338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 ffe3 	bl	8007e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	687e      	ldr	r6, [r7, #4]
 8003eb4:	466d      	mov	r5, sp
 8003eb6:	f106 0410 	add.w	r4, r6, #16
 8003eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eca:	1d33      	adds	r3, r6, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f003 ffa3 	bl	8007e1a <USB_CoreInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0d7      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 ffd1 	bl	8007e94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e04a      	b.n	8003f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	333d      	adds	r3, #61	; 0x3d
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	333c      	adds	r3, #60	; 0x3c
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	b298      	uxth	r0, r3
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3342      	adds	r3, #66	; 0x42
 8003f34:	4602      	mov	r2, r0
 8003f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	333f      	adds	r3, #63	; 0x3f
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3344      	adds	r3, #68	; 0x44
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3348      	adds	r3, #72	; 0x48
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3350      	adds	r3, #80	; 0x50
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3af      	bcc.n	8003ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e044      	b.n	8004028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3301      	adds	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d3b5      	bcc.n	8003f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	687e      	ldr	r6, [r7, #4]
 800403a:	466d      	mov	r5, sp
 800403c:	f106 0410 	add.w	r4, r6, #16
 8004040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800404c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004050:	1d33      	adds	r3, r6, #4
 8004052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f003 ff47 	bl	8007ee8 <USB_DevInit>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e014      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f80a 	bl	800409e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f004 f8d7 	bl	8008242 <USB_DevDisconnect>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	f043 0303 	orr.w	r3, r3, #3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40007000 	.word	0x40007000

08004108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_PWREx_GetVoltageRange+0x18>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004132:	d130      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d038      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2232      	movs	r2, #50	; 0x32
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	e002      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d102      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d110      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d007      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000
 80041c8:	20000010 	.word	0x20000010
 80041cc:	431bde83 	.word	0x431bde83

080041d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041de:	6053      	str	r3, [r2, #4]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7fe fb16 	bl	8002828 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e063      	b.n	80042d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd ff35 	bl	800208c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004222:	f241 3188 	movw	r1, #5000	; 0x1388
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f858 	bl	80042dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	2120      	movs	r1, #32
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f850 	bl	80042f8 <QSPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d131      	bne.n	80042c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	0611      	lsls	r1, r2, #24
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_QSPI_Init+0xe8>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	0411      	lsls	r1, r2, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6952      	ldr	r2, [r2, #20]
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6992      	ldr	r2, [r2, #24]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042ce:	7afb      	ldrb	r3, [r7, #11]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	ffe0f8fe 	.word	0xffe0f8fe

080042dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004308:	e01a      	b.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d016      	beq.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fa89 	bl	8002828 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00e      	b.n	800435e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d1d6      	bne.n	800430a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e3d8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4b97      	ldr	r3, [pc, #604]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80e4 	beq.w	8004564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	f040 808b 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 8087 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b2:	4b89      	ldr	r3, [pc, #548]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_RCC_OscConfig+0x62>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e3b0      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	4b82      	ldr	r3, [pc, #520]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCC_OscConfig+0x7c>
 80043da:	4b7f      	ldr	r3, [pc, #508]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_OscConfig+0x88>
 80043e4:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d223      	bcs.n	800443c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd75 	bl	8004ee8 <RCC_SetFlashLatencyFromMSIRange>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e391      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440e:	f043 0308 	orr.w	r3, r3, #8
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	496d      	ldr	r1, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4968      	ldr	r1, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e025      	b.n	8004488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004442:	f043 0308 	orr.w	r3, r3, #8
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4960      	ldr	r1, [pc, #384]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	495b      	ldr	r1, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd35 	bl	8004ee8 <RCC_SetFlashLatencyFromMSIRange>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e351      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004488:	f000 fc38 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4950      	ldr	r1, [pc, #320]	; (80045dc <HAL_RCC_OscConfig+0x274>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	4a4e      	ldr	r2, [pc, #312]	; (80045e0 <HAL_RCC_OscConfig+0x278>)
 80044a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044a8:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd ffdf 	bl	8002470 <HAL_InitTick>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d052      	beq.n	8004562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	e335      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d032      	beq.n	800452e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a42      	ldr	r2, [pc, #264]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d4:	f7fe f9a8 	bl	8002828 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044dc:	f7fe f9a4 	bl	8002828 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e31e      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ee:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a36      	ldr	r2, [pc, #216]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4931      	ldr	r1, [pc, #196]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004518:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	492c      	ldr	r1, [pc, #176]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
 800452c:	e01a      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800453a:	f7fe f975 	bl	8002828 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004542:	f7fe f971 	bl	8002828 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e2eb      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x1da>
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d074      	beq.n	800465a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x21a>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d10e      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d10b      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d064      	beq.n	8004658 <HAL_RCC_OscConfig+0x2f0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d160      	bne.n	8004658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e2c8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x24a>
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e026      	b.n	8004600 <HAL_RCC_OscConfig+0x298>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ba:	d115      	bne.n	80045e8 <HAL_RCC_OscConfig+0x280>
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a02      	ldr	r2, [pc, #8]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e014      	b.n	8004600 <HAL_RCC_OscConfig+0x298>
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	080152f4 	.word	0x080152f4
 80045e0:	20000010 	.word	0x20000010
 80045e4:	20000014 	.word	0x20000014
 80045e8:	4ba0      	ldr	r3, [pc, #640]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a9f      	ldr	r2, [pc, #636]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b9d      	ldr	r3, [pc, #628]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a9c      	ldr	r2, [pc, #624]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe f90e 	bl	8002828 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe f90a 	bl	8002828 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e284      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	4b92      	ldr	r3, [pc, #584]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x2a8>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fe f8fa 	bl	8002828 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fe f8f6 	bl	8002828 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e270      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x2d0>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d060      	beq.n	8004728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x310>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d119      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d116      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004678:	4b7c      	ldr	r3, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_OscConfig+0x328>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e24d      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004690:	4b76      	ldr	r3, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	4973      	ldr	r1, [pc, #460]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a4:	e040      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d023      	beq.n	80046f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ae:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6e      	ldr	r2, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe f8b5 	bl	8002828 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe f8b1 	bl	8002828 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e22b      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	495f      	ldr	r1, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5c      	ldr	r2, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fe f891 	bl	8002828 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fe f88d 	bl	8002828 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e207      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03c      	beq.n	80047ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473c:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fe f86c 	bl	8002828 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fe f868 	bl	8002828 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1e2      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCC_OscConfig+0x3ec>
 8004774:	e01b      	b.n	80047ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	4a3b      	ldr	r2, [pc, #236]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fe f84f 	bl	8002828 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478e:	f7fe f84b 	bl	8002828 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1c5      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ef      	bne.n	800478e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a6 	beq.w	8004908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	4b21      	ldr	r3, [pc, #132]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004800:	f7fe f812 	bl	8002828 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fe f80e 	bl	8002828 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e188      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_RCC_OscConfig+0x4d8>
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483e:	e029      	b.n	8004894 <HAL_RCC_OscConfig+0x52c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d115      	bne.n	8004874 <HAL_RCC_OscConfig+0x50c>
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	4a07      	ldr	r2, [pc, #28]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a03      	ldr	r2, [pc, #12]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004868:	e014      	b.n	8004894 <HAL_RCC_OscConfig+0x52c>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
 8004874:	4b91      	ldr	r3, [pc, #580]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004884:	4b8d      	ldr	r3, [pc, #564]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	4a8c      	ldr	r2, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d016      	beq.n	80048ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd ffc4 	bl	8002828 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fd ffc0 	bl	8002828 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e138      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	4b80      	ldr	r3, [pc, #512]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ed      	beq.n	80048a4 <HAL_RCC_OscConfig+0x53c>
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ca:	f7fd ffad 	bl	8002828 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd ffa9 	bl	8002828 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e121      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	4b74      	ldr	r3, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ed      	bne.n	80048d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 810c 	beq.w	8004b2a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	2b02      	cmp	r3, #2
 8004918:	f040 80d4 	bne.w	8004ac4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491c:	4b67      	ldr	r3, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	429a      	cmp	r2, r3
 800492e:	d130      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d127      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d11f      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800495c:	2a07      	cmp	r2, #7
 800495e:	bf14      	ite	ne
 8004960:	2201      	movne	r2, #1
 8004962:	2200      	moveq	r2, #0
 8004964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d109      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	3b01      	subs	r3, #1
 800498c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d06e      	beq.n	8004a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d069      	beq.n	8004a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004998:	4b48      	ldr	r3, [pc, #288]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0bb      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a40      	ldr	r2, [pc, #256]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c0:	f7fd ff32 	bl	8002828 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd ff2e 	bl	8002828 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0a8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	4b35      	ldr	r3, [pc, #212]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCC_OscConfig+0x758>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a00:	0212      	lsls	r2, r2, #8
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	0552      	lsls	r2, r2, #21
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0652      	lsls	r2, r2, #25
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a20:	0912      	lsrs	r2, r2, #4
 8004a22:	0452      	lsls	r2, r2, #17
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4925      	ldr	r1, [pc, #148]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a44:	f7fd fef0 	bl	8002828 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd feec 	bl	8002828 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e066      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6a:	e05e      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e05d      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d156      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a94:	f7fd fec8 	bl	8002828 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fd fec4 	bl	8002828 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e03e      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x734>
 8004aba:	e036      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d02d      	beq.n	8004b26 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004af4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd fe93 	bl	8002828 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd fe8f 	bl	8002828 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e009      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x79e>
 8004b24:	e001      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0c8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b66      	ldr	r3, [pc, #408]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d910      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4961      	ldr	r1, [pc, #388]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0b0      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d04c      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b90:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d121      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09e      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d115      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e092      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e086      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e07e      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 0203 	bic.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	493f      	ldr	r1, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf2:	f7fd fe19 	bl	8002828 <HAL_GetTick>
 8004bf6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfa:	f7fd fe15 	bl	8002828 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e066      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 020c 	and.w	r2, r3, #12
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d1eb      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	492c      	ldr	r1, [pc, #176]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d210      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	4924      	ldr	r1, [pc, #144]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e036      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4918      	ldr	r1, [pc, #96]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4910      	ldr	r1, [pc, #64]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cae:	f000 f825 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	490c      	ldr	r1, [pc, #48]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	5ccb      	ldrb	r3, [r1, r3]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fbcc 	bl	8002470 <HAL_InitTick>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	080152f4 	.word	0x080152f4
 8004cf4:	20000010 	.word	0x20000010
 8004cf8:	20000014 	.word	0x20000014

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d11e      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e005      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d102      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e004      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d134      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d003      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0xac>
 8004da0:	e005      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004da4:	617b      	str	r3, [r7, #20]
      break;
 8004da6:	e005      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004daa:	617b      	str	r3, [r7, #20]
      break;
 8004dac:	e002      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	617b      	str	r3, [r7, #20]
      break;
 8004db2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	fb03 f202 	mul.w	r2, r3, r2
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	0e5b      	lsrs	r3, r3, #25
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	3301      	adds	r3, #1
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df4:	69bb      	ldr	r3, [r7, #24]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	0801530c 	.word	0x0801530c
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	007a1200 	.word	0x007a1200

08004e14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000010 	.word	0x20000010

08004e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e30:	f7ff fff0 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4904      	ldr	r1, [pc, #16]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	08015304 	.word	0x08015304

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e5c:	f7ff ffda 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0adb      	lsrs	r3, r3, #11
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4904      	ldr	r1, [pc, #16]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	08015304 	.word	0x08015304

08004e84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	220f      	movs	r2, #15
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <HAL_RCC_GetClockConfig+0x60>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40022000 	.word	0x40022000

08004ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f00:	f7ff f902 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004f04:	6178      	str	r0, [r7, #20]
 8004f06:	e014      	b.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6593      	str	r3, [r2, #88]	; 0x58
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f20:	f7ff f8f2 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d10b      	bne.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d919      	bls.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2ba0      	cmp	r3, #160	; 0xa0
 8004f44:	d902      	bls.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f46:	2302      	movs	r3, #2
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e013      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e010      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d902      	bls.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f58:	2303      	movs	r3, #3
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e00a      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d102      	bne.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f64:	2302      	movs	r3, #2
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e004      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b70      	cmp	r3, #112	; 0x70
 8004f6e:	d101      	bne.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f70:	2301      	movs	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	4909      	ldr	r1, [pc, #36]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40022000 	.word	0x40022000

08004fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d041      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fcc:	d02a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fd2:	d824      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd8:	d008      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fde:	d81e      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d010      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fea:	e018      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fec:	4b86      	ldr	r3, [pc, #536]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a85      	ldr	r2, [pc, #532]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff8:	e015      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 facb 	bl	800559c <RCCEx_PLLSAI1_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500a:	e00c      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3320      	adds	r3, #32
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fbb6 	bl	8005784 <RCCEx_PLLSAI2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	74fb      	strb	r3, [r7, #19]
      break;
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800502c:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503a:	4973      	ldr	r1, [pc, #460]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d041      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800505c:	d02a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800505e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005062:	d824      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800506a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506e:	d81e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005078:	d010      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800507a:	e018      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800507c:	4b62      	ldr	r3, [pc, #392]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a61      	ldr	r2, [pc, #388]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005088:	e015      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fa83 	bl	800559c <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3320      	adds	r3, #32
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb6e 	bl	8005784 <RCCEx_PLLSAI2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	74fb      	strb	r3, [r7, #19]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050bc:	4b52      	ldr	r3, [pc, #328]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ca:	494f      	ldr	r1, [pc, #316]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a0 	beq.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	4a40      	ldr	r2, [pc, #256]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6593      	str	r3, [r2, #88]	; 0x58
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005118:	2301      	movs	r3, #1
 800511a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511c:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3a      	ldr	r2, [pc, #232]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005128:	f7fd fb7e 	bl	8002828 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005130:	f7fd fb7a 	bl	8002828 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	74fb      	strb	r3, [r7, #19]
        break;
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005144:	4b31      	ldr	r3, [pc, #196]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ef      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d15c      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005156:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d019      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	4a20      	ldr	r2, [pc, #128]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fd fb39 	bl	8002828 <HAL_GetTick>
 80051b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b8:	e00b      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fd fb35 	bl	8002828 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	74fb      	strb	r3, [r7, #19]
            break;
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ec      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	4904      	ldr	r1, [pc, #16]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051fe:	e009      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005214:	7c7b      	ldrb	r3, [r7, #17]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521a:	4b9e      	ldr	r3, [pc, #632]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4a9d      	ldr	r2, [pc, #628]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005232:	4b98      	ldr	r3, [pc, #608]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 0203 	bic.w	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	4994      	ldr	r1, [pc, #592]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005254:	4b8f      	ldr	r3, [pc, #572]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 020c 	bic.w	r2, r3, #12
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	498c      	ldr	r1, [pc, #560]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005276:	4b87      	ldr	r3, [pc, #540]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	4983      	ldr	r1, [pc, #524]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005298:	4b7e      	ldr	r3, [pc, #504]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	497b      	ldr	r1, [pc, #492]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ba:	4b76      	ldr	r3, [pc, #472]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	4972      	ldr	r1, [pc, #456]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052dc:	4b6d      	ldr	r3, [pc, #436]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	496a      	ldr	r1, [pc, #424]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fe:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	4961      	ldr	r1, [pc, #388]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005320:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	4959      	ldr	r1, [pc, #356]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005342:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	4950      	ldr	r1, [pc, #320]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005364:	4b4b      	ldr	r3, [pc, #300]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	4948      	ldr	r1, [pc, #288]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	493f      	ldr	r1, [pc, #252]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d028      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a8:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a31      	ldr	r2, [pc, #196]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
 80053d4:	e011      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053de:	d10c      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f8d8 	bl	800559c <RCCEx_PLLSAI1_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d028      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	491f      	ldr	r1, [pc, #124]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005424:	d106      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005430:	60d3      	str	r3, [r2, #12]
 8005432:	e011      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543c:	d10c      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2101      	movs	r1, #1
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f8a9 	bl	800559c <RCCEx_PLLSAI1_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005482:	d109      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548e:	60d3      	str	r3, [r2, #12]
 8005490:	e014      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f877 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	4928      	ldr	r1, [pc, #160]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d10d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f854 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	74bb      	strb	r3, [r7, #18]
 8005502:	e011      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3320      	adds	r3, #32
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f935 	bl	8005784 <RCCEx_PLLSAI2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005534:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005566:	4904      	ldr	r1, [pc, #16]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800556e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a04      	ldr	r2, [pc, #16]	; (8005598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000

0800559c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055aa:	4b75      	ldr	r3, [pc, #468]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055b6:	4b72      	ldr	r3, [pc, #456]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0203 	and.w	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10d      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
       ||
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
       ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d047      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	e044      	b.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d018      	beq.n	8005622 <RCCEx_PLLSAI1_Config+0x86>
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d825      	bhi.n	8005640 <RCCEx_PLLSAI1_Config+0xa4>
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d002      	beq.n	80055fe <RCCEx_PLLSAI1_Config+0x62>
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d009      	beq.n	8005610 <RCCEx_PLLSAI1_Config+0x74>
 80055fc:	e020      	b.n	8005640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055fe:	4b60      	ldr	r3, [pc, #384]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11d      	bne.n	8005646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800560e:	e01a      	b.n	8005646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005610:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005620:	e013      	b.n	800564a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005622:	4b57      	ldr	r3, [pc, #348]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800562e:	4b54      	ldr	r3, [pc, #336]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800563e:	e006      	b.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e004      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800564e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	3b01      	subs	r3, #1
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	430b      	orrs	r3, r1
 800566c:	4944      	ldr	r1, [pc, #272]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d17d      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005678:	4b41      	ldr	r3, [pc, #260]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a40      	ldr	r2, [pc, #256]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fd f8d0 	bl	8002828 <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568a:	e009      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800568c:	f7fd f8cc 	bl	8002828 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d902      	bls.n	80056a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	73fb      	strb	r3, [r7, #15]
        break;
 800569e:	e005      	b.n	80056ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ef      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d160      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d111      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	0912      	lsrs	r2, r2, #4
 80056d0:	0452      	lsls	r2, r2, #17
 80056d2:	430a      	orrs	r2, r1
 80056d4:	492a      	ldr	r1, [pc, #168]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
 80056da:	e027      	b.n	800572c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d112      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e2:	4b27      	ldr	r3, [pc, #156]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6892      	ldr	r2, [r2, #8]
 80056f2:	0211      	lsls	r1, r2, #8
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6912      	ldr	r2, [r2, #16]
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0552      	lsls	r2, r2, #21
 80056fe:	430a      	orrs	r2, r1
 8005700:	491f      	ldr	r1, [pc, #124]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	4313      	orrs	r3, r2
 8005704:	610b      	str	r3, [r1, #16]
 8005706:	e011      	b.n	800572c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	0211      	lsls	r1, r2, #8
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6952      	ldr	r2, [r2, #20]
 800571e:	0852      	lsrs	r2, r2, #1
 8005720:	3a01      	subs	r2, #1
 8005722:	0652      	lsls	r2, r2, #25
 8005724:	430a      	orrs	r2, r1
 8005726:	4916      	ldr	r1, [pc, #88]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fd f876 	bl	8002828 <HAL_GetTick>
 800573c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800573e:	e009      	b.n	8005754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005740:	f7fd f872 	bl	8002828 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d902      	bls.n	8005754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
          break;
 8005752:	e005      	b.n	8005760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ef      	beq.n	8005740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000

08005784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005792:	4b6a      	ldr	r3, [pc, #424]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800579e:	4b67      	ldr	r3, [pc, #412]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0203 	and.w	r2, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10d      	bne.n	80057ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
       ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057b6:	4b61      	ldr	r3, [pc, #388]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
       ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d047      	beq.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	e044      	b.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d018      	beq.n	800580a <RCCEx_PLLSAI2_Config+0x86>
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d825      	bhi.n	8005828 <RCCEx_PLLSAI2_Config+0xa4>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <RCCEx_PLLSAI2_Config+0x62>
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d009      	beq.n	80057f8 <RCCEx_PLLSAI2_Config+0x74>
 80057e4:	e020      	b.n	8005828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057e6:	4b55      	ldr	r3, [pc, #340]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f6:	e01a      	b.n	800582e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057f8:	4b50      	ldr	r3, [pc, #320]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e013      	b.n	8005832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800580a:	4b4c      	ldr	r3, [pc, #304]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10f      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005826:	e006      	b.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e004      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005836:	bf00      	nop
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800583e:	4b3f      	ldr	r3, [pc, #252]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	3b01      	subs	r3, #1
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	430b      	orrs	r3, r1
 8005854:	4939      	ldr	r1, [pc, #228]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d167      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005860:	4b36      	ldr	r3, [pc, #216]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a35      	ldr	r2, [pc, #212]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc ffdc 	bl	8002828 <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005874:	f7fc ffd8 	bl	8002828 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
        break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005888:	4b2c      	ldr	r3, [pc, #176]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d14a      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d111      	bne.n	80058c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	0211      	lsls	r1, r2, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	0912      	lsrs	r2, r2, #4
 80058b8:	0452      	lsls	r2, r2, #17
 80058ba:	430a      	orrs	r2, r1
 80058bc:	491f      	ldr	r1, [pc, #124]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	614b      	str	r3, [r1, #20]
 80058c2:	e011      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058c4:	4b1d      	ldr	r3, [pc, #116]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6892      	ldr	r2, [r2, #8]
 80058d4:	0211      	lsls	r1, r2, #8
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6912      	ldr	r2, [r2, #16]
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	3a01      	subs	r2, #1
 80058de:	0652      	lsls	r2, r2, #25
 80058e0:	430a      	orrs	r2, r1
 80058e2:	4916      	ldr	r1, [pc, #88]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fc ff98 	bl	8002828 <HAL_GetTick>
 80058f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058fa:	e009      	b.n	8005910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058fc:	f7fc ff94 	bl	8002828 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d902      	bls.n	8005910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	73fb      	strb	r3, [r7, #15]
          break;
 800590e:	e005      	b.n	800591c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4904      	ldr	r1, [pc, #16]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000

08005940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e095      	b.n	8005a7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d108      	bne.n	800596c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005962:	d009      	beq.n	8005978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	61da      	str	r2, [r3, #28]
 800596a:	e005      	b.n	8005978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc fbbe 	bl	8002114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b8:	d902      	bls.n	80059c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e002      	b.n	80059c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059ce:	d007      	beq.n	80059e0 <HAL_SPI_Init+0xa0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	ea42 0103 	orr.w	r1, r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	f003 0204 	and.w	r2, r3, #4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a5c:	ea42 0103 	orr.w	r1, r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e01a      	b.n	8005ace <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fc fb7b 	bl	80021ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af2:	d112      	bne.n	8005b1a <HAL_SPI_Receive+0x44>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10e      	bne.n	8005b1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f910 	bl	8005d36 <HAL_SPI_TransmitReceive>
 8005b16:	4603      	mov	r3, r0
 8005b18:	e109      	b.n	8005d2e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_SPI_Receive+0x52>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e102      	b.n	8005d2e <HAL_SPI_Receive+0x258>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b30:	f7fc fe7a 	bl	8002828 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
 8005b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b46:	e0e9      	b.n	8005d1c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_SPI_Receive+0x7e>
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b58:	e0e0      	b.n	8005d1c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba4:	d908      	bls.n	8005bb8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e007      	b.n	8005bc8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d007      	beq.n	8005c10 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c18:	d867      	bhi.n	8005cea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c1a:	e030      	b.n	8005c7e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d117      	bne.n	8005c5a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f103 020c 	add.w	r2, r3, #12
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c58:	e011      	b.n	8005c7e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c5a:	f7fc fde5 	bl	8002828 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d803      	bhi.n	8005c72 <HAL_SPI_Receive+0x19c>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d102      	bne.n	8005c78 <HAL_SPI_Receive+0x1a2>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c7c:	e04e      	b.n	8005d1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1c8      	bne.n	8005c1c <HAL_SPI_Receive+0x146>
 8005c8a:	e034      	b.n	8005cf6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d115      	bne.n	8005cc6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005cc4:	e011      	b.n	8005cea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc6:	f7fc fdaf 	bl	8002828 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d803      	bhi.n	8005cde <HAL_SPI_Receive+0x208>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_Receive+0x20e>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ce8:	e018      	b.n	8005d1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ca      	bne.n	8005c8c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fffe 	bl	8006cfc <SPI_EndRxTransaction>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
 8005d18:	e000      	b.n	8005d1c <HAL_SPI_Receive+0x246>
  }

error :
 8005d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08a      	sub	sp, #40	; 0x28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d44:	2301      	movs	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x26>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e1fb      	b.n	8006154 <HAL_SPI_TransmitReceive+0x41e>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d64:	f7fc fd60 	bl	8002828 <HAL_GetTick>
 8005d68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d80:	7efb      	ldrb	r3, [r7, #27]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d00e      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x6e>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8c:	d106      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x66>
 8005d96:	7efb      	ldrb	r3, [r7, #27]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d003      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005da2:	e1cd      	b.n	8006140 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x80>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x80>
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005dbc:	e1c0      	b.n	8006140 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d003      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2205      	movs	r2, #5
 8005dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	887a      	ldrh	r2, [r7, #2]
 8005de2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	887a      	ldrh	r2, [r7, #2]
 8005dfe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e14:	d802      	bhi.n	8005e1c <HAL_SPI_TransmitReceive+0xe6>
 8005e16:	8a3b      	ldrh	r3, [r7, #16]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d908      	bls.n	8005e2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e007      	b.n	8005e3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d007      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e64:	d97c      	bls.n	8005f60 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x13e>
 8005e6e:	8a7b      	ldrh	r3, [r7, #18]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d169      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e98:	e056      	b.n	8005f48 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d11b      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x1aa>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <HAL_SPI_TransmitReceive+0x1aa>
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d113      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d11c      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x1f2>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	b292      	uxth	r2, r2
 8005f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f24:	2301      	movs	r3, #1
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f28:	f7fc fc7e 	bl	8002828 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d807      	bhi.n	8005f48 <HAL_SPI_TransmitReceive+0x212>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d003      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f46:	e0fb      	b.n	8006140 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1a3      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x164>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d19d      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x164>
 8005f5e:	e0df      	b.n	8006120 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x23a>
 8005f68:	8a7b      	ldrh	r3, [r7, #18]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	f040 80cb 	bne.w	8006106 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d912      	bls.n	8005fa0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b02      	subs	r3, #2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9e:	e0b2      	b.n	8006106 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	7812      	ldrb	r2, [r2, #0]
 8005fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc6:	e09e      	b.n	8006106 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d134      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x30a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d02f      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x30a>
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d12c      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d912      	bls.n	8006016 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b02      	subs	r3, #2
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006014:	e012      	b.n	800603c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	7812      	ldrb	r2, [r2, #0]
 8006022:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d148      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x3aa>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d042      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d923      	bls.n	80060ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	b292      	uxth	r2, r2
 8006072:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	1c9a      	adds	r2, r3, #2
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b02      	subs	r3, #2
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d81f      	bhi.n	80060dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060aa:	605a      	str	r2, [r3, #4]
 80060ac:	e016      	b.n	80060dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f103 020c 	add.w	r2, r3, #12
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060e0:	f7fc fba2 	bl	8002828 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d803      	bhi.n	80060f8 <HAL_SPI_TransmitReceive+0x3c2>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <HAL_SPI_TransmitReceive+0x3c8>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006104:	e01c      	b.n	8006140 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f af5b 	bne.w	8005fc8 <HAL_SPI_TransmitReceive+0x292>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	f47f af54 	bne.w	8005fc8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fe41 	bl	8006dac <SPI_EndRxTxTransaction>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	661a      	str	r2, [r3, #96]	; 0x60
 800613c:	e000      	b.n	8006140 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800613e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006154:	4618      	mov	r0, r3
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_SPI_Transmit_IT+0x20>
 8006178:	2302      	movs	r3, #2
 800617a:	e072      	b.n	8006262 <HAL_SPI_Transmit_IT+0x106>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_SPI_Transmit_IT+0x34>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006194:	e060      	b.n	8006258 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061a6:	e057      	b.n	8006258 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2203      	movs	r2, #3
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061ec:	d903      	bls.n	80061f6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_SPI_Transmit_IT+0x114>)
 80061f2:	651a      	str	r2, [r3, #80]	; 0x50
 80061f4:	e002      	b.n	80061fc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_SPI_Transmit_IT+0x118>)
 80061fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006204:	d10f      	bne.n	8006226 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006234:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d008      	beq.n	8006256 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e000      	b.n	8006258 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006256:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	08006a83 	.word	0x08006a83
 8006274:	08006a3d 	.word	0x08006a3d

08006278 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d110      	bne.n	80062b4 <HAL_SPI_Receive_IT+0x3c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629a:	d10b      	bne.n	80062b4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2204      	movs	r2, #4
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f894 	bl	80063d8 <HAL_SPI_TransmitReceive_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	e089      	b.n	80063c8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_SPI_Receive_IT+0x4a>
 80062be:	2302      	movs	r3, #2
 80062c0:	e082      	b.n	80063c8 <HAL_SPI_Receive_IT+0x150>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062da:	e070      	b.n	80063be <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_SPI_Receive_IT+0x70>
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ec:	e067      	b.n	80063be <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2204      	movs	r2, #4
 80062f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006332:	d90b      	bls.n	800634c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006342:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <HAL_SPI_Receive_IT+0x158>)
 8006348:	64da      	str	r2, [r3, #76]	; 0x4c
 800634a:	e00a      	b.n	8006362 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800635a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <HAL_SPI_Receive_IT+0x15c>)
 8006360:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	d10f      	bne.n	800638c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800638a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800639a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d008      	beq.n	80063bc <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e000      	b.n	80063be <HAL_SPI_Receive_IT+0x146>
  }

error :
 80063bc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	080069f1 	.word	0x080069f1
 80063d4:	080069a1 	.word	0x080069a1

080063d8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_SPI_TransmitReceive_IT+0x20>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e091      	b.n	800651c <HAL_SPI_TransmitReceive_IT+0x144>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006406:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800640e:	7dbb      	ldrb	r3, [r7, #22]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d00d      	beq.n	8006430 <HAL_SPI_TransmitReceive_IT+0x58>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641a:	d106      	bne.n	800642a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <HAL_SPI_TransmitReceive_IT+0x52>
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d002      	beq.n	8006430 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800642a:	2302      	movs	r3, #2
 800642c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800642e:	e070      	b.n	8006512 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_SPI_TransmitReceive_IT+0x6a>
 800643c:	887b      	ldrh	r3, [r7, #2]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006446:	e064      	b.n	8006512 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b04      	cmp	r3, #4
 8006452:	d003      	beq.n	800645c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2205      	movs	r2, #5
 8006458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	887a      	ldrh	r2, [r7, #2]
 800646c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	887a      	ldrh	r2, [r7, #2]
 8006472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	887a      	ldrh	r2, [r7, #2]
 800647e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006492:	d906      	bls.n	80064a2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a24      	ldr	r2, [pc, #144]	; (8006528 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006498:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a23      	ldr	r2, [pc, #140]	; (800652c <HAL_SPI_TransmitReceive_IT+0x154>)
 800649e:	651a      	str	r2, [r3, #80]	; 0x50
 80064a0:	e005      	b.n	80064ae <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a22      	ldr	r2, [pc, #136]	; (8006530 <HAL_SPI_TransmitReceive_IT+0x158>)
 80064a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80064ac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064b6:	d802      	bhi.n	80064be <HAL_SPI_TransmitReceive_IT+0xe6>
 80064b8:	887b      	ldrh	r3, [r7, #2]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d908      	bls.n	80064d0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	e007      	b.n	80064e0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80064ee:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d008      	beq.n	8006510 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e000      	b.n	8006512 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006510:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
}
 800651c:	4618      	mov	r0, r3
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	080068db 	.word	0x080068db
 800652c:	08006941 	.word	0x08006941
 8006530:	0800678b 	.word	0x0800678b
 8006534:	08006849 	.word	0x08006849

08006538 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10f      	bne.n	800657c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	099b      	lsrs	r3, r3, #6
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
    return;
 800657a:	e0d7      	b.n	800672c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <HAL_SPI_IRQHandler+0x66>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	09db      	lsrs	r3, r3, #7
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
    return;
 800659c:	e0c6      	b.n	800672c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <HAL_SPI_IRQHandler+0x8c>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	099b      	lsrs	r3, r3, #6
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	0a1b      	lsrs	r3, r3, #8
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80b4 	beq.w	800672c <HAL_SPI_IRQHandler+0x1f4>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80ad 	beq.w	800672c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	099b      	lsrs	r3, r3, #6
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d023      	beq.n	8006626 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d011      	beq.n	800660e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	f043 0204 	orr.w	r2, r3, #4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	e00b      	b.n	8006626 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	693b      	ldr	r3, [r7, #16]
        return;
 8006624:	e082      	b.n	800672c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666c:	f043 0208 	orr.w	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006674:	2300      	movs	r3, #0
 8006676:	60bb      	str	r3, [r7, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006686:	2b00      	cmp	r3, #0
 8006688:	d04f      	beq.n	800672a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006698:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <HAL_SPI_IRQHandler+0x17e>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d034      	beq.n	8006720 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0203 	bic.w	r2, r2, #3
 80066c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d011      	beq.n	80066f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_SPI_IRQHandler+0x1fc>)
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fc faf4 	bl	8002cc8 <HAL_DMA_Abort_IT>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	4a0d      	ldr	r2, [pc, #52]	; (8006734 <HAL_SPI_IRQHandler+0x1fc>)
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	4618      	mov	r0, r3
 8006708:	f7fc fade 	bl	8002cc8 <HAL_DMA_Abort_IT>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800671e:	e003      	b.n	8006728 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f813 	bl	800674c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006726:	e000      	b.n	800672a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006728:	bf00      	nop
    return;
 800672a:	bf00      	nop
  }
}
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	08006761 	.word	0x08006761

08006738 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff ffe5 	bl	800674c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d923      	bls.n	80067e6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	b292      	uxth	r2, r2
 80067aa:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b02      	subs	r3, #2
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d11f      	bne.n	8006814 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	e016      	b.n	8006814 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f103 020c 	add.w	r2, r3, #12
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	7812      	ldrb	r2, [r2, #0]
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10f      	bne.n	8006840 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800682e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fafc 	bl	8006e38 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	d912      	bls.n	8006880 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	881a      	ldrh	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b02      	subs	r3, #2
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800687e:	e012      	b.n	80068a6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d110      	bne.n	80068d2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068be:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fab3 	bl	8006e38 <SPI_CloseRxTx_ISR>
    }
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	b292      	uxth	r2, r2
 80068ee:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	1c9a      	adds	r2, r3, #2
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa80 	bl	8006e38 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	881a      	ldrh	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	1c9a      	adds	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d110      	bne.n	8006998 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006984:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa50 	bl	8006e38 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f103 020c 	add.w	r2, r3, #12
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa6a 	bl	8006ebc <SPI_CloseRx_ISR>
  }
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	b292      	uxth	r2, r2
 8006a04:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa44 	bl	8006ebc <SPI_CloseRx_ISR>
  }
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fa51 	bl	8006f1c <SPI_CloseTx_ISR>
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	881a      	ldrh	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fa2f 	bl	8006f1c <SPI_CloseTx_ISR>
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ad8:	f7fb fea6 	bl	8002828 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ae8:	f7fb fe9e 	bl	8002828 <HAL_GetTick>
 8006aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aee:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	015b      	lsls	r3, r3, #5
 8006af4:	0d1b      	lsrs	r3, r3, #20
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006afe:	e054      	b.n	8006baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d050      	beq.n	8006baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b08:	f7fb fe8e 	bl	8002828 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d902      	bls.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d13d      	bne.n	8006b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b36:	d111      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b40:	d004      	beq.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4a:	d107      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b64:	d10f      	bne.n	8006b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e017      	b.n	8006bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d19b      	bne.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000010 	.word	0x20000010

08006bd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006be6:	f7fb fe1f 	bl	8002828 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bf6:	f7fb fe17 	bl	8002828 <HAL_GetTick>
 8006bfa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bfc:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00da      	lsls	r2, r3, #3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	0d1b      	lsrs	r3, r3, #20
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c14:	e062      	b.n	8006cdc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c1c:	d109      	bne.n	8006c32 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006c30:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d050      	beq.n	8006cdc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c3a:	f7fb fdf5 	bl	8002828 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d902      	bls.n	8006c50 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d13d      	bne.n	8006ccc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c68:	d111      	bne.n	8006c8e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c72:	d004      	beq.n	8006c7e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7c:	d107      	bne.n	8006c8e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c96:	d10f      	bne.n	8006cb8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e010      	b.n	8006cee <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d194      	bne.n	8006c16 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000010 	.word	0x20000010

08006cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d10:	d111      	bne.n	8006d36 <SPI_EndRxTransaction+0x3a>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d004      	beq.n	8006d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d24:	d107      	bne.n	8006d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fec1 	bl	8006ac8 <SPI_WaitFlagStateUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	f043 0220 	orr.w	r2, r3, #32
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e023      	b.n	8006da4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d64:	d11d      	bne.n	8006da2 <SPI_EndRxTransaction+0xa6>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6e:	d004      	beq.n	8006d7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d113      	bne.n	8006da2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff ff26 	bl	8006bd8 <SPI_WaitFifoStateUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e000      	b.n	8006da4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff ff07 	bl	8006bd8 <SPI_WaitFifoStateUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	f043 0220 	orr.w	r2, r3, #32
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e027      	b.n	8006e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fe6c 	bl	8006ac8 <SPI_WaitFlagStateUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e014      	b.n	8006e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff fee0 	bl	8006bd8 <SPI_WaitFifoStateUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	f043 0220 	orr.w	r2, r3, #32
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e000      	b.n	8006e30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e40:	f7fb fcf2 	bl	8002828 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0220 	bic.w	r2, r2, #32
 8006e54:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	2164      	movs	r1, #100	; 0x64
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff ffa6 	bl	8006dac <SPI_EndRxTxTransaction>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d115      	bne.n	8006ea6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d107      	bne.n	8006e96 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 ffec 	bl	8009e6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006e94:	e00e      	b.n	8006eb4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fc4a 	bl	8006738 <HAL_SPI_TxRxCpltCallback>
}
 8006ea4:	e006      	b.n	8006eb4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fc4c 	bl	800674c <HAL_SPI_ErrorCallback>
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ed2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006ed4:	f7fb fca8 	bl	8002828 <HAL_GetTick>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	2164      	movs	r1, #100	; 0x64
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ff0c 	bl	8006cfc <SPI_EndRxTransaction>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 ffb0 	bl	8009e6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006f0c:	e002      	b.n	8006f14 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fc1c 	bl	800674c <HAL_SPI_ErrorCallback>
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f24:	f7fb fc80 	bl	8002828 <HAL_GetTick>
 8006f28:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f38:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	2164      	movs	r1, #100	; 0x64
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ff34 	bl	8006dac <SPI_EndRxTxTransaction>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff fbe1 	bl	800674c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006f8a:	e002      	b.n	8006f92 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 ff81 	bl	8009e94 <HAL_SPI_TxCpltCallback>
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e049      	b.n	8007040 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f841 	bl	8007048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f000 f9f7 	bl	80073cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e04f      	b.n	8007114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a23      	ldr	r2, [pc, #140]	; (8007120 <HAL_TIM_Base_Start_IT+0xc4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d018      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <HAL_TIM_Base_Start_IT+0xc8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <HAL_TIM_Base_Start_IT+0xcc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <HAL_TIM_Base_Start_IT+0xd0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <HAL_TIM_Base_Start_IT+0xd4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_TIM_Base_Start_IT+0x76>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a19      	ldr	r2, [pc, #100]	; (8007134 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d115      	bne.n	80070fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <HAL_TIM_Base_Start_IT+0xdc>)
 80070da:	4013      	ands	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	d015      	beq.n	8007110 <HAL_TIM_Base_Start_IT+0xb4>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ea:	d011      	beq.n	8007110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	e008      	b.n	8007110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0201 	orr.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e000      	b.n	8007112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40013400 	.word	0x40013400
 8007134:	40014000 	.word	0x40014000
 8007138:	00010007 	.word	0x00010007

0800713c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d122      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d11b      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0202 	mvn.w	r2, #2
 8007168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f905 	bl	800738e <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8f7 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f908 	bl	80073a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d122      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d11b      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0204 	mvn.w	r2, #4
 80071bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8db 	bl	800738e <HAL_TIM_IC_CaptureCallback>
 80071d8:	e005      	b.n	80071e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8cd 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f8de 	bl	80073a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d122      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b08      	cmp	r3, #8
 8007206:	d11b      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0208 	mvn.w	r2, #8
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8b1 	bl	800738e <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8a3 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8b4 	bl	80073a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d122      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b10      	cmp	r3, #16
 800725a:	d11b      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0210 	mvn.w	r2, #16
 8007264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2208      	movs	r2, #8
 800726a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f887 	bl	800738e <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f879 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f88a 	bl	80073a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0201 	mvn.w	r2, #1
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fa fbfe 	bl	8001abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d10e      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d107      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f914 	bl	8007514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d10e      	bne.n	800731a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d107      	bne.n	800731a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f907 	bl	8007528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d10e      	bne.n	8007346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d107      	bne.n	8007346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800733e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f838 	bl	80073b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b20      	cmp	r3, #32
 8007352:	d10e      	bne.n	8007372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b20      	cmp	r3, #32
 8007360:	d107      	bne.n	8007372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f06f 0220 	mvn.w	r2, #32
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8c7 	bl	8007500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a40      	ldr	r2, [pc, #256]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ea:	d00f      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <TIM_Base_SetConfig+0x118>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00b      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a3c      	ldr	r2, [pc, #240]	; (80074e8 <TIM_Base_SetConfig+0x11c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3b      	ldr	r2, [pc, #236]	; (80074ec <TIM_Base_SetConfig+0x120>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3a      	ldr	r2, [pc, #232]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d108      	bne.n	800741e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2f      	ldr	r2, [pc, #188]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d01b      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a2c      	ldr	r2, [pc, #176]	; (80074e4 <TIM_Base_SetConfig+0x118>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d017      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2b      	ldr	r2, [pc, #172]	; (80074e8 <TIM_Base_SetConfig+0x11c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <TIM_Base_SetConfig+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a29      	ldr	r2, [pc, #164]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <TIM_Base_SetConfig+0x128>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a27      	ldr	r2, [pc, #156]	; (80074f8 <TIM_Base_SetConfig+0x12c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_Base_SetConfig+0x9a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <TIM_Base_SetConfig+0x130>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d108      	bne.n	8007478 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a10      	ldr	r2, [pc, #64]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00f      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <TIM_Base_SetConfig+0x128>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a10      	ldr	r2, [pc, #64]	; (80074f8 <TIM_Base_SetConfig+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a0f      	ldr	r2, [pc, #60]	; (80074fc <TIM_Base_SetConfig+0x130>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d103      	bne.n	80074cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	615a      	str	r2, [r3, #20]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40000c00 	.word	0x40000c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400
 80074fc:	40014800 	.word	0x40014800

08007500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e040      	b.n	80075d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa fe46 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	; 0x24
 8007568:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f82c 	bl	80075d8 <UART_SetConfig>
 8007580:	4603      	mov	r3, r0
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e022      	b.n	80075d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fada 	bl	8007b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb61 	bl	8007c90 <UART_CheckIdleState>
 80075ce:	4603      	mov	r3, r0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075dc:	b08a      	sub	sp, #40	; 0x28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4ba4      	ldr	r3, [pc, #656]	; (8007898 <UART_SetConfig+0x2c0>)
 8007608:	4013      	ands	r3, r2
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007610:	430b      	orrs	r3, r1
 8007612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a99      	ldr	r2, [pc, #612]	; (800789c <UART_SetConfig+0x2c4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007640:	4313      	orrs	r3, r2
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a90      	ldr	r2, [pc, #576]	; (80078a0 <UART_SetConfig+0x2c8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d126      	bne.n	80076b0 <UART_SetConfig+0xd8>
 8007662:	4b90      	ldr	r3, [pc, #576]	; (80078a4 <UART_SetConfig+0x2cc>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	2b03      	cmp	r3, #3
 800766e:	d81b      	bhi.n	80076a8 <UART_SetConfig+0xd0>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <UART_SetConfig+0xa0>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007689 	.word	0x08007689
 800767c:	08007699 	.word	0x08007699
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a1 	.word	0x080076a1
 8007688:	2301      	movs	r3, #1
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e116      	b.n	80078be <UART_SetConfig+0x2e6>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007696:	e112      	b.n	80078be <UART_SetConfig+0x2e6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e10e      	b.n	80078be <UART_SetConfig+0x2e6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e10a      	b.n	80078be <UART_SetConfig+0x2e6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e106      	b.n	80078be <UART_SetConfig+0x2e6>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a7c      	ldr	r2, [pc, #496]	; (80078a8 <UART_SetConfig+0x2d0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d138      	bne.n	800772c <UART_SetConfig+0x154>
 80076ba:	4b7a      	ldr	r3, [pc, #488]	; (80078a4 <UART_SetConfig+0x2cc>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	2b0c      	cmp	r3, #12
 80076c6:	d82d      	bhi.n	8007724 <UART_SetConfig+0x14c>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0xf8>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007725 	.word	0x08007725
 80076f8:	08007725 	.word	0x08007725
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800771d 	.word	0x0800771d
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e0d8      	b.n	80078be <UART_SetConfig+0x2e6>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007712:	e0d4      	b.n	80078be <UART_SetConfig+0x2e6>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771a:	e0d0      	b.n	80078be <UART_SetConfig+0x2e6>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007722:	e0cc      	b.n	80078be <UART_SetConfig+0x2e6>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772a:	e0c8      	b.n	80078be <UART_SetConfig+0x2e6>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5e      	ldr	r2, [pc, #376]	; (80078ac <UART_SetConfig+0x2d4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d125      	bne.n	8007782 <UART_SetConfig+0x1aa>
 8007736:	4b5b      	ldr	r3, [pc, #364]	; (80078a4 <UART_SetConfig+0x2cc>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007740:	2b30      	cmp	r3, #48	; 0x30
 8007742:	d016      	beq.n	8007772 <UART_SetConfig+0x19a>
 8007744:	2b30      	cmp	r3, #48	; 0x30
 8007746:	d818      	bhi.n	800777a <UART_SetConfig+0x1a2>
 8007748:	2b20      	cmp	r3, #32
 800774a:	d00a      	beq.n	8007762 <UART_SetConfig+0x18a>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d814      	bhi.n	800777a <UART_SetConfig+0x1a2>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <UART_SetConfig+0x182>
 8007754:	2b10      	cmp	r3, #16
 8007756:	d008      	beq.n	800776a <UART_SetConfig+0x192>
 8007758:	e00f      	b.n	800777a <UART_SetConfig+0x1a2>
 800775a:	2300      	movs	r3, #0
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007760:	e0ad      	b.n	80078be <UART_SetConfig+0x2e6>
 8007762:	2302      	movs	r3, #2
 8007764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007768:	e0a9      	b.n	80078be <UART_SetConfig+0x2e6>
 800776a:	2304      	movs	r3, #4
 800776c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007770:	e0a5      	b.n	80078be <UART_SetConfig+0x2e6>
 8007772:	2308      	movs	r3, #8
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007778:	e0a1      	b.n	80078be <UART_SetConfig+0x2e6>
 800777a:	2310      	movs	r3, #16
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007780:	e09d      	b.n	80078be <UART_SetConfig+0x2e6>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a4a      	ldr	r2, [pc, #296]	; (80078b0 <UART_SetConfig+0x2d8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d125      	bne.n	80077d8 <UART_SetConfig+0x200>
 800778c:	4b45      	ldr	r3, [pc, #276]	; (80078a4 <UART_SetConfig+0x2cc>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007796:	2bc0      	cmp	r3, #192	; 0xc0
 8007798:	d016      	beq.n	80077c8 <UART_SetConfig+0x1f0>
 800779a:	2bc0      	cmp	r3, #192	; 0xc0
 800779c:	d818      	bhi.n	80077d0 <UART_SetConfig+0x1f8>
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	d00a      	beq.n	80077b8 <UART_SetConfig+0x1e0>
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d814      	bhi.n	80077d0 <UART_SetConfig+0x1f8>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <UART_SetConfig+0x1d8>
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d008      	beq.n	80077c0 <UART_SetConfig+0x1e8>
 80077ae:	e00f      	b.n	80077d0 <UART_SetConfig+0x1f8>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b6:	e082      	b.n	80078be <UART_SetConfig+0x2e6>
 80077b8:	2302      	movs	r3, #2
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077be:	e07e      	b.n	80078be <UART_SetConfig+0x2e6>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e07a      	b.n	80078be <UART_SetConfig+0x2e6>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e076      	b.n	80078be <UART_SetConfig+0x2e6>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d6:	e072      	b.n	80078be <UART_SetConfig+0x2e6>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a35      	ldr	r2, [pc, #212]	; (80078b4 <UART_SetConfig+0x2dc>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d12a      	bne.n	8007838 <UART_SetConfig+0x260>
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <UART_SetConfig+0x2cc>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f0:	d01a      	beq.n	8007828 <UART_SetConfig+0x250>
 80077f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f6:	d81b      	bhi.n	8007830 <UART_SetConfig+0x258>
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	d00c      	beq.n	8007818 <UART_SetConfig+0x240>
 80077fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007802:	d815      	bhi.n	8007830 <UART_SetConfig+0x258>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <UART_SetConfig+0x238>
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	d008      	beq.n	8007820 <UART_SetConfig+0x248>
 800780e:	e00f      	b.n	8007830 <UART_SetConfig+0x258>
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e052      	b.n	80078be <UART_SetConfig+0x2e6>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781e:	e04e      	b.n	80078be <UART_SetConfig+0x2e6>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007826:	e04a      	b.n	80078be <UART_SetConfig+0x2e6>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782e:	e046      	b.n	80078be <UART_SetConfig+0x2e6>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007836:	e042      	b.n	80078be <UART_SetConfig+0x2e6>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a17      	ldr	r2, [pc, #92]	; (800789c <UART_SetConfig+0x2c4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d13a      	bne.n	80078b8 <UART_SetConfig+0x2e0>
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <UART_SetConfig+0x2cc>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800784c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007850:	d01a      	beq.n	8007888 <UART_SetConfig+0x2b0>
 8007852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007856:	d81b      	bhi.n	8007890 <UART_SetConfig+0x2b8>
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785c:	d00c      	beq.n	8007878 <UART_SetConfig+0x2a0>
 800785e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007862:	d815      	bhi.n	8007890 <UART_SetConfig+0x2b8>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <UART_SetConfig+0x298>
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786c:	d008      	beq.n	8007880 <UART_SetConfig+0x2a8>
 800786e:	e00f      	b.n	8007890 <UART_SetConfig+0x2b8>
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007876:	e022      	b.n	80078be <UART_SetConfig+0x2e6>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787e:	e01e      	b.n	80078be <UART_SetConfig+0x2e6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007886:	e01a      	b.n	80078be <UART_SetConfig+0x2e6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788e:	e016      	b.n	80078be <UART_SetConfig+0x2e6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007896:	e012      	b.n	80078be <UART_SetConfig+0x2e6>
 8007898:	efff69f3 	.word	0xefff69f3
 800789c:	40008000 	.word	0x40008000
 80078a0:	40013800 	.word	0x40013800
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40004400 	.word	0x40004400
 80078ac:	40004800 	.word	0x40004800
 80078b0:	40004c00 	.word	0x40004c00
 80078b4:	40005000 	.word	0x40005000
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4aa0      	ldr	r2, [pc, #640]	; (8007b44 <UART_SetConfig+0x56c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d17a      	bne.n	80079be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d824      	bhi.n	800791a <UART_SetConfig+0x342>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x300>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	0800791b 	.word	0x0800791b
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800791b 	.word	0x0800791b
 80078e8:	0800790b 	.word	0x0800790b
 80078ec:	0800791b 	.word	0x0800791b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800791b 	.word	0x0800791b
 80078f8:	08007913 	.word	0x08007913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fd fa96 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8007900:	61f8      	str	r0, [r7, #28]
        break;
 8007902:	e010      	b.n	8007926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007904:	4b90      	ldr	r3, [pc, #576]	; (8007b48 <UART_SetConfig+0x570>)
 8007906:	61fb      	str	r3, [r7, #28]
        break;
 8007908:	e00d      	b.n	8007926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790a:	f7fd f9f7 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 800790e:	61f8      	str	r0, [r7, #28]
        break;
 8007910:	e009      	b.n	8007926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007916:	61fb      	str	r3, [r7, #28]
        break;
 8007918:	e005      	b.n	8007926 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 80fd 	beq.w	8007b28 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	429a      	cmp	r2, r3
 800793c:	d305      	bcc.n	800794a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	429a      	cmp	r2, r3
 8007948:	d903      	bls.n	8007952 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007950:	e0ea      	b.n	8007b28 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2200      	movs	r2, #0
 8007956:	461c      	mov	r4, r3
 8007958:	4615      	mov	r5, r2
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	022b      	lsls	r3, r5, #8
 8007964:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007968:	0222      	lsls	r2, r4, #8
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	6849      	ldr	r1, [r1, #4]
 800796e:	0849      	lsrs	r1, r1, #1
 8007970:	2000      	movs	r0, #0
 8007972:	4688      	mov	r8, r1
 8007974:	4681      	mov	r9, r0
 8007976:	eb12 0a08 	adds.w	sl, r2, r8
 800797a:	eb43 0b09 	adc.w	fp, r3, r9
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798c:	4650      	mov	r0, sl
 800798e:	4659      	mov	r1, fp
 8007990:	f7f9 f90a 	bl	8000ba8 <__aeabi_uldivmod>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4613      	mov	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a2:	d308      	bcc.n	80079b6 <UART_SetConfig+0x3de>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079aa:	d204      	bcs.n	80079b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	60da      	str	r2, [r3, #12]
 80079b4:	e0b8      	b.n	8007b28 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079bc:	e0b4      	b.n	8007b28 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c6:	d15f      	bne.n	8007a88 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80079c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d828      	bhi.n	8007a22 <UART_SetConfig+0x44a>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <UART_SetConfig+0x400>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a05 	.word	0x08007a05
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007a23 	.word	0x08007a23
 80079e8:	08007a13 	.word	0x08007a13
 80079ec:	08007a23 	.word	0x08007a23
 80079f0:	08007a23 	.word	0x08007a23
 80079f4:	08007a23 	.word	0x08007a23
 80079f8:	08007a1b 	.word	0x08007a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fc:	f7fd fa16 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8007a00:	61f8      	str	r0, [r7, #28]
        break;
 8007a02:	e014      	b.n	8007a2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7fd fa28 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8007a08:	61f8      	str	r0, [r7, #28]
        break;
 8007a0a:	e010      	b.n	8007a2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a0c:	4b4e      	ldr	r3, [pc, #312]	; (8007b48 <UART_SetConfig+0x570>)
 8007a0e:	61fb      	str	r3, [r7, #28]
        break;
 8007a10:	e00d      	b.n	8007a2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a12:	f7fd f973 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8007a16:	61f8      	str	r0, [r7, #28]
        break;
 8007a18:	e009      	b.n	8007a2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1e:	61fb      	str	r3, [r7, #28]
        break;
 8007a20:	e005      	b.n	8007a2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d079      	beq.n	8007b28 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	005a      	lsls	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	441a      	add	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d916      	bls.n	8007a80 <UART_SetConfig+0x4a8>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a58:	d212      	bcs.n	8007a80 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f023 030f 	bic.w	r3, r3, #15
 8007a62:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	8afa      	ldrh	r2, [r7, #22]
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	e053      	b.n	8007b28 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a86:	e04f      	b.n	8007b28 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d828      	bhi.n	8007ae2 <UART_SetConfig+0x50a>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <UART_SetConfig+0x4c0>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007ac5 	.word	0x08007ac5
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	08007ae3 	.word	0x08007ae3
 8007aa8:	08007ad3 	.word	0x08007ad3
 8007aac:	08007ae3 	.word	0x08007ae3
 8007ab0:	08007ae3 	.word	0x08007ae3
 8007ab4:	08007ae3 	.word	0x08007ae3
 8007ab8:	08007adb 	.word	0x08007adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007abc:	f7fd f9b6 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8007ac0:	61f8      	str	r0, [r7, #28]
        break;
 8007ac2:	e014      	b.n	8007aee <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac4:	f7fd f9c8 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8007ac8:	61f8      	str	r0, [r7, #28]
        break;
 8007aca:	e010      	b.n	8007aee <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <UART_SetConfig+0x570>)
 8007ace:	61fb      	str	r3, [r7, #28]
        break;
 8007ad0:	e00d      	b.n	8007aee <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad2:	f7fd f913 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8007ad6:	61f8      	str	r0, [r7, #28]
        break;
 8007ad8:	e009      	b.n	8007aee <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ade:	61fb      	str	r3, [r7, #28]
        break;
 8007ae0:	e005      	b.n	8007aee <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aec:	bf00      	nop
    }

    if (pclk != 0U)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	085a      	lsrs	r2, r3, #1
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b0f      	cmp	r3, #15
 8007b0e:	d908      	bls.n	8007b22 <UART_SetConfig+0x54a>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b16:	d204      	bcs.n	8007b22 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e002      	b.n	8007b28 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3728      	adds	r7, #40	; 0x28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b42:	bf00      	nop
 8007b44:	40008000 	.word	0x40008000
 8007b48:	00f42400 	.word	0x00f42400

08007b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4a:	d10a      	bne.n	8007c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]
  }
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca0:	f7fa fdc2 	bl	8002828 <HAL_GetTick>
 8007ca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d10e      	bne.n	8007cd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f82d 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e023      	b.n	8007d1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d10e      	bne.n	8007cfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f817 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e00d      	b.n	8007d1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d32:	e05e      	b.n	8007df2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d05a      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3c:	f7fa fd74 	bl	8002828 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d11b      	bne.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2220      	movs	r2, #32
 8007d76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e043      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d02c      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da6:	d124      	bne.n	8007df2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007db0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dc0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e00f      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	bf0c      	ite	eq
 8007e02:	2301      	moveq	r3, #1
 8007e04:	2300      	movne	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d091      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	f107 001c 	add.w	r0, r7, #28
 8007e28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa23 	bl	8008284 <USB_CoreReset>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
 8007e54:	e005      	b.n	8007e62 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e6e:	b004      	add	sp, #16
 8007e70:	4770      	bx	lr

08007e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f023 0201 	bic.w	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d106      	bne.n	8007ec0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e00b      	b.n	8007ed8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	e001      	b.n	8007ed8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e003      	b.n	8007ee0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ed8:	2032      	movs	r0, #50	; 0x32
 8007eda:	f7fa fcb1 	bl	8002840 <HAL_Delay>

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ee8:	b084      	sub	sp, #16
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	e009      	b.n	8007f1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3340      	adds	r3, #64	; 0x40
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b0e      	cmp	r3, #14
 8007f20:	d9f2      	bls.n	8007f08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d11c      	bne.n	8007f62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f36:	f043 0302 	orr.w	r3, r3, #2
 8007f3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e005      	b.n	8007f6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f80:	4619      	mov	r1, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f88:	461a      	mov	r2, r3
 8007f8a:	680b      	ldr	r3, [r1, #0]
 8007f8c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f8e:	2103      	movs	r1, #3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f93d 	bl	8008210 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f96:	2110      	movs	r1, #16
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8f1 	bl	8008180 <USB_FlushTxFifo>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f90f 	bl	80081cc <USB_FlushRxFifo>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fca:	461a      	mov	r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	e043      	b.n	800806a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff8:	d118      	bne.n	800802c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800c:	461a      	mov	r2, r3
 800800e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e013      	b.n	800803e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	461a      	mov	r2, r3
 8008024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	e008      	b.n	800803e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008038:	461a      	mov	r2, r3
 800803a:	2300      	movs	r3, #0
 800803c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	461a      	mov	r2, r3
 800805e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3301      	adds	r3, #1
 8008068:	613b      	str	r3, [r7, #16]
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	429a      	cmp	r2, r3
 8008070:	d3b7      	bcc.n	8007fe2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e043      	b.n	8008100 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808e:	d118      	bne.n	80080c2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	461a      	mov	r2, r3
 80080a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e013      	b.n	80080d4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	461a      	mov	r2, r3
 80080ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e008      	b.n	80080d4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	461a      	mov	r2, r3
 80080d0:	2300      	movs	r3, #0
 80080d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	461a      	mov	r2, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f2:	461a      	mov	r2, r3
 80080f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3301      	adds	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	429a      	cmp	r2, r3
 8008106:	d3b7      	bcc.n	8008078 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008128:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f043 0210 	orr.w	r2, r3, #16
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	4b10      	ldr	r3, [pc, #64]	; (800817c <USB_DevInit+0x294>)
 800813c:	4313      	orrs	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f043 0208 	orr.w	r2, r3, #8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008156:	2b01      	cmp	r3, #1
 8008158:	d107      	bne.n	800816a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008162:	f043 0304 	orr.w	r3, r3, #4
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008176:	b004      	add	sp, #16
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	803c3800 	.word	0x803c3800

08008180 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	019b      	lsls	r3, r3, #6
 8008192:	f043 0220 	orr.w	r2, r3, #32
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <USB_FlushTxFifo+0x48>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d901      	bls.n	80081ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d0f0      	beq.n	800819a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	00030d40 	.word	0x00030d40

080081cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2210      	movs	r2, #16
 80081dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a09      	ldr	r2, [pc, #36]	; (800820c <USB_FlushRxFifo+0x40>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d901      	bls.n	80081f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e006      	b.n	80081fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d0f0      	beq.n	80081de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	00030d40 	.word	0x00030d40

08008210 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008230:	4313      	orrs	r3, r2
 8008232:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008270:	f043 0302 	orr.w	r3, r3, #2
 8008274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3301      	adds	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <USB_CoreReset+0x64>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d901      	bls.n	80082a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e01b      	b.n	80082da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	daf2      	bge.n	8008290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f043 0201 	orr.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <USB_CoreReset+0x64>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d901      	bls.n	80082cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e006      	b.n	80082da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d0f0      	beq.n	80082ba <USB_CoreReset+0x36>

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	00030d40 	.word	0x00030d40

080082ec <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	4a06      	ldr	r2, [pc, #24]	; (8008314 <BSP_LED_On+0x28>)
 80082fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008302:	b291      	uxth	r1, r2
 8008304:	2201      	movs	r2, #1
 8008306:	4618      	mov	r0, r3
 8008308:	f7fa ffd6 	bl	80032b8 <HAL_GPIO_WritePin>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	2000001c 	.word	0x2000001c

08008318 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	4a06      	ldr	r2, [pc, #24]	; (8008340 <BSP_LED_Off+0x28>)
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800832e:	b291      	uxth	r1, r2
 8008330:	2200      	movs	r2, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f7fa ffc0 	bl	80032b8 <HAL_GPIO_WritePin>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	2000001c 	.word	0x2000001c

08008344 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800834c:	4b27      	ldr	r3, [pc, #156]	; (80083ec <I2Cx_MspInit+0xa8>)
 800834e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008350:	4a26      	ldr	r2, [pc, #152]	; (80083ec <I2Cx_MspInit+0xa8>)
 8008352:	f043 0302 	orr.w	r3, r3, #2
 8008356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008358:	4b24      	ldr	r3, [pc, #144]	; (80083ec <I2Cx_MspInit+0xa8>)
 800835a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008364:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008368:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800836a:	2312      	movs	r3, #18
 800836c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800836e:	2301      	movs	r3, #1
 8008370:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008372:	2303      	movs	r3, #3
 8008374:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008376:	2304      	movs	r3, #4
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	4619      	mov	r1, r3
 8008380:	481b      	ldr	r0, [pc, #108]	; (80083f0 <I2Cx_MspInit+0xac>)
 8008382:	f7fa fce3 	bl	8002d4c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008386:	f107 0314 	add.w	r3, r7, #20
 800838a:	4619      	mov	r1, r3
 800838c:	4818      	ldr	r0, [pc, #96]	; (80083f0 <I2Cx_MspInit+0xac>)
 800838e:	f7fa fcdd 	bl	8002d4c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008392:	4b16      	ldr	r3, [pc, #88]	; (80083ec <I2Cx_MspInit+0xa8>)
 8008394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008396:	4a15      	ldr	r2, [pc, #84]	; (80083ec <I2Cx_MspInit+0xa8>)
 8008398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800839c:	6593      	str	r3, [r2, #88]	; 0x58
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <I2Cx_MspInit+0xa8>)
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80083aa:	4b10      	ldr	r3, [pc, #64]	; (80083ec <I2Cx_MspInit+0xa8>)
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	4a0f      	ldr	r2, [pc, #60]	; (80083ec <I2Cx_MspInit+0xa8>)
 80083b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <I2Cx_MspInit+0xa8>)
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <I2Cx_MspInit+0xa8>)
 80083bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80083c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80083c2:	2200      	movs	r2, #0
 80083c4:	210f      	movs	r1, #15
 80083c6:	2021      	movs	r0, #33	; 0x21
 80083c8:	f7fa fb3a 	bl	8002a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80083cc:	2021      	movs	r0, #33	; 0x21
 80083ce:	f7fa fb53 	bl	8002a78 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80083d2:	2200      	movs	r2, #0
 80083d4:	210f      	movs	r1, #15
 80083d6:	2022      	movs	r0, #34	; 0x22
 80083d8:	f7fa fb32 	bl	8002a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80083dc:	2022      	movs	r0, #34	; 0x22
 80083de:	f7fa fb4b 	bl	8002a78 <HAL_NVIC_EnableIRQ>
}
 80083e2:	bf00      	nop
 80083e4:	3728      	adds	r7, #40	; 0x28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40021000 	.word	0x40021000
 80083f0:	48000400 	.word	0x48000400

080083f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a12      	ldr	r2, [pc, #72]	; (8008448 <I2Cx_Init+0x54>)
 8008400:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a11      	ldr	r2, [pc, #68]	; (800844c <I2Cx_Init+0x58>)
 8008406:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ff89 	bl	8008344 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fa ff70 	bl	8003318 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fb fc74 	bl	8003d28 <HAL_I2CEx_ConfigAnalogFilter>
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40005800 	.word	0x40005800
 800844c:	00702681 	.word	0x00702681

08008450 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af04      	add	r7, sp, #16
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	4603      	mov	r3, r0
 8008460:	72fb      	strb	r3, [r7, #11]
 8008462:	460b      	mov	r3, r1
 8008464:	813b      	strh	r3, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	b299      	uxth	r1, r3
 8008472:	88f8      	ldrh	r0, [r7, #6]
 8008474:	893a      	ldrh	r2, [r7, #8]
 8008476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800847a:	9302      	str	r3, [sp, #8]
 800847c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	4603      	mov	r3, r0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7fb f918 	bl	80036bc <HAL_I2C_Mem_Read>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	4619      	mov	r1, r3
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f832 	bl	8008504 <I2Cx_Error>
  }
  return status;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b08a      	sub	sp, #40	; 0x28
 80084ae:	af04      	add	r7, sp, #16
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	72fb      	strb	r3, [r7, #11]
 80084bc:	460b      	mov	r3, r1
 80084be:	813b      	strh	r3, [r7, #8]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	b299      	uxth	r1, r3
 80084cc:	88f8      	ldrh	r0, [r7, #6]
 80084ce:	893a      	ldrh	r2, [r7, #8]
 80084d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4603      	mov	r3, r0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7fa ffd7 	bl	8003494 <HAL_I2C_Mem_Write>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f805 	bl	8008504 <I2Cx_Error>
  }
  return status;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fa ff90 	bl	8003436 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff ff6c 	bl	80083f4 <I2Cx_Init>
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8008528:	4802      	ldr	r0, [pc, #8]	; (8008534 <SENSOR_IO_Init+0x10>)
 800852a:	f7ff ff63 	bl	80083f4 <I2Cx_Init>
}
 800852e:	bf00      	nop
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000d00 	.word	0x20000d00

08008538 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af02      	add	r7, sp, #8
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
 8008542:	460b      	mov	r3, r1
 8008544:	71bb      	strb	r3, [r7, #6]
 8008546:	4613      	mov	r3, r2
 8008548:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800854a:	79bb      	ldrb	r3, [r7, #6]
 800854c:	b29a      	uxth	r2, r3
 800854e:	79f9      	ldrb	r1, [r7, #7]
 8008550:	2301      	movs	r3, #1
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	1d7b      	adds	r3, r7, #5
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	2301      	movs	r3, #1
 800855a:	4803      	ldr	r0, [pc, #12]	; (8008568 <SENSOR_IO_Write+0x30>)
 800855c:	f7ff ffa5 	bl	80084aa <I2Cx_WriteMultiple>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20000d00 	.word	0x20000d00

0800856c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af02      	add	r7, sp, #8
 8008572:	4603      	mov	r3, r0
 8008574:	460a      	mov	r2, r1
 8008576:	71fb      	strb	r3, [r7, #7]
 8008578:	4613      	mov	r3, r2
 800857a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8008580:	79bb      	ldrb	r3, [r7, #6]
 8008582:	b29a      	uxth	r2, r3
 8008584:	79f9      	ldrb	r1, [r7, #7]
 8008586:	2301      	movs	r3, #1
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f107 030f 	add.w	r3, r7, #15
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2301      	movs	r3, #1
 8008592:	4804      	ldr	r0, [pc, #16]	; (80085a4 <SENSOR_IO_Read+0x38>)
 8008594:	f7ff ff5c 	bl	8008450 <I2Cx_ReadMultiple>

  return read_value;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000d00 	.word	0x20000d00

080085a8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	603a      	str	r2, [r7, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	71fb      	strb	r3, [r7, #7]
 80085b6:	460b      	mov	r3, r1
 80085b8:	71bb      	strb	r3, [r7, #6]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80085be:	79bb      	ldrb	r3, [r7, #6]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	79f9      	ldrb	r1, [r7, #7]
 80085c4:	88bb      	ldrh	r3, [r7, #4]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2301      	movs	r3, #1
 80085ce:	4804      	ldr	r0, [pc, #16]	; (80085e0 <SENSOR_IO_ReadMultiple+0x38>)
 80085d0:	f7ff ff3e 	bl	8008450 <I2Cx_ReadMultiple>
 80085d4:	4603      	mov	r3, r0
 80085d6:	b29b      	uxth	r3, r3
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000d00 	.word	0x20000d00

080085e4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80085ee:	2300      	movs	r3, #0
 80085f0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <BSP_ACCELERO_Init+0x74>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	4798      	blx	r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b6a      	cmp	r3, #106	; 0x6a
 80085fc:	d002      	beq.n	8008604 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	73fb      	strb	r3, [r7, #15]
 8008602:	e024      	b.n	800864e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <BSP_ACCELERO_Init+0x78>)
 8008606:	4a14      	ldr	r2, [pc, #80]	; (8008658 <BSP_ACCELERO_Init+0x74>)
 8008608:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800860a:	2330      	movs	r3, #48	; 0x30
 800860c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8008612:	2300      	movs	r3, #0
 8008614:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8008622:	797a      	ldrb	r2, [r7, #5]
 8008624:	7abb      	ldrb	r3, [r7, #10]
 8008626:	4313      	orrs	r3, r2
 8008628:	b2db      	uxtb	r3, r3
 800862a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800862c:	7a3b      	ldrb	r3, [r7, #8]
 800862e:	f043 0304 	orr.w	r3, r3, #4
 8008632:	b2db      	uxtb	r3, r3
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	b21a      	sxth	r2, r3
 8008638:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	b21b      	sxth	r3, r3
 8008640:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <BSP_ACCELERO_Init+0x78>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	89ba      	ldrh	r2, [r7, #12]
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
  }  

  return ret;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000020 	.word	0x20000020
 800865c:	20000d4c 	.word	0x20000d4c

08008660 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8008668:	4b08      	ldr	r3, [pc, #32]	; (800868c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800867a:	4b04      	ldr	r3, [pc, #16]	; (800868c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
    }
  }
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000d4c 	.word	0x20000d4c

08008690 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800869e:	2110      	movs	r1, #16
 80086a0:	20d4      	movs	r0, #212	; 0xd4
 80086a2:	f7ff ff63 	bl	800856c <SENSOR_IO_Read>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80086b6:	7bba      	ldrb	r2, [r7, #14]
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	461a      	mov	r2, r3
 80086c2:	2110      	movs	r1, #16
 80086c4:	20d4      	movs	r0, #212	; 0xd4
 80086c6:	f7ff ff37 	bl	8008538 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80086ca:	2112      	movs	r1, #18
 80086cc:	20d4      	movs	r0, #212	; 0xd4
 80086ce:	f7ff ff4d 	bl	800856c <SENSOR_IO_Read>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	b29b      	uxth	r3, r3
 80086dc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80086e4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80086e6:	7bba      	ldrb	r2, [r7, #14]
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	461a      	mov	r2, r3
 80086f2:	2112      	movs	r1, #18
 80086f4:	20d4      	movs	r0, #212	; 0xd4
 80086f6:	f7ff ff1f 	bl	8008538 <SENSOR_IO_Write>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008708:	2300      	movs	r3, #0
 800870a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800870c:	2110      	movs	r1, #16
 800870e:	20d4      	movs	r0, #212	; 0xd4
 8008710:	f7ff ff2c 	bl	800856c <SENSOR_IO_Read>
 8008714:	4603      	mov	r3, r0
 8008716:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	461a      	mov	r2, r3
 8008724:	2110      	movs	r1, #16
 8008726:	20d4      	movs	r0, #212	; 0xd4
 8008728:	f7ff ff06 	bl	8008538 <SENSOR_IO_Write>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008738:	f7ff fef4 	bl	8008524 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800873c:	210f      	movs	r1, #15
 800873e:	20d4      	movs	r0, #212	; 0xd4
 8008740:	f7ff ff14 	bl	800856c <SENSOR_IO_Read>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	bd80      	pop	{r7, pc}

0800874a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8008758:	2115      	movs	r1, #21
 800875a:	20d4      	movs	r0, #212	; 0xd4
 800875c:	f7ff ff06 	bl	800856c <SENSOR_IO_Read>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	f023 0310 	bic.w	r3, r3, #16
 800876a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	f043 0310 	orr.w	r3, r3, #16
 8008778:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	461a      	mov	r2, r3
 800877e:	2115      	movs	r1, #21
 8008780:	20d4      	movs	r0, #212	; 0xd4
 8008782:	f7ff fed9 	bl	8008538 <SENSOR_IO_Write>
}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8008798:	2300      	movs	r3, #0
 800879a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80087a6:	2110      	movs	r1, #16
 80087a8:	20d4      	movs	r0, #212	; 0xd4
 80087aa:	f7ff fedf 	bl	800856c <SENSOR_IO_Read>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80087b2:	f107 0208 	add.w	r2, r7, #8
 80087b6:	2306      	movs	r3, #6
 80087b8:	2128      	movs	r1, #40	; 0x28
 80087ba:	20d4      	movs	r0, #212	; 0xd4
 80087bc:	f7ff fef4 	bl	80085a8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80087c0:	2300      	movs	r3, #0
 80087c2:	77fb      	strb	r3, [r7, #31]
 80087c4:	e01c      	b.n	8008800 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80087c6:	7ffb      	ldrb	r3, [r7, #31]
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	3301      	adds	r3, #1
 80087cc:	3320      	adds	r3, #32
 80087ce:	443b      	add	r3, r7
 80087d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	b29a      	uxth	r2, r3
 80087da:	7ffb      	ldrb	r3, [r7, #31]
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	3320      	adds	r3, #32
 80087e0:	443b      	add	r3, r7
 80087e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4413      	add	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	7ffb      	ldrb	r3, [r7, #31]
 80087ee:	b212      	sxth	r2, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	3320      	adds	r3, #32
 80087f4:	443b      	add	r3, r7
 80087f6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80087fa:	7ffb      	ldrb	r3, [r7, #31]
 80087fc:	3301      	adds	r3, #1
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	7ffb      	ldrb	r3, [r7, #31]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d9df      	bls.n	80087c6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	f003 030c 	and.w	r3, r3, #12
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d829      	bhi.n	8008864 <LSM6DSL_AccReadXYZ+0xd4>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <LSM6DSL_AccReadXYZ+0x88>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	0800884d 	.word	0x0800884d
 800881c:	08008865 	.word	0x08008865
 8008820:	08008865 	.word	0x08008865
 8008824:	08008865 	.word	0x08008865
 8008828:	0800885f 	.word	0x0800885f
 800882c:	08008865 	.word	0x08008865
 8008830:	08008865 	.word	0x08008865
 8008834:	08008865 	.word	0x08008865
 8008838:	08008853 	.word	0x08008853
 800883c:	08008865 	.word	0x08008865
 8008840:	08008865 	.word	0x08008865
 8008844:	08008865 	.word	0x08008865
 8008848:	08008859 	.word	0x08008859
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <LSM6DSL_AccReadXYZ+0x120>)
 800884e:	61bb      	str	r3, [r7, #24]
    break;
 8008850:	e008      	b.n	8008864 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8008852:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <LSM6DSL_AccReadXYZ+0x124>)
 8008854:	61bb      	str	r3, [r7, #24]
    break;
 8008856:	e005      	b.n	8008864 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008858:	4b17      	ldr	r3, [pc, #92]	; (80088b8 <LSM6DSL_AccReadXYZ+0x128>)
 800885a:	61bb      	str	r3, [r7, #24]
    break;
 800885c:	e002      	b.n	8008864 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800885e:	4b17      	ldr	r3, [pc, #92]	; (80088bc <LSM6DSL_AccReadXYZ+0x12c>)
 8008860:	61bb      	str	r3, [r7, #24]
    break;    
 8008862:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008864:	2300      	movs	r3, #0
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e01a      	b.n	80088a0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800886a:	7ffb      	ldrb	r3, [r7, #31]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	3320      	adds	r3, #32
 8008870:	443b      	add	r3, r7
 8008872:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800887e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008886:	7ffb      	ldrb	r3, [r7, #31]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	4413      	add	r3, r2
 800888e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008892:	ee17 2a90 	vmov	r2, s15
 8008896:	b212      	sxth	r2, r2
 8008898:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800889a:	7ffb      	ldrb	r3, [r7, #31]
 800889c:	3301      	adds	r3, #1
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	7ffb      	ldrb	r3, [r7, #31]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d9e1      	bls.n	800886a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	3720      	adds	r7, #32
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	3d79db23 	.word	0x3d79db23
 80088b4:	3df9db23 	.word	0x3df9db23
 80088b8:	3e79db23 	.word	0x3e79db23
 80088bc:	3ef9db23 	.word	0x3ef9db23

080088c0 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	2b2f      	cmp	r3, #47	; 0x2f
 80088ce:	d906      	bls.n	80088de <Hex2Num+0x1e>
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b39      	cmp	r3, #57	; 0x39
 80088d4:	d803      	bhi.n	80088de <Hex2Num+0x1e>
        return a - '0';
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	3b30      	subs	r3, #48	; 0x30
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e014      	b.n	8008908 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	2b60      	cmp	r3, #96	; 0x60
 80088e2:	d906      	bls.n	80088f2 <Hex2Num+0x32>
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	2b66      	cmp	r3, #102	; 0x66
 80088e8:	d803      	bhi.n	80088f2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	3b57      	subs	r3, #87	; 0x57
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	e00a      	b.n	8008908 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d906      	bls.n	8008906 <Hex2Num+0x46>
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b46      	cmp	r3, #70	; 0x46
 80088fc:	d803      	bhi.n	8008906 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	3b37      	subs	r3, #55	; 0x37
 8008902:	b2db      	uxtb	r3, r3
 8008904:	e000      	b.n	8008908 <Hex2Num+0x48>
    }

    return 0;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8008926:	e012      	b.n	800894e <ParseHexNumber+0x3a>
        sum <<= 4;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff ffc4 	bl	80088c0 <Hex2Num>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
        ptr++;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3301      	adds	r3, #1
 8008946:	607b      	str	r3, [r7, #4]
        i++;
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	3301      	adds	r3, #1
 800894c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b2f      	cmp	r3, #47	; 0x2f
 8008954:	d903      	bls.n	800895e <ParseHexNumber+0x4a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b39      	cmp	r3, #57	; 0x39
 800895c:	d9e4      	bls.n	8008928 <ParseHexNumber+0x14>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	2b60      	cmp	r3, #96	; 0x60
 8008964:	d903      	bls.n	800896e <ParseHexNumber+0x5a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b66      	cmp	r3, #102	; 0x66
 800896c:	d9dc      	bls.n	8008928 <ParseHexNumber+0x14>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b40      	cmp	r3, #64	; 0x40
 8008974:	d903      	bls.n	800897e <ParseHexNumber+0x6a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b46      	cmp	r3, #70	; 0x46
 800897c:	d9d4      	bls.n	8008928 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <ParseHexNumber+0x76>
        *cnt = i;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	7afa      	ldrb	r2, [r7, #11]
 8008988:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
 80089a2:	2300      	movs	r3, #0
 80089a4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b2d      	cmp	r3, #45	; 0x2d
 80089b0:	d119      	bne.n	80089e6 <ParseNumber+0x52>
        minus = 1;
 80089b2:	2301      	movs	r3, #1
 80089b4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3301      	adds	r3, #1
 80089ba:	607b      	str	r3, [r7, #4]
        i++;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	3301      	adds	r3, #1
 80089c0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80089c2:	e010      	b.n	80089e6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	3b30      	subs	r3, #48	; 0x30
 80089d6:	4413      	add	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]
        ptr++;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3301      	adds	r3, #1
 80089de:	607b      	str	r3, [r7, #4]
        i++;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	3301      	adds	r3, #1
 80089e4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b2f      	cmp	r3, #47	; 0x2f
 80089ec:	d903      	bls.n	80089f6 <ParseNumber+0x62>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b39      	cmp	r3, #57	; 0x39
 80089f4:	d9e6      	bls.n	80089c4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <ParseNumber+0x6e>
        *cnt = i;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	7bba      	ldrb	r2, [r7, #14]
 8008a00:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <ParseNumber+0x7a>
        return 0 - sum;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	e000      	b.n	8008a10 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8008a0e:	68bb      	ldr	r3, [r7, #8]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8008a2a:	e019      	b.n	8008a60 <ParseMAC+0x44>
    hexcnt = 1;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b3a      	cmp	r3, #58	; 0x3a
 8008a36:	d00e      	beq.n	8008a56 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8008a38:	f107 030e 	add.w	r3, r7, #14
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff ff68 	bl	8008914 <ParseHexNumber>
 8008a44:	4601      	mov	r1, r0
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	73fa      	strb	r2, [r7, #15]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	b2ca      	uxtb	r2, r1
 8008a54:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e1      	bne.n	8008a2c <ParseMAC+0x10>
  }
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8008a80:	e019      	b.n	8008ab6 <ParseIP+0x44>
    hexcnt = 1;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a8c:	d00e      	beq.n	8008aac <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8008a8e:	f107 030e 	add.w	r3, r7, #14
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff7d 	bl	8008994 <ParseNumber>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	73fa      	strb	r2, [r7, #15]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	b2ca      	uxtb	r2, r1
 8008aaa:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e1      	bne.n	8008a82 <ParseIP+0x10>
  }
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	4934      	ldr	r1, [pc, #208]	; (8008bac <AT_ParseInfo+0xe4>)
 8008adc:	4618      	mov	r0, r3
 8008ade:	f009 facd 	bl	801207c <strtok>
 8008ae2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8008ae4:	e05a      	b.n	8008b9c <AT_ParseInfo+0xd4>
    switch (num++) {
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	72fa      	strb	r2, [r7, #11]
 8008aec:	2b06      	cmp	r3, #6
 8008aee:	d84f      	bhi.n	8008b90 <AT_ParseInfo+0xc8>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <AT_ParseInfo+0x30>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b15 	.word	0x08008b15
 8008afc:	08008b23 	.word	0x08008b23
 8008b00:	08008b33 	.word	0x08008b33
 8008b04:	08008b43 	.word	0x08008b43
 8008b08:	08008b53 	.word	0x08008b53
 8008b0c:	08008b63 	.word	0x08008b63
 8008b10:	08008b77 	.word	0x08008b77
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f009 fa85 	bl	801202a <strncpy>
      break;
 8008b20:	e037      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3320      	adds	r3, #32
 8008b26:	2218      	movs	r2, #24
 8008b28:	68f9      	ldr	r1, [r7, #12]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f009 fa7d 	bl	801202a <strncpy>
      break;
 8008b30:	e02f      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3338      	adds	r3, #56	; 0x38
 8008b36:	2210      	movs	r2, #16
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f009 fa75 	bl	801202a <strncpy>
      break;
 8008b40:	e027      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3348      	adds	r3, #72	; 0x48
 8008b46:	2210      	movs	r2, #16
 8008b48:	68f9      	ldr	r1, [r7, #12]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f009 fa6d 	bl	801202a <strncpy>
      break;
 8008b50:	e01f      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3358      	adds	r3, #88	; 0x58
 8008b56:	2210      	movs	r2, #16
 8008b58:	68f9      	ldr	r1, [r7, #12]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f009 fa65 	bl	801202a <strncpy>
      break;
 8008b60:	e017      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8008b62:	2100      	movs	r1, #0
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff ff15 	bl	8008994 <ParseNumber>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8008b74:	e00d      	b.n	8008b92 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8008b76:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <AT_ParseInfo+0xe8>)
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f009 fa7f 	bl	801207c <strtok>
 8008b7e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3368      	adds	r3, #104	; 0x68
 8008b84:	2220      	movs	r2, #32
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f009 fa4e 	bl	801202a <strncpy>
      break;
 8008b8e:	e000      	b.n	8008b92 <AT_ParseInfo+0xca>

    default: break;
 8008b90:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8008b92:	4906      	ldr	r1, [pc, #24]	; (8008bac <AT_ParseInfo+0xe4>)
 8008b94:	2000      	movs	r0, #0
 8008b96:	f009 fa71 	bl	801207c <strtok>
 8008b9a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1a1      	bne.n	8008ae6 <AT_ParseInfo+0x1e>
  }
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	08014320 	.word	0x08014320
 8008bb0:	08014324 	.word	0x08014324

08008bb4 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	4952      	ldr	r1, [pc, #328]	; (8008d10 <AT_ParseConnSettings+0x15c>)
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f009 fa57 	bl	801207c <strtok>
 8008bce:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8008bd0:	e095      	b.n	8008cfe <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	73fa      	strb	r2, [r7, #15]
 8008bd8:	2b0b      	cmp	r3, #11
 8008bda:	d87f      	bhi.n	8008cdc <AT_ParseConnSettings+0x128>
 8008bdc:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <AT_ParseConnSettings+0x30>)
 8008bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be2:	bf00      	nop
 8008be4:	08008c15 	.word	0x08008c15
 8008be8:	08008c23 	.word	0x08008c23
 8008bec:	08008c33 	.word	0x08008c33
 8008bf0:	08008c47 	.word	0x08008c47
 8008bf4:	08008c5b 	.word	0x08008c5b
 8008bf8:	08008c6f 	.word	0x08008c6f
 8008bfc:	08008c7d 	.word	0x08008c7d
 8008c00:	08008c8b 	.word	0x08008c8b
 8008c04:	08008c99 	.word	0x08008c99
 8008c08:	08008ca7 	.word	0x08008ca7
 8008c0c:	08008cb5 	.word	0x08008cb5
 8008c10:	08008cc9 	.word	0x08008cc9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2221      	movs	r2, #33	; 0x21
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f009 fa05 	bl	801202a <strncpy>
      break;
 8008c20:	e05d      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	3321      	adds	r3, #33	; 0x21
 8008c26:	2221      	movs	r2, #33	; 0x21
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f009 f9fd 	bl	801202a <strncpy>
      break;
 8008c30:	e055      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8008c32:	2100      	movs	r1, #0
 8008c34:	68b8      	ldr	r0, [r7, #8]
 8008c36:	f7ff fead 	bl	8008994 <ParseNumber>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8008c44:	e04b      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8008c46:	2100      	movs	r1, #0
 8008c48:	68b8      	ldr	r0, [r7, #8]
 8008c4a:	f7ff fea3 	bl	8008994 <ParseNumber>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8008c58:	e041      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f7ff fe99 	bl	8008994 <ParseNumber>
 8008c62:	4603      	mov	r3, r0
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8008c6c:	e037      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	3348      	adds	r3, #72	; 0x48
 8008c72:	4619      	mov	r1, r3
 8008c74:	68b8      	ldr	r0, [r7, #8]
 8008c76:	f7ff fefc 	bl	8008a72 <ParseIP>
      break;
 8008c7a:	e030      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	334c      	adds	r3, #76	; 0x4c
 8008c80:	4619      	mov	r1, r3
 8008c82:	68b8      	ldr	r0, [r7, #8]
 8008c84:	f7ff fef5 	bl	8008a72 <ParseIP>
      break;
 8008c88:	e029      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	3350      	adds	r3, #80	; 0x50
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f7ff feee 	bl	8008a72 <ParseIP>
      break;
 8008c96:	e022      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	3354      	adds	r3, #84	; 0x54
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	68b8      	ldr	r0, [r7, #8]
 8008ca0:	f7ff fee7 	bl	8008a72 <ParseIP>
      break;
 8008ca4:	e01b      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	3358      	adds	r3, #88	; 0x58
 8008caa:	4619      	mov	r1, r3
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f7ff fee0 	bl	8008a72 <ParseIP>
      break;
 8008cb2:	e014      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	68b8      	ldr	r0, [r7, #8]
 8008cb8:	f7ff fe6c 	bl	8008994 <ParseNumber>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8008cc6:	e00a      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8008cc8:	2100      	movs	r1, #0
 8008cca:	68b8      	ldr	r0, [r7, #8]
 8008ccc:	f7ff fe62 	bl	8008994 <ParseNumber>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8008cda:	e000      	b.n	8008cde <AT_ParseConnSettings+0x12a>

    default:
      break;
 8008cdc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8008cde:	490c      	ldr	r1, [pc, #48]	; (8008d10 <AT_ParseConnSettings+0x15c>)
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f009 f9cb 	bl	801207c <strtok>
 8008ce6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <AT_ParseConnSettings+0x14a>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b2c      	cmp	r3, #44	; 0x2c
 8008cf6:	d102      	bne.n	8008cfe <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f47f af66 	bne.w	8008bd2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	08014320 	.word	0x08014320

08008d14 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3302      	adds	r3, #2
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b31      	cmp	r3, #49	; 0x31
 8008d26:	bf0c      	ite	eq
 8008d28:	2301      	moveq	r3, #1
 8008d2a:	2300      	movne	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	461a      	mov	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	701a      	strb	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008d5a:	68b8      	ldr	r0, [r7, #8]
 8008d5c:	f7f7 fa38 	bl	80001d0 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	b299      	uxth	r1, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	47a0      	blx	r4
 8008d70:	4603      	mov	r3, r0
 8008d72:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd3e      	ble.n	8008df8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008d86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8008d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	dd27      	ble.n	8008dea <AT_ExecuteCommand+0xaa>
 8008d9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008d9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008da2:	dc22      	bgt.n	8008dea <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8008da4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008dac:	d105      	bne.n	8008dba <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8008dae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8008dba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8008dc6:	490f      	ldr	r1, [pc, #60]	; (8008e04 <AT_ExecuteCommand+0xc4>)
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f009 f941 	bl	8012050 <strstr>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e010      	b.n	8008dfa <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8008dd8:	490b      	ldr	r1, [pc, #44]	; (8008e08 <AT_ExecuteCommand+0xc8>)
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f009 f938 	bl	8012050 <strstr>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008de6:	2305      	movs	r3, #5
 8008de8:	e007      	b.n	8008dfa <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8008dea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008dee:	f113 0f04 	cmn.w	r3, #4
 8008df2:	d101      	bne.n	8008df8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8008df4:	2306      	movs	r3, #6
 8008df6:	e000      	b.n	8008dfa <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8008df8:	2304      	movs	r3, #4
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd90      	pop	{r4, r7, pc}
 8008e02:	bf00      	nop
 8008e04:	08014334 	.word	0x08014334
 8008e08:	08014340 	.word	0x08014340

08008e0c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8008e26:	68b8      	ldr	r0, [r7, #8]
 8008e28:	f7f7 f9d2 	bl	80001d0 <strlen>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8008e30:	8a7b      	ldrh	r3, [r7, #18]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <AT_RequestSendData+0x32>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e053      	b.n	8008ee6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008e4a:	8a79      	ldrh	r1, [r7, #18]
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	4798      	blx	r3
 8008e50:	4603      	mov	r3, r0
 8008e52:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8008e54:	8a3a      	ldrh	r2, [r7, #16]
 8008e56:	8a7b      	ldrh	r3, [r7, #18]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d143      	bne.n	8008ee4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008e68:	8879      	ldrh	r1, [r7, #2]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8008e72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008e76:	887b      	ldrh	r3, [r7, #2]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d131      	bne.n	8008ee0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008e88:	2100      	movs	r1, #0
 8008e8a:	6a38      	ldr	r0, [r7, #32]
 8008e8c:	4798      	blx	r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8008e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd19      	ble.n	8008ece <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8008e9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008e9e:	6a3a      	ldr	r2, [r7, #32]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8008ea6:	4912      	ldr	r1, [pc, #72]	; (8008ef0 <AT_RequestSendData+0xe4>)
 8008ea8:	6a38      	ldr	r0, [r7, #32]
 8008eaa:	f009 f8d1 	bl	8012050 <strstr>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e016      	b.n	8008ee6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8008eb8:	490e      	ldr	r1, [pc, #56]	; (8008ef4 <AT_RequestSendData+0xe8>)
 8008eba:	6a38      	ldr	r0, [r7, #32]
 8008ebc:	f009 f8c8 	bl	8012050 <strstr>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008ec6:	2305      	movs	r3, #5
 8008ec8:	e00d      	b.n	8008ee6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e00b      	b.n	8008ee6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8008ece:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ed2:	f113 0f04 	cmn.w	r3, #4
 8008ed6:	d101      	bne.n	8008edc <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8008ed8:	2306      	movs	r3, #6
 8008eda:	e004      	b.n	8008ee6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e002      	b.n	8008ee6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e000      	b.n	8008ee6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8008ee4:	2304      	movs	r3, #4
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	08014334 	.word	0x08014334
 8008ef4:	08014340 	.word	0x08014340

08008ef8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8008ef8:	b590      	push	{r4, r7, lr}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008f0c:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008f14:	68b8      	ldr	r0, [r7, #8]
 8008f16:	f7f7 f95b 	bl	80001d0 <strlen>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	b299      	uxth	r1, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008f24:	461a      	mov	r2, r3
 8008f26:	68b8      	ldr	r0, [r7, #8]
 8008f28:	47a0      	blx	r4
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dd6f      	ble.n	8009010 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	4798      	blx	r3
 8008f42:	4603      	mov	r3, r0
 8008f44:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b0d      	cmp	r3, #13
 8008f4c:	d104      	bne.n	8008f58 <AT_RequestReceiveData+0x60>
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b0a      	cmp	r3, #10
 8008f56:	d001      	beq.n	8008f5c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8008f58:	2304      	movs	r3, #4
 8008f5a:	e05a      	b.n	8009012 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	3b02      	subs	r3, #2
 8008f60:	617b      	str	r3, [r7, #20]
    p+=2;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3302      	adds	r3, #2
 8008f66:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2b07      	cmp	r3, #7
 8008f6c:	d94a      	bls.n	8009004 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8008f6e:	e002      	b.n	8008f76 <AT_RequestReceiveData+0x7e>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <AT_RequestReceiveData+0x92>
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4413      	add	r3, r2
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b15      	cmp	r3, #21
 8008f88:	d0f2      	beq.n	8008f70 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	3b08      	subs	r3, #8
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	491f      	ldr	r1, [pc, #124]	; (800901c <AT_RequestReceiveData+0x124>)
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f009 f856 	bl	8012050 <strstr>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b08      	subs	r3, #8
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	887a      	ldrh	r2, [r7, #2]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d202      	bcs.n	8008fc6 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	887a      	ldrh	r2, [r7, #2]
 8008fc4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6939      	ldr	r1, [r7, #16]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f008 f837 	bl	8011042 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e01c      	b.n	8009012 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3b04      	subs	r3, #4
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4413      	add	r3, r2
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	490f      	ldr	r1, [pc, #60]	; (8009020 <AT_RequestReceiveData+0x128>)
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f008 f81c 	bl	8011022 <memcmp>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008ff6:	2305      	movs	r3, #5
 8008ff8:	e00b      	b.n	8009012 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009000:	2305      	movs	r3, #5
 8009002:	e006      	b.n	8009012 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f113 0f04 	cmn.w	r3, #4
 800900a:	d101      	bne.n	8009010 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800900c:	2306      	movs	r3, #6
 800900e:	e000      	b.n	8009012 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009010:	2304      	movs	r3, #4
}
 8009012:	4618      	mov	r0, r3
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	bd90      	pop	{r4, r7, pc}
 800901a:	bf00      	nop
 800901c:	08014334 	.word	0x08014334
 8009020:	08014348 	.word	0x08014348

08009024 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800902c:	2302      	movs	r3, #2
 800902e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f247 5230 	movw	r2, #30000	; 0x7530
 8009036:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009040:	2000      	movs	r0, #0
 8009042:	4798      	blx	r3
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d113      	bne.n	8009072 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009050:	461a      	mov	r2, r3
 8009052:	490a      	ldr	r1, [pc, #40]	; (800907c <ES_WIFI_Init+0x58>)
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fe73 	bl	8008d40 <AT_ExecuteCommand>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff fd2b 	bl	8008ac8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	08014350 	.word	0x08014350

08009080 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <ES_WIFI_RegisterBusIO+0x2c>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <ES_WIFI_RegisterBusIO+0x2c>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <ES_WIFI_RegisterBusIO+0x2c>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <ES_WIFI_RegisterBusIO+0x2c>
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80090ac:	2302      	movs	r3, #2
 80090ae:	e014      	b.n	80090da <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	4932      	ldr	r1, [pc, #200]	; (80091c8 <ES_WIFI_Connect+0xe0>)
 8009100:	4618      	mov	r0, r3
 8009102:	f008 ff2f 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009112:	461a      	mov	r2, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff fe13 	bl	8008d40 <AT_ExecuteCommand>
 800911a:	4603      	mov	r3, r0
 800911c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d14b      	bne.n	80091bc <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4927      	ldr	r1, [pc, #156]	; (80091cc <ES_WIFI_Connect+0xe4>)
 800912e:	4618      	mov	r0, r3
 8009130:	f008 ff18 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009140:	461a      	mov	r2, r3
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff fdfc 	bl	8008d40 <AT_ExecuteCommand>
 8009148:	4603      	mov	r3, r0
 800914a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d134      	bne.n	80091bc <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	491b      	ldr	r1, [pc, #108]	; (80091d0 <ES_WIFI_Connect+0xe8>)
 8009164:	4618      	mov	r0, r3
 8009166:	f008 fefd 	bl	8011f64 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009176:	461a      	mov	r2, r3
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fde1 	bl	8008d40 <AT_ExecuteCommand>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d119      	bne.n	80091bc <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800918e:	4911      	ldr	r1, [pc, #68]	; (80091d4 <ES_WIFI_Connect+0xec>)
 8009190:	4618      	mov	r0, r3
 8009192:	f008 fee7 	bl	8011f64 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80091a2:	461a      	mov	r2, r3
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff fdcb 	bl	8008d40 <AT_ExecuteCommand>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d103      	bne.n	80091bc <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	08014368 	.word	0x08014368
 80091cc:	08014370 	.word	0x08014370
 80091d0:	08014378 	.word	0x08014378
 80091d4:	08014380 	.word	0x08014380

080091d8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80091e6:	4911      	ldr	r1, [pc, #68]	; (800922c <ES_WIFI_IsConnected+0x54>)
 80091e8:	4618      	mov	r0, r3
 80091ea:	f008 febb 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80091fa:	461a      	mov	r2, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff fd9f 	bl	8008d40 <AT_ExecuteCommand>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d108      	bne.n	800921e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	33d2      	adds	r3, #210	; 0xd2
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f7ff fd7b 	bl	8008d14 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	08014384 	.word	0x08014384

08009230 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800923e:	4910      	ldr	r1, [pc, #64]	; (8009280 <ES_WIFI_GetNetworkSettings+0x50>)
 8009240:	4618      	mov	r0, r3
 8009242:	f008 fe8f 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009252:	461a      	mov	r2, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fd73 	bl	8008d40 <AT_ExecuteCommand>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d108      	bne.n	8009276 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	338d      	adds	r3, #141	; 0x8d
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f7ff fc9f 	bl	8008bb4 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	0801438c 	.word	0x0801438c

08009284 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009294:	4912      	ldr	r1, [pc, #72]	; (80092e0 <ES_WIFI_GetMACAddress+0x5c>)
 8009296:	4618      	mov	r0, r3
 8009298:	f008 fe64 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80092a8:	461a      	mov	r2, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff fd48 	bl	8008d40 <AT_ExecuteCommand>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10c      	bne.n	80092d4 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80092c0:	3302      	adds	r3, #2
 80092c2:	4908      	ldr	r1, [pc, #32]	; (80092e4 <ES_WIFI_GetMACAddress+0x60>)
 80092c4:	4618      	mov	r0, r3
 80092c6:	f008 fed9 	bl	801207c <strtok>
 80092ca:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	68b8      	ldr	r0, [r7, #8]
 80092d0:	f7ff fba4 	bl	8008a1c <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	080143dc 	.word	0x080143dc
 80092e4:	080143e0 	.word	0x080143e0

080092e8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80092e8:	b590      	push	{r4, r7, lr}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <ES_WIFI_StartClientConnection+0x1e>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2b03      	cmp	r3, #3
 8009304:	d105      	bne.n	8009312 <ES_WIFI_StartClientConnection+0x2a>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <ES_WIFI_StartClientConnection+0x2a>
 800930e:	2302      	movs	r3, #2
 8009310:	e0c1      	b.n	8009496 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	461a      	mov	r2, r3
 800931e:	4960      	ldr	r1, [pc, #384]	; (80094a0 <ES_WIFI_StartClientConnection+0x1b8>)
 8009320:	f008 fe20 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009330:	461a      	mov	r2, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff fd04 	bl	8008d40 <AT_ExecuteCommand>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d114      	bne.n	800936c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	4955      	ldr	r1, [pc, #340]	; (80094a4 <ES_WIFI_StartClientConnection+0x1bc>)
 8009350:	f008 fe08 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009360:	461a      	mov	r2, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff fcec 	bl	8008d40 <AT_ExecuteCommand>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d114      	bne.n	800939c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	889b      	ldrh	r3, [r3, #4]
 800937c:	461a      	mov	r2, r3
 800937e:	494a      	ldr	r1, [pc, #296]	; (80094a8 <ES_WIFI_StartClientConnection+0x1c0>)
 8009380:	f008 fdf0 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009390:	461a      	mov	r2, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff fcd4 	bl	8008d40 <AT_ExecuteCommand>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d11c      	bne.n	80093dc <ES_WIFI_StartClientConnection+0xf4>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <ES_WIFI_StartClientConnection+0xca>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d114      	bne.n	80093dc <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	461a      	mov	r2, r3
 80093be:	493b      	ldr	r1, [pc, #236]	; (80094ac <ES_WIFI_StartClientConnection+0x1c4>)
 80093c0:	f008 fdd0 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093d0:	461a      	mov	r2, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fcb4 	bl	8008d40 <AT_ExecuteCommand>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d128      	bne.n	8009434 <ES_WIFI_StartClientConnection+0x14c>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <ES_WIFI_StartClientConnection+0x10a>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d120      	bne.n	8009434 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	799b      	ldrb	r3, [r3, #6]
 80093fc:	4619      	mov	r1, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	79db      	ldrb	r3, [r3, #7]
 8009402:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8009408:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	9200      	str	r2, [sp, #0]
 8009412:	4623      	mov	r3, r4
 8009414:	460a      	mov	r2, r1
 8009416:	4926      	ldr	r1, [pc, #152]	; (80094b0 <ES_WIFI_StartClientConnection+0x1c8>)
 8009418:	f008 fda4 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009428:	461a      	mov	r2, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff fc88 	bl	8008d40 <AT_ExecuteCommand>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d116      	bne.n	8009468 <ES_WIFI_StartClientConnection+0x180>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d112      	bne.n	8009468 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009448:	491a      	ldr	r1, [pc, #104]	; (80094b4 <ES_WIFI_StartClientConnection+0x1cc>)
 800944a:	4618      	mov	r0, r3
 800944c:	f008 fd8a 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800945c:	461a      	mov	r2, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fc6e 	bl	8008d40 <AT_ExecuteCommand>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d112      	bne.n	8009494 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009474:	4910      	ldr	r1, [pc, #64]	; (80094b8 <ES_WIFI_StartClientConnection+0x1d0>)
 8009476:	4618      	mov	r0, r3
 8009478:	f008 fd74 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009488:	461a      	mov	r2, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fc58 	bl	8008d40 <AT_ExecuteCommand>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bd90      	pop	{r4, r7, pc}
 800949e:	bf00      	nop
 80094a0:	08014444 	.word	0x08014444
 80094a4:	0801444c 	.word	0x0801444c
 80094a8:	08014454 	.word	0x08014454
 80094ac:	0801445c 	.word	0x0801445c
 80094b0:	08014464 	.word	0x08014464
 80094b4:	08014474 	.word	0x08014474
 80094b8:	0801447c 	.word	0x0801447c

080094bc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	72fb      	strb	r3, [r7, #11]
 80094cc:	4613      	mov	r3, r2
 80094ce:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80094d0:	2302      	movs	r3, #2
 80094d2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80094da:	2301      	movs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e001      	b.n	80094e4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80094e4:	893b      	ldrh	r3, [r7, #8]
 80094e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80094ea:	d302      	bcc.n	80094f2 <ES_WIFI_SendData+0x36>
 80094ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80094f0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	893a      	ldrh	r2, [r7, #8]
 80094f6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80094fe:	7afa      	ldrb	r2, [r7, #11]
 8009500:	4942      	ldr	r1, [pc, #264]	; (800960c <ES_WIFI_SendData+0x150>)
 8009502:	4618      	mov	r0, r3
 8009504:	f008 fd2e 	bl	8011f64 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009514:	461a      	mov	r2, r3
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fc12 	bl	8008d40 <AT_ExecuteCommand>
 800951c:	4603      	mov	r3, r0
 800951e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8009520:	7cfb      	ldrb	r3, [r7, #19]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d15e      	bne.n	80095e4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4938      	ldr	r1, [pc, #224]	; (8009610 <ES_WIFI_SendData+0x154>)
 8009530:	4618      	mov	r0, r3
 8009532:	f008 fd17 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009542:	461a      	mov	r2, r3
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff fbfb 	bl	8008d40 <AT_ExecuteCommand>
 800954a:	4603      	mov	r3, r0
 800954c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800954e:	7cfb      	ldrb	r3, [r7, #19]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d13d      	bne.n	80095d0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800955a:	893a      	ldrh	r2, [r7, #8]
 800955c:	492d      	ldr	r1, [pc, #180]	; (8009614 <ES_WIFI_SendData+0x158>)
 800955e:	4618      	mov	r0, r3
 8009560:	f008 fd00 	bl	8011f64 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009570:	893a      	ldrh	r2, [r7, #8]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fc47 	bl	8008e0c <AT_RequestSendData>
 800957e:	4603      	mov	r3, r0
 8009580:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8009582:	7cfb      	ldrb	r3, [r7, #19]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d119      	bne.n	80095bc <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800958e:	4922      	ldr	r1, [pc, #136]	; (8009618 <ES_WIFI_SendData+0x15c>)
 8009590:	4618      	mov	r0, r3
 8009592:	f008 fd5d 	bl	8012050 <strstr>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02c      	beq.n	80095f6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800959c:	f640 0267 	movw	r2, #2151	; 0x867
 80095a0:	491e      	ldr	r1, [pc, #120]	; (800961c <ES_WIFI_SendData+0x160>)
 80095a2:	481f      	ldr	r0, [pc, #124]	; (8009620 <ES_WIFI_SendData+0x164>)
 80095a4:	f008 fbd6 	bl	8011d54 <iprintf>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80095ae:	4619      	mov	r1, r3
 80095b0:	481c      	ldr	r0, [pc, #112]	; (8009624 <ES_WIFI_SendData+0x168>)
 80095b2:	f008 fbcf 	bl	8011d54 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80095b6:	2302      	movs	r3, #2
 80095b8:	74fb      	strb	r3, [r7, #19]
 80095ba:	e01c      	b.n	80095f6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80095bc:	f640 026d 	movw	r2, #2157	; 0x86d
 80095c0:	4916      	ldr	r1, [pc, #88]	; (800961c <ES_WIFI_SendData+0x160>)
 80095c2:	4817      	ldr	r0, [pc, #92]	; (8009620 <ES_WIFI_SendData+0x164>)
 80095c4:	f008 fbc6 	bl	8011d54 <iprintf>
 80095c8:	4817      	ldr	r0, [pc, #92]	; (8009628 <ES_WIFI_SendData+0x16c>)
 80095ca:	f008 fc49 	bl	8011e60 <puts>
 80095ce:	e012      	b.n	80095f6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80095d0:	f640 0272 	movw	r2, #2162	; 0x872
 80095d4:	4911      	ldr	r1, [pc, #68]	; (800961c <ES_WIFI_SendData+0x160>)
 80095d6:	4812      	ldr	r0, [pc, #72]	; (8009620 <ES_WIFI_SendData+0x164>)
 80095d8:	f008 fbbc 	bl	8011d54 <iprintf>
 80095dc:	4813      	ldr	r0, [pc, #76]	; (800962c <ES_WIFI_SendData+0x170>)
 80095de:	f008 fc3f 	bl	8011e60 <puts>
 80095e2:	e008      	b.n	80095f6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80095e4:	f640 0277 	movw	r2, #2167	; 0x877
 80095e8:	490c      	ldr	r1, [pc, #48]	; (800961c <ES_WIFI_SendData+0x160>)
 80095ea:	480d      	ldr	r0, [pc, #52]	; (8009620 <ES_WIFI_SendData+0x164>)
 80095ec:	f008 fbb2 	bl	8011d54 <iprintf>
 80095f0:	480f      	ldr	r0, [pc, #60]	; (8009630 <ES_WIFI_SendData+0x174>)
 80095f2:	f008 fc35 	bl	8011e60 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80095f6:	7cfb      	ldrb	r3, [r7, #19]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d102      	bne.n	8009602 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2200      	movs	r2, #0
 8009600:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8009602:	7cfb      	ldrb	r3, [r7, #19]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	08014444 	.word	0x08014444
 8009610:	08014608 	.word	0x08014608
 8009614:	08014610 	.word	0x08014610
 8009618:	0801461c 	.word	0x0801461c
 800961c:	080144d4 	.word	0x080144d4
 8009620:	080144fc 	.word	0x080144fc
 8009624:	08014624 	.word	0x08014624
 8009628:	08014640 	.word	0x08014640
 800962c:	0801465c 	.word	0x0801465c
 8009630:	08014670 	.word	0x08014670

08009634 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	607a      	str	r2, [r7, #4]
 800963e:	461a      	mov	r2, r3
 8009640:	460b      	mov	r3, r1
 8009642:	72fb      	strb	r3, [r7, #11]
 8009644:	4613      	mov	r3, r2
 8009646:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8009648:	2302      	movs	r3, #2
 800964a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8009652:	2301      	movs	r3, #1
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e001      	b.n	800965c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800965c:	893b      	ldrh	r3, [r7, #8]
 800965e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8009662:	f200 808b 	bhi.w	800977c <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800966c:	7afa      	ldrb	r2, [r7, #11]
 800966e:	4946      	ldr	r1, [pc, #280]	; (8009788 <ES_WIFI_ReceiveData+0x154>)
 8009670:	4618      	mov	r0, r3
 8009672:	f008 fc77 	bl	8011f64 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009682:	461a      	mov	r2, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fb5b 	bl	8008d40 <AT_ExecuteCommand>
 800968a:	4603      	mov	r3, r0
 800968c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800968e:	7cfb      	ldrb	r3, [r7, #19]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d165      	bne.n	8009760 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800969a:	893a      	ldrh	r2, [r7, #8]
 800969c:	493b      	ldr	r1, [pc, #236]	; (800978c <ES_WIFI_ReceiveData+0x158>)
 800969e:	4618      	mov	r0, r3
 80096a0:	f008 fc60 	bl	8011f64 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80096b0:	461a      	mov	r2, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fb44 	bl	8008d40 <AT_ExecuteCommand>
 80096b8:	4603      	mov	r3, r0
 80096ba:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 80096bc:	7cfb      	ldrb	r3, [r7, #19]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d141      	bne.n	8009746 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	4931      	ldr	r1, [pc, #196]	; (8009790 <ES_WIFI_ReceiveData+0x15c>)
 80096cc:	4618      	mov	r0, r3
 80096ce:	f008 fc49 	bl	8011f64 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80096de:	461a      	mov	r2, r3
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7ff fb2d 	bl	8008d40 <AT_ExecuteCommand>
 80096e6:	4603      	mov	r3, r0
 80096e8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80096ea:	7cfb      	ldrb	r3, [r7, #19]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d120      	bne.n	8009732 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80096f6:	4927      	ldr	r1, [pc, #156]	; (8009794 <ES_WIFI_ReceiveData+0x160>)
 80096f8:	4618      	mov	r0, r3
 80096fa:	f008 fc33 	bl	8011f64 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009704:	893a      	ldrh	r2, [r7, #8]
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff fbf2 	bl	8008ef8 <AT_RequestReceiveData>
 8009714:	4603      	mov	r3, r0
 8009716:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8009718:	7cfb      	ldrb	r3, [r7, #19]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d02e      	beq.n	800977c <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800971e:	f640 1208 	movw	r2, #2312	; 0x908
 8009722:	491d      	ldr	r1, [pc, #116]	; (8009798 <ES_WIFI_ReceiveData+0x164>)
 8009724:	481d      	ldr	r0, [pc, #116]	; (800979c <ES_WIFI_ReceiveData+0x168>)
 8009726:	f008 fb15 	bl	8011d54 <iprintf>
 800972a:	481d      	ldr	r0, [pc, #116]	; (80097a0 <ES_WIFI_ReceiveData+0x16c>)
 800972c:	f008 fb98 	bl	8011e60 <puts>
 8009730:	e024      	b.n	800977c <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8009732:	f640 120d 	movw	r2, #2317	; 0x90d
 8009736:	4918      	ldr	r1, [pc, #96]	; (8009798 <ES_WIFI_ReceiveData+0x164>)
 8009738:	4818      	ldr	r0, [pc, #96]	; (800979c <ES_WIFI_ReceiveData+0x168>)
 800973a:	f008 fb0b 	bl	8011d54 <iprintf>
 800973e:	4819      	ldr	r0, [pc, #100]	; (80097a4 <ES_WIFI_ReceiveData+0x170>)
 8009740:	f008 fb8e 	bl	8011e60 <puts>
 8009744:	e01a      	b.n	800977c <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8009746:	f640 1212 	movw	r2, #2322	; 0x912
 800974a:	4913      	ldr	r1, [pc, #76]	; (8009798 <ES_WIFI_ReceiveData+0x164>)
 800974c:	4813      	ldr	r0, [pc, #76]	; (800979c <ES_WIFI_ReceiveData+0x168>)
 800974e:	f008 fb01 	bl	8011d54 <iprintf>
 8009752:	4815      	ldr	r0, [pc, #84]	; (80097a8 <ES_WIFI_ReceiveData+0x174>)
 8009754:	f008 fb84 	bl	8011e60 <puts>
        *Receivedlen = 0;
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	2200      	movs	r2, #0
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	e00d      	b.n	800977c <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8009760:	f640 1218 	movw	r2, #2328	; 0x918
 8009764:	490c      	ldr	r1, [pc, #48]	; (8009798 <ES_WIFI_ReceiveData+0x164>)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <ES_WIFI_ReceiveData+0x168>)
 8009768:	f008 faf4 	bl	8011d54 <iprintf>
 800976c:	480f      	ldr	r0, [pc, #60]	; (80097ac <ES_WIFI_ReceiveData+0x178>)
 800976e:	f008 fb77 	bl	8011e60 <puts>
      issue15++;
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <ES_WIFI_ReceiveData+0x17c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3301      	adds	r3, #1
 8009778:	4a0d      	ldr	r2, [pc, #52]	; (80097b0 <ES_WIFI_ReceiveData+0x17c>)
 800977a:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800977c:	7cfb      	ldrb	r3, [r7, #19]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	08014444 	.word	0x08014444
 800978c:	08014694 	.word	0x08014694
 8009790:	0801469c 	.word	0x0801469c
 8009794:	080146a4 	.word	0x080146a4
 8009798:	080144d4 	.word	0x080144d4
 800979c:	080144fc 	.word	0x080144fc
 80097a0:	080146a8 	.word	0x080146a8
 80097a4:	080146c8 	.word	0x080146c8
 80097a8:	080146e0 	.word	0x080146e0
 80097ac:	08014700 	.word	0x08014700
 80097b0:	20000d50 	.word	0x20000d50

080097b4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08c      	sub	sp, #48	; 0x30
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80097bc:	4b56      	ldr	r3, [pc, #344]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	4a55      	ldr	r2, [pc, #340]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c6:	6593      	str	r3, [r2, #88]	; 0x58
 80097c8:	4b53      	ldr	r3, [pc, #332]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d0:	61bb      	str	r3, [r7, #24]
 80097d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097d4:	4b50      	ldr	r3, [pc, #320]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d8:	4a4f      	ldr	r2, [pc, #316]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097da:	f043 0302 	orr.w	r3, r3, #2
 80097de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097e0:	4b4d      	ldr	r3, [pc, #308]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097ec:	4b4a      	ldr	r3, [pc, #296]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f0:	4a49      	ldr	r2, [pc, #292]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097f2:	f043 0304 	orr.w	r3, r3, #4
 80097f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097f8:	4b47      	ldr	r3, [pc, #284]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 80097fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	613b      	str	r3, [r7, #16]
 8009802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009804:	4b44      	ldr	r3, [pc, #272]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 8009806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009808:	4a43      	ldr	r2, [pc, #268]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 800980a:	f043 0310 	orr.w	r3, r3, #16
 800980e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009810:	4b41      	ldr	r3, [pc, #260]	; (8009918 <SPI_WIFI_MspInit+0x164>)
 8009812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009822:	483e      	ldr	r0, [pc, #248]	; (800991c <SPI_WIFI_MspInit+0x168>)
 8009824:	f7f9 fd48 	bl	80032b8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8009828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800982c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800982e:	2301      	movs	r3, #1
 8009830:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009836:	2300      	movs	r3, #0
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800983a:	f107 031c 	add.w	r3, r7, #28
 800983e:	4619      	mov	r1, r3
 8009840:	4836      	ldr	r0, [pc, #216]	; (800991c <SPI_WIFI_MspInit+0x168>)
 8009842:	f7f9 fa83 	bl	8002d4c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8009846:	2302      	movs	r3, #2
 8009848:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800984a:	4b35      	ldr	r3, [pc, #212]	; (8009920 <SPI_WIFI_MspInit+0x16c>)
 800984c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009852:	2300      	movs	r3, #0
 8009854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009856:	f107 031c 	add.w	r3, r7, #28
 800985a:	4619      	mov	r1, r3
 800985c:	4831      	ldr	r0, [pc, #196]	; (8009924 <SPI_WIFI_MspInit+0x170>)
 800985e:	f7f9 fa75 	bl	8002d4c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8009862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009866:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009868:	2301      	movs	r3, #1
 800986a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800986c:	2300      	movs	r3, #0
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009870:	2300      	movs	r3, #0
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009878:	f107 031c 	add.w	r3, r7, #28
 800987c:	4619      	mov	r1, r3
 800987e:	4829      	ldr	r0, [pc, #164]	; (8009924 <SPI_WIFI_MspInit+0x170>)
 8009880:	f7f9 fa64 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8009884:	2201      	movs	r2, #1
 8009886:	2101      	movs	r1, #1
 8009888:	4826      	ldr	r0, [pc, #152]	; (8009924 <SPI_WIFI_MspInit+0x170>)
 800988a:	f7f9 fd15 	bl	80032b8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800988e:	2301      	movs	r3, #1
 8009890:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009892:	2301      	movs	r3, #1
 8009894:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009896:	2300      	movs	r3, #0
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800989a:	2301      	movs	r3, #1
 800989c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800989e:	f107 031c 	add.w	r3, r7, #28
 80098a2:	4619      	mov	r1, r3
 80098a4:	481f      	ldr	r0, [pc, #124]	; (8009924 <SPI_WIFI_MspInit+0x170>)
 80098a6:	f7f9 fa51 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80098aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ae:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80098b0:	2302      	movs	r3, #2
 80098b2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80098b8:	2301      	movs	r3, #1
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80098bc:	2306      	movs	r3, #6
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80098c0:	f107 031c 	add.w	r3, r7, #28
 80098c4:	4619      	mov	r1, r3
 80098c6:	4818      	ldr	r0, [pc, #96]	; (8009928 <SPI_WIFI_MspInit+0x174>)
 80098c8:	f7f9 fa40 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80098cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80098d2:	2302      	movs	r3, #2
 80098d4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80098da:	2301      	movs	r3, #1
 80098dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80098de:	2306      	movs	r3, #6
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80098e2:	f107 031c 	add.w	r3, r7, #28
 80098e6:	4619      	mov	r1, r3
 80098e8:	480f      	ldr	r0, [pc, #60]	; (8009928 <SPI_WIFI_MspInit+0x174>)
 80098ea:	f7f9 fa2f 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80098ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80098f4:	2302      	movs	r3, #2
 80098f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80098f8:	2301      	movs	r3, #1
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80098fc:	2301      	movs	r3, #1
 80098fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009900:	2306      	movs	r3, #6
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8009904:	f107 031c 	add.w	r3, r7, #28
 8009908:	4619      	mov	r1, r3
 800990a:	4807      	ldr	r0, [pc, #28]	; (8009928 <SPI_WIFI_MspInit+0x174>)
 800990c:	f7f9 fa1e 	bl	8002d4c <HAL_GPIO_Init>
}
 8009910:	bf00      	nop
 8009912:	3730      	adds	r7, #48	; 0x30
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40021000 	.word	0x40021000
 800991c:	48000400 	.word	0x48000400
 8009920:	10110000 	.word	0x10110000
 8009924:	48001000 	.word	0x48001000
 8009928:	48000800 	.word	0x48000800

0800992c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d145      	bne.n	80099cc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8009940:	4b27      	ldr	r3, [pc, #156]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009942:	4a28      	ldr	r2, [pc, #160]	; (80099e4 <SPI_WIFI_Init+0xb8>)
 8009944:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8009946:	4826      	ldr	r0, [pc, #152]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009948:	f7ff ff34 	bl	80097b4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800994c:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 800994e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009952:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8009954:	4b22      	ldr	r3, [pc, #136]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009956:	2200      	movs	r2, #0
 8009958:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800995a:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 800995c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009960:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8009962:	4b1f      	ldr	r3, [pc, #124]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009964:	2200      	movs	r2, #0
 8009966:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8009968:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 800996a:	2200      	movs	r2, #0
 800996c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800996e:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009974:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8009976:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009978:	2210      	movs	r2, #16
 800997a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800997c:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 800997e:	2200      	movs	r2, #0
 8009980:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8009982:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009984:	2200      	movs	r2, #0
 8009986:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8009988:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 800998a:	2200      	movs	r2, #0
 800998c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009990:	2200      	movs	r2, #0
 8009992:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8009994:	4812      	ldr	r0, [pc, #72]	; (80099e0 <SPI_WIFI_Init+0xb4>)
 8009996:	f7fb ffd3 	bl	8005940 <HAL_SPI_Init>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80099a0:	f04f 33ff 	mov.w	r3, #4294967295
 80099a4:	e018      	b.n	80099d8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	2007      	movs	r0, #7
 80099ac:	f7f9 f848 	bl	8002a40 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80099b0:	2007      	movs	r0, #7
 80099b2:	f7f9 f861 	bl	8002a78 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	2033      	movs	r0, #51	; 0x33
 80099bc:	f7f9 f840 	bl	8002a40 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80099c0:	2033      	movs	r0, #51	; 0x33
 80099c2:	f7f9 f859 	bl	8002a78 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80099c6:	200a      	movs	r0, #10
 80099c8:	f000 f9fe 	bl	8009dc8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80099cc:	f000 f80c 	bl	80099e8 <SPI_WIFI_ResetModule>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]

  return rc;
 80099d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000d54 	.word	0x20000d54
 80099e4:	40003c00 	.word	0x40003c00

080099e8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80099ee:	f7f8 ff1b 	bl	8002828 <HAL_GetTick>
 80099f2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80099f8:	2200      	movs	r2, #0
 80099fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80099fe:	4830      	ldr	r0, [pc, #192]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a00:	f7f9 fc5a 	bl	80032b8 <HAL_GPIO_WritePin>
 8009a04:	200a      	movs	r0, #10
 8009a06:	f7f8 ff1b 	bl	8002840 <HAL_Delay>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a10:	482b      	ldr	r0, [pc, #172]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a12:	f7f9 fc51 	bl	80032b8 <HAL_GPIO_WritePin>
 8009a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a1a:	f7f8 ff11 	bl	8002840 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2101      	movs	r1, #1
 8009a22:	4827      	ldr	r0, [pc, #156]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a24:	f7f9 fc48 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009a28:	200f      	movs	r0, #15
 8009a2a:	f000 f9cd 	bl	8009dc8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8009a2e:	e020      	b.n	8009a72 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	463a      	mov	r2, r7
 8009a34:	18d1      	adds	r1, r2, r3
 8009a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	4821      	ldr	r0, [pc, #132]	; (8009ac4 <SPI_WIFI_ResetModule+0xdc>)
 8009a3e:	f7fc f84a 	bl	8005ad6 <HAL_SPI_Receive>
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	3302      	adds	r3, #2
 8009a4a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8009a4c:	f7f8 feec 	bl	8002828 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5a:	d202      	bcs.n	8009a62 <SPI_WIFI_ResetModule+0x7a>
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8009a62:	2201      	movs	r2, #1
 8009a64:	2101      	movs	r1, #1
 8009a66:	4816      	ldr	r0, [pc, #88]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a68:	f7f9 fc26 	bl	80032b8 <HAL_GPIO_WritePin>
      return -1;
 8009a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a70:	e021      	b.n	8009ab6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8009a72:	2102      	movs	r1, #2
 8009a74:	4812      	ldr	r0, [pc, #72]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a76:	f7f9 fc07 	bl	8003288 <HAL_GPIO_ReadPin>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d0d7      	beq.n	8009a30 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8009a80:	2201      	movs	r2, #1
 8009a82:	2101      	movs	r1, #1
 8009a84:	480e      	ldr	r0, [pc, #56]	; (8009ac0 <SPI_WIFI_ResetModule+0xd8>)
 8009a86:	f7f9 fc17 	bl	80032b8 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8009a8a:	783b      	ldrb	r3, [r7, #0]
 8009a8c:	2b15      	cmp	r3, #21
 8009a8e:	d10e      	bne.n	8009aae <SPI_WIFI_ResetModule+0xc6>
 8009a90:	787b      	ldrb	r3, [r7, #1]
 8009a92:	2b15      	cmp	r3, #21
 8009a94:	d10b      	bne.n	8009aae <SPI_WIFI_ResetModule+0xc6>
 8009a96:	78bb      	ldrb	r3, [r7, #2]
 8009a98:	2b0d      	cmp	r3, #13
 8009a9a:	d108      	bne.n	8009aae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8009a9e:	2b0a      	cmp	r3, #10
 8009aa0:	d105      	bne.n	8009aae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8009aa2:	793b      	ldrb	r3, [r7, #4]
 8009aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8009aa6:	d102      	bne.n	8009aae <SPI_WIFI_ResetModule+0xc6>
 8009aa8:	797b      	ldrb	r3, [r7, #5]
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d002      	beq.n	8009ab4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8009aae:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab2:	e000      	b.n	8009ab6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	48001000 	.word	0x48001000
 8009ac4:	20000d54 	.word	0x20000d54

08009ac8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8009acc:	4802      	ldr	r0, [pc, #8]	; (8009ad8 <SPI_WIFI_DeInit+0x10>)
 8009ace:	f7fb ffda 	bl	8005a86 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000d54 	.word	0x20000d54

08009adc <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8009ae4:	f7f8 fea0 	bl	8002828 <HAL_GetTick>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8009aec:	e00a      	b.n	8009b04 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009aee:	f7f8 fe9b 	bl	8002828 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d902      	bls.n	8009b04 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295
 8009b02:	e007      	b.n	8009b14 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8009b04:	2102      	movs	r1, #2
 8009b06:	4805      	ldr	r0, [pc, #20]	; (8009b1c <wait_cmddata_rdy_high+0x40>)
 8009b08:	f7f9 fbbe 	bl	8003288 <HAL_GPIO_ReadPin>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d1ed      	bne.n	8009aee <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	48001000 	.word	0x48001000

08009b20 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009b28:	f7f8 fe7e 	bl	8002828 <HAL_GetTick>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8009b30:	e00a      	b.n	8009b48 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009b32:	f7f8 fe79 	bl	8002828 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	1ad2      	subs	r2, r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d902      	bls.n	8009b48 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8009b42:	f04f 33ff 	mov.w	r3, #4294967295
 8009b46:	e004      	b.n	8009b52 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8009b48:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <wait_cmddata_rdy_rising_event+0x3c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d0f0      	beq.n	8009b32 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8009b50:	2300      	movs	r3, #0
#endif
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000dc0 	.word	0x20000dc0

08009b60 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009b68:	f7f8 fe5e 	bl	8002828 <HAL_GetTick>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8009b70:	e00a      	b.n	8009b88 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009b72:	f7f8 fe59 	bl	8002828 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d902      	bls.n	8009b88 <wait_spi_rx_event+0x28>
    {
      return -1;
 8009b82:	f04f 33ff 	mov.w	r3, #4294967295
 8009b86:	e004      	b.n	8009b92 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <wait_spi_rx_event+0x3c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d0f0      	beq.n	8009b72 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8009b90:	2300      	movs	r3, #0
#endif
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000db8 	.word	0x20000db8

08009ba0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009ba8:	f7f8 fe3e 	bl	8002828 <HAL_GetTick>
 8009bac:	4603      	mov	r3, r0
 8009bae:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8009bb0:	e00a      	b.n	8009bc8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009bb2:	f7f8 fe39 	bl	8002828 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d902      	bls.n	8009bc8 <wait_spi_tx_event+0x28>
    {
      return -1;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc6:	e004      	b.n	8009bd2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <wait_spi_tx_event+0x3c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d0f0      	beq.n	8009bb2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8009bd0:	2300      	movs	r3, #0
#endif
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000dbc 	.word	0x20000dbc

08009be0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	460b      	mov	r3, r1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4834      	ldr	r0, [pc, #208]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009bf8:	f7f9 fb5e 	bl	80032b8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8009bfc:	2003      	movs	r0, #3
 8009bfe:	f000 f8e3 	bl	8009dc8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff ff8b 	bl	8009b20 <wait_cmddata_rdy_rising_event>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	da02      	bge.n	8009c16 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009c10:	f06f 0302 	mvn.w	r3, #2
 8009c14:	e054      	b.n	8009cc0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009c16:	2200      	movs	r2, #0
 8009c18:	2101      	movs	r1, #1
 8009c1a:	482b      	ldr	r0, [pc, #172]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009c1c:	f7f9 fb4c 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009c20:	200f      	movs	r0, #15
 8009c22:	f000 f8d1 	bl	8009dc8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8009c26:	e03d      	b.n	8009ca4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8009c28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009c2c:	897b      	ldrh	r3, [r7, #10]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	db02      	blt.n	8009c38 <SPI_WIFI_ReceiveData+0x58>
 8009c32:	897b      	ldrh	r3, [r7, #10]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d13c      	bne.n	8009cb2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8009c38:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <SPI_WIFI_ReceiveData+0xec>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8009c3e:	f107 0314 	add.w	r3, r7, #20
 8009c42:	2201      	movs	r2, #1
 8009c44:	4619      	mov	r1, r3
 8009c46:	4822      	ldr	r0, [pc, #136]	; (8009cd0 <SPI_WIFI_ReceiveData+0xf0>)
 8009c48:	f7fc fb16 	bl	8006278 <HAL_SPI_Receive_IT>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d007      	beq.n	8009c62 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8009c52:	2201      	movs	r2, #1
 8009c54:	2101      	movs	r1, #1
 8009c56:	481c      	ldr	r0, [pc, #112]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009c58:	f7f9 fb2e 	bl	80032b8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8009c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c60:	e02e      	b.n	8009cc0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff ff7b 	bl	8009b60 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8009c6a:	7d3a      	ldrb	r2, [r7, #20]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	7d7a      	ldrb	r2, [r7, #21]
 8009c76:	701a      	strb	r2, [r3, #0]
      length += 2;
 8009c78:	8afb      	ldrh	r3, [r7, #22]
 8009c7a:	3302      	adds	r3, #2
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3302      	adds	r3, #2
 8009c84:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8009c86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c8e:	db09      	blt.n	8009ca4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8009c90:	2201      	movs	r2, #1
 8009c92:	2101      	movs	r1, #1
 8009c94:	480c      	ldr	r0, [pc, #48]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009c96:	f7f9 fb0f 	bl	80032b8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8009c9a:	f7ff fea5 	bl	80099e8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8009c9e:	f06f 0303 	mvn.w	r3, #3
 8009ca2:	e00d      	b.n	8009cc0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8009ca4:	2102      	movs	r1, #2
 8009ca6:	4808      	ldr	r0, [pc, #32]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009ca8:	f7f9 faee 	bl	8003288 <HAL_GPIO_ReadPin>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d0ba      	beq.n	8009c28 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <SPI_WIFI_ReceiveData+0xe8>)
 8009cb8:	f7f9 fafe 	bl	80032b8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8009cbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	48001000 	.word	0x48001000
 8009ccc:	20000db8 	.word	0x20000db8
 8009cd0:	20000d54 	.word	0x20000d54

08009cd4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff fef9 	bl	8009adc <wait_cmddata_rdy_high>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da02      	bge.n	8009cf6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	e04f      	b.n	8009d96 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <SPI_WIFI_SendData+0xcc>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2101      	movs	r1, #1
 8009d00:	4828      	ldr	r0, [pc, #160]	; (8009da4 <SPI_WIFI_SendData+0xd0>)
 8009d02:	f7f9 fad9 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009d06:	200f      	movs	r0, #15
 8009d08:	f000 f85e 	bl	8009dc8 <SPI_WIFI_DelayUs>
  if (len > 1)
 8009d0c:	897b      	ldrh	r3, [r7, #10]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d919      	bls.n	8009d46 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8009d12:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <SPI_WIFI_SendData+0xd4>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8009d18:	897b      	ldrh	r3, [r7, #10]
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68f9      	ldr	r1, [r7, #12]
 8009d22:	4822      	ldr	r0, [pc, #136]	; (8009dac <SPI_WIFI_SendData+0xd8>)
 8009d24:	f7fc fa1a 	bl	800615c <HAL_SPI_Transmit_IT>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8009d2e:	2201      	movs	r2, #1
 8009d30:	2101      	movs	r1, #1
 8009d32:	481c      	ldr	r0, [pc, #112]	; (8009da4 <SPI_WIFI_SendData+0xd0>)
 8009d34:	f7f9 fac0 	bl	80032b8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3c:	e02b      	b.n	8009d96 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff ff2d 	bl	8009ba0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8009d46:	897b      	ldrh	r3, [r7, #10]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d020      	beq.n	8009d92 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8009d50:	897b      	ldrh	r3, [r7, #10]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8009d5c:	230a      	movs	r3, #10
 8009d5e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <SPI_WIFI_SendData+0xd4>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8009d66:	f107 0314 	add.w	r3, r7, #20
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	480f      	ldr	r0, [pc, #60]	; (8009dac <SPI_WIFI_SendData+0xd8>)
 8009d70:	f7fc f9f4 	bl	800615c <HAL_SPI_Transmit_IT>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	4809      	ldr	r0, [pc, #36]	; (8009da4 <SPI_WIFI_SendData+0xd0>)
 8009d80:	f7f9 fa9a 	bl	80032b8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	e005      	b.n	8009d96 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff07 	bl	8009ba0 <wait_spi_tx_event>
    
  }
  return len;
 8009d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000dc0 	.word	0x20000dc0
 8009da4:	48001000 	.word	0x48001000
 8009da8:	20000dbc 	.word	0x20000dbc
 8009dac:	20000d54 	.word	0x20000d54

08009db0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7f8 fd41 	bl	8002840 <HAL_Delay>
}
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8009dd8:	4b20      	ldr	r3, [pc, #128]	; (8009e5c <SPI_WIFI_DelayUs+0x94>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d122      	bne.n	8009e26 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8009de0:	4b1f      	ldr	r3, [pc, #124]	; (8009e60 <SPI_WIFI_DelayUs+0x98>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a1f      	ldr	r2, [pc, #124]	; (8009e64 <SPI_WIFI_DelayUs+0x9c>)
 8009de6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dea:	099b      	lsrs	r3, r3, #6
 8009dec:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8009df6:	f7f8 fd17 	bl	8002828 <HAL_GetTick>
 8009dfa:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8009dfc:	e002      	b.n	8009e04 <SPI_WIFI_DelayUs+0x3c>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	60bb      	str	r3, [r7, #8]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f9      	bne.n	8009dfe <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8009e0a:	f7f8 fd0d 	bl	8002828 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	4a11      	ldr	r2, [pc, #68]	; (8009e5c <SPI_WIFI_DelayUs+0x94>)
 8009e16:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009e18:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <SPI_WIFI_DelayUs+0x94>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <SPI_WIFI_DelayUs+0x5e>
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <SPI_WIFI_DelayUs+0x94>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8009e26:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <SPI_WIFI_DelayUs+0x98>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a0f      	ldr	r2, [pc, #60]	; (8009e68 <SPI_WIFI_DelayUs+0xa0>)
 8009e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e30:	0c9a      	lsrs	r2, r3, #18
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <SPI_WIFI_DelayUs+0x94>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	fb02 f303 	mul.w	r3, r2, r3
 8009e44:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8009e46:	e002      	b.n	8009e4e <SPI_WIFI_DelayUs+0x86>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	60bb      	str	r3, [r7, #8]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1f9      	bne.n	8009e48 <SPI_WIFI_DelayUs+0x80>
  return;
 8009e54:	bf00      	nop
}
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20000dc4 	.word	0x20000dc4
 8009e60:	20000010 	.word	0x20000010
 8009e64:	10624dd3 	.word	0x10624dd3
 8009e68:	431bde83 	.word	0x431bde83

08009e6c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <HAL_SPI_RxCpltCallback+0x24>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <HAL_SPI_RxCpltCallback+0x24>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
  }
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20000db8 	.word	0x20000db8

08009e94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <HAL_SPI_TxCpltCallback+0x24>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8009ea4:	4b04      	ldr	r3, [pc, #16]	; (8009eb8 <HAL_SPI_TxCpltCallback+0x24>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
  }
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20000dbc 	.word	0x20000dbc

08009ebc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8009ec0:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <SPI_WIFI_ISR+0x1c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d102      	bne.n	8009ece <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009ec8:	4b03      	ldr	r3, [pc, #12]	; (8009ed8 <SPI_WIFI_ISR+0x1c>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
   }
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	20000dc0 	.word	0x20000dc0

08009edc <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <WIFI_Init+0x40>)
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <WIFI_Init+0x44>)
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <WIFI_Init+0x48>)
 8009ef0:	4a0d      	ldr	r2, [pc, #52]	; (8009f28 <WIFI_Init+0x4c>)
 8009ef2:	490e      	ldr	r1, [pc, #56]	; (8009f2c <WIFI_Init+0x50>)
 8009ef4:	480e      	ldr	r0, [pc, #56]	; (8009f30 <WIFI_Init+0x54>)
 8009ef6:	f7ff f8c3 	bl	8009080 <ES_WIFI_RegisterBusIO>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d107      	bne.n	8009f10 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009f00:	480b      	ldr	r0, [pc, #44]	; (8009f30 <WIFI_Init+0x54>)
 8009f02:	f7ff f88f 	bl	8009024 <ES_WIFI_Init>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009f10:	79fb      	ldrb	r3, [r7, #7]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	08009be1 	.word	0x08009be1
 8009f20:	08009cd5 	.word	0x08009cd5
 8009f24:	08009db1 	.word	0x08009db1
 8009f28:	08009ac9 	.word	0x08009ac9
 8009f2c:	0800992d 	.word	0x0800992d
 8009f30:	20000dc8 	.word	0x20000dc8

08009f34 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4809      	ldr	r0, [pc, #36]	; (8009f74 <WIFI_Connect+0x40>)
 8009f4e:	f7ff f8cb 	bl	80090e8 <ES_WIFI_Connect>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d107      	bne.n	8009f68 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009f58:	4806      	ldr	r0, [pc, #24]	; (8009f74 <WIFI_Connect+0x40>)
 8009f5a:	f7ff f969 	bl	8009230 <ES_WIFI_GetNetworkSettings>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000dc8 	.word	0x20000dc8

08009f78 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4806      	ldr	r0, [pc, #24]	; (8009fa0 <WIFI_GetMAC_Address+0x28>)
 8009f88:	f7ff f97c 	bl	8009284 <ES_WIFI_GetMACAddress>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000dc8 	.word	0x20000dc8

08009fa4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8009fb0:	4809      	ldr	r0, [pc, #36]	; (8009fd8 <WIFI_GetIP_Address+0x34>)
 8009fb2:	f7ff f911 	bl	80091d8 <ES_WIFI_IsConnected>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d107      	bne.n	8009fcc <WIFI_GetIP_Address+0x28>
 8009fbc:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <WIFI_GetIP_Address+0x34>)
 8009fbe:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8009fc2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000dc8 	.word	0x20000dc8

08009fdc <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8009ff8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009ffa:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8009ffc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ffe:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	2b00      	cmp	r3, #0
 800a004:	bf14      	ite	ne
 800a006:	2301      	movne	r3, #1
 800a008:	2300      	moveq	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	789b      	ldrb	r3, [r3, #2]
 800a01e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	78db      	ldrb	r3, [r3, #3]
 800a024:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800a026:	f107 0310 	add.w	r3, r7, #16
 800a02a:	4619      	mov	r1, r3
 800a02c:	4807      	ldr	r0, [pc, #28]	; (800a04c <WIFI_OpenClientConnection+0x70>)
 800a02e:	f7ff f95b 	bl	80092e8 <ES_WIFI_StartClientConnection>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a042:	4618      	mov	r0, r3
 800a044:	3728      	adds	r7, #40	; 0x28
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000dc8 	.word	0x20000dc8

0800a050 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <sendMessageVector+0x2c>
 800a06e:	4b64      	ldr	r3, [pc, #400]	; (800a200 <sendMessageVector+0x1b0>)
 800a070:	4a64      	ldr	r2, [pc, #400]	; (800a204 <sendMessageVector+0x1b4>)
 800a072:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a076:	4864      	ldr	r0, [pc, #400]	; (800a208 <sendMessageVector+0x1b8>)
 800a078:	f006 fe80 	bl	8010d7c <__assert_func>
    assert( pIoVec != NULL );
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <sendMessageVector+0x40>
 800a082:	4b62      	ldr	r3, [pc, #392]	; (800a20c <sendMessageVector+0x1bc>)
 800a084:	4a5f      	ldr	r2, [pc, #380]	; (800a204 <sendMessageVector+0x1b4>)
 800a086:	f240 21f3 	movw	r1, #755	; 0x2f3
 800a08a:	485f      	ldr	r0, [pc, #380]	; (800a208 <sendMessageVector+0x1b8>)
 800a08c:	f006 fe76 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <sendMessageVector+0x56>
 800a098:	4b5d      	ldr	r3, [pc, #372]	; (800a210 <sendMessageVector+0x1c0>)
 800a09a:	4a5a      	ldr	r2, [pc, #360]	; (800a204 <sendMessageVector+0x1b4>)
 800a09c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800a0a0:	4859      	ldr	r0, [pc, #356]	; (800a208 <sendMessageVector+0x1b8>)
 800a0a2:	f006 fe6b 	bl	8010d7c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <sendMessageVector+0x6c>
 800a0ae:	4b59      	ldr	r3, [pc, #356]	; (800a214 <sendMessageVector+0x1c4>)
 800a0b0:	4a54      	ldr	r2, [pc, #336]	; (800a204 <sendMessageVector+0x1b4>)
 800a0b2:	f240 21f6 	movw	r1, #758	; 0x2f6
 800a0b6:	4854      	ldr	r0, [pc, #336]	; (800a208 <sendMessageVector+0x1b8>)
 800a0b8:	f006 fe60 	bl	8010d7c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	623b      	str	r3, [r7, #32]
 800a0c0:	e007      	b.n	800a0d2 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	623b      	str	r3, [r7, #32]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	4413      	add	r3, r2
 800a0e0:	6a3a      	ldr	r2, [r7, #32]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d9ed      	bls.n	800a0c2 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4798      	blx	r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a0f6:	3320      	adds	r3, #32
 800a0f8:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800a0fa:	e073      	b.n	800a1e4 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	69d0      	ldr	r0, [r2, #28]
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	6a39      	ldr	r1, [r7, #32]
 800a110:	4798      	blx	r3
 800a112:	6278      	str	r0, [r7, #36]	; 0x24
 800a114:	e009      	b.n	800a12a <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	69d0      	ldr	r0, [r2, #28]
 800a11e:	6a3a      	ldr	r2, [r7, #32]
 800a120:	6811      	ldr	r1, [r2, #0]
 800a122:	6a3a      	ldr	r2, [r7, #32]
 800a124:	6852      	ldr	r2, [r2, #4]
 800a126:	4798      	blx	r3
 800a128:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd17      	ble.n	800a160 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a138:	429a      	cmp	r2, r3
 800a13a:	dd06      	ble.n	800a14a <sendMessageVector+0xfa>
 800a13c:	4b36      	ldr	r3, [pc, #216]	; (800a218 <sendMessageVector+0x1c8>)
 800a13e:	4a31      	ldr	r2, [pc, #196]	; (800a204 <sendMessageVector+0x1b4>)
 800a140:	f240 3117 	movw	r1, #791	; 0x317
 800a144:	4830      	ldr	r0, [pc, #192]	; (800a208 <sendMessageVector+0x1b8>)
 800a146:	f006 fe19 	bl	8010d7c <__assert_func>

            bytesSentOrError += sendResult;
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	4413      	add	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	4798      	blx	r3
 800a158:	4602      	mov	r2, r0
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	635a      	str	r2, [r3, #52]	; 0x34
 800a15e:	e004      	b.n	800a16a <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	da01      	bge.n	800a16a <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4798      	blx	r3
 800a170:	4602      	mov	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	4293      	cmp	r3, r2
 800a176:	d93d      	bls.n	800a1f4 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800a178:	e00b      	b.n	800a192 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	461a      	mov	r2, r3
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	3308      	adds	r3, #8
 800a18a:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	3b01      	subs	r3, #1
 800a190:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a198:	3b01      	subs	r3, #1
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4413      	add	r3, r2
 800a1a0:	6a3a      	ldr	r2, [r7, #32]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d805      	bhi.n	800a1b2 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	dae3      	bge.n	800a17a <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dd15      	ble.n	800a1e4 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800a1c6:	6a3a      	ldr	r2, [r7, #32]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d80b      	bhi.n	800a1e4 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	441a      	add	r2, r3
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	1ad2      	subs	r2, r2, r3
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	da04      	bge.n	800a1f6 <sendMessageVector+0x1a6>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da84      	bge.n	800a0fc <sendMessageVector+0xac>
 800a1f2:	e000      	b.n	800a1f6 <sendMessageVector+0x1a6>
            break;
 800a1f4:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800a1f6:	697b      	ldr	r3, [r7, #20]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3728      	adds	r7, #40	; 0x28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	080148a8 	.word	0x080148a8
 800a204:	0801533c 	.word	0x0801533c
 800a208:	080147cc 	.word	0x080147cc
 800a20c:	080148bc 	.word	0x080148bc
 800a210:	080148cc 	.word	0x080148cc
 800a214:	080148e8 	.word	0x080148e8
 800a218:	08014914 	.word	0x08014914

0800a21c <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <sendBuffer+0x28>
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <sendBuffer+0x100>)
 800a238:	4a39      	ldr	r2, [pc, #228]	; (800a320 <sendBuffer+0x104>)
 800a23a:	f240 3153 	movw	r1, #851	; 0x353
 800a23e:	4839      	ldr	r0, [pc, #228]	; (800a324 <sendBuffer+0x108>)
 800a240:	f006 fd9c 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <sendBuffer+0x3e>
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <sendBuffer+0x10c>)
 800a24e:	4a34      	ldr	r2, [pc, #208]	; (800a320 <sendBuffer+0x104>)
 800a250:	f44f 7155 	mov.w	r1, #852	; 0x354
 800a254:	4833      	ldr	r0, [pc, #204]	; (800a324 <sendBuffer+0x108>)
 800a256:	f006 fd91 	bl	8010d7c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <sendBuffer+0x54>
 800a262:	4b32      	ldr	r3, [pc, #200]	; (800a32c <sendBuffer+0x110>)
 800a264:	4a2e      	ldr	r2, [pc, #184]	; (800a320 <sendBuffer+0x104>)
 800a266:	f240 3155 	movw	r1, #853	; 0x355
 800a26a:	482e      	ldr	r0, [pc, #184]	; (800a324 <sendBuffer+0x108>)
 800a26c:	f006 fd86 	bl	8010d7c <__assert_func>
    assert( pIndex != NULL );
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d106      	bne.n	800a284 <sendBuffer+0x68>
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <sendBuffer+0x114>)
 800a278:	4a29      	ldr	r2, [pc, #164]	; (800a320 <sendBuffer+0x104>)
 800a27a:	f240 3156 	movw	r1, #854	; 0x356
 800a27e:	4829      	ldr	r0, [pc, #164]	; (800a324 <sendBuffer+0x108>)
 800a280:	f006 fd7c 	bl	8010d7c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	4798      	blx	r3
 800a28a:	4603      	mov	r3, r0
 800a28c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800a290:	3320      	adds	r3, #32
 800a292:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800a294:	e034      	b.n	800a300 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800a29e:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	1a8a      	subs	r2, r1, r2
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	4798      	blx	r3
 800a2a8:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dd1b      	ble.n	800a2e8 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	dd06      	ble.n	800a2ca <sendBuffer+0xae>
 800a2bc:	4b1d      	ldr	r3, [pc, #116]	; (800a334 <sendBuffer+0x118>)
 800a2be:	4a18      	ldr	r2, [pc, #96]	; (800a320 <sendBuffer+0x104>)
 800a2c0:	f240 3165 	movw	r1, #869	; 0x365
 800a2c4:	4817      	ldr	r0, [pc, #92]	; (800a324 <sendBuffer+0x108>)
 800a2c6:	f006 fd59 	bl	8010d7c <__assert_func>

            bytesSentOrError += sendResult;
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	4798      	blx	r3
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	635a      	str	r2, [r3, #52]	; 0x34
 800a2e6:	e004      	b.n	800a2f2 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da01      	bge.n	800a2f2 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4798      	blx	r3
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d907      	bls.n	800a310 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	429a      	cmp	r2, r3
 800a306:	da04      	bge.n	800a312 <sendBuffer+0xf6>
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dac3      	bge.n	800a296 <sendBuffer+0x7a>
 800a30e:	e000      	b.n	800a312 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800a310:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800a312:	69fb      	ldr	r3, [r7, #28]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3720      	adds	r7, #32
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	080148a8 	.word	0x080148a8
 800a320:	08015350 	.word	0x08015350
 800a324:	080147cc 	.word	0x080147cc
 800a328:	080148cc 	.word	0x080148cc
 800a32c:	080148e8 	.word	0x080148e8
 800a330:	08014954 	.word	0x08014954
 800a334:	08014914 	.word	0x08014914

0800a338 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
    return later - start;
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	1ad3      	subs	r3, r2, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	2b62      	cmp	r3, #98	; 0x62
 800a366:	d00c      	beq.n	800a382 <getAckFromPacketType+0x2e>
 800a368:	2b62      	cmp	r3, #98	; 0x62
 800a36a:	dc0d      	bgt.n	800a388 <getAckFromPacketType+0x34>
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d002      	beq.n	800a376 <getAckFromPacketType+0x22>
 800a370:	2b50      	cmp	r3, #80	; 0x50
 800a372:	d003      	beq.n	800a37c <getAckFromPacketType+0x28>
 800a374:	e008      	b.n	800a388 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
            break;
 800a37a:	e012      	b.n	800a3a2 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800a37c:	2301      	movs	r3, #1
 800a37e:	73fb      	strb	r3, [r7, #15]
            break;
 800a380:	e00f      	b.n	800a3a2 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800a382:	2302      	movs	r3, #2
 800a384:	73fb      	strb	r3, [r7, #15]
            break;
 800a386:	e00c      	b.n	800a3a2 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b70      	cmp	r3, #112	; 0x70
 800a38c:	d006      	beq.n	800a39c <getAckFromPacketType+0x48>
 800a38e:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <getAckFromPacketType+0x58>)
 800a390:	4a07      	ldr	r2, [pc, #28]	; (800a3b0 <getAckFromPacketType+0x5c>)
 800a392:	f240 31a7 	movw	r1, #935	; 0x3a7
 800a396:	4807      	ldr	r0, [pc, #28]	; (800a3b4 <getAckFromPacketType+0x60>)
 800a398:	f006 fcf0 	bl	8010d7c <__assert_func>
            ackType = MQTTPubcomp;
 800a39c:	2303      	movs	r3, #3
 800a39e:	73fb      	strb	r3, [r7, #15]
            break;
 800a3a0:	bf00      	nop
    }

    return ackType;
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	08014964 	.word	0x08014964
 800a3b0:	0801535c 	.word	0x0801535c
 800a3b4:	080147cc 	.word	0x080147cc

0800a3b8 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	; 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <recvExact+0x3e>
 800a3e8:	4b44      	ldr	r3, [pc, #272]	; (800a4fc <recvExact+0x144>)
 800a3ea:	4a45      	ldr	r2, [pc, #276]	; (800a500 <recvExact+0x148>)
 800a3ec:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800a3f0:	4844      	ldr	r0, [pc, #272]	; (800a504 <recvExact+0x14c>)
 800a3f2:	f006 fcc3 	bl	8010d7c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d906      	bls.n	800a40e <recvExact+0x56>
 800a400:	4b41      	ldr	r3, [pc, #260]	; (800a508 <recvExact+0x150>)
 800a402:	4a3f      	ldr	r2, [pc, #252]	; (800a500 <recvExact+0x148>)
 800a404:	f240 31bd 	movw	r1, #957	; 0x3bd
 800a408:	483e      	ldr	r0, [pc, #248]	; (800a504 <recvExact+0x14c>)
 800a40a:	f006 fcb7 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <recvExact+0x6c>
 800a416:	4b3d      	ldr	r3, [pc, #244]	; (800a50c <recvExact+0x154>)
 800a418:	4a39      	ldr	r2, [pc, #228]	; (800a500 <recvExact+0x148>)
 800a41a:	f240 31be 	movw	r1, #958	; 0x3be
 800a41e:	4839      	ldr	r0, [pc, #228]	; (800a504 <recvExact+0x14c>)
 800a420:	f006 fcac 	bl	8010d7c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <recvExact+0x82>
 800a42c:	4b38      	ldr	r3, [pc, #224]	; (800a510 <recvExact+0x158>)
 800a42e:	4a34      	ldr	r2, [pc, #208]	; (800a500 <recvExact+0x148>)
 800a430:	f240 31bf 	movw	r1, #959	; 0x3bf
 800a434:	4833      	ldr	r0, [pc, #204]	; (800a504 <recvExact+0x14c>)
 800a436:	f006 fca1 	bl	8010d7c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <recvExact+0x98>
 800a442:	4b34      	ldr	r3, [pc, #208]	; (800a514 <recvExact+0x15c>)
 800a444:	4a2e      	ldr	r2, [pc, #184]	; (800a500 <recvExact+0x148>)
 800a446:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800a44a:	482e      	ldr	r0, [pc, #184]	; (800a504 <recvExact+0x14c>)
 800a44c:	f006 fc96 	bl	8010d7c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	4798      	blx	r3
 800a466:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800a468:	e039      	b.n	800a4de <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69d8      	ldr	r0, [r3, #28]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a474:	4798      	blx	r3
 800a476:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	da04      	bge.n	800a488 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800a482:	2301      	movs	r3, #1
 800a484:	77fb      	strb	r3, [r7, #31]
 800a486:	e02a      	b.n	800a4de <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dd1a      	ble.n	800a4c4 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4798      	blx	r3
 800a492:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a498:	429a      	cmp	r2, r3
 800a49a:	d206      	bcs.n	800a4aa <recvExact+0xf2>
 800a49c:	4b1e      	ldr	r3, [pc, #120]	; (800a518 <recvExact+0x160>)
 800a49e:	4a18      	ldr	r2, [pc, #96]	; (800a500 <recvExact+0x148>)
 800a4a0:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800a4a4:	4817      	ldr	r0, [pc, #92]	; (800a504 <recvExact+0x14c>)
 800a4a6:	f006 fc69 	bl	8010d7c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800a4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4be:	4413      	add	r3, r2
 800a4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c2:	e00c      	b.n	800a4de <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	6a39      	ldr	r1, [r7, #32]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff ff33 	bl	800a338 <calculateElapsedTime>
 800a4d2:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d901      	bls.n	800a4de <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <recvExact+0x138>
 800a4e4:	7ffb      	ldrb	r3, [r7, #31]
 800a4e6:	f083 0301 	eor.w	r3, r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1bc      	bne.n	800a46a <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3730      	adds	r7, #48	; 0x30
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	080148a8 	.word	0x080148a8
 800a500:	08015374 	.word	0x08015374
 800a504:	080147cc 	.word	0x080147cc
 800a508:	0801498c 	.word	0x0801498c
 800a50c:	080148cc 	.word	0x080148cc
 800a510:	080149b8 	.word	0x080149b8
 800a514:	080149e4 	.word	0x080149e4
 800a518:	08014a0c 	.word	0x08014a0c

0800a51c <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08c      	sub	sp, #48	; 0x30
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800a528:	2304      	movs	r3, #4
 800a52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <discardPacket+0x44>
 800a552:	4b2f      	ldr	r3, [pc, #188]	; (800a610 <discardPacket+0xf4>)
 800a554:	4a2f      	ldr	r2, [pc, #188]	; (800a614 <discardPacket+0xf8>)
 800a556:	f240 410b 	movw	r1, #1035	; 0x40b
 800a55a:	482f      	ldr	r0, [pc, #188]	; (800a618 <discardPacket+0xfc>)
 800a55c:	f006 fc0e 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d106      	bne.n	800a576 <discardPacket+0x5a>
 800a568:	4b2c      	ldr	r3, [pc, #176]	; (800a61c <discardPacket+0x100>)
 800a56a:	4a2a      	ldr	r2, [pc, #168]	; (800a614 <discardPacket+0xf8>)
 800a56c:	f240 410c 	movw	r1, #1036	; 0x40c
 800a570:	4829      	ldr	r0, [pc, #164]	; (800a618 <discardPacket+0xfc>)
 800a572:	f006 fc03 	bl	8010d7c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	4798      	blx	r3
 800a586:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a588:	e029      	b.n	800a5de <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a592:	429a      	cmp	r2, r3
 800a594:	d903      	bls.n	800a59e <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800a59e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff ff09 	bl	800a3b8 <recvExact>
 800a5a6:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d003      	beq.n	800a5b8 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5b6:	e012      	b.n	800a5de <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	4413      	add	r3, r2
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	4798      	blx	r3
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	69b9      	ldr	r1, [r7, #24]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff feb5 	bl	800a338 <calculateElapsedTime>
 800a5ce:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d302      	bcc.n	800a5de <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d206      	bcs.n	800a5f4 <discardPacket+0xd8>
 800a5e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5ea:	f083 0301 	eor.w	r3, r3, #1
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1ca      	bne.n	800a58a <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800a5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d102      	bne.n	800a602 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800a5fc:	2307      	movs	r3, #7
 800a5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800a602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a606:	4618      	mov	r0, r3
 800a608:	3730      	adds	r7, #48	; 0x30
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	080148a8 	.word	0x080148a8
 800a614:	08015380 	.word	0x08015380
 800a618:	080147cc 	.word	0x080147cc
 800a61c:	080148cc 	.word	0x080148cc

0800a620 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800a62a:	2304      	movs	r3, #4
 800a62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800a63c:	2300      	movs	r3, #0
 800a63e:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <discardStoredPacket+0x38>
 800a64a:	4b34      	ldr	r3, [pc, #208]	; (800a71c <discardStoredPacket+0xfc>)
 800a64c:	4a34      	ldr	r2, [pc, #208]	; (800a720 <discardStoredPacket+0x100>)
 800a64e:	f240 414b 	movw	r1, #1099	; 0x44b
 800a652:	4834      	ldr	r0, [pc, #208]	; (800a724 <discardStoredPacket+0x104>)
 800a654:	f006 fb92 	bl	8010d7c <__assert_func>
    assert( pPacketInfo != NULL );
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <discardStoredPacket+0x4c>
 800a65e:	4b32      	ldr	r3, [pc, #200]	; (800a728 <discardStoredPacket+0x108>)
 800a660:	4a2f      	ldr	r2, [pc, #188]	; (800a720 <discardStoredPacket+0x100>)
 800a662:	f240 414c 	movw	r1, #1100	; 0x44c
 800a666:	482f      	ldr	r0, [pc, #188]	; (800a724 <discardStoredPacket+0x104>)
 800a668:	f006 fb88 	bl	8010d7c <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	4413      	add	r3, r2
 800a676:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d806      	bhi.n	800a690 <discardStoredPacket+0x70>
 800a682:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <discardStoredPacket+0x10c>)
 800a684:	4a26      	ldr	r2, [pc, #152]	; (800a720 <discardStoredPacket+0x100>)
 800a686:	f240 4152 	movw	r1, #1106	; 0x452
 800a68a:	4826      	ldr	r0, [pc, #152]	; (800a724 <discardStoredPacket+0x104>)
 800a68c:	f006 fb76 	bl	8010d7c <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a6a0:	e019      	b.n	800a6d6 <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	6a3a      	ldr	r2, [r7, #32]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d903      	bls.n	800a6b6 <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800a6b6:	6a39      	ldr	r1, [r7, #32]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fe7d 	bl	800a3b8 <recvExact>
 800a6be:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d002      	beq.n	800a6ce <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	76fb      	strb	r3, [r7, #27]
 800a6cc:	e003      	b.n	800a6d6 <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d205      	bcs.n	800a6ea <discardStoredPacket+0xca>
 800a6de:	7efb      	ldrb	r3, [r7, #27]
 800a6e0:	f083 0301 	eor.w	r3, r3, #1
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1db      	bne.n	800a6a2 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d102      	bne.n	800a6f8 <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800a6f2:	2307      	movs	r3, #7
 800a6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a18      	ldr	r0, [r3, #32]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	461a      	mov	r2, r3
 800a702:	2100      	movs	r1, #0
 800a704:	f006 fcc5 	bl	8011092 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800a70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a712:	4618      	mov	r0, r3
 800a714:	3728      	adds	r7, #40	; 0x28
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	080148a8 	.word	0x080148a8
 800a720:	08015390 	.word	0x08015390
 800a724:	080147cc 	.word	0x080147cc
 800a728:	08014a34 	.word	0x08014a34
 800a72c:	08014a48 	.word	0x08014a48

0800a730 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800a730:	b084      	sub	sp, #16
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <receivePacket+0x32>
 800a754:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <receivePacket+0x90>)
 800a756:	4a1b      	ldr	r2, [pc, #108]	; (800a7c4 <receivePacket+0x94>)
 800a758:	f240 418e 	movw	r1, #1166	; 0x48e
 800a75c:	481a      	ldr	r0, [pc, #104]	; (800a7c8 <receivePacket+0x98>)
 800a75e:	f006 fb0d 	bl	8010d7c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <receivePacket+0x48>
 800a76a:	4b18      	ldr	r3, [pc, #96]	; (800a7cc <receivePacket+0x9c>)
 800a76c:	4a15      	ldr	r2, [pc, #84]	; (800a7c4 <receivePacket+0x94>)
 800a76e:	f240 418f 	movw	r1, #1167	; 0x48f
 800a772:	4815      	ldr	r0, [pc, #84]	; (800a7c8 <receivePacket+0x98>)
 800a774:	f006 fb02 	bl	8010d7c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800a778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	429a      	cmp	r2, r3
 800a780:	d908      	bls.n	800a794 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fec7 	bl	800a51c <discardPacket>
 800a78e:	4603      	mov	r3, r0
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e00c      	b.n	800a7ae <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800a798:	68f9      	ldr	r1, [r7, #12]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fe0c 	bl	800a3b8 <recvExact>
 800a7a0:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d001      	beq.n	800a7ae <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7ba:	b004      	add	sp, #16
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	080148a8 	.word	0x080148a8
 800a7c4:	080153a4 	.word	0x080153a4
 800a7c8:	080147cc 	.word	0x080147cc
 800a7cc:	080149e4 	.word	0x080149e4

0800a7d0 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	3b02      	subs	r3, #2
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d816      	bhi.n	800a814 <getAckTypeToSend+0x44>
 800a7e6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <getAckTypeToSend+0x1c>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a803 	.word	0x0800a803
 800a7f4:	0800a809 	.word	0x0800a809
 800a7f8:	0800a80f 	.word	0x0800a80f
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800a7fc:	2340      	movs	r3, #64	; 0x40
 800a7fe:	73fb      	strb	r3, [r7, #15]
            break;
 800a800:	e009      	b.n	800a816 <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800a802:	2350      	movs	r3, #80	; 0x50
 800a804:	73fb      	strb	r3, [r7, #15]
            break;
 800a806:	e006      	b.n	800a816 <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800a808:	2362      	movs	r3, #98	; 0x62
 800a80a:	73fb      	strb	r3, [r7, #15]
            break;
 800a80c:	e003      	b.n	800a816 <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800a80e:	2370      	movs	r3, #112	; 0x70
 800a810:	73fb      	strb	r3, [r7, #15]
            break;
 800a812:	e000      	b.n	800a816 <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800a814:	bf00      	nop
    }

    return packetTypeByte;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	; 0x28
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	807b      	strh	r3, [r7, #2]
 800a830:	4613      	mov	r3, r2
 800a832:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800a834:	2300      	movs	r3, #0
 800a836:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800a838:	2300      	movs	r3, #0
 800a83a:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800a84a:	2304      	movs	r3, #4
 800a84c:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <sendPublishAcks+0x3e>
 800a854:	4b21      	ldr	r3, [pc, #132]	; (800a8dc <sendPublishAcks+0xb8>)
 800a856:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <sendPublishAcks+0xbc>)
 800a858:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800a85c:	4821      	ldr	r0, [pc, #132]	; (800a8e4 <sendPublishAcks+0xc0>)
 800a85e:	f006 fa8d 	bl	8010d7c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800a862:	787b      	ldrb	r3, [r7, #1]
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff ffb3 	bl	800a7d0 <getAckTypeToSend>
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d02d      	beq.n	800a8d0 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff fd6c 	bl	800a354 <getAckFromPacketType>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800a880:	887a      	ldrh	r2, [r7, #2]
 800a882:	7df9      	ldrb	r1, [r7, #23]
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 febc 	bl	800c606 <MQTT_SerializeAck>
 800a88e:	4603      	mov	r3, r0
 800a890:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800a892:	7ffb      	ldrb	r3, [r7, #31]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800a898:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800a89a:	2204      	movs	r2, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fcbc 	bl	800a21c <sendBuffer>
 800a8a4:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d10f      	bne.n	800a8cc <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800a8b4:	7dba      	ldrb	r2, [r7, #22]
 800a8b6:	8879      	ldrh	r1, [r7, #2]
 800a8b8:	f107 0315 	add.w	r3, r7, #21
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f002 fd41 	bl	800d348 <MQTT_UpdateStateAck>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e001      	b.n	800a8d0 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800a8d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	080148a8 	.word	0x080148a8
 800a8e0:	080153b4 	.word	0x080153b4
 800a8e4:	080147cc 	.word	0x080147cc

0800a8e8 <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <handleKeepAlive+0x28>
 800a902:	4b33      	ldr	r3, [pc, #204]	; (800a9d0 <handleKeepAlive+0xe8>)
 800a904:	4a33      	ldr	r2, [pc, #204]	; (800a9d4 <handleKeepAlive+0xec>)
 800a906:	f240 512e 	movw	r1, #1326	; 0x52e
 800a90a:	4833      	ldr	r0, [pc, #204]	; (800a9d8 <handleKeepAlive+0xf0>)
 800a90c:	f006 fa36 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d106      	bne.n	800a926 <handleKeepAlive+0x3e>
 800a918:	4b30      	ldr	r3, [pc, #192]	; (800a9dc <handleKeepAlive+0xf4>)
 800a91a:	4a2e      	ldr	r2, [pc, #184]	; (800a9d4 <handleKeepAlive+0xec>)
 800a91c:	f240 512f 	movw	r1, #1327	; 0x52f
 800a920:	482d      	ldr	r0, [pc, #180]	; (800a9d8 <handleKeepAlive+0xf0>)
 800a922:	f006 fa2b 	bl	8010d7c <__assert_func>

    now = pContext->getTime();
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	4798      	blx	r3
 800a92c:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a934:	461a      	mov	r2, r3
 800a936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a93a:	fb02 f303 	mul.w	r3, r2, r3
 800a93e:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f247 5230 	movw	r2, #30000	; 0x7530
 800a946:	4293      	cmp	r3, r2
 800a948:	d902      	bls.n	800a950 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800a94a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a94e:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00d      	beq.n	800a976 <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a95e:	4619      	mov	r1, r3
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff fce9 	bl	800a338 <calculateElapsedTime>
 800a966:	4603      	mov	r3, r0
 800a968:	f241 3288 	movw	r2, #5000	; 0x1388
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d929      	bls.n	800a9c4 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800a970:	230a      	movs	r3, #10
 800a972:	75fb      	strb	r3, [r7, #23]
 800a974:	e026      	b.n	800a9c4 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00f      	beq.n	800a99c <handleKeepAlive+0xb4>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a980:	4619      	mov	r1, r3
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fcd8 	bl	800a338 <calculateElapsedTime>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d805      	bhi.n	800a99c <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 ff93 	bl	800b8bc <MQTT_Ping>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]
 800a99a:	e013      	b.n	800a9c4 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fcc8 	bl	800a338 <calculateElapsedTime>
 800a9a8:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <handleKeepAlive+0xdc>
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d904      	bls.n	800a9c4 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 ff7e 	bl	800b8bc <MQTT_Ping>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	080148a8 	.word	0x080148a8
 800a9d4:	080153c4 	.word	0x080153c4
 800a9d8:	080147cc 	.word	0x080147cc
 800a9dc:	080148cc 	.word	0x080148cc

0800a9e0 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08e      	sub	sp, #56	; 0x38
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <handleIncomingPublish+0x34>
 800aa06:	4b43      	ldr	r3, [pc, #268]	; (800ab14 <handleIncomingPublish+0x134>)
 800aa08:	4a43      	ldr	r2, [pc, #268]	; (800ab18 <handleIncomingPublish+0x138>)
 800aa0a:	f240 5164 	movw	r1, #1380	; 0x564
 800aa0e:	4843      	ldr	r0, [pc, #268]	; (800ab1c <handleIncomingPublish+0x13c>)
 800aa10:	f006 f9b4 	bl	8010d7c <__assert_func>
    assert( pIncomingPacket != NULL );
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <handleIncomingPublish+0x48>
 800aa1a:	4b41      	ldr	r3, [pc, #260]	; (800ab20 <handleIncomingPublish+0x140>)
 800aa1c:	4a3e      	ldr	r2, [pc, #248]	; (800ab18 <handleIncomingPublish+0x138>)
 800aa1e:	f240 5165 	movw	r1, #1381	; 0x565
 800aa22:	483e      	ldr	r0, [pc, #248]	; (800ab1c <handleIncomingPublish+0x13c>)
 800aa24:	f006 f9aa 	bl	8010d7c <__assert_func>
    assert( pContext->appCallback != NULL );
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d106      	bne.n	800aa3e <handleIncomingPublish+0x5e>
 800aa30:	4b3c      	ldr	r3, [pc, #240]	; (800ab24 <handleIncomingPublish+0x144>)
 800aa32:	4a39      	ldr	r2, [pc, #228]	; (800ab18 <handleIncomingPublish+0x138>)
 800aa34:	f240 5166 	movw	r1, #1382	; 0x566
 800aa38:	4838      	ldr	r0, [pc, #224]	; (800ab1c <handleIncomingPublish+0x13c>)
 800aa3a:	f006 f99f 	bl	8010d7c <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800aa3e:	f107 0214 	add.w	r2, r7, #20
 800aa42:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800aa46:	4619      	mov	r1, r3
 800aa48:	6838      	ldr	r0, [r7, #0]
 800aa4a:	f001 fe73 	bl	800c734 <MQTT_DeserializePublish>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800aa54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d109      	bne.n	800aa70 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d105      	bne.n	800aa70 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800aa64:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800aa70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d122      	bne.n	800aabe <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800aa78:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800aa7a:	7d3a      	ldrb	r2, [r7, #20]
 800aa7c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	4613      	mov	r3, r2
 800aa84:	2201      	movs	r2, #1
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f002 fbeb 	bl	800d262 <MQTT_UpdateStatePublish>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800aa92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d011      	beq.n	800aabe <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800aa9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa9e:	2b09      	cmp	r3, #9
 800aaa0:	d10d      	bne.n	800aabe <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800aaae:	7d3b      	ldrb	r3, [r7, #20]
 800aab0:	4619      	mov	r1, r3
 800aab2:	2001      	movs	r0, #1
 800aab4:	f002 fba6 	bl	800d204 <MQTT_CalculateStatePublish>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800aabe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d11f      	bne.n	800ab06 <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800aac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aac8:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800aaca:	f107 0314 	add.w	r3, r7, #20
 800aace:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800aad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aad4:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800aad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aada:	f083 0301 	eor.w	r3, r3, #1
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae8:	f107 0208 	add.w	r2, r7, #8
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800aaf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aaf4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fe92 	bl	800a824 <sendPublishAcks>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800ab06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3730      	adds	r7, #48	; 0x30
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	080148a8 	.word	0x080148a8
 800ab18:	080153d4 	.word	0x080153d4
 800ab1c:	080147cc 	.word	0x080147cc
 800ab20:	08014a78 	.word	0x08014a78
 800ab24:	08014a90 	.word	0x08014a90

0800ab28 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800ab32:	2305      	movs	r3, #5
 800ab34:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d106      	bne.n	800ab4e <handlePublishAcks+0x26>
 800ab40:	4b2c      	ldr	r3, [pc, #176]	; (800abf4 <handlePublishAcks+0xcc>)
 800ab42:	4a2d      	ldr	r2, [pc, #180]	; (800abf8 <handlePublishAcks+0xd0>)
 800ab44:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800ab48:	482c      	ldr	r0, [pc, #176]	; (800abfc <handlePublishAcks+0xd4>)
 800ab4a:	f006 f917 	bl	8010d7c <__assert_func>
    assert( pIncomingPacket != NULL );
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <handlePublishAcks+0x3a>
 800ab54:	4b2a      	ldr	r3, [pc, #168]	; (800ac00 <handlePublishAcks+0xd8>)
 800ab56:	4a28      	ldr	r2, [pc, #160]	; (800abf8 <handlePublishAcks+0xd0>)
 800ab58:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800ab5c:	4827      	ldr	r0, [pc, #156]	; (800abfc <handlePublishAcks+0xd4>)
 800ab5e:	f006 f90d 	bl	8010d7c <__assert_func>
    assert( pContext->appCallback != NULL );
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d106      	bne.n	800ab78 <handlePublishAcks+0x50>
 800ab6a:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <handlePublishAcks+0xdc>)
 800ab6c:	4a22      	ldr	r2, [pc, #136]	; (800abf8 <handlePublishAcks+0xd0>)
 800ab6e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800ab72:	4822      	ldr	r0, [pc, #136]	; (800abfc <handlePublishAcks+0xd4>)
 800ab74:	f006 f902 	bl	8010d7c <__assert_func>

    appCallback = pContext->appCallback;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7ff fbe6 	bl	800a354 <getAckFromPacketType>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	2200      	movs	r2, #0
 800ab92:	4619      	mov	r1, r3
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f001 fdfd 	bl	800c794 <MQTT_DeserializeAck>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800ab9e:	7ffb      	ldrb	r3, [r7, #31]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800aba4:	8ab9      	ldrh	r1, [r7, #20]
 800aba6:	7dfa      	ldrb	r2, [r7, #23]
 800aba8:	f107 0316 	add.w	r3, r7, #22
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	2301      	movs	r3, #1
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f002 fbc9 	bl	800d348 <MQTT_UpdateStateAck>
 800abb6:	4603      	mov	r3, r0
 800abb8:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800abba:	7ffb      	ldrb	r3, [r7, #31]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d113      	bne.n	800abe8 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800abc0:	8abb      	ldrh	r3, [r7, #20]
 800abc2:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800abc4:	7ffb      	ldrb	r3, [r7, #31]
 800abc6:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800abcc:	f107 0208 	add.w	r2, r7, #8
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800abd8:	8abb      	ldrh	r3, [r7, #20]
 800abda:	7dba      	ldrb	r2, [r7, #22]
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fe20 	bl	800a824 <sendPublishAcks>
 800abe4:	4603      	mov	r3, r0
 800abe6:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800abe8:	7ffb      	ldrb	r3, [r7, #31]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3720      	adds	r7, #32
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	080148a8 	.word	0x080148a8
 800abf8:	080153ec 	.word	0x080153ec
 800abfc:	080147cc 	.word	0x080147cc
 800ac00:	08014a78 	.word	0x08014a78
 800ac04:	08014a90 	.word	0x08014a90

0800ac08 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800ac16:	2305      	movs	r3, #5
 800ac18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <handleIncomingAck+0x36>
 800ac30:	4b54      	ldr	r3, [pc, #336]	; (800ad84 <handleIncomingAck+0x17c>)
 800ac32:	4a55      	ldr	r2, [pc, #340]	; (800ad88 <handleIncomingAck+0x180>)
 800ac34:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800ac38:	4854      	ldr	r0, [pc, #336]	; (800ad8c <handleIncomingAck+0x184>)
 800ac3a:	f006 f89f 	bl	8010d7c <__assert_func>
    assert( pIncomingPacket != NULL );
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <handleIncomingAck+0x4a>
 800ac44:	4b52      	ldr	r3, [pc, #328]	; (800ad90 <handleIncomingAck+0x188>)
 800ac46:	4a50      	ldr	r2, [pc, #320]	; (800ad88 <handleIncomingAck+0x180>)
 800ac48:	f240 6131 	movw	r1, #1585	; 0x631
 800ac4c:	484f      	ldr	r0, [pc, #316]	; (800ad8c <handleIncomingAck+0x184>)
 800ac4e:	f006 f895 	bl	8010d7c <__assert_func>
    assert( pContext->appCallback != NULL );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <handleIncomingAck+0x60>
 800ac5a:	4b4e      	ldr	r3, [pc, #312]	; (800ad94 <handleIncomingAck+0x18c>)
 800ac5c:	4a4a      	ldr	r2, [pc, #296]	; (800ad88 <handleIncomingAck+0x180>)
 800ac5e:	f240 6132 	movw	r1, #1586	; 0x632
 800ac62:	484a      	ldr	r0, [pc, #296]	; (800ad8c <handleIncomingAck+0x184>)
 800ac64:	f006 f88a 	bl	8010d7c <__assert_func>

    appCallback = pContext->appCallback;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6c:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2bd0      	cmp	r3, #208	; 0xd0
 800ac74:	d01d      	beq.n	800acb2 <handleIncomingAck+0xaa>
 800ac76:	2bd0      	cmp	r3, #208	; 0xd0
 800ac78:	dc64      	bgt.n	800ad44 <handleIncomingAck+0x13c>
 800ac7a:	2bb0      	cmp	r3, #176	; 0xb0
 800ac7c:	d044      	beq.n	800ad08 <handleIncomingAck+0x100>
 800ac7e:	2bb0      	cmp	r3, #176	; 0xb0
 800ac80:	dc60      	bgt.n	800ad44 <handleIncomingAck+0x13c>
 800ac82:	2b90      	cmp	r3, #144	; 0x90
 800ac84:	d040      	beq.n	800ad08 <handleIncomingAck+0x100>
 800ac86:	2b90      	cmp	r3, #144	; 0x90
 800ac88:	dc5c      	bgt.n	800ad44 <handleIncomingAck+0x13c>
 800ac8a:	2b70      	cmp	r3, #112	; 0x70
 800ac8c:	d009      	beq.n	800aca2 <handleIncomingAck+0x9a>
 800ac8e:	2b70      	cmp	r3, #112	; 0x70
 800ac90:	dc58      	bgt.n	800ad44 <handleIncomingAck+0x13c>
 800ac92:	2b62      	cmp	r3, #98	; 0x62
 800ac94:	d005      	beq.n	800aca2 <handleIncomingAck+0x9a>
 800ac96:	2b62      	cmp	r3, #98	; 0x62
 800ac98:	dc54      	bgt.n	800ad44 <handleIncomingAck+0x13c>
 800ac9a:	2b40      	cmp	r3, #64	; 0x40
 800ac9c:	d001      	beq.n	800aca2 <handleIncomingAck+0x9a>
 800ac9e:	2b50      	cmp	r3, #80	; 0x50
 800aca0:	d150      	bne.n	800ad44 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff ff3f 	bl	800ab28 <handlePublishAcks>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800acb0:	e04d      	b.n	800ad4e <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800acb2:	f107 031e 	add.w	r3, r7, #30
 800acb6:	2200      	movs	r2, #0
 800acb8:	4619      	mov	r1, r3
 800acba:	68b8      	ldr	r0, [r7, #8]
 800acbc:	f001 fd6a 	bl	800c794 <MQTT_DeserializeAck>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800acc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acca:	2b00      	cmp	r3, #0
 800accc:	d107      	bne.n	800acde <handleIncomingAck+0xd6>
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	f083 0301 	eor.w	r3, r3, #1
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <handleIncomingAck+0xd6>
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <handleIncomingAck+0xd8>
 800acde:	2300      	movs	r3, #0
 800ace0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ace4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800acf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d129      	bne.n	800ad4c <handleIncomingAck+0x144>
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d026      	beq.n	800ad4c <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800ad06:	e021      	b.n	800ad4c <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800ad08:	f107 031e 	add.w	r3, r7, #30
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4619      	mov	r1, r3
 800ad10:	68b8      	ldr	r0, [r7, #8]
 800ad12:	f001 fd3f 	bl	800c794 <MQTT_DeserializeAck>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800ad1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <handleIncomingAck+0x124>
 800ad24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad28:	2b06      	cmp	r3, #6
 800ad2a:	d101      	bne.n	800ad30 <handleIncomingAck+0x128>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e000      	b.n	800ad32 <handleIncomingAck+0x12a>
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ad36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800ad42:	e004      	b.n	800ad4e <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800ad44:	2305      	movs	r3, #5
 800ad46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ad4a:	e000      	b.n	800ad4e <handleIncomingAck+0x146>
            break;
 800ad4c:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800ad4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00f      	beq.n	800ad76 <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800ad56:	8bfb      	ldrh	r3, [r7, #30]
 800ad58:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800ad5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad5e:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800ad64:	f107 0210 	add.w	r2, r7, #16
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	68b9      	ldr	r1, [r7, #8]
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800ad70:	2300      	movs	r3, #0
 800ad72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800ad76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3728      	adds	r7, #40	; 0x28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	080148a8 	.word	0x080148a8
 800ad88:	08015400 	.word	0x08015400
 800ad8c:	080147cc 	.word	0x080147cc
 800ad90:	08014a78 	.word	0x08014a78
 800ad94:	08014a90 	.word	0x08014a90

0800ad98 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b08b      	sub	sp, #44	; 0x2c
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800ada4:	2300      	movs	r3, #0
 800ada6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800adaa:	f107 0308 	add.w	r3, r7, #8
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	605a      	str	r2, [r3, #4]
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <receiveSingleIteration+0x38>
 800adc2:	4b67      	ldr	r3, [pc, #412]	; (800af60 <receiveSingleIteration+0x1c8>)
 800adc4:	4a67      	ldr	r2, [pc, #412]	; (800af64 <receiveSingleIteration+0x1cc>)
 800adc6:	f240 6176 	movw	r1, #1654	; 0x676
 800adca:	4867      	ldr	r0, [pc, #412]	; (800af68 <receiveSingleIteration+0x1d0>)
 800adcc:	f005 ffd6 	bl	8010d7c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <receiveSingleIteration+0x4e>
 800add8:	4b64      	ldr	r3, [pc, #400]	; (800af6c <receiveSingleIteration+0x1d4>)
 800adda:	4a62      	ldr	r2, [pc, #392]	; (800af64 <receiveSingleIteration+0x1cc>)
 800addc:	f240 6177 	movw	r1, #1655	; 0x677
 800ade0:	4861      	ldr	r0, [pc, #388]	; (800af68 <receiveSingleIteration+0x1d0>)
 800ade2:	f005 ffcb 	bl	8010d7c <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6a11      	ldr	r1, [r2, #32]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800adf6:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800ae00:	1a8a      	subs	r2, r1, r2
 800ae02:	4621      	mov	r1, r4
 800ae04:	4798      	blx	r3
 800ae06:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	da03      	bge.n	800ae16 <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800ae0e:	2304      	movs	r3, #4
 800ae10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae14:	e020      	b.n	800ae58 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d107      	bne.n	800ae2c <receiveSingleIteration+0x94>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800ae24:	2307      	movs	r3, #7
 800ae26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae2a:	e015      	b.n	800ae58 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	441a      	add	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800ae40:	f107 0208 	add.w	r2, r7, #8
 800ae44:	4619      	mov	r1, r3
 800ae46:	f001 fd5e 	bl	800c906 <MQTT_ProcessIncomingPacketTypeAndLength>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	4413      	add	r3, r2
 800ae56:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d112      	bne.n	800ae84 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00f      	beq.n	800ae84 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800ae64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae68:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff fd3c 	bl	800a8e8 <handleKeepAlive>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800ae76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d102      	bne.n	800ae84 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800ae7e:	7efb      	ldrb	r3, [r7, #27]
 800ae80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800ae84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae88:	2b0b      	cmp	r3, #11
 800ae8a:	d01e      	beq.n	800aeca <receiveSingleIteration+0x132>
 800ae8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae90:	2b07      	cmp	r3, #7
 800ae92:	d01a      	beq.n	800aeca <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800ae94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d116      	bne.n	800aeca <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	6a3a      	ldr	r2, [r7, #32]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d909      	bls.n	800aeba <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800aea6:	f107 0308 	add.w	r3, r7, #8
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fbb7 	bl	800a620 <discardStoredPacket>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aeb8:	e007      	b.n	800aeca <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	6a3a      	ldr	r2, [r7, #32]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d902      	bls.n	800aeca <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800aec4:	230b      	movs	r3, #11
 800aec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800aeca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d138      	bne.n	800af44 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1a      	ldr	r2, [r3, #32]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	4413      	add	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800aedc:	7a3b      	ldrb	r3, [r7, #8]
 800aede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aee2:	2b30      	cmp	r3, #48	; 0x30
 800aee4:	d109      	bne.n	800aefa <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fd77 	bl	800a9e0 <handleIncomingPublish>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aef8:	e009      	b.n	800af0e <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fe80 	bl	800ac08 <handleIncomingAck>
 800af08:	4603      	mov	r3, r0
 800af0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	1ad2      	subs	r2, r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1a      	ldr	r2, [r3, #32]
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	461a      	mov	r2, r3
 800af2c:	f006 f897 	bl	801105e <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800af30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af34:	2b00      	cmp	r3, #0
 800af36:	d105      	bne.n	800af44 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4798      	blx	r3
 800af3e:	4602      	mov	r2, r0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800af44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af48:	2b07      	cmp	r3, #7
 800af4a:	d102      	bne.n	800af52 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800af52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af56:	4618      	mov	r0, r3
 800af58:	372c      	adds	r7, #44	; 0x2c
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd90      	pop	{r4, r7, pc}
 800af5e:	bf00      	nop
 800af60:	080148a8 	.word	0x080148a8
 800af64:	08015414 	.word	0x08015414
 800af68:	080147cc 	.word	0x080147cc
 800af6c:	080149e4 	.word	0x080149e4

0800af70 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800af7e:	2300      	movs	r3, #0
 800af80:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <validateSubscribeUnsubscribeParams+0x1e>
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800af8e:	2301      	movs	r3, #1
 800af90:	75fb      	strb	r3, [r7, #23]
 800af92:	e020      	b.n	800afd6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d102      	bne.n	800afa0 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800af9a:	2301      	movs	r3, #1
 800af9c:	75fb      	strb	r3, [r7, #23]
 800af9e:	e01a      	b.n	800afd6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800afa0:	887b      	ldrh	r3, [r7, #2]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800afa6:	2301      	movs	r3, #1
 800afa8:	75fb      	strb	r3, [r7, #23]
 800afaa:	e014      	b.n	800afd6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d110      	bne.n	800afd6 <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	e009      	b.n	800afce <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
                    break;
 800afc6:	e006      	b.n	800afd6 <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	3301      	adds	r3, #1
 800afcc:	613b      	str	r3, [r7, #16]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d3f1      	bcc.n	800afba <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	371c      	adds	r7, #28
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800aff8:	2302      	movs	r3, #2
 800affa:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800b004:	88fb      	ldrh	r3, [r7, #6]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bf0c      	ite	eq
 800b00a:	2301      	moveq	r3, #1
 800b00c:	2300      	movne	r3, #0
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	bf14      	ite	ne
 800b016:	2301      	movne	r3, #1
 800b018:	2300      	moveq	r3, #0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	4053      	eors	r3, r2
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d106      	bne.n	800b032 <addEncodedStringToVector+0x4e>
 800b024:	4b1e      	ldr	r3, [pc, #120]	; (800b0a0 <addEncodedStringToVector+0xbc>)
 800b026:	4a1f      	ldr	r2, [pc, #124]	; (800b0a4 <addEncodedStringToVector+0xc0>)
 800b028:	f240 7139 	movw	r1, #1849	; 0x739
 800b02c:	481e      	ldr	r0, [pc, #120]	; (800b0a8 <addEncodedStringToVector+0xc4>)
 800b02e:	f005 fea5 	bl	8010d7c <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	0a1b      	lsrs	r3, r3, #8
 800b036:	b29b      	uxth	r3, r3
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	88fa      	ldrh	r2, [r7, #6]
 800b044:	b2d2      	uxtb	r2, r2
 800b046:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	3301      	adds	r3, #1
 800b058:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d011      	beq.n	800b088 <addEncodedStringToVector+0xa4>
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00e      	beq.n	800b088 <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3308      	adds	r3, #8
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	3308      	adds	r3, #8
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	3301      	adds	r3, #1
 800b07e:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800b080:	88fb      	ldrh	r3, [r7, #6]
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	4413      	add	r3, r2
 800b086:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	441a      	add	r2, r3
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800b094:	69bb      	ldr	r3, [r7, #24]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	08014ab0 	.word	0x08014ab0
 800b0a4:	0801542c 	.word	0x0801542c
 800b0a8:	080147cc 	.word	0x080147cc

0800b0ac <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b09c      	sub	sp, #112	; 0x70
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800b0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d906      	bls.n	800b0e4 <sendSubscribeWithoutCopy+0x38>
 800b0d6:	4b4f      	ldr	r3, [pc, #316]	; (800b214 <sendSubscribeWithoutCopy+0x168>)
 800b0d8:	4a4f      	ldr	r2, [pc, #316]	; (800b218 <sendSubscribeWithoutCopy+0x16c>)
 800b0da:	f240 716c 	movw	r1, #1900	; 0x76c
 800b0de:	484f      	ldr	r0, [pc, #316]	; (800b21c <sendSubscribeWithoutCopy+0x170>)
 800b0e0:	f005 fe4c 	bl	8010d7c <__assert_func>

    pIndex = subscribeheader;
 800b0e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800b0ea:	f107 0320 	add.w	r3, r7, #32
 800b0ee:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800b0f0:	887b      	ldrh	r3, [r7, #2]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b0f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b0f8:	f001 fa5e 	bl	800c5b8 <MQTT_SerializeSubscribeHeader>
 800b0fc:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800b0fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b100:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b104:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800b106:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b10a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b112:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800b114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	4413      	add	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]
    pIterator++;
 800b11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b120:	3308      	adds	r3, #8
 800b122:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800b124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b126:	3301      	adds	r3, #1
 800b128:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800b12a:	e065      	b.n	800b1f8 <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800b130:	e043      	b.n	800b1ba <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800b132:	f107 0218 	add.w	r2, r7, #24
 800b136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800b13c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b13e:	4613      	mov	r3, r2
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	461a      	mov	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800b14c:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800b14e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b150:	4613      	mov	r3, r2
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	461a      	mov	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800b15e:	891a      	ldrh	r2, [r3, #8]
 800b160:	f107 0314 	add.w	r3, r7, #20
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b168:	f7ff ff3c 	bl	800afe4 <addEncodedStringToVector>
 800b16c:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800b16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b174:	4413      	add	r3, r2
 800b176:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800b178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b17a:	4613      	mov	r3, r2
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	461a      	mov	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	461a      	mov	r2, r3
 800b18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b18c:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800b18e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b190:	2201      	movs	r2, #1
 800b192:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800b194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4413      	add	r3, r2
 800b19c:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800b19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800b1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a8:	4413      	add	r3, r2
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800b1ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800b1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800b1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1bc:	f1c3 0304 	rsb	r3, r3, #4
 800b1c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d803      	bhi.n	800b1ce <sendSubscribeWithoutCopy+0x122>
 800b1c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d3b1      	bcc.n	800b132 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800b1ce:	f107 0320 	add.w	r3, r7, #32
 800b1d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7fe ff3a 	bl	800a050 <sendMessageVector>
 800b1dc:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800b1de:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d002      	beq.n	800b1ea <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800b1ea:	f107 0320 	add.w	r3, r7, #32
 800b1ee:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800b1f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d103      	bne.n	800b208 <sendSubscribeWithoutCopy+0x15c>
 800b200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d391      	bcc.n	800b12c <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800b208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3768      	adds	r7, #104	; 0x68
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	08014ad8 	.word	0x08014ad8
 800b218:	08015448 	.word	0x08015448
 800b21c:	080147cc 	.word	0x080147cc

0800b220 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b0ac      	sub	sp, #176	; 0xb0
 800b224:	af02      	add	r7, sp, #8
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b22e:	2300      	movs	r3, #0
 800b230:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800b240:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800b248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b24c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d007      	beq.n	800b266 <sendConnectWithoutCopy+0x46>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800b264:	e0ec      	b.n	800b440 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800b270:	f001 f894 	bl	800c39c <MQTT_SerializeConnectFixedHeader>
 800b274:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800b278:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b27c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	2b0f      	cmp	r3, #15
 800b284:	dd06      	ble.n	800b294 <sendConnectWithoutCopy+0x74>
 800b286:	4b71      	ldr	r3, [pc, #452]	; (800b44c <sendConnectWithoutCopy+0x22c>)
 800b288:	4a71      	ldr	r2, [pc, #452]	; (800b450 <sendConnectWithoutCopy+0x230>)
 800b28a:	f640 0172 	movw	r1, #2162	; 0x872
 800b28e:	4871      	ldr	r0, [pc, #452]	; (800b454 <sendConnectWithoutCopy+0x234>)
 800b290:	f005 fd74 	bl	8010d7c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800b294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b298:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800b29c:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800b29e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b2a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2ae:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800b2b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800b2c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800b2ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6859      	ldr	r1, [r3, #4]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	891a      	ldrh	r2, [r3, #8]
 800b2dc:	f107 0020 	add.w	r0, r7, #32
 800b2e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2ea:	f7ff fe7b 	bl	800afe4 <addEncodedStringToVector>
 800b2ee:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800b2f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800b302:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b30a:	4413      	add	r3, r2
 800b30c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d03c      	beq.n	800b390 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6859      	ldr	r1, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	891a      	ldrh	r2, [r3, #8]
 800b31e:	f107 001c 	add.w	r0, r7, #28
 800b322:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32c:	f7ff fe5a 	bl	800afe4 <addEncodedStringToVector>
 800b330:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800b334:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b33e:	4413      	add	r3, r2
 800b340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800b344:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b34c:	4413      	add	r3, r2
 800b34e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	f107 0018 	add.w	r0, r7, #24
 800b360:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b36a:	f7ff fe3b 	bl	800afe4 <addEncodedStringToVector>
 800b36e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800b372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b376:	00db      	lsls	r3, r3, #3
 800b378:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b37c:	4413      	add	r3, r2
 800b37e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800b382:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b38a:	4413      	add	r3, r2
 800b38c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01d      	beq.n	800b3d4 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	68d9      	ldr	r1, [r3, #12]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	8a1a      	ldrh	r2, [r3, #16]
 800b3a0:	f107 0014 	add.w	r0, r7, #20
 800b3a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ae:	f7ff fe19 	bl	800afe4 <addEncodedStringToVector>
 800b3b2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800b3b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800b3c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b3ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01d      	beq.n	800b418 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	6959      	ldr	r1, [r3, #20]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	8b1a      	ldrh	r2, [r3, #24]
 800b3e4:	f107 0010 	add.w	r0, r7, #16
 800b3e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3f2:	f7ff fdf7 	bl	800afe4 <addEncodedStringToVector>
 800b3f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800b3fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b404:	4413      	add	r3, r2
 800b406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800b40a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b40e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b412:	4413      	add	r3, r2
 800b414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800b418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b41c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b420:	4619      	mov	r1, r3
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7fe fe14 	bl	800a050 <sendMessageVector>
 800b428:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800b42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b430:	461a      	mov	r2, r3
 800b432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b436:	4293      	cmp	r3, r2
 800b438:	d002      	beq.n	800b440 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800b43a:	2303      	movs	r3, #3
 800b43c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800b440:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800b444:	4618      	mov	r0, r3
 800b446:	37a8      	adds	r7, #168	; 0xa8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	08014b50 	.word	0x08014b50
 800b450:	08015464 	.word	0x08015464
 800b454:	080147cc 	.word	0x080147cc

0800b458 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	; 0x30
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	4613      	mov	r3, r2
 800b466:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	2300      	movs	r3, #0
 800b478:	623b      	str	r3, [r7, #32]
 800b47a:	2300      	movs	r3, #0
 800b47c:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800b47e:	2300      	movs	r3, #0
 800b480:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d106      	bne.n	800b49a <receiveConnack+0x42>
 800b48c:	4b4e      	ldr	r3, [pc, #312]	; (800b5c8 <receiveConnack+0x170>)
 800b48e:	4a4f      	ldr	r2, [pc, #316]	; (800b5cc <receiveConnack+0x174>)
 800b490:	f640 01da 	movw	r1, #2266	; 0x8da
 800b494:	484e      	ldr	r0, [pc, #312]	; (800b5d0 <receiveConnack+0x178>)
 800b496:	f005 fc71 	bl	8010d7c <__assert_func>
    assert( pIncomingPacket != NULL );
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <receiveConnack+0x56>
 800b4a0:	4b4c      	ldr	r3, [pc, #304]	; (800b5d4 <receiveConnack+0x17c>)
 800b4a2:	4a4a      	ldr	r2, [pc, #296]	; (800b5cc <receiveConnack+0x174>)
 800b4a4:	f640 01db 	movw	r1, #2267	; 0x8db
 800b4a8:	4849      	ldr	r0, [pc, #292]	; (800b5d0 <receiveConnack+0x178>)
 800b4aa:	f005 fc67 	bl	8010d7c <__assert_func>
    assert( pContext->getTime != NULL );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <receiveConnack+0x6c>
 800b4b6:	4b48      	ldr	r3, [pc, #288]	; (800b5d8 <receiveConnack+0x180>)
 800b4b8:	4a44      	ldr	r2, [pc, #272]	; (800b5cc <receiveConnack+0x174>)
 800b4ba:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800b4be:	4844      	ldr	r0, [pc, #272]	; (800b5d0 <receiveConnack+0x178>)
 800b4c0:	f005 fc5c 	bl	8010d7c <__assert_func>

    getTimeStamp = pContext->getTime;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	4798      	blx	r3
 800b4ce:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6918      	ldr	r0, [r3, #16]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	f001 f9cd 	bl	800c87a <MQTT_GetIncomingPacketTypeAndLength>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00e      	beq.n	800b50a <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	4798      	blx	r3
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	6979      	ldr	r1, [r7, #20]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe ff1f 	bl	800a338 <calculateElapsedTime>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4293      	cmp	r3, r2
 800b500:	bf94      	ite	ls
 800b502:	2301      	movls	r3, #1
 800b504:	2300      	movhi	r3, #0
 800b506:	77fb      	strb	r3, [r7, #31]
 800b508:	e008      	b.n	800b51c <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800b50a:	8bbb      	ldrh	r3, [r7, #28]
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	bf8c      	ite	hi
 800b510:	2301      	movhi	r3, #1
 800b512:	2300      	movls	r3, #0
 800b514:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800b516:	8bbb      	ldrh	r3, [r7, #28]
 800b518:	3301      	adds	r3, #1
 800b51a:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800b51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b520:	2b07      	cmp	r3, #7
 800b522:	d105      	bne.n	800b530 <receiveConnack+0xd8>
 800b524:	7ffb      	ldrb	r3, [r7, #31]
 800b526:	f083 0301 	eor.w	r3, r3, #1
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1cf      	bne.n	800b4d0 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800b530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b534:	2b00      	cmp	r3, #0
 800b536:	d123      	bne.n	800b580 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	4798      	blx	r3
 800b53c:	4603      	mov	r3, r0
 800b53e:	6979      	ldr	r1, [r7, #20]
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fef9 	bl	800a338 <calculateElapsedTime>
 800b546:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d203      	bcs.n	800b558 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d10c      	bne.n	800b57a <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	6a3a      	ldr	r2, [r7, #32]
 800b564:	9201      	str	r2, [sp, #4]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	9200      	str	r2, [sp, #0]
 800b56a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff f8df 	bl	800a730 <receivePacket>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b578:	e002      	b.n	800b580 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800b57a:	2305      	movs	r3, #5
 800b57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800b580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10b      	bne.n	800b5a0 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a1a      	ldr	r2, [r3, #32]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800b590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b592:	2100      	movs	r1, #0
 800b594:	6838      	ldr	r0, [r7, #0]
 800b596:	f001 f8fd 	bl	800c794 <MQTT_DeserializeAck>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800b5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d006      	beq.n	800b5bc <receiveConnack+0x164>
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800b5b6:	2305      	movs	r3, #5
 800b5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800b5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3728      	adds	r7, #40	; 0x28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	080148a8 	.word	0x080148a8
 800b5cc:	0801547c 	.word	0x0801547c
 800b5d0:	080147cc 	.word	0x080147cc
 800b5d4:	08014a78 	.word	0x08014a78
 800b5d8:	080148cc 	.word	0x080148cc

0800b5dc <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <handleSessionResumption+0x30>
 800b5fe:	4b2c      	ldr	r3, [pc, #176]	; (800b6b0 <handleSessionResumption+0xd4>)
 800b600:	4a2c      	ldr	r2, [pc, #176]	; (800b6b4 <handleSessionResumption+0xd8>)
 800b602:	f640 1152 	movw	r1, #2386	; 0x952
 800b606:	482c      	ldr	r0, [pc, #176]	; (800b6b8 <handleSessionResumption+0xdc>)
 800b608:	f005 fbb8 	bl	8010d7c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a18      	ldr	r0, [r3, #32]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	461a      	mov	r2, r3
 800b61c:	2100      	movs	r1, #0
 800b61e:	f005 fd38 	bl	8011092 <memset>

    if( sessionPresent == true )
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d023      	beq.n	800b670 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800b628:	f107 020f 	add.w	r2, r7, #15
 800b62c:	f107 0310 	add.w	r3, r7, #16
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 ff03 	bl	800d43e <MQTT_PubrelToResend>
 800b638:	4603      	mov	r3, r0
 800b63a:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800b63c:	e011      	b.n	800b662 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800b63e:	7bfa      	ldrb	r2, [r7, #15]
 800b640:	8abb      	ldrh	r3, [r7, #20]
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff f8ed 	bl	800a824 <sendPublishAcks>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800b64e:	f107 020f 	add.w	r2, r7, #15
 800b652:	f107 0310 	add.w	r3, r7, #16
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fef0 	bl	800d43e <MQTT_PubrelToResend>
 800b65e:	4603      	mov	r3, r0
 800b660:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800b662:	8abb      	ldrh	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01d      	beq.n	800b6a4 <handleSessionResumption+0xc8>
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0e7      	beq.n	800b63e <handleSessionResumption+0x62>
 800b66e:	e019      	b.n	800b6a4 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	461a      	mov	r2, r3
 800b684:	2100      	movs	r1, #0
 800b686:	f005 fd04 	bl	8011092 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d008      	beq.n	800b6a4 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	461a      	mov	r2, r3
 800b69e:	2100      	movs	r1, #0
 800b6a0:	f005 fcf7 	bl	8011092 <memset>
        }
    }

    return status;
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	080148a8 	.word	0x080148a8
 800b6b4:	0801548c 	.word	0x0801548c
 800b6b8:	080147cc 	.word	0x080147cc

0800b6bc <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800b6bc:	b590      	push	{r4, r7, lr}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <MQTT_Init+0x24>
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <MQTT_Init+0x24>
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	e03a      	b.n	800b75c <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
 800b6f0:	e034      	b.n	800b75c <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
 800b6fc:	e02e      	b.n	800b75c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
 800b70a:	e027      	b.n	800b75c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d102      	bne.n	800b71a <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800b714:	2301      	movs	r3, #1
 800b716:	75fb      	strb	r3, [r7, #23]
 800b718:	e020      	b.n	800b75c <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800b71a:	2250      	movs	r2, #80	; 0x50
 800b71c:	2100      	movs	r1, #0
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f005 fcb7 	bl	8011092 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	f103 0410 	add.w	r4, r3, #16
 800b734:	4613      	mov	r3, r2
 800b736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b74c:	3320      	adds	r3, #32
 800b74e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b752:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2201      	movs	r2, #1
 800b75a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	bd90      	pop	{r4, r7, pc}

0800b766 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b08e      	sub	sp, #56	; 0x38
 800b76a:	af02      	add	r7, sp, #8
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	607a      	str	r2, [r7, #4]
 800b772:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800b774:	2300      	movs	r3, #0
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
 800b778:	2300      	movs	r3, #0
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800b782:	f107 0314 	add.w	r3, r7, #20
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	605a      	str	r2, [r3, #4]
 800b78c:	609a      	str	r2, [r3, #8]
 800b78e:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800b790:	2300      	movs	r3, #0
 800b792:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d005      	beq.n	800b7a6 <MQTT_Connect+0x40>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <MQTT_Connect+0x40>
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d102      	bne.n	800b7ac <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800b7ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800b7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f000 fe64 	bl	800c48c <MQTT_GetConnectPacketSize>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800b7ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d108      	bne.n	800b7e4 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800b7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fd21 	bl	800b220 <sendConnectWithoutCopy>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800b7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10d      	bne.n	800b808 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	781a      	ldrb	r2, [r3, #0]
 800b7f0:	f107 0114 	add.w	r1, r7, #20
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7ff fe2b 	bl	800b458 <receiveConnack>
 800b802:	4603      	mov	r3, r0
 800b804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800b808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d108      	bne.n	800b822 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	4619      	mov	r1, r3
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff fee0 	bl	800b5dc <handleSessionResumption>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800b822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10f      	bne.n	800b84a <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	885a      	ldrh	r2, [r3, #2]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800b84a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3730      	adds	r7, #48	; 0x30
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b08a      	sub	sp, #40	; 0x28
 800b85a:	af02      	add	r7, sp, #8
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
 800b862:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800b864:	2300      	movs	r3, #0
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	2300      	movs	r3, #0
 800b86a:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800b86c:	887b      	ldrh	r3, [r7, #2]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff fb7c 	bl	800af70 <validateSubscribeUnsubscribeParams>
 800b878:	4603      	mov	r3, r0
 800b87a:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800b87c:	7ffb      	ldrb	r3, [r7, #31]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d109      	bne.n	800b896 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	f107 0218 	add.w	r2, r7, #24
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	68b8      	ldr	r0, [r7, #8]
 800b88e:	f000 fe69 	bl	800c564 <MQTT_GetSubscribePacketSize>
 800b892:	4603      	mov	r3, r0
 800b894:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800b896:	7ffb      	ldrb	r3, [r7, #31]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	887a      	ldrh	r2, [r7, #2]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff fbff 	bl	800b0ac <sendSubscribeWithoutCopy>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800b8b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3720      	adds	r7, #32
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <MQTT_Ping>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800b8d0:	f107 0310 	add.w	r3, r7, #16
 800b8d4:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800b8e4:	7ffb      	ldrb	r3, [r7, #31]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800b8ea:	f107 0314 	add.w	r3, r7, #20
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fedc 	bl	800c6ac <MQTT_GetPingreqPacketSize>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800b8f8:	7ffb      	ldrb	r3, [r7, #31]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d106      	bne.n	800b90c <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	4618      	mov	r0, r3
 800b904:	f000 fee8 	bl	800c6d8 <MQTT_SerializePingreq>
 800b908:	4603      	mov	r3, r0
 800b90a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800b90c:	7ffb      	ldrb	r3, [r7, #31]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d116      	bne.n	800b940 <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800b912:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800b914:	2202      	movs	r2, #2
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7fe fc7f 	bl	800a21c <sendBuffer>
 800b91e:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	461a      	mov	r2, r3
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	4293      	cmp	r3, r2
 800b928:	da02      	bge.n	800b930 <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800b92a:	2303      	movs	r3, #3
 800b92c:	77fb      	strb	r3, [r7, #31]
 800b92e:	e007      	b.n	800b940 <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800b940:	7ffb      	ldrb	r3, [r7, #31]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800b952:	2301      	movs	r3, #1
 800b954:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d011      	beq.n	800b980 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00d      	beq.n	800b980 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d009      	beq.n	800b980 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800b974:	2101      	movs	r1, #1
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fa0e 	bl	800ad98 <receiveSingleIteration>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d012      	beq.n	800b9c2 <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a0:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d103      	bne.n	800b9b6 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b9b4:	e005      	b.n	800b9c2 <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800b9c2:	89fb      	ldrh	r3, [r7, #14]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b7f      	cmp	r3, #127	; 0x7f
 800b9dc:	d802      	bhi.n	800b9e4 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	e00f      	b.n	800ba04 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9ea:	d202      	bcs.n	800b9f2 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e008      	b.n	800ba04 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9f8:	d202      	bcs.n	800ba00 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	60fb      	str	r3, [r7, #12]
 800b9fe:	e001      	b.n	800ba04 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800ba00:	2304      	movs	r3, #4
 800ba02:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800ba04:	68fb      	ldr	r3, [r7, #12]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
	...

0800ba14 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <encodeRemainingLength+0x26>
 800ba2c:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <encodeRemainingLength+0x64>)
 800ba2e:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <encodeRemainingLength+0x68>)
 800ba30:	f240 11f1 	movw	r1, #497	; 0x1f1
 800ba34:	4812      	ldr	r0, [pc, #72]	; (800ba80 <encodeRemainingLength+0x6c>)
 800ba36:	f005 f9a1 	bl	8010d7c <__assert_func>

    pLengthEnd = pDestination;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba46:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	09db      	lsrs	r3, r3, #7
 800ba4c:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba5a:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	7dfa      	ldrb	r2, [r7, #23]
 800ba60:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3301      	adds	r3, #1
 800ba66:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e7      	bne.n	800ba3e <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800ba6e:	693b      	ldr	r3, [r7, #16]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	08014d50 	.word	0x08014d50
 800ba7c:	080154a4 	.word	0x080154a4
 800ba80:	08014d68 	.word	0x08014d68

0800ba84 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d106      	bne.n	800baae <encodeString+0x2a>
 800baa0:	4b15      	ldr	r3, [pc, #84]	; (800baf8 <encodeString+0x74>)
 800baa2:	4a16      	ldr	r2, [pc, #88]	; (800bafc <encodeString+0x78>)
 800baa4:	f240 2115 	movw	r1, #533	; 0x215
 800baa8:	4815      	ldr	r0, [pc, #84]	; (800bb00 <encodeString+0x7c>)
 800baaa:	f005 f967 	bl	8010d7c <__assert_func>

    pBuffer = pDestination;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800bab2:	88fb      	ldrh	r3, [r7, #6]
 800bab4:	0a1b      	lsrs	r3, r3, #8
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	3301      	adds	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800bac4:	88fb      	ldrh	r3, [r7, #6]
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	3301      	adds	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d005      	beq.n	800bae4 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	461a      	mov	r2, r3
 800badc:	6939      	ldr	r1, [r7, #16]
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f005 faaf 	bl	8011042 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800bae4:	88fb      	ldrh	r3, [r7, #6]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800baec:	697b      	ldr	r3, [r7, #20]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	08014d50 	.word	0x08014d50
 800bafc:	080154bc 	.word	0x080154bc
 800bb00:	08014d68 	.word	0x08014d68

0800bb04 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	2301      	movs	r3, #1
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb2c:	d903      	bls.n	800bb36 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800bb2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	e01c      	b.n	800bb70 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800bb36:	f107 010b 	add.w	r1, r7, #11
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	6838      	ldr	r0, [r7, #0]
 800bb40:	4798      	blx	r3
 800bb42:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d10f      	bne.n	800bb6a <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	fb02 f303 	mul.w	r3, r2, r3
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	4413      	add	r3, r2
 800bb5a:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	01db      	lsls	r3, r3, #7
 800bb60:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	3301      	adds	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	e002      	b.n	800bb70 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800bb6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb6e:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb76:	d004      	beq.n	800bb82 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800bb78:	7afb      	ldrb	r3, [r7, #11]
 800bb7a:	b25b      	sxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	dbd2      	blt.n	800bb26 <getRemainingLength+0x22>
 800bb80:	e000      	b.n	800bb84 <getRemainingLength+0x80>
            break;
 800bb82:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb8a:	d00a      	beq.n	800bba2 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800bb8c:	69f8      	ldr	r0, [r7, #28]
 800bb8e:	f7ff ff1f 	bl	800b9d0 <remainingLengthEncodedSize>
 800bb92:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d002      	beq.n	800bba2 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800bb9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bba0:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800bba2:	69fb      	ldr	r3, [r7, #28]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3720      	adds	r7, #32
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbd6:	d905      	bls.n	800bbe4 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800bbd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800bbde:	2305      	movs	r3, #5
 800bbe0:	76bb      	strb	r3, [r7, #26]
 800bbe2:	e01d      	b.n	800bc20 <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	3301      	adds	r3, #1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d915      	bls.n	800bc1c <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800bbfc:	7efb      	ldrb	r3, [r7, #27]
 800bbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc02:	6a3a      	ldr	r2, [r7, #32]
 800bc04:	fb02 f303 	mul.w	r3, r2, r3
 800bc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc0a:	4413      	add	r3, r2
 800bc0c:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	01db      	lsls	r3, r3, #7
 800bc12:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	3301      	adds	r3, #1
 800bc18:	61fb      	str	r3, [r7, #28]
 800bc1a:	e001      	b.n	800bc20 <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800bc1c:	230b      	movs	r3, #11
 800bc1e:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc26:	d006      	beq.n	800bc36 <processRemainingLength+0x8a>
 800bc28:	7ebb      	ldrb	r3, [r7, #26]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800bc2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dbcc      	blt.n	800bbd0 <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800bc36:	7ebb      	ldrb	r3, [r7, #26]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d111      	bne.n	800bc60 <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800bc3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc3e:	f7ff fec7 	bl	800b9d0 <remainingLengthEncodedSize>
 800bc42:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d002      	beq.n	800bc52 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800bc4c:	2305      	movs	r3, #5
 800bc4e:	76bb      	strb	r3, [r7, #26]
 800bc50:	e006      	b.n	800bc60 <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc56:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800bc60:	7ebb      	ldrb	r3, [r7, #26]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3728      	adds	r7, #40	; 0x28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	4603      	mov	r3, r0
 800bc72:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc7e:	2bd0      	cmp	r3, #208	; 0xd0
 800bc80:	d01d      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bc82:	2bd0      	cmp	r3, #208	; 0xd0
 800bc84:	d826      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bc86:	2bb0      	cmp	r3, #176	; 0xb0
 800bc88:	d019      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bc8a:	2bb0      	cmp	r3, #176	; 0xb0
 800bc8c:	d822      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bc8e:	2b90      	cmp	r3, #144	; 0x90
 800bc90:	d015      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bc92:	2b90      	cmp	r3, #144	; 0x90
 800bc94:	d81e      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bc96:	2b70      	cmp	r3, #112	; 0x70
 800bc98:	d011      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bc9a:	2b70      	cmp	r3, #112	; 0x70
 800bc9c:	d81a      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bc9e:	2b60      	cmp	r3, #96	; 0x60
 800bca0:	d010      	beq.n	800bcc4 <incomingPacketValid+0x5a>
 800bca2:	2b60      	cmp	r3, #96	; 0x60
 800bca4:	d816      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bca6:	2b50      	cmp	r3, #80	; 0x50
 800bca8:	d009      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bcaa:	2b50      	cmp	r3, #80	; 0x50
 800bcac:	d812      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bcae:	2b40      	cmp	r3, #64	; 0x40
 800bcb0:	d005      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bcb2:	2b40      	cmp	r3, #64	; 0x40
 800bcb4:	d80e      	bhi.n	800bcd4 <incomingPacketValid+0x6a>
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d001      	beq.n	800bcbe <incomingPacketValid+0x54>
 800bcba:	2b30      	cmp	r3, #48	; 0x30
 800bcbc:	d10a      	bne.n	800bcd4 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	73fb      	strb	r3, [r7, #15]
            break;
 800bcc2:	e00a      	b.n	800bcda <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d004      	beq.n	800bcd8 <incomingPacketValid+0x6e>
            {
                status = true;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800bcd2:	e001      	b.n	800bcd8 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800bcd4:	bf00      	nop
 800bcd6:	e000      	b.n	800bcda <incomingPacketValid+0x70>
            break;
 800bcd8:	bf00      	nop
    }

    return status;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800bcfa:	7afb      	ldrb	r3, [r7, #11]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d209      	bcs.n	800bd1c <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800bd08:	2305      	movs	r3, #5
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	e006      	b.n	800bd1c <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3302      	adds	r3, #2
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d201      	bcs.n	800bd1c <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800bd18:	2305      	movs	r3, #5
 800bd1a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	6039      	str	r1, [r7, #0]
 800bd36:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d106      	bne.n	800bd50 <processPublishFlags+0x24>
 800bd42:	4b20      	ldr	r3, [pc, #128]	; (800bdc4 <processPublishFlags+0x98>)
 800bd44:	4a20      	ldr	r2, [pc, #128]	; (800bdc8 <processPublishFlags+0x9c>)
 800bd46:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800bd4a:	4820      	ldr	r0, [pc, #128]	; (800bdcc <processPublishFlags+0xa0>)
 800bd4c:	f005 f816 	bl	8010d7c <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00b      	beq.n	800bd72 <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800bd64:	2305      	movs	r3, #5
 800bd66:	73fb      	strb	r3, [r7, #15]
 800bd68:	e00f      	b.n	800bd8a <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e00b      	b.n	800bd8a <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	f003 0302 	and.w	r3, r3, #2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d113      	bne.n	800bdb8 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bf14      	ite	ne
 800bd9a:	2301      	movne	r3, #1
 800bd9c:	2300      	moveq	r3, #0
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	f003 0308 	and.w	r3, r3, #8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	bf14      	ite	ne
 800bdae:	2301      	movne	r3, #1
 800bdb0:	2300      	moveq	r3, #0
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	08014d9c 	.word	0x08014d9c
 800bdc8:	080154cc 	.word	0x080154cc
 800bdcc:	08014d68 	.word	0x08014d68

0800bdd0 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800bdd0:	b5b0      	push	{r4, r5, r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <logConnackResponse+0x3c>)
 800bddc:	f107 0408 	add.w	r4, r7, #8
 800bde0:	461d      	mov	r5, r3
 800bde2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bde4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bde6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bdea:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800bdee:	79fb      	ldrb	r3, [r7, #7]
 800bdf0:	2b05      	cmp	r3, #5
 800bdf2:	d906      	bls.n	800be02 <logConnackResponse+0x32>
 800bdf4:	4b06      	ldr	r3, [pc, #24]	; (800be10 <logConnackResponse+0x40>)
 800bdf6:	4a07      	ldr	r2, [pc, #28]	; (800be14 <logConnackResponse+0x44>)
 800bdf8:	f240 412f 	movw	r1, #1071	; 0x42f
 800bdfc:	4806      	ldr	r0, [pc, #24]	; (800be18 <logConnackResponse+0x48>)
 800bdfe:	f004 ffbd 	bl	8010d7c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800be02:	bf00      	nop
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bdb0      	pop	{r4, r5, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08014efc 	.word	0x08014efc
 800be10:	08014ee8 	.word	0x08014ee8
 800be14:	080154e0 	.word	0x080154e0
 800be18:	08014d68 	.word	0x08014d68

0800be1c <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d106      	bne.n	800be42 <deserializeConnack+0x26>
 800be34:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <deserializeConnack+0xc4>)
 800be36:	4a2b      	ldr	r2, [pc, #172]	; (800bee4 <deserializeConnack+0xc8>)
 800be38:	f240 4145 	movw	r1, #1093	; 0x445
 800be3c:	482a      	ldr	r0, [pc, #168]	; (800bee8 <deserializeConnack+0xcc>)
 800be3e:	f004 ff9d 	bl	8010d7c <__assert_func>
    assert( pSessionPresent != NULL );
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <deserializeConnack+0x3a>
 800be48:	4b28      	ldr	r3, [pc, #160]	; (800beec <deserializeConnack+0xd0>)
 800be4a:	4a26      	ldr	r2, [pc, #152]	; (800bee4 <deserializeConnack+0xc8>)
 800be4c:	f240 4146 	movw	r1, #1094	; 0x446
 800be50:	4825      	ldr	r0, [pc, #148]	; (800bee8 <deserializeConnack+0xcc>)
 800be52:	f004 ff93 	bl	8010d7c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	2b02      	cmp	r3, #2
 800be62:	d002      	beq.n	800be6a <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800be64:	2305      	movs	r3, #5
 800be66:	73fb      	strb	r3, [r7, #15]
 800be68:	e01d      	b.n	800bea6 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f043 0301 	orr.w	r3, r3, #1
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b01      	cmp	r3, #1
 800be76:	d002      	beq.n	800be7e <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800be78:	2305      	movs	r3, #5
 800be7a:	73fb      	strb	r3, [r7, #15]
 800be7c:	e013      	b.n	800bea6 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2201      	movs	r2, #1
 800be8e:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	3301      	adds	r3, #1
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d005      	beq.n	800bea6 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800be9a:	2305      	movs	r3, #5
 800be9c:	73fb      	strb	r3, [r7, #15]
 800be9e:	e002      	b.n	800bea6 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d114      	bne.n	800bed6 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3301      	adds	r3, #1
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	d902      	bls.n	800bebc <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800beb6:	2305      	movs	r3, #5
 800beb8:	73fb      	strb	r3, [r7, #15]
 800beba:	e00c      	b.n	800bed6 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3301      	adds	r3, #1
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff ff84 	bl	800bdd0 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	3301      	adds	r3, #1
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800bed2:	2306      	movs	r3, #6
 800bed4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	08014f14 	.word	0x08014f14
 800bee4:	080154f4 	.word	0x080154f4
 800bee8:	08014d68 	.word	0x08014d68
 800beec:	08014f28 	.word	0x08014f28

0800bef0 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800befe:	2300      	movs	r3, #0
 800bf00:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61bb      	str	r3, [r7, #24]
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d106      	bne.n	800bf1e <calculateSubscriptionPacketSize+0x2e>
 800bf10:	4b3d      	ldr	r3, [pc, #244]	; (800c008 <calculateSubscriptionPacketSize+0x118>)
 800bf12:	4a3e      	ldr	r2, [pc, #248]	; (800c00c <calculateSubscriptionPacketSize+0x11c>)
 800bf14:	f240 419b 	movw	r1, #1179	; 0x49b
 800bf18:	483d      	ldr	r0, [pc, #244]	; (800c010 <calculateSubscriptionPacketSize+0x120>)
 800bf1a:	f004 ff2f 	bl	8010d7c <__assert_func>
    assert( subscriptionCount != 0U );
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d106      	bne.n	800bf32 <calculateSubscriptionPacketSize+0x42>
 800bf24:	4b3b      	ldr	r3, [pc, #236]	; (800c014 <calculateSubscriptionPacketSize+0x124>)
 800bf26:	4a39      	ldr	r2, [pc, #228]	; (800c00c <calculateSubscriptionPacketSize+0x11c>)
 800bf28:	f240 419c 	movw	r1, #1180	; 0x49c
 800bf2c:	4838      	ldr	r0, [pc, #224]	; (800c010 <calculateSubscriptionPacketSize+0x120>)
 800bf2e:	f004 ff25 	bl	8010d7c <__assert_func>
    assert( pRemainingLength != NULL );
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d106      	bne.n	800bf46 <calculateSubscriptionPacketSize+0x56>
 800bf38:	4b37      	ldr	r3, [pc, #220]	; (800c018 <calculateSubscriptionPacketSize+0x128>)
 800bf3a:	4a34      	ldr	r2, [pc, #208]	; (800c00c <calculateSubscriptionPacketSize+0x11c>)
 800bf3c:	f240 419d 	movw	r1, #1181	; 0x49d
 800bf40:	4833      	ldr	r0, [pc, #204]	; (800c010 <calculateSubscriptionPacketSize+0x120>)
 800bf42:	f004 ff1b 	bl	8010d7c <__assert_func>
    assert( pPacketSize != NULL );
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <calculateSubscriptionPacketSize+0x6a>
 800bf4c:	4b33      	ldr	r3, [pc, #204]	; (800c01c <calculateSubscriptionPacketSize+0x12c>)
 800bf4e:	4a2f      	ldr	r2, [pc, #188]	; (800c00c <calculateSubscriptionPacketSize+0x11c>)
 800bf50:	f240 419e 	movw	r1, #1182	; 0x49e
 800bf54:	482e      	ldr	r0, [pc, #184]	; (800c010 <calculateSubscriptionPacketSize+0x120>)
 800bf56:	f004 ff11 	bl	8010d7c <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800bf60:	2300      	movs	r3, #0
 800bf62:	61bb      	str	r3, [r7, #24]
 800bf64:	e02f      	b.n	800bfc6 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	461a      	mov	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	4413      	add	r3, r2
 800bf76:	891b      	ldrh	r3, [r3, #8]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	3302      	adds	r3, #2
 800bf80:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800bf82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d102      	bne.n	800bf90 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	891b      	ldrh	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d3cb      	bcc.n	800bf66 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd4:	d301      	bcc.n	800bfda <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800bfda:	7ffb      	ldrb	r3, [r7, #31]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10d      	bne.n	800bffc <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800bfe6:	6978      	ldr	r0, [r7, #20]
 800bfe8:	f7ff fcf2 	bl	800b9d0 <remainingLengthEncodedSize>
 800bfec:	4603      	mov	r3, r0
 800bfee:	3301      	adds	r3, #1
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4413      	add	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800bffc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3720      	adds	r7, #32
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08014f40 	.word	0x08014f40
 800c00c:	08015508 	.word	0x08015508
 800c010:	08014d68 	.word	0x08014d68
 800c014:	08014f5c 	.word	0x08014f5c
 800c018:	08014db4 	.word	0x08014db4
 800c01c:	08014dd0 	.word	0x08014dd0

0800c020 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <readSubackStatus+0x2a>
 800c03c:	4b17      	ldr	r3, [pc, #92]	; (800c09c <readSubackStatus+0x7c>)
 800c03e:	4a18      	ldr	r2, [pc, #96]	; (800c0a0 <readSubackStatus+0x80>)
 800c040:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800c044:	4817      	ldr	r0, [pc, #92]	; (800c0a4 <readSubackStatus+0x84>)
 800c046:	f004 fe99 	bl	8010d7c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e019      	b.n	800c084 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	dc02      	bgt.n	800c066 <readSubackStatus+0x46>
 800c060:	2b00      	cmp	r3, #0
 800c062:	da08      	bge.n	800c076 <readSubackStatus+0x56>
 800c064:	e004      	b.n	800c070 <readSubackStatus+0x50>
 800c066:	2b80      	cmp	r3, #128	; 0x80
 800c068:	d102      	bne.n	800c070 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800c06a:	2306      	movs	r3, #6
 800c06c:	75fb      	strb	r3, [r7, #23]

                break;
 800c06e:	e003      	b.n	800c078 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800c070:	2305      	movs	r3, #5
 800c072:	75fb      	strb	r3, [r7, #23]

                break;
 800c074:	e000      	b.n	800c078 <readSubackStatus+0x58>
                break;
 800c076:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800c078:	7dfb      	ldrb	r3, [r7, #23]
 800c07a:	2b05      	cmp	r3, #5
 800c07c:	d007      	beq.n	800c08e <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	3301      	adds	r3, #1
 800c082:	613b      	str	r3, [r7, #16]
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d3e1      	bcc.n	800c050 <readSubackStatus+0x30>
 800c08c:	e000      	b.n	800c090 <readSubackStatus+0x70>
        {
            break;
 800c08e:	bf00      	nop
        }
    }

    return status;
 800c090:	7dfb      	ldrb	r3, [r7, #23]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	08014f74 	.word	0x08014f74
 800c0a0:	08015528 	.word	0x08015528
 800c0a4:	08014d68 	.word	0x08014d68

0800c0a8 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d106      	bne.n	800c0ce <deserializeSuback+0x26>
 800c0c0:	4b1f      	ldr	r3, [pc, #124]	; (800c140 <deserializeSuback+0x98>)
 800c0c2:	4a20      	ldr	r2, [pc, #128]	; (800c144 <deserializeSuback+0x9c>)
 800c0c4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800c0c8:	481f      	ldr	r0, [pc, #124]	; (800c148 <deserializeSuback+0xa0>)
 800c0ca:	f004 fe57 	bl	8010d7c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <deserializeSuback+0x3a>
 800c0d4:	4b1d      	ldr	r3, [pc, #116]	; (800c14c <deserializeSuback+0xa4>)
 800c0d6:	4a1b      	ldr	r2, [pc, #108]	; (800c144 <deserializeSuback+0x9c>)
 800c0d8:	f240 5121 	movw	r1, #1313	; 0x521
 800c0dc:	481a      	ldr	r0, [pc, #104]	; (800c148 <deserializeSuback+0xa0>)
 800c0de:	f004 fe4d 	bl	8010d7c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d802      	bhi.n	800c0fa <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800c0f4:	2305      	movs	r3, #5
 800c0f6:	75fb      	strb	r3, [r7, #23]
 800c0f8:	e01d      	b.n	800c136 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	021b      	lsls	r3, r3, #8
 800c100:	b21a      	sxth	r2, r3
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	3301      	adds	r3, #1
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	b21b      	sxth	r3, r3
 800c10a:	4313      	orrs	r3, r2
 800c10c:	b21b      	sxth	r3, r3
 800c10e:	b29a      	uxth	r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800c11c:	2305      	movs	r3, #5
 800c11e:	75fb      	strb	r3, [r7, #23]
 800c120:	e009      	b.n	800c136 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	1e9a      	subs	r2, r3, #2
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3302      	adds	r3, #2
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f7ff ff77 	bl	800c020 <readSubackStatus>
 800c132:	4603      	mov	r3, r0
 800c134:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	08014f8c 	.word	0x08014f8c
 800c144:	0801553c 	.word	0x0801553c
 800c148:	08014d68 	.word	0x08014d68
 800c14c:	08014f9c 	.word	0x08014f9c

0800c150 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c15c:	2300      	movs	r3, #0
 800c15e:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800c160:	2300      	movs	r3, #0
 800c162:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <deserializePublish+0x28>
 800c16a:	4b53      	ldr	r3, [pc, #332]	; (800c2b8 <deserializePublish+0x168>)
 800c16c:	4a53      	ldr	r2, [pc, #332]	; (800c2bc <deserializePublish+0x16c>)
 800c16e:	f240 5185 	movw	r1, #1413	; 0x585
 800c172:	4853      	ldr	r0, [pc, #332]	; (800c2c0 <deserializePublish+0x170>)
 800c174:	f004 fe02 	bl	8010d7c <__assert_func>
    assert( pPacketId != NULL );
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <deserializePublish+0x3c>
 800c17e:	4b51      	ldr	r3, [pc, #324]	; (800c2c4 <deserializePublish+0x174>)
 800c180:	4a4e      	ldr	r2, [pc, #312]	; (800c2bc <deserializePublish+0x16c>)
 800c182:	f240 5186 	movw	r1, #1414	; 0x586
 800c186:	484e      	ldr	r0, [pc, #312]	; (800c2c0 <deserializePublish+0x170>)
 800c188:	f004 fdf8 	bl	8010d7c <__assert_func>
    assert( pPublishInfo != NULL );
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <deserializePublish+0x50>
 800c192:	4b4d      	ldr	r3, [pc, #308]	; (800c2c8 <deserializePublish+0x178>)
 800c194:	4a49      	ldr	r2, [pc, #292]	; (800c2bc <deserializePublish+0x16c>)
 800c196:	f240 5187 	movw	r1, #1415	; 0x587
 800c19a:	4849      	ldr	r0, [pc, #292]	; (800c2c0 <deserializePublish+0x170>)
 800c19c:	f004 fdee 	bl	8010d7c <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <deserializePublish+0x66>
 800c1a8:	4b48      	ldr	r3, [pc, #288]	; (800c2cc <deserializePublish+0x17c>)
 800c1aa:	4a44      	ldr	r2, [pc, #272]	; (800c2bc <deserializePublish+0x16c>)
 800c1ac:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800c1b0:	4843      	ldr	r0, [pc, #268]	; (800c2c0 <deserializePublish+0x170>)
 800c1b2:	f004 fde3 	bl	8010d7c <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7ff fdaf 	bl	800bd2c <processPublishFlags>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800c1d2:	7ffb      	ldrb	r3, [r7, #31]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d109      	bne.n	800c1ec <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6898      	ldr	r0, [r3, #8]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2203      	movs	r2, #3
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	f7ff fd80 	bl	800bce8 <checkPublishRemainingLength>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d118      	bne.n	800c224 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	021b      	lsls	r3, r3, #8
 800c1f8:	b21a      	sxth	r2, r3
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	b21b      	sxth	r3, r3
 800c202:	4313      	orrs	r3, r2
 800c204:	b21b      	sxth	r3, r3
 800c206:	b29a      	uxth	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6898      	ldr	r0, [r3, #8]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800c218:	3302      	adds	r3, #2
 800c21a:	461a      	mov	r2, r3
 800c21c:	f7ff fd64 	bl	800bce8 <checkPublishRemainingLength>
 800c220:	4603      	mov	r3, r0
 800c222:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800c224:	7ffb      	ldrb	r3, [r7, #31]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d123      	bne.n	800c272 <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	1c9a      	adds	r2, r3, #2
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	8912      	ldrh	r2, [r2, #8]
 800c23a:	4413      	add	r3, r2
 800c23c:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d015      	beq.n	800c272 <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	021b      	lsls	r3, r3, #8
 800c24c:	b21a      	sxth	r2, r3
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	3301      	adds	r3, #1
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	b21b      	sxth	r3, r3
 800c256:	4313      	orrs	r3, r2
 800c258:	b21b      	sxth	r3, r3
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	3302      	adds	r3, #2
 800c264:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800c26e:	2305      	movs	r3, #5
 800c270:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800c272:	7ffb      	ldrb	r3, [r7, #31]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d119      	bne.n	800c2ac <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	8912      	ldrh	r2, [r2, #8]
 800c280:	1a9b      	subs	r3, r3, r2
 800c282:	1e9a      	subs	r2, r3, #2
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d004      	beq.n	800c29a <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	1e9a      	subs	r2, r3, #2
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <deserializePublish+0x156>
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	e000      	b.n	800c2a8 <deserializePublish+0x158>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800c2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3720      	adds	r7, #32
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	08014fb8 	.word	0x08014fb8
 800c2bc:	08015550 	.word	0x08015550
 800c2c0:	08014d68 	.word	0x08014d68
 800c2c4:	08014fd0 	.word	0x08014fd0
 800c2c8:	08014d9c 	.word	0x08014d9c
 800c2cc:	08014fe4 	.word	0x08014fe4

0800c2d0 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <deserializeSimpleAck+0x22>
 800c2e4:	4b18      	ldr	r3, [pc, #96]	; (800c348 <deserializeSimpleAck+0x78>)
 800c2e6:	4a19      	ldr	r2, [pc, #100]	; (800c34c <deserializeSimpleAck+0x7c>)
 800c2e8:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800c2ec:	4818      	ldr	r0, [pc, #96]	; (800c350 <deserializeSimpleAck+0x80>)
 800c2ee:	f004 fd45 	bl	8010d7c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <deserializeSimpleAck+0x36>
 800c2f8:	4b16      	ldr	r3, [pc, #88]	; (800c354 <deserializeSimpleAck+0x84>)
 800c2fa:	4a14      	ldr	r2, [pc, #80]	; (800c34c <deserializeSimpleAck+0x7c>)
 800c2fc:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800c300:	4813      	ldr	r0, [pc, #76]	; (800c350 <deserializeSimpleAck+0x80>)
 800c302:	f004 fd3b 	bl	8010d7c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d002      	beq.n	800c314 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c30e:	2305      	movs	r3, #5
 800c310:	73fb      	strb	r3, [r7, #15]
 800c312:	e014      	b.n	800c33e <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	b21a      	sxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	3301      	adds	r3, #1
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	b21b      	sxth	r3, r3
 800c328:	4313      	orrs	r3, r2
 800c32a:	b21b      	sxth	r3, r3
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800c33a:	2305      	movs	r3, #5
 800c33c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	0801500c 	.word	0x0801500c
 800c34c:	08015564 	.word	0x08015564
 800c350:	08014d68 	.word	0x08014d68
 800c354:	08014f9c 	.word	0x08014f9c

0800c358 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <deserializePingresp+0x20>
 800c36a:	4b09      	ldr	r3, [pc, #36]	; (800c390 <deserializePingresp+0x38>)
 800c36c:	4a09      	ldr	r2, [pc, #36]	; (800c394 <deserializePingresp+0x3c>)
 800c36e:	f240 6105 	movw	r1, #1541	; 0x605
 800c372:	4809      	ldr	r0, [pc, #36]	; (800c398 <deserializePingresp+0x40>)
 800c374:	f004 fd02 	bl	8010d7c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c380:	2305      	movs	r3, #5
 800c382:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	0801501c 	.word	0x0801501c
 800c394:	0801557c 	.word	0x0801557c
 800c398:	08014d68 	.word	0x08014d68

0800c39c <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2210      	movs	r2, #16
 800c3b6:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6938      	ldr	r0, [r7, #16]
 800c3c2:	f7ff fb27 	bl	800ba14 <encodeRemainingLength>
 800c3c6:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800c3c8:	2204      	movs	r2, #4
 800c3ca:	492f      	ldr	r1, [pc, #188]	; (800c488 <MQTT_SerializeConnectFixedHeader+0xec>)
 800c3cc:	6938      	ldr	r0, [r7, #16]
 800c3ce:	f7ff fb59 	bl	800ba84 <encodeString>
 800c3d2:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2204      	movs	r2, #4
 800c3d8:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	f043 0302 	orr.w	r3, r3, #2
 800c3ee:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3fe:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800c408:	7dfb      	ldrb	r3, [r7, #23]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01c      	beq.n	800c450 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800c416:	7dfb      	ldrb	r3, [r7, #23]
 800c418:	f043 0304 	orr.w	r3, r3, #4
 800c41c:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d104      	bne.n	800c430 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	f043 0308 	orr.w	r3, r3, #8
 800c42c:	75fb      	strb	r3, [r7, #23]
 800c42e:	e007      	b.n	800c440 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d103      	bne.n	800c440 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	f043 0310 	orr.w	r3, r3, #16
 800c43e:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	785b      	ldrb	r3, [r3, #1]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	f043 0320 	orr.w	r3, r3, #32
 800c44e:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	7dfa      	ldrb	r2, [r7, #23]
 800c454:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3301      	adds	r3, #1
 800c45a:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	885b      	ldrh	r3, [r3, #2]
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	b29b      	uxth	r3, r3
 800c464:	b2da      	uxtb	r2, r3
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	885a      	ldrh	r2, [r3, #2]
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	3301      	adds	r3, #1
 800c472:	b2d2      	uxtb	r2, r2
 800c474:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	3302      	adds	r3, #2
 800c47a:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800c47c:	693b      	ldr	r3, [r7, #16]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	08015030 	.word	0x08015030

0800c48c <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c49a:	2300      	movs	r3, #0
 800c49c:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800c49e:	230a      	movs	r3, #10
 800c4a0:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d005      	beq.n	800c4b4 <MQTT_GetConnectPacketSize+0x28>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d002      	beq.n	800c4b4 <MQTT_GetConnectPacketSize+0x28>
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	77fb      	strb	r3, [r7, #31]
 800c4b8:	e04f      	b.n	800c55a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <MQTT_GetConnectPacketSize+0x3e>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	77fb      	strb	r3, [r7, #31]
 800c4ce:	e044      	b.n	800c55a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <MQTT_GetConnectPacketSize+0x5a>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4de:	d302      	bcc.n	800c4e6 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	77fb      	strb	r3, [r7, #31]
 800c4e4:	e039      	b.n	800c55a <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	891b      	ldrh	r3, [r3, #8]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	3302      	adds	r3, #2
 800c4f2:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	891b      	ldrh	r3, [r3, #8]
 800c4fe:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800c504:	441a      	add	r2, r3
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	4413      	add	r3, r2
 800c50a:	3304      	adds	r3, #4
 800c50c:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	8a1b      	ldrh	r3, [r3, #16]
 800c51a:	461a      	mov	r2, r3
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	4413      	add	r3, r2
 800c520:	3302      	adds	r3, #2
 800c522:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d006      	beq.n	800c53a <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	8b1b      	ldrh	r3, [r3, #24]
 800c530:	461a      	mov	r2, r3
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	4413      	add	r3, r2
 800c536:	3302      	adds	r3, #2
 800c538:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800c53e:	69b8      	ldr	r0, [r7, #24]
 800c540:	f7ff fa46 	bl	800b9d0 <remainingLengthEncodedSize>
 800c544:	4603      	mov	r3, r0
 800c546:	3301      	adds	r3, #1
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	4413      	add	r3, r2
 800c54c:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800c55a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3720      	adds	r7, #32
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af02      	add	r7, sp, #8
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c572:	2300      	movs	r3, #0
 800c574:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d005      	beq.n	800c588 <MQTT_GetSubscribePacketSize+0x24>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <MQTT_GetSubscribePacketSize+0x24>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800c588:	2301      	movs	r3, #1
 800c58a:	75fb      	strb	r3, [r7, #23]
 800c58c:	e00f      	b.n	800c5ae <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800c594:	2301      	movs	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]
 800c598:	e009      	b.n	800c5ae <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800c59a:	2300      	movs	r3, #0
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff fca3 	bl	800bef0 <calculateSubscriptionPacketSize>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2282      	movs	r2, #130	; 0x82
 800c5ce:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	f7ff fa1b 	bl	800ba14 <encodeRemainingLength>
 800c5de:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	0a1b      	lsrs	r3, r3, #8
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	88fa      	ldrh	r2, [r7, #6]
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	3302      	adds	r3, #2
 800c5fa:	617b      	str	r3, [r7, #20]

    return pIterator;
 800c5fc:	697b      	ldr	r3, [r7, #20]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800c606:	b480      	push	{r7}
 800c608:	b085      	sub	sp, #20
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
 800c612:	4613      	mov	r3, r2
 800c614:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d102      	bne.n	800c626 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800c620:	2301      	movs	r3, #1
 800c622:	73fb      	strb	r3, [r7, #15]
 800c624:	e03b      	b.n	800c69e <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800c62e:	2301      	movs	r3, #1
 800c630:	73fb      	strb	r3, [r7, #15]
 800c632:	e034      	b.n	800c69e <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d802      	bhi.n	800c642 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800c63c:	2302      	movs	r3, #2
 800c63e:	73fb      	strb	r3, [r7, #15]
 800c640:	e02d      	b.n	800c69e <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800c642:	883b      	ldrh	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800c648:	2301      	movs	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
 800c64c:	e027      	b.n	800c69e <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800c64e:	78fb      	ldrb	r3, [r7, #3]
 800c650:	2b70      	cmp	r3, #112	; 0x70
 800c652:	d009      	beq.n	800c668 <MQTT_SerializeAck+0x62>
 800c654:	2b70      	cmp	r3, #112	; 0x70
 800c656:	dc1f      	bgt.n	800c698 <MQTT_SerializeAck+0x92>
 800c658:	2b62      	cmp	r3, #98	; 0x62
 800c65a:	d005      	beq.n	800c668 <MQTT_SerializeAck+0x62>
 800c65c:	2b62      	cmp	r3, #98	; 0x62
 800c65e:	dc1b      	bgt.n	800c698 <MQTT_SerializeAck+0x92>
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d001      	beq.n	800c668 <MQTT_SerializeAck+0x62>
 800c664:	2b50      	cmp	r3, #80	; 0x50
 800c666:	d117      	bne.n	800c698 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3301      	adds	r3, #1
 800c676:	2202      	movs	r2, #2
 800c678:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800c67a:	883b      	ldrh	r3, [r7, #0]
 800c67c:	0a1b      	lsrs	r3, r3, #8
 800c67e:	b29a      	uxth	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3302      	adds	r3, #2
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3303      	adds	r3, #3
 800c690:	883a      	ldrh	r2, [r7, #0]
 800c692:	b2d2      	uxtb	r2, r2
 800c694:	701a      	strb	r2, [r3, #0]
                break;
 800c696:	e002      	b.n	800c69e <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]
                break;
 800c69c:	bf00      	nop
        }
    }

    return status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	73fb      	strb	r3, [r7, #15]
 800c6c2:	e002      	b.n	800c6ca <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	601a      	str	r2, [r3, #0]
    }

    return status;
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	73fb      	strb	r3, [r7, #15]
 800c6ee:	e005      	b.n	800c6fc <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d105      	bne.n	800c70e <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d801      	bhi.n	800c70e <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800c70a:	2302      	movs	r3, #2
 800c70c:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d108      	bne.n	800c726 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	22c0      	movs	r2, #192	; 0xc0
 800c71a:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c740:	2300      	movs	r3, #0
 800c742:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <MQTT_DeserializePublish+0x22>
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <MQTT_DeserializePublish+0x22>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d102      	bne.n	800c75c <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800c756:	2301      	movs	r3, #1
 800c758:	75fb      	strb	r3, [r7, #23]
 800c75a:	e016      	b.n	800c78a <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c764:	2b30      	cmp	r3, #48	; 0x30
 800c766:	d002      	beq.n	800c76e <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800c768:	2301      	movs	r3, #1
 800c76a:	75fb      	strb	r3, [r7, #23]
 800c76c:	e00d      	b.n	800c78a <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d102      	bne.n	800c77c <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800c776:	2301      	movs	r3, #1
 800c778:	75fb      	strb	r3, [r7, #23]
 800c77a:	e006      	b.n	800c78a <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7ff fce5 	bl	800c150 <deserializePublish>
 800c786:	4603      	mov	r3, r0
 800c788:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	75fb      	strb	r3, [r7, #23]
 800c7ae:	e05f      	b.n	800c870 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10a      	bne.n	800c7cc <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800c7ba:	2b20      	cmp	r3, #32
 800c7bc:	d006      	beq.n	800c7cc <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800c7c2:	2bd0      	cmp	r3, #208	; 0xd0
 800c7c4:	d002      	beq.n	800c7cc <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	75fb      	strb	r3, [r7, #23]
 800c7ca:	e051      	b.n	800c870 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	d102      	bne.n	800c7e0 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	75fb      	strb	r3, [r7, #23]
 800c7de:	e047      	b.n	800c870 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800c7ec:	2bd0      	cmp	r3, #208	; 0xd0
 800c7ee:	d002      	beq.n	800c7f6 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	75fb      	strb	r3, [r7, #23]
 800c7f4:	e03c      	b.n	800c870 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2bd0      	cmp	r3, #208	; 0xd0
 800c7fc:	d028      	beq.n	800c850 <MQTT_DeserializeAck+0xbc>
 800c7fe:	2bd0      	cmp	r3, #208	; 0xd0
 800c800:	dc33      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c802:	2bb0      	cmp	r3, #176	; 0xb0
 800c804:	d02a      	beq.n	800c85c <MQTT_DeserializeAck+0xc8>
 800c806:	2bb0      	cmp	r3, #176	; 0xb0
 800c808:	dc2f      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c80a:	2b90      	cmp	r3, #144	; 0x90
 800c80c:	d019      	beq.n	800c842 <MQTT_DeserializeAck+0xae>
 800c80e:	2b90      	cmp	r3, #144	; 0x90
 800c810:	dc2b      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c812:	2b70      	cmp	r3, #112	; 0x70
 800c814:	d022      	beq.n	800c85c <MQTT_DeserializeAck+0xc8>
 800c816:	2b70      	cmp	r3, #112	; 0x70
 800c818:	dc27      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c81a:	2b62      	cmp	r3, #98	; 0x62
 800c81c:	d01e      	beq.n	800c85c <MQTT_DeserializeAck+0xc8>
 800c81e:	2b62      	cmp	r3, #98	; 0x62
 800c820:	dc23      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c822:	2b50      	cmp	r3, #80	; 0x50
 800c824:	d01a      	beq.n	800c85c <MQTT_DeserializeAck+0xc8>
 800c826:	2b50      	cmp	r3, #80	; 0x50
 800c828:	dc1f      	bgt.n	800c86a <MQTT_DeserializeAck+0xd6>
 800c82a:	2b20      	cmp	r3, #32
 800c82c:	d002      	beq.n	800c834 <MQTT_DeserializeAck+0xa0>
 800c82e:	2b40      	cmp	r3, #64	; 0x40
 800c830:	d014      	beq.n	800c85c <MQTT_DeserializeAck+0xc8>
 800c832:	e01a      	b.n	800c86a <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff faf0 	bl	800be1c <deserializeConnack>
 800c83c:	4603      	mov	r3, r0
 800c83e:	75fb      	strb	r3, [r7, #23]
                break;
 800c840:	e016      	b.n	800c870 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff fc2f 	bl	800c0a8 <deserializeSuback>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
                break;
 800c84e:	e00f      	b.n	800c870 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7ff fd81 	bl	800c358 <deserializePingresp>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
                break;
 800c85a:	e009      	b.n	800c870 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800c85c:	68b9      	ldr	r1, [r7, #8]
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f7ff fd36 	bl	800c2d0 <deserializeSimpleAck>
 800c864:	4603      	mov	r3, r0
 800c866:	75fb      	strb	r3, [r7, #23]
                break;
 800c868:	e002      	b.n	800c870 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800c86a:	2305      	movs	r3, #5
 800c86c:	75fb      	strb	r3, [r7, #23]
                break;
 800c86e:	bf00      	nop
        }
    }

    return status;
 800c870:	7dfb      	ldrb	r3, [r7, #23]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800c894:	2301      	movs	r3, #1
 800c896:	75fb      	strb	r3, [r7, #23]
 800c898:	e005      	b.n	800c8a6 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800c89a:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	68b8      	ldr	r0, [r7, #8]
 800c8a2:	4798      	blx	r3
 800c8a4:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d119      	bne.n	800c8e0 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff f9da 	bl	800bc6a <incomingPacketValid>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00e      	beq.n	800c8da <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff f920 	bl	800bb04 <getRemainingLength>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8d2:	d113      	bne.n	800c8fc <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800c8d4:	2305      	movs	r3, #5
 800c8d6:	75fb      	strb	r3, [r7, #23]
 800c8d8:	e010      	b.n	800c8fc <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800c8da:	2305      	movs	r3, #5
 800c8dc:	75fb      	strb	r3, [r7, #23]
 800c8de:	e00d      	b.n	800c8fc <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d005      	beq.n	800c8f2 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d102      	bne.n	800c8f2 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800c8ec:	2307      	movs	r3, #7
 800c8ee:	75fb      	strb	r3, [r7, #23]
 800c8f0:	e004      	b.n	800c8fc <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d001      	beq.n	800c8fc <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800c8f8:	2304      	movs	r3, #4
 800c8fa:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b086      	sub	sp, #24
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c912:	2300      	movs	r3, #0
 800c914:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800c91c:	2301      	movs	r3, #1
 800c91e:	75fb      	strb	r3, [r7, #23]
 800c920:	e016      	b.n	800c950 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800c928:	2301      	movs	r3, #1
 800c92a:	75fb      	strb	r3, [r7, #23]
 800c92c:	e010      	b.n	800c950 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800c934:	2301      	movs	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
 800c938:	e00a      	b.n	800c950 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800c942:	2307      	movs	r3, #7
 800c944:	75fb      	strb	r3, [r7, #23]
 800c946:	e003      	b.n	800c950 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d111      	bne.n	800c97a <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff f985 	bl	800bc6a <incomingPacketValid>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d007      	beq.n	800c976 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7ff f91e 	bl	800bbac <processRemainingLength>
 800c970:	4603      	mov	r3, r0
 800c972:	75fb      	strb	r3, [r7, #23]
 800c974:	e001      	b.n	800c97a <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800c976:	2305      	movs	r3, #5
 800c978:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800c984:	b490      	push	{r4, r7}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	4611      	mov	r1, r2
 800c990:	461a      	mov	r2, r3
 800c992:	4623      	mov	r3, r4
 800c994:	71fb      	strb	r3, [r7, #7]
 800c996:	4603      	mov	r3, r0
 800c998:	71bb      	strb	r3, [r7, #6]
 800c99a:	460b      	mov	r3, r1
 800c99c:	717b      	strb	r3, [r7, #5]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800c9a6:	79fb      	ldrb	r3, [r7, #7]
 800c9a8:	2b07      	cmp	r3, #7
 800c9aa:	d848      	bhi.n	800ca3e <validateTransitionPublish+0xba>
 800c9ac:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <validateTransitionPublish+0x30>)
 800c9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b2:	bf00      	nop
 800c9b4:	0800c9d5 	.word	0x0800c9d5
 800c9b8:	0800c9f9 	.word	0x0800c9f9
 800c9bc:	0800ca3f 	.word	0x0800ca3f
 800c9c0:	0800ca3f 	.word	0x0800ca3f
 800c9c4:	0800ca3f 	.word	0x0800ca3f
 800c9c8:	0800ca3f 	.word	0x0800ca3f
 800c9cc:	0800ca23 	.word	0x0800ca23
 800c9d0:	0800ca31 	.word	0x0800ca31
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800c9d4:	797b      	ldrb	r3, [r7, #5]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d133      	bne.n	800ca42 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800c9da:	79bb      	ldrb	r3, [r7, #6]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d002      	beq.n	800c9e6 <validateTransitionPublish+0x62>
 800c9e0:	79bb      	ldrb	r3, [r7, #6]
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d101      	bne.n	800c9ea <validateTransitionPublish+0x66>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <validateTransitionPublish+0x68>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800c9f6:	e024      	b.n	800ca42 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800c9f8:	793b      	ldrb	r3, [r7, #4]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d002      	beq.n	800ca04 <validateTransitionPublish+0x80>
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d007      	beq.n	800ca12 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800ca02:	e00d      	b.n	800ca20 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800ca04:	79bb      	ldrb	r3, [r7, #6]
 800ca06:	2b06      	cmp	r3, #6
 800ca08:	bf0c      	ite	eq
 800ca0a:	2301      	moveq	r3, #1
 800ca0c:	2300      	movne	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
                    break;
 800ca10:	e006      	b.n	800ca20 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800ca12:	79bb      	ldrb	r3, [r7, #6]
 800ca14:	2b07      	cmp	r3, #7
 800ca16:	bf0c      	ite	eq
 800ca18:	2301      	moveq	r3, #1
 800ca1a:	2300      	movne	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
                    break;
 800ca1e:	bf00      	nop
            }

            break;
 800ca20:	e010      	b.n	800ca44 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800ca22:	79bb      	ldrb	r3, [r7, #6]
 800ca24:	2b06      	cmp	r3, #6
 800ca26:	bf0c      	ite	eq
 800ca28:	2301      	moveq	r3, #1
 800ca2a:	2300      	movne	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]

            break;
 800ca2e:	e009      	b.n	800ca44 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800ca30:	79bb      	ldrb	r3, [r7, #6]
 800ca32:	2b07      	cmp	r3, #7
 800ca34:	bf0c      	ite	eq
 800ca36:	2301      	moveq	r3, #1
 800ca38:	2300      	movne	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]

            break;
 800ca3c:	e002      	b.n	800ca44 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800ca3e:	bf00      	nop
 800ca40:	e000      	b.n	800ca44 <validateTransitionPublish+0xc0>
            break;
 800ca42:	bf00      	nop
    }

    return isValid;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bc90      	pop	{r4, r7}
 800ca4e:	4770      	bx	lr

0800ca50 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	460a      	mov	r2, r1
 800ca5a:	71fb      	strb	r3, [r7, #7]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ca64:	79fb      	ldrb	r3, [r7, #7]
 800ca66:	3b02      	subs	r3, #2
 800ca68:	2b07      	cmp	r3, #7
 800ca6a:	d85c      	bhi.n	800cb26 <validateTransitionAck+0xd6>
 800ca6c:	a201      	add	r2, pc, #4	; (adr r2, 800ca74 <validateTransitionAck+0x24>)
 800ca6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca72:	bf00      	nop
 800ca74:	0800ca95 	.word	0x0800ca95
 800ca78:	0800caa3 	.word	0x0800caa3
 800ca7c:	0800cafb 	.word	0x0800cafb
 800ca80:	0800cacf 	.word	0x0800cacf
 800ca84:	0800ca95 	.word	0x0800ca95
 800ca88:	0800caed 	.word	0x0800caed
 800ca8c:	0800cab1 	.word	0x0800cab1
 800ca90:	0800cb09 	.word	0x0800cb09
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800ca94:	79bb      	ldrb	r3, [r7, #6]
 800ca96:	2b0a      	cmp	r3, #10
 800ca98:	bf0c      	ite	eq
 800ca9a:	2301      	moveq	r3, #1
 800ca9c:	2300      	movne	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]
            break;
 800caa0:	e042      	b.n	800cb28 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800caa2:	79bb      	ldrb	r3, [r7, #6]
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	bf0c      	ite	eq
 800caa8:	2301      	moveq	r3, #1
 800caaa:	2300      	movne	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
            break;
 800caae:	e03b      	b.n	800cb28 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800cab0:	79bb      	ldrb	r3, [r7, #6]
 800cab2:	2b05      	cmp	r3, #5
 800cab4:	d002      	beq.n	800cabc <validateTransitionAck+0x6c>
 800cab6:	79bb      	ldrb	r3, [r7, #6]
 800cab8:	2b08      	cmp	r3, #8
 800caba:	d101      	bne.n	800cac0 <validateTransitionAck+0x70>
 800cabc:	2301      	movs	r3, #1
 800cabe:	e000      	b.n	800cac2 <validateTransitionAck+0x72>
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800cacc:	e02c      	b.n	800cb28 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800cace:	79bb      	ldrb	r3, [r7, #6]
 800cad0:	2b0a      	cmp	r3, #10
 800cad2:	d002      	beq.n	800cada <validateTransitionAck+0x8a>
 800cad4:	79bb      	ldrb	r3, [r7, #6]
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d101      	bne.n	800cade <validateTransitionAck+0x8e>
 800cada:	2301      	movs	r3, #1
 800cadc:	e000      	b.n	800cae0 <validateTransitionAck+0x90>
 800cade:	2300      	movs	r3, #0
 800cae0:	73fb      	strb	r3, [r7, #15]
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800caea:	e01d      	b.n	800cb28 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800caec:	79bb      	ldrb	r3, [r7, #6]
 800caee:	2b04      	cmp	r3, #4
 800caf0:	bf0c      	ite	eq
 800caf2:	2301      	moveq	r3, #1
 800caf4:	2300      	movne	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]
            break;
 800caf8:	e016      	b.n	800cb28 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800cafa:	79bb      	ldrb	r3, [r7, #6]
 800cafc:	2b09      	cmp	r3, #9
 800cafe:	bf0c      	ite	eq
 800cb00:	2301      	moveq	r3, #1
 800cb02:	2300      	movne	r3, #0
 800cb04:	73fb      	strb	r3, [r7, #15]
            break;
 800cb06:	e00f      	b.n	800cb28 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800cb08:	79bb      	ldrb	r3, [r7, #6]
 800cb0a:	2b0a      	cmp	r3, #10
 800cb0c:	d002      	beq.n	800cb14 <validateTransitionAck+0xc4>
 800cb0e:	79bb      	ldrb	r3, [r7, #6]
 800cb10:	2b09      	cmp	r3, #9
 800cb12:	d101      	bne.n	800cb18 <validateTransitionAck+0xc8>
 800cb14:	2301      	movs	r3, #1
 800cb16:	e000      	b.n	800cb1a <validateTransitionAck+0xca>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800cb24:	e000      	b.n	800cb28 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800cb26:	bf00      	nop
    }

    return isValid;
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop

0800cb38 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	460a      	mov	r2, r1
 800cb42:	71fb      	strb	r3, [r7, #7]
 800cb44:	4613      	mov	r3, r2
 800cb46:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800cb4c:	79fb      	ldrb	r3, [r7, #7]
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d009      	beq.n	800cb66 <isPublishOutgoing+0x2e>
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	dc15      	bgt.n	800cb82 <isPublishOutgoing+0x4a>
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	dc02      	bgt.n	800cb60 <isPublishOutgoing+0x28>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da03      	bge.n	800cb66 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800cb5e:	e010      	b.n	800cb82 <isPublishOutgoing+0x4a>
    switch( packetType )
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d007      	beq.n	800cb74 <isPublishOutgoing+0x3c>
            break;
 800cb64:	e00d      	b.n	800cb82 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800cb66:	79bb      	ldrb	r3, [r7, #6]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	bf0c      	ite	eq
 800cb6c:	2301      	moveq	r3, #1
 800cb6e:	2300      	movne	r3, #0
 800cb70:	73fb      	strb	r3, [r7, #15]
            break;
 800cb72:	e007      	b.n	800cb84 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800cb74:	79bb      	ldrb	r3, [r7, #6]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf0c      	ite	eq
 800cb7a:	2301      	moveq	r3, #1
 800cb7c:	2300      	movne	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
            break;
 800cb80:	e000      	b.n	800cb84 <isPublishOutgoing+0x4c>
            break;
 800cb82:	bf00      	nop
    }

    return isOutgoing;
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
	...

0800cb94 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	4613      	mov	r3, r2
 800cba2:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d106      	bne.n	800cbbc <findInRecord+0x28>
 800cbae:	4b1b      	ldr	r3, [pc, #108]	; (800cc1c <findInRecord+0x88>)
 800cbb0:	4a1b      	ldr	r2, [pc, #108]	; (800cc20 <findInRecord+0x8c>)
 800cbb2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800cbb6:	481b      	ldr	r0, [pc, #108]	; (800cc24 <findInRecord+0x90>)
 800cbb8:	f004 f8e0 	bl	8010d7c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800cbbc:	6a3b      	ldr	r3, [r7, #32]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	617b      	str	r3, [r7, #20]
 800cbc6:	e019      	b.n	800cbfc <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	88fa      	ldrh	r2, [r7, #6]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d10e      	bne.n	800cbf6 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	789a      	ldrb	r2, [r3, #2]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4413      	add	r3, r2
 800cbee:	78da      	ldrb	r2, [r3, #3]
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	701a      	strb	r2, [r3, #0]
            break;
 800cbf4:	e006      	b.n	800cc04 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d3e1      	bcc.n	800cbc8 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d102      	bne.n	800cc12 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	43db      	mvns	r3, r3
 800cc10:	617b      	str	r3, [r7, #20]
    }

    return index;
 800cc12:	697b      	ldr	r3, [r7, #20]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	08015050 	.word	0x08015050
 800cc20:	08015590 	.word	0x08015590
 800cc24:	08015074 	.word	0x08015074

0800cc28 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800cc32:	2300      	movs	r3, #0
 800cc34:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800cc36:	2300      	movs	r3, #0
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d150      	bne.n	800cce4 <compactRecords+0xbc>
 800cc42:	4b2d      	ldr	r3, [pc, #180]	; (800ccf8 <compactRecords+0xd0>)
 800cc44:	4a2d      	ldr	r2, [pc, #180]	; (800ccfc <compactRecords+0xd4>)
 800cc46:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800cc4a:	482d      	ldr	r0, [pc, #180]	; (800cd00 <compactRecords+0xd8>)
 800cc4c:	f004 f896 	bl	8010d7c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	4413      	add	r3, r2
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d107      	bne.n	800cc6e <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800cc5e:	2300      	movs	r3, #0
 800cc60:	43db      	mvns	r3, r3
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d13a      	bne.n	800ccde <compactRecords+0xb6>
            {
                emptyIndex = index;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	60bb      	str	r3, [r7, #8]
 800cc6c:	e037      	b.n	800ccde <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800cc6e:	2300      	movs	r3, #0
 800cc70:	43db      	mvns	r3, r3
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d032      	beq.n	800ccde <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	441a      	add	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	440b      	add	r3, r1
 800cc88:	8812      	ldrh	r2, [r2, #0]
 800cc8a:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	441a      	add	r2, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	440b      	add	r3, r1
 800cc9c:	7892      	ldrb	r2, [r2, #2]
 800cc9e:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	441a      	add	r2, r3
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	440b      	add	r3, r1
 800ccb0:	78d2      	ldrb	r2, [r2, #3]
 800ccb2:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	4413      	add	r3, r2
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	2200      	movs	r2, #0
 800ccca:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3301      	adds	r3, #1
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d3b1      	bcc.n	800cc50 <compactRecords+0x28>
            }
        }
    }
}
 800ccec:	bf00      	nop
 800ccee:	bf00      	nop
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	080150a4 	.word	0x080150a4
 800ccfc:	080155a0 	.word	0x080155a0
 800cd00:	08015074 	.word	0x08015074

0800cd04 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4611      	mov	r1, r2
 800cd10:	461a      	mov	r2, r3
 800cd12:	460b      	mov	r3, r1
 800cd14:	80fb      	strh	r3, [r7, #6]
 800cd16:	4613      	mov	r3, r2
 800cd18:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800cd26:	2300      	movs	r3, #0
 800cd28:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800cd2a:	88fb      	ldrh	r3, [r7, #6]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <addRecord+0x3a>
 800cd30:	4b32      	ldr	r3, [pc, #200]	; (800cdfc <addRecord+0xf8>)
 800cd32:	4a33      	ldr	r2, [pc, #204]	; (800ce00 <addRecord+0xfc>)
 800cd34:	f240 2115 	movw	r1, #533	; 0x215
 800cd38:	4832      	ldr	r0, [pc, #200]	; (800ce04 <addRecord+0x100>)
 800cd3a:	f004 f81f 	bl	8010d7c <__assert_func>
    assert( qos != MQTTQoS0 );
 800cd3e:	797b      	ldrb	r3, [r7, #5]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d106      	bne.n	800cd52 <addRecord+0x4e>
 800cd44:	4b30      	ldr	r3, [pc, #192]	; (800ce08 <addRecord+0x104>)
 800cd46:	4a2e      	ldr	r2, [pc, #184]	; (800ce00 <addRecord+0xfc>)
 800cd48:	f240 2116 	movw	r1, #534	; 0x216
 800cd4c:	482d      	ldr	r0, [pc, #180]	; (800ce04 <addRecord+0x100>)
 800cd4e:	f004 f815 	bl	8010d7c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7ff ff5d 	bl	800cc28 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	61bb      	str	r3, [r7, #24]
 800cd74:	e021      	b.n	800cdba <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d108      	bne.n	800cd96 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800cd84:	7cfb      	ldrb	r3, [r7, #19]
 800cd86:	f083 0301 	eor.w	r3, r3, #1
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d011      	beq.n	800cdb4 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	e00e      	b.n	800cdb4 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800cd96:	2301      	movs	r3, #1
 800cd98:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	4413      	add	r3, r2
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	88fa      	ldrh	r2, [r7, #6]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d104      	bne.n	800cdb4 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800cdaa:	2309      	movs	r3, #9
 800cdac:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	617b      	str	r3, [r7, #20]
                break;
 800cdb2:	e005      	b.n	800cdc0 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	61bb      	str	r3, [r7, #24]
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dada      	bge.n	800cd76 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d214      	bcs.n	800cdf2 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	88fa      	ldrh	r2, [r7, #6]
 800cdd2:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4413      	add	r3, r2
 800cddc:	797a      	ldrb	r2, [r7, #5]
 800cdde:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cdec:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800cdf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3720      	adds	r7, #32
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	08015050 	.word	0x08015050
 800ce00:	080155b0 	.word	0x080155b0
 800ce04:	08015074 	.word	0x08015074
 800ce08:	080150b4 	.word	0x080150b4

0800ce0c <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4611      	mov	r1, r2
 800ce18:	461a      	mov	r2, r3
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	71fb      	strb	r3, [r7, #7]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <updateRecord+0x2a>
 800ce28:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <updateRecord+0x6c>)
 800ce2a:	4a14      	ldr	r2, [pc, #80]	; (800ce7c <updateRecord+0x70>)
 800ce2c:	f240 2152 	movw	r1, #594	; 0x252
 800ce30:	4813      	ldr	r0, [pc, #76]	; (800ce80 <updateRecord+0x74>)
 800ce32:	f003 ffa3 	bl	8010d7c <__assert_func>

    if( shouldDelete == true )
 800ce36:	79bb      	ldrb	r3, [r7, #6]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d012      	beq.n	800ce62 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	2200      	movs	r2, #0
 800ce46:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	2200      	movs	r2, #0
 800ce52:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800ce60:	e005      	b.n	800ce6e <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	79fa      	ldrb	r2, [r7, #7]
 800ce6c:	70da      	strb	r2, [r3, #3]
}
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	080150a4 	.word	0x080150a4
 800ce7c:	080155bc 	.word	0x080155bc
 800ce80:	08015074 	.word	0x08015074

0800ce84 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	607a      	str	r2, [r7, #4]
 800ce90:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800ce92:	2300      	movs	r3, #0
 800ce94:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800ce96:	2300      	movs	r3, #0
 800ce98:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d106      	bne.n	800ceb6 <stateSelect+0x32>
 800cea8:	4b43      	ldr	r3, [pc, #268]	; (800cfb8 <stateSelect+0x134>)
 800ceaa:	4a44      	ldr	r2, [pc, #272]	; (800cfbc <stateSelect+0x138>)
 800ceac:	f240 216d 	movw	r1, #621	; 0x26d
 800ceb0:	4843      	ldr	r0, [pc, #268]	; (800cfc0 <stateSelect+0x13c>)
 800ceb2:	f003 ff63 	bl	8010d7c <__assert_func>
    assert( searchStates != 0U );
 800ceb6:	897b      	ldrh	r3, [r7, #10]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <stateSelect+0x46>
 800cebc:	4b41      	ldr	r3, [pc, #260]	; (800cfc4 <stateSelect+0x140>)
 800cebe:	4a3f      	ldr	r2, [pc, #252]	; (800cfbc <stateSelect+0x138>)
 800cec0:	f240 216e 	movw	r1, #622	; 0x26e
 800cec4:	483e      	ldr	r0, [pc, #248]	; (800cfc0 <stateSelect+0x13c>)
 800cec6:	f003 ff59 	bl	8010d7c <__assert_func>
    assert( pCursor != NULL );
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d106      	bne.n	800cede <stateSelect+0x5a>
 800ced0:	4b3d      	ldr	r3, [pc, #244]	; (800cfc8 <stateSelect+0x144>)
 800ced2:	4a3a      	ldr	r2, [pc, #232]	; (800cfbc <stateSelect+0x138>)
 800ced4:	f240 216f 	movw	r1, #623	; 0x26f
 800ced8:	4839      	ldr	r0, [pc, #228]	; (800cfc0 <stateSelect+0x13c>)
 800ceda:	f003 ff4f 	bl	8010d7c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800cede:	8bbb      	ldrh	r3, [r7, #28]
 800cee0:	f043 0302 	orr.w	r3, r3, #2
 800cee4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800cee6:	8bbb      	ldrh	r3, [r7, #28]
 800cee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceec:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800ceee:	8bbb      	ldrh	r3, [r7, #28]
 800cef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800cef6:	8bbb      	ldrh	r3, [r7, #28]
 800cef8:	f043 0310 	orr.w	r3, r3, #16
 800cefc:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800cefe:	8bbb      	ldrh	r3, [r7, #28]
 800cf00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf04:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800cf06:	8bba      	ldrh	r2, [r7, #28]
 800cf08:	897b      	ldrh	r3, [r7, #10]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <stateSelect+0x9c>
 800cf12:	4b2e      	ldr	r3, [pc, #184]	; (800cfcc <stateSelect+0x148>)
 800cf14:	4a29      	ldr	r2, [pc, #164]	; (800cfbc <stateSelect+0x138>)
 800cf16:	f240 2179 	movw	r1, #633	; 0x279
 800cf1a:	4829      	ldr	r0, [pc, #164]	; (800cfc0 <stateSelect+0x13c>)
 800cf1c:	f003 ff2e 	bl	8010d7c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800cf20:	8bbb      	ldrh	r3, [r7, #28]
 800cf22:	43da      	mvns	r2, r3
 800cf24:	897b      	ldrh	r3, [r7, #10]
 800cf26:	4013      	ands	r3, r2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <stateSelect+0xb6>
 800cf2c:	4b28      	ldr	r3, [pc, #160]	; (800cfd0 <stateSelect+0x14c>)
 800cf2e:	4a23      	ldr	r2, [pc, #140]	; (800cfbc <stateSelect+0x138>)
 800cf30:	f240 217a 	movw	r1, #634	; 0x27a
 800cf34:	4822      	ldr	r0, [pc, #136]	; (800cfc0 <stateSelect+0x13c>)
 800cf36:	f003 ff21 	bl	8010d7c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800cf46:	e02d      	b.n	800cfa4 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800cf48:	897a      	ldrh	r2, [r7, #10]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	69b9      	ldr	r1, [r7, #24]
 800cf52:	440b      	add	r3, r1
 800cf54:	78db      	ldrb	r3, [r3, #3]
 800cf56:	4619      	mov	r1, r3
 800cf58:	2301      	movs	r3, #1
 800cf5a:	408b      	lsls	r3, r1
 800cf5c:	401a      	ands	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	69b9      	ldr	r1, [r7, #24]
 800cf66:	440b      	add	r3, r1
 800cf68:	78db      	ldrb	r3, [r3, #3]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	408b      	lsls	r3, r1
 800cf70:	429a      	cmp	r2, r3
 800cf72:	bf0c      	ite	eq
 800cf74:	2301      	moveq	r3, #1
 800cf76:	2300      	movne	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00c      	beq.n	800cf9a <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	4413      	add	r3, r2
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]
            break;
 800cf98:	e009      	b.n	800cfae <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	1c5a      	adds	r2, r3, #1
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d8cc      	bhi.n	800cf48 <stateSelect+0xc4>
    }

    return packetId;
 800cfae:	8bfb      	ldrh	r3, [r7, #30]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	080150c4 	.word	0x080150c4
 800cfbc:	080155cc 	.word	0x080155cc
 800cfc0:	08015074 	.word	0x08015074
 800cfc4:	080150dc 	.word	0x080150dc
 800cfc8:	080150f0 	.word	0x080150f0
 800cfcc:	08015100 	.word	0x08015100
 800cfd0:	08015128 	.word	0x08015128

0800cfd4 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	71fb      	strb	r3, [r7, #7]
 800cfde:	460b      	mov	r3, r1
 800cfe0:	71bb      	strb	r3, [r7, #6]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800cfea:	797b      	ldrb	r3, [r7, #5]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	bf0c      	ite	eq
 800cff0:	2301      	moveq	r3, #1
 800cff2:	2300      	movne	r3, #0
 800cff4:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	2b03      	cmp	r3, #3
 800cffa:	d827      	bhi.n	800d04c <MQTT_CalculateStateAck+0x78>
 800cffc:	a201      	add	r2, pc, #4	; (adr r2, 800d004 <MQTT_CalculateStateAck+0x30>)
 800cffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d002:	bf00      	nop
 800d004:	0800d015 	.word	0x0800d015
 800d008:	0800d027 	.word	0x0800d027
 800d00c:	0800d037 	.word	0x0800d037
 800d010:	0800d047 	.word	0x0800d047
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800d014:	797b      	ldrb	r3, [r7, #5]
 800d016:	2b01      	cmp	r3, #1
 800d018:	bf0c      	ite	eq
 800d01a:	2301      	moveq	r3, #1
 800d01c:	2300      	movne	r3, #0
 800d01e:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800d020:	230a      	movs	r3, #10
 800d022:	73fb      	strb	r3, [r7, #15]
            break;
 800d024:	e013      	b.n	800d04e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800d026:	79bb      	ldrb	r3, [r7, #6]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <MQTT_CalculateStateAck+0x5c>
 800d02c:	2308      	movs	r3, #8
 800d02e:	e000      	b.n	800d032 <MQTT_CalculateStateAck+0x5e>
 800d030:	2304      	movs	r3, #4
 800d032:	73fb      	strb	r3, [r7, #15]
            break;
 800d034:	e00b      	b.n	800d04e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800d036:	79bb      	ldrb	r3, [r7, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <MQTT_CalculateStateAck+0x6c>
 800d03c:	2309      	movs	r3, #9
 800d03e:	e000      	b.n	800d042 <MQTT_CalculateStateAck+0x6e>
 800d040:	2305      	movs	r3, #5
 800d042:	73fb      	strb	r3, [r7, #15]
            break;
 800d044:	e003      	b.n	800d04e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800d046:	230a      	movs	r3, #10
 800d048:	73fb      	strb	r3, [r7, #15]
            break;
 800d04a:	e000      	b.n	800d04e <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800d04c:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800d04e:	7bbb      	ldrb	r3, [r7, #14]
 800d050:	f083 0301 	eor.w	r3, r3, #1
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800d05a:	2300      	movs	r3, #0
 800d05c:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af02      	add	r7, sp, #8
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800d07a:	2308      	movs	r3, #8
 800d07c:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800d07e:	2300      	movs	r3, #0
 800d080:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800d082:	2300      	movs	r3, #0
 800d084:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <updateStateAck+0x2e>
 800d08c:	4b22      	ldr	r3, [pc, #136]	; (800d118 <updateStateAck+0xac>)
 800d08e:	4a23      	ldr	r2, [pc, #140]	; (800d11c <updateStateAck+0xb0>)
 800d090:	f240 21cf 	movw	r1, #719	; 0x2cf
 800d094:	4822      	ldr	r0, [pc, #136]	; (800d120 <updateStateAck+0xb4>)
 800d096:	f003 fe71 	bl	8010d7c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800d09a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d09e:	2b0a      	cmp	r3, #10
 800d0a0:	d003      	beq.n	800d0aa <updateStateAck+0x3e>
 800d0a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d101      	bne.n	800d0ae <updateStateAck+0x42>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <updateStateAck+0x44>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75bb      	strb	r3, [r7, #22]
 800d0b2:	7dbb      	ldrb	r3, [r7, #22]
 800d0b4:	f003 0301 	and.w	r3, r3, #1
 800d0b8:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800d0ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d0be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fcc3 	bl	800ca50 <validateTransitionAck>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800d0ce:	7d7b      	ldrb	r3, [r7, #21]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d01c      	beq.n	800d10e <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800d0d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d0dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d014      	beq.n	800d10e <updateStateAck+0xa2>
        {
            updateRecord( records,
 800d0e4:	7dbb      	ldrb	r3, [r7, #22]
 800d0e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff fe8d 	bl	800ce0c <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800d0f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d109      	bne.n	800d10e <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800d0fa:	887a      	ldrh	r2, [r7, #2]
 800d0fc:	2304      	movs	r3, #4
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	2302      	movs	r3, #2
 800d102:	68b9      	ldr	r1, [r7, #8]
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7ff fdfd 	bl	800cd04 <addRecord>
 800d10a:	4603      	mov	r3, r0
 800d10c:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3718      	adds	r7, #24
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	080150a4 	.word	0x080150a4
 800d11c:	080155d8 	.word	0x080155d8
 800d120:	08015074 	.word	0x08015074

0800d124 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b089      	sub	sp, #36	; 0x24
 800d128:	af02      	add	r7, sp, #8
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4611      	mov	r1, r2
 800d130:	461a      	mov	r2, r3
 800d132:	460b      	mov	r3, r1
 800d134:	80fb      	strh	r3, [r7, #6]
 800d136:	4613      	mov	r3, r2
 800d138:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800d13a:	2300      	movs	r3, #0
 800d13c:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800d13e:	2300      	movs	r3, #0
 800d140:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d106      	bne.n	800d156 <updateStatePublish+0x32>
 800d148:	4b29      	ldr	r3, [pc, #164]	; (800d1f0 <updateStatePublish+0xcc>)
 800d14a:	4a2a      	ldr	r2, [pc, #168]	; (800d1f4 <updateStatePublish+0xd0>)
 800d14c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800d150:	4829      	ldr	r0, [pc, #164]	; (800d1f8 <updateStatePublish+0xd4>)
 800d152:	f003 fe13 	bl	8010d7c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800d156:	88fb      	ldrh	r3, [r7, #6]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <updateStatePublish+0x46>
 800d15c:	4b27      	ldr	r3, [pc, #156]	; (800d1fc <updateStatePublish+0xd8>)
 800d15e:	4a25      	ldr	r2, [pc, #148]	; (800d1f4 <updateStatePublish+0xd0>)
 800d160:	f240 310d 	movw	r1, #781	; 0x30d
 800d164:	4824      	ldr	r0, [pc, #144]	; (800d1f8 <updateStatePublish+0xd4>)
 800d166:	f003 fe09 	bl	8010d7c <__assert_func>
    assert( qos != MQTTQoS0 );
 800d16a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <updateStatePublish+0x5c>
 800d172:	4b23      	ldr	r3, [pc, #140]	; (800d200 <updateStatePublish+0xdc>)
 800d174:	4a1f      	ldr	r2, [pc, #124]	; (800d1f4 <updateStatePublish+0xd0>)
 800d176:	f240 310e 	movw	r1, #782	; 0x30e
 800d17a:	481f      	ldr	r0, [pc, #124]	; (800d1f8 <updateStatePublish+0xd4>)
 800d17c:	f003 fdfe 	bl	8010d7c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800d180:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d184:	797a      	ldrb	r2, [r7, #5]
 800d186:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800d18a:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800d18e:	f7ff fbf9 	bl	800c984 <validateTransitionPublish>
 800d192:	4603      	mov	r3, r0
 800d194:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800d196:	7dbb      	ldrb	r3, [r7, #22]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d021      	beq.n	800d1e0 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800d19c:	797b      	ldrb	r3, [r7, #5]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d10f      	bne.n	800d1c2 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6858      	ldr	r0, [r3, #4]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68d9      	ldr	r1, [r3, #12]
 800d1aa:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800d1ae:	88fa      	ldrh	r2, [r7, #6]
 800d1b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4623      	mov	r3, r4
 800d1b8:	f7ff fda4 	bl	800cd04 <addRecord>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
 800d1c0:	e010      	b.n	800d1e4 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800d1c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d1c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d00a      	beq.n	800d1e4 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6818      	ldr	r0, [r3, #0]
 800d1d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	f7ff fe17 	bl	800ce0c <updateRecord>
 800d1de:	e001      	b.n	800d1e4 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd90      	pop	{r4, r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	080150c4 	.word	0x080150c4
 800d1f4:	080155e8 	.word	0x080155e8
 800d1f8:	08015074 	.word	0x08015074
 800d1fc:	08015050 	.word	0x08015050
 800d200:	080150b4 	.word	0x080150b4

0800d204 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	460a      	mov	r2, r1
 800d20e:	71fb      	strb	r3, [r7, #7]
 800d210:	4613      	mov	r3, r2
 800d212:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800d214:	2300      	movs	r3, #0
 800d216:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800d218:	79bb      	ldrb	r3, [r7, #6]
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d011      	beq.n	800d242 <MQTT_CalculateStatePublish+0x3e>
 800d21e:	2b02      	cmp	r3, #2
 800d220:	dc17      	bgt.n	800d252 <MQTT_CalculateStatePublish+0x4e>
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <MQTT_CalculateStatePublish+0x28>
 800d226:	2b01      	cmp	r3, #1
 800d228:	d003      	beq.n	800d232 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800d22a:	e012      	b.n	800d252 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800d22c:	230a      	movs	r3, #10
 800d22e:	73fb      	strb	r3, [r7, #15]
            break;
 800d230:	e010      	b.n	800d254 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <MQTT_CalculateStatePublish+0x38>
 800d238:	2306      	movs	r3, #6
 800d23a:	e000      	b.n	800d23e <MQTT_CalculateStatePublish+0x3a>
 800d23c:	2302      	movs	r3, #2
 800d23e:	73fb      	strb	r3, [r7, #15]
            break;
 800d240:	e008      	b.n	800d254 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <MQTT_CalculateStatePublish+0x48>
 800d248:	2307      	movs	r3, #7
 800d24a:	e000      	b.n	800d24e <MQTT_CalculateStatePublish+0x4a>
 800d24c:	2303      	movs	r3, #3
 800d24e:	73fb      	strb	r3, [r7, #15]
            break;
 800d250:	e000      	b.n	800d254 <MQTT_CalculateStatePublish+0x50>
            break;
 800d252:	bf00      	nop
    }

    return calculatedState;
 800d254:	7bfb      	ldrb	r3, [r7, #15]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800d262:	b590      	push	{r4, r7, lr}
 800d264:	b08b      	sub	sp, #44	; 0x2c
 800d266:	af04      	add	r7, sp, #16
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	461a      	mov	r2, r3
 800d270:	4603      	mov	r3, r0
 800d272:	807b      	strh	r3, [r7, #2]
 800d274:	460b      	mov	r3, r1
 800d276:	707b      	strb	r3, [r7, #1]
 800d278:	4613      	mov	r3, r2
 800d27a:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800d284:	2300      	movs	r3, #0
 800d286:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d288:	2300      	movs	r3, #0
 800d28a:	43db      	mvns	r3, r3
 800d28c:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800d28e:	2300      	movs	r3, #0
 800d290:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <MQTT_UpdateStatePublish+0x3c>
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d102      	bne.n	800d2a4 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	75fb      	strb	r3, [r7, #23]
 800d2a2:	e028      	b.n	800d2f6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800d2a4:	783b      	ldrb	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d103      	bne.n	800d2b2 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	220a      	movs	r2, #10
 800d2ae:	701a      	strb	r2, [r3, #0]
 800d2b0:	e021      	b.n	800d2f6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d2b2:	887b      	ldrh	r3, [r7, #2]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	75fb      	strb	r3, [r7, #23]
 800d2bc:	e01b      	b.n	800d2f6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800d2be:	787b      	ldrb	r3, [r7, #1]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d118      	bne.n	800d2f6 <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6818      	ldr	r0, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6899      	ldr	r1, [r3, #8]
 800d2cc:	f107 040d 	add.w	r4, r7, #13
 800d2d0:	887a      	ldrh	r2, [r7, #2]
 800d2d2:	f107 030e 	add.w	r3, r7, #14
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	4623      	mov	r3, r4
 800d2da:	f7ff fc5b 	bl	800cb94 <findInRecord>
 800d2de:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	43db      	mvns	r3, r3
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d003      	beq.n	800d2f2 <MQTT_UpdateStatePublish+0x90>
 800d2ea:	7b7b      	ldrb	r3, [r7, #13]
 800d2ec:	783a      	ldrb	r2, [r7, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d001      	beq.n	800d2f6 <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800d2f6:	783b      	ldrb	r3, [r7, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d020      	beq.n	800d33e <MQTT_UpdateStatePublish+0xdc>
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d11d      	bne.n	800d33e <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800d302:	783a      	ldrb	r2, [r7, #0]
 800d304:	787b      	ldrb	r3, [r7, #1]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff ff7b 	bl	800d204 <MQTT_CalculateStatePublish>
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800d312:	7bbb      	ldrb	r3, [r7, #14]
 800d314:	7878      	ldrb	r0, [r7, #1]
 800d316:	8879      	ldrh	r1, [r7, #2]
 800d318:	7bfa      	ldrb	r2, [r7, #15]
 800d31a:	9202      	str	r2, [sp, #8]
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	783b      	ldrb	r3, [r7, #0]
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	4603      	mov	r3, r0
 800d324:	460a      	mov	r2, r1
 800d326:	6939      	ldr	r1, [r7, #16]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff fefb 	bl	800d124 <updateStatePublish>
 800d32e:	4603      	mov	r3, r0
 800d330:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	7bfa      	ldrb	r2, [r7, #15]
 800d33c:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800d33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d340:	4618      	mov	r0, r3
 800d342:	371c      	adds	r7, #28
 800d344:	46bd      	mov	sp, r7
 800d346:	bd90      	pop	{r4, r7, pc}

0800d348 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08a      	sub	sp, #40	; 0x28
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	4608      	mov	r0, r1
 800d352:	4611      	mov	r1, r2
 800d354:	461a      	mov	r2, r3
 800d356:	4603      	mov	r3, r0
 800d358:	807b      	strh	r3, [r7, #2]
 800d35a:	460b      	mov	r3, r1
 800d35c:	707b      	strb	r3, [r7, #1]
 800d35e:	4613      	mov	r3, r2
 800d360:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d362:	2300      	movs	r3, #0
 800d364:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d366:	2300      	movs	r3, #0
 800d368:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800d36a:	783a      	ldrb	r2, [r7, #0]
 800d36c:	787b      	ldrb	r3, [r7, #1]
 800d36e:	4611      	mov	r1, r2
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fbe1 	bl	800cb38 <isPublishOutgoing>
 800d376:	4603      	mov	r3, r0
 800d378:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800d37e:	2300      	movs	r3, #0
 800d380:	43db      	mvns	r3, r3
 800d382:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d384:	2300      	movs	r3, #0
 800d386:	43db      	mvns	r3, r3
 800d388:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800d38e:	2305      	movs	r3, #5
 800d390:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <MQTT_UpdateStateAck+0x56>
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	74fb      	strb	r3, [r7, #19]
 800d3a2:	e027      	b.n	800d3f4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d3a4:	887b      	ldrh	r3, [r7, #2]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d102      	bne.n	800d3b0 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	74fb      	strb	r3, [r7, #19]
 800d3ae:	e021      	b.n	800d3f4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800d3b0:	787b      	ldrb	r3, [r7, #1]
 800d3b2:	2b03      	cmp	r3, #3
 800d3b4:	d902      	bls.n	800d3bc <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	74fb      	strb	r3, [r7, #19]
 800d3ba:	e01b      	b.n	800d3f4 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800d3bc:	7c7b      	ldrb	r3, [r7, #17]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d006      	beq.n	800d3d0 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	61fb      	str	r3, [r7, #28]
 800d3ce:	e005      	b.n	800d3dc <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800d3dc:	f107 010f 	add.w	r1, r7, #15
 800d3e0:	887a      	ldrh	r2, [r7, #2]
 800d3e2:	f107 0310 	add.w	r3, r7, #16
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	69f9      	ldr	r1, [r7, #28]
 800d3ec:	6978      	ldr	r0, [r7, #20]
 800d3ee:	f7ff fbd1 	bl	800cb94 <findInRecord>
 800d3f2:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	43db      	mvns	r3, r3
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d01a      	beq.n	800d434 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800d3fe:	7bfa      	ldrb	r2, [r7, #15]
 800d400:	7839      	ldrb	r1, [r7, #0]
 800d402:	787b      	ldrb	r3, [r7, #1]
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fde5 	bl	800cfd4 <MQTT_CalculateStateAck>
 800d40a:	4603      	mov	r3, r0
 800d40c:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800d40e:	7c3b      	ldrb	r3, [r7, #16]
 800d410:	8879      	ldrh	r1, [r7, #2]
 800d412:	7cba      	ldrb	r2, [r7, #18]
 800d414:	9201      	str	r2, [sp, #4]
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	460b      	mov	r3, r1
 800d41a:	69ba      	ldr	r2, [r7, #24]
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	6978      	ldr	r0, [r7, #20]
 800d420:	f7ff fe24 	bl	800d06c <updateStateAck>
 800d424:	4603      	mov	r3, r0
 800d426:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800d428:	7cfb      	ldrb	r3, [r7, #19]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d102      	bne.n	800d434 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	7cba      	ldrb	r2, [r7, #18]
 800d432:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800d434:	7cfb      	ldrb	r3, [r7, #19]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3720      	adds	r7, #32
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b086      	sub	sp, #24
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d44a:	2300      	movs	r3, #0
 800d44c:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d01b      	beq.n	800d490 <MQTT_PubrelToResend+0x52>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d018      	beq.n	800d490 <MQTT_PubrelToResend+0x52>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d015      	beq.n	800d490 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800d464:	8abb      	ldrh	r3, [r7, #20]
 800d466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d46a:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800d46c:	8abb      	ldrh	r3, [r7, #20]
 800d46e:	f043 0310 	orr.w	r3, r3, #16
 800d472:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800d474:	8abb      	ldrh	r3, [r7, #20]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	4619      	mov	r1, r3
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f7ff fd02 	bl	800ce84 <stateSelect>
 800d480:	4603      	mov	r3, r0
 800d482:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800d484:	8afb      	ldrh	r3, [r7, #22]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2204      	movs	r2, #4
 800d48e:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800d490:	8afb      	ldrh	r3, [r7, #22]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
	...

0800d49c <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800d4a2:	af02      	add	r7, sp, #8
 800d4a4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4a8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d4ac:	6018      	str	r0, [r3, #0]
 800d4ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4b2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d4b6:	6019      	str	r1, [r3, #0]
 800d4b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4bc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d4c0:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800d4c8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4cc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	781a      	ldrb	r2, [r3, #0]
 800d4d4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4d8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d4dc:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800d4de:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4e2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	88da      	ldrh	r2, [r3, #6]
 800d4ea:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4ee:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d4f2:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800d4f4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d4f8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800d500:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d504:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d508:	2200      	movs	r2, #0
 800d50a:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800d50c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d510:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	789a      	ldrb	r2, [r3, #2]
 800d518:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d51c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d520:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800d522:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d526:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	78da      	ldrb	r2, [r3, #3]
 800d52e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d532:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d536:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800d538:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d53c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	791a      	ldrb	r2, [r3, #4]
 800d544:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d548:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d54c:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800d54e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d552:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	795a      	ldrb	r2, [r3, #5]
 800d55a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d55e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d562:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800d564:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d568:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d115      	bne.n	800d5a0 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800d574:	f107 0314 	add.w	r3, r7, #20
 800d578:	4619      	mov	r1, r3
 800d57a:	482a      	ldr	r0, [pc, #168]	; (800d624 <transport_recv+0x188>)
 800d57c:	f7fb feb4 	bl	80092e8 <ES_WIFI_StartClientConnection>
 800d580:	4603      	mov	r3, r0
 800d582:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800d586:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <transport_recv+0xf6>
			return 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	e042      	b.n	800d618 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800d592:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d596:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2201      	movs	r2, #1
 800d59e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800d5a0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d5a4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	7819      	ldrb	r1, [r3, #0]
 800d5ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d5b0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	b298      	uxth	r0, r3
 800d5b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d5bc:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800d5c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5c4:	9301      	str	r3, [sp, #4]
 800d5c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	6812      	ldr	r2, [r2, #0]
 800d5d0:	4814      	ldr	r0, [pc, #80]	; (800d624 <transport_recv+0x188>)
 800d5d2:	f7fc f82f 	bl	8009634 <ES_WIFI_ReceiveData>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800d5dc:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00a      	beq.n	800d5fa <transport_recv+0x15e>
		socketStatus=0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800d5ea:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d5ee:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	705a      	strb	r2, [r3, #1]
 800d5f8:	e00c      	b.n	800d614 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800d5fa:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800d5fe:	461a      	mov	r2, r3
 800d600:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d604:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800d608:	2100      	movs	r1, #0
 800d60a:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800d60c:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800d610:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800d614:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800d618:	4618      	mov	r0, r3
 800d61a:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20000dc8 	.word	0x20000dc8

0800d628 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08e      	sub	sp, #56	; 0x38
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800d634:	2300      	movs	r3, #0
 800d636:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	88db      	ldrh	r3, [r3, #6]
 800d642:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800d644:	2300      	movs	r3, #0
 800d646:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800d648:	2300      	movs	r3, #0
 800d64a:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	78db      	ldrb	r3, [r3, #3]
 800d656:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	791b      	ldrb	r3, [r3, #4]
 800d65c:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	795b      	ldrb	r3, [r3, #5]
 800d662:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d111      	bne.n	800d690 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800d66c:	f107 0314 	add.w	r3, r7, #20
 800d670:	4619      	mov	r1, r3
 800d672:	481c      	ldr	r0, [pc, #112]	; (800d6e4 <transport_send+0xbc>)
 800d674:	f7fb fe38 	bl	80092e8 <ES_WIFI_StartClientConnection>
 800d678:	4603      	mov	r3, r0
 800d67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800d67e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <transport_send+0x62>
			return 0;
 800d686:	2300      	movs	r3, #0
 800d688:	e027      	b.n	800d6da <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	7819      	ldrb	r1, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	b29a      	uxth	r2, r3
 800d698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	480e      	ldr	r0, [pc, #56]	; (800d6e4 <transport_send+0xbc>)
 800d6aa:	f7fb ff07 	bl	80094bc <ES_WIFI_SendData>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800d6b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800d6c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4807      	ldr	r0, [pc, #28]	; (800d6e8 <transport_send+0xc0>)
 800d6ca:	f004 fb43 	bl	8011d54 <iprintf>
		return 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e003      	b.n	800d6da <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800d6d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3730      	adds	r7, #48	; 0x30
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	20000dc8 	.word	0x20000dc8
 800d6e8:	08015228 	.word	0x08015228

0800d6ec <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60ba      	str	r2, [r7, #8]
 800d6f4:	607b      	str	r3, [r7, #4]
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	73fb      	strb	r3, [r7, #15]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	7bfa      	ldrb	r2, [r7, #15]
 800d702:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	7bba      	ldrb	r2, [r7, #14]
 800d708:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a08      	ldr	r2, [pc, #32]	; (800d730 <init_transport_from_socket+0x44>)
 800d70e:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4a08      	ldr	r2, [pc, #32]	; (800d734 <init_transport_from_socket+0x48>)
 800d714:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	60da      	str	r2, [r3, #12]
}
 800d722:	bf00      	nop
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	0800d49d 	.word	0x0800d49d
 800d734:	0800d629 	.word	0x0800d629

0800d738 <__NVIC_SetPriority>:
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	4603      	mov	r3, r0
 800d740:	6039      	str	r1, [r7, #0]
 800d742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	db0a      	blt.n	800d762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	490c      	ldr	r1, [pc, #48]	; (800d784 <__NVIC_SetPriority+0x4c>)
 800d752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d756:	0112      	lsls	r2, r2, #4
 800d758:	b2d2      	uxtb	r2, r2
 800d75a:	440b      	add	r3, r1
 800d75c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d760:	e00a      	b.n	800d778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	b2da      	uxtb	r2, r3
 800d766:	4908      	ldr	r1, [pc, #32]	; (800d788 <__NVIC_SetPriority+0x50>)
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	f003 030f 	and.w	r3, r3, #15
 800d76e:	3b04      	subs	r3, #4
 800d770:	0112      	lsls	r2, r2, #4
 800d772:	b2d2      	uxtb	r2, r2
 800d774:	440b      	add	r3, r1
 800d776:	761a      	strb	r2, [r3, #24]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	e000e100 	.word	0xe000e100
 800d788:	e000ed00 	.word	0xe000ed00

0800d78c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <SysTick_Handler+0x1c>)
 800d792:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d794:	f002 f886 	bl	800f8a4 <xTaskGetSchedulerState>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d001      	beq.n	800d7a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d79e:	f003 f873 	bl	8010888 <xPortSysTickHandler>
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	e000e010 	.word	0xe000e010

0800d7ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	f06f 0004 	mvn.w	r0, #4
 800d7b6:	f7ff ffbf 	bl	800d738 <__NVIC_SetPriority>
#endif
}
 800d7ba:	bf00      	nop
 800d7bc:	bd80      	pop	{r7, pc}
	...

0800d7c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7c6:	f3ef 8305 	mrs	r3, IPSR
 800d7ca:	603b      	str	r3, [r7, #0]
  return(result);
 800d7cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d7d2:	f06f 0305 	mvn.w	r3, #5
 800d7d6:	607b      	str	r3, [r7, #4]
 800d7d8:	e00c      	b.n	800d7f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d7da:	4b0a      	ldr	r3, [pc, #40]	; (800d804 <osKernelInitialize+0x44>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d7e2:	4b08      	ldr	r3, [pc, #32]	; (800d804 <osKernelInitialize+0x44>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	607b      	str	r3, [r7, #4]
 800d7ec:	e002      	b.n	800d7f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7f4:	687b      	ldr	r3, [r7, #4]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	200016c8 	.word	0x200016c8

0800d808 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d80e:	f3ef 8305 	mrs	r3, IPSR
 800d812:	603b      	str	r3, [r7, #0]
  return(result);
 800d814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d816:	2b00      	cmp	r3, #0
 800d818:	d003      	beq.n	800d822 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d81a:	f06f 0305 	mvn.w	r3, #5
 800d81e:	607b      	str	r3, [r7, #4]
 800d820:	e010      	b.n	800d844 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d822:	4b0b      	ldr	r3, [pc, #44]	; (800d850 <osKernelStart+0x48>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d109      	bne.n	800d83e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d82a:	f7ff ffbf 	bl	800d7ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d82e:	4b08      	ldr	r3, [pc, #32]	; (800d850 <osKernelStart+0x48>)
 800d830:	2202      	movs	r2, #2
 800d832:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d834:	f001 fbc8 	bl	800efc8 <vTaskStartScheduler>
      stat = osOK;
 800d838:	2300      	movs	r3, #0
 800d83a:	607b      	str	r3, [r7, #4]
 800d83c:	e002      	b.n	800d844 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d83e:	f04f 33ff 	mov.w	r3, #4294967295
 800d842:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d844:	687b      	ldr	r3, [r7, #4]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	200016c8 	.word	0x200016c8

0800d854 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d85a:	f3ef 8305 	mrs	r3, IPSR
 800d85e:	603b      	str	r3, [r7, #0]
  return(result);
 800d860:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d866:	f001 fcdb 	bl	800f220 <xTaskGetTickCountFromISR>
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	e002      	b.n	800d874 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d86e:	f001 fcc7 	bl	800f200 <xTaskGetTickCount>
 800d872:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d874:	687b      	ldr	r3, [r7, #4]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d87e:	b580      	push	{r7, lr}
 800d880:	b08e      	sub	sp, #56	; 0x38
 800d882:	af04      	add	r7, sp, #16
 800d884:	60f8      	str	r0, [r7, #12]
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d88e:	f3ef 8305 	mrs	r3, IPSR
 800d892:	617b      	str	r3, [r7, #20]
  return(result);
 800d894:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d896:	2b00      	cmp	r3, #0
 800d898:	d17e      	bne.n	800d998 <osThreadNew+0x11a>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d07b      	beq.n	800d998 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8a0:	2380      	movs	r3, #128	; 0x80
 800d8a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8a4:	2318      	movs	r3, #24
 800d8a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d045      	beq.n	800d944 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <osThreadNew+0x48>
        name = attr->name;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d002      	beq.n	800d8d4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d008      	beq.n	800d8ec <osThreadNew+0x6e>
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	2b38      	cmp	r3, #56	; 0x38
 800d8de:	d805      	bhi.n	800d8ec <osThreadNew+0x6e>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <osThreadNew+0x72>
        return (NULL);
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e054      	b.n	800d99a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	089b      	lsrs	r3, r3, #2
 800d8fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00e      	beq.n	800d926 <osThreadNew+0xa8>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	2bbb      	cmp	r3, #187	; 0xbb
 800d90e:	d90a      	bls.n	800d926 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d914:	2b00      	cmp	r3, #0
 800d916:	d006      	beq.n	800d926 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <osThreadNew+0xa8>
        mem = 1;
 800d920:	2301      	movs	r3, #1
 800d922:	61bb      	str	r3, [r7, #24]
 800d924:	e010      	b.n	800d948 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10c      	bne.n	800d948 <osThreadNew+0xca>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d108      	bne.n	800d948 <osThreadNew+0xca>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d104      	bne.n	800d948 <osThreadNew+0xca>
          mem = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	61bb      	str	r3, [r7, #24]
 800d942:	e001      	b.n	800d948 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d110      	bne.n	800d970 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d956:	9202      	str	r2, [sp, #8]
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	6a3a      	ldr	r2, [r7, #32]
 800d962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f001 f943 	bl	800ebf0 <xTaskCreateStatic>
 800d96a:	4603      	mov	r3, r0
 800d96c:	613b      	str	r3, [r7, #16]
 800d96e:	e013      	b.n	800d998 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d110      	bne.n	800d998 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d976:	6a3b      	ldr	r3, [r7, #32]
 800d978:	b29a      	uxth	r2, r3
 800d97a:	f107 0310 	add.w	r3, r7, #16
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f001 f98e 	bl	800ecaa <xTaskCreate>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b01      	cmp	r3, #1
 800d992:	d001      	beq.n	800d998 <osThreadNew+0x11a>
            hTask = NULL;
 800d994:	2300      	movs	r3, #0
 800d996:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d998:	693b      	ldr	r3, [r7, #16]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	; 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <osThreadFlagsSet+0x1a>
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	da03      	bge.n	800d9c6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d9be:	f06f 0303 	mvn.w	r3, #3
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	e035      	b.n	800da32 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9cc:	f3ef 8305 	mrs	r3, IPSR
 800d9d0:	613b      	str	r3, [r7, #16]
  return(result);
 800d9d2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01f      	beq.n	800da18 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d9dc:	f107 0308 	add.w	r3, r7, #8
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6978      	ldr	r0, [r7, #20]
 800d9ea:	f002 f905 	bl	800fbf8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d9ee:	f107 030c 	add.w	r3, r7, #12
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	9200      	str	r2, [sp, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f002 f8fc 	bl	800fbf8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d015      	beq.n	800da32 <osThreadFlagsSet+0x8e>
 800da06:	4b0d      	ldr	r3, [pc, #52]	; (800da3c <osThreadFlagsSet+0x98>)
 800da08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	e00c      	b.n	800da32 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800da18:	2300      	movs	r3, #0
 800da1a:	2201      	movs	r2, #1
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	6978      	ldr	r0, [r7, #20]
 800da20:	f002 f82c 	bl	800fa7c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800da24:	f107 030c 	add.w	r3, r7, #12
 800da28:	2200      	movs	r2, #0
 800da2a:	2100      	movs	r1, #0
 800da2c:	6978      	ldr	r0, [r7, #20]
 800da2e:	f002 f825 	bl	800fa7c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800da32:	68fb      	ldr	r3, [r7, #12]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	e000ed04 	.word	0xe000ed04

0800da40 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800da40:	b580      	push	{r7, lr}
 800da42:	b08c      	sub	sp, #48	; 0x30
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da4c:	f3ef 8305 	mrs	r3, IPSR
 800da50:	617b      	str	r3, [r7, #20]
  return(result);
 800da52:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800da54:	2b00      	cmp	r3, #0
 800da56:	d003      	beq.n	800da60 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800da58:	f06f 0305 	mvn.w	r3, #5
 800da5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da5e:	e06b      	b.n	800db38 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	da03      	bge.n	800da6e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800da66:	f06f 0303 	mvn.w	r3, #3
 800da6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da6c:	e064      	b.n	800db38 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	f003 0302 	and.w	r3, r3, #2
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7c:	e001      	b.n	800da82 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800da8a:	f001 fbb9 	bl	800f200 <xTaskGetTickCount>
 800da8e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800da90:	f107 0210 	add.w	r2, r7, #16
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da98:	2000      	movs	r0, #0
 800da9a:	f001 ff8f 	bl	800f9bc <xTaskNotifyWait>
 800da9e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d137      	bne.n	800db16 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800daa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4013      	ands	r3, r2
 800daac:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab2:	4313      	orrs	r3, r2
 800dab4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00c      	beq.n	800dada <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	4013      	ands	r3, r2
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d032      	beq.n	800db32 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10f      	bne.n	800daf2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800dad2:	f06f 0302 	mvn.w	r3, #2
 800dad6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800dad8:	e02e      	b.n	800db38 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d128      	bne.n	800db36 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d103      	bne.n	800daf2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800daea:	f06f 0302 	mvn.w	r3, #2
 800daee:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800daf0:	e022      	b.n	800db38 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800daf2:	f001 fb85 	bl	800f200 <xTaskGetTickCount>
 800daf6:	4602      	mov	r2, r0
 800daf8:	6a3b      	ldr	r3, [r7, #32]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	429a      	cmp	r2, r3
 800db04:	d902      	bls.n	800db0c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
 800db0a:	e00e      	b.n	800db2a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800db0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
 800db14:	e009      	b.n	800db2a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d103      	bne.n	800db24 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800db1c:	f06f 0302 	mvn.w	r3, #2
 800db20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db22:	e002      	b.n	800db2a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800db24:	f06f 0301 	mvn.w	r3, #1
 800db28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1af      	bne.n	800da90 <osThreadFlagsWait+0x50>
 800db30:	e002      	b.n	800db38 <osThreadFlagsWait+0xf8>
            break;
 800db32:	bf00      	nop
 800db34:	e000      	b.n	800db38 <osThreadFlagsWait+0xf8>
            break;
 800db36:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3730      	adds	r7, #48	; 0x30
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800db42:	b580      	push	{r7, lr}
 800db44:	b084      	sub	sp, #16
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db4a:	f3ef 8305 	mrs	r3, IPSR
 800db4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800db50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <osDelay+0x1c>
    stat = osErrorISR;
 800db56:	f06f 0305 	mvn.w	r3, #5
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	e007      	b.n	800db6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800db5e:	2300      	movs	r3, #0
 800db60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <osDelay+0x2c>
      vTaskDelay(ticks);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f001 f9f9 	bl	800ef60 <vTaskDelay>
    }
  }

  return (stat);
 800db6e:	68fb      	ldr	r3, [r7, #12]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db78:	b580      	push	{r7, lr}
 800db7a:	b08a      	sub	sp, #40	; 0x28
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800db84:	2300      	movs	r3, #0
 800db86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db88:	f3ef 8305 	mrs	r3, IPSR
 800db8c:	613b      	str	r3, [r7, #16]
  return(result);
 800db8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db90:	2b00      	cmp	r3, #0
 800db92:	d15f      	bne.n	800dc54 <osMessageQueueNew+0xdc>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d05c      	beq.n	800dc54 <osMessageQueueNew+0xdc>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d059      	beq.n	800dc54 <osMessageQueueNew+0xdc>
    mem = -1;
 800dba0:	f04f 33ff 	mov.w	r3, #4294967295
 800dba4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d029      	beq.n	800dc00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d012      	beq.n	800dbda <osMessageQueueNew+0x62>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	2b4f      	cmp	r3, #79	; 0x4f
 800dbba:	d90e      	bls.n	800dbda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00a      	beq.n	800dbda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	695a      	ldr	r2, [r3, #20]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	fb01 f303 	mul.w	r3, r1, r3
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d302      	bcc.n	800dbda <osMessageQueueNew+0x62>
        mem = 1;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	e014      	b.n	800dc04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d110      	bne.n	800dc04 <osMessageQueueNew+0x8c>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10c      	bne.n	800dc04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d108      	bne.n	800dc04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d104      	bne.n	800dc04 <osMessageQueueNew+0x8c>
          mem = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	e001      	b.n	800dc04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d10b      	bne.n	800dc22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	691a      	ldr	r2, [r3, #16]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	2100      	movs	r1, #0
 800dc14:	9100      	str	r1, [sp, #0]
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 fa87 	bl	800e12c <xQueueGenericCreateStatic>
 800dc1e:	61f8      	str	r0, [r7, #28]
 800dc20:	e008      	b.n	800dc34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d105      	bne.n	800dc34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dc28:	2200      	movs	r2, #0
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 faf5 	bl	800e21c <xQueueGenericCreate>
 800dc32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00c      	beq.n	800dc54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	617b      	str	r3, [r7, #20]
 800dc46:	e001      	b.n	800dc4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dc4c:	6979      	ldr	r1, [r7, #20]
 800dc4e:	69f8      	ldr	r0, [r7, #28]
 800dc50:	f000 ff70 	bl	800eb34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dc54:	69fb      	ldr	r3, [r7, #28]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3720      	adds	r7, #32
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc78:	f3ef 8305 	mrs	r3, IPSR
 800dc7c:	617b      	str	r3, [r7, #20]
  return(result);
 800dc7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d028      	beq.n	800dcd6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d005      	beq.n	800dc96 <osMessageQueuePut+0x36>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <osMessageQueuePut+0x36>
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dc96:	f06f 0303 	mvn.w	r3, #3
 800dc9a:	61fb      	str	r3, [r7, #28]
 800dc9c:	e038      	b.n	800dd10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dca2:	f107 0210 	add.w	r2, r7, #16
 800dca6:	2300      	movs	r3, #0
 800dca8:	68b9      	ldr	r1, [r7, #8]
 800dcaa:	69b8      	ldr	r0, [r7, #24]
 800dcac:	f000 fc12 	bl	800e4d4 <xQueueGenericSendFromISR>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d003      	beq.n	800dcbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dcb6:	f06f 0302 	mvn.w	r3, #2
 800dcba:	61fb      	str	r3, [r7, #28]
 800dcbc:	e028      	b.n	800dd10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d025      	beq.n	800dd10 <osMessageQueuePut+0xb0>
 800dcc4:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <osMessageQueuePut+0xbc>)
 800dcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcca:	601a      	str	r2, [r3, #0]
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	f3bf 8f6f 	isb	sy
 800dcd4:	e01c      	b.n	800dd10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <osMessageQueuePut+0x82>
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d103      	bne.n	800dcea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dce2:	f06f 0303 	mvn.w	r3, #3
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	e012      	b.n	800dd10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dcea:	2300      	movs	r3, #0
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	69b8      	ldr	r0, [r7, #24]
 800dcf2:	f000 faf1 	bl	800e2d8 <xQueueGenericSend>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d009      	beq.n	800dd10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd02:	f06f 0301 	mvn.w	r3, #1
 800dd06:	61fb      	str	r3, [r7, #28]
 800dd08:	e002      	b.n	800dd10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd0a:	f06f 0302 	mvn.w	r3, #2
 800dd0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd10:	69fb      	ldr	r3, [r7, #28]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	e000ed04 	.word	0xe000ed04

0800dd20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd36:	f3ef 8305 	mrs	r3, IPSR
 800dd3a:	617b      	str	r3, [r7, #20]
  return(result);
 800dd3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d028      	beq.n	800dd94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d005      	beq.n	800dd54 <osMessageQueueGet+0x34>
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <osMessageQueueGet+0x34>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d003      	beq.n	800dd5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dd54:	f06f 0303 	mvn.w	r3, #3
 800dd58:	61fb      	str	r3, [r7, #28]
 800dd5a:	e037      	b.n	800ddcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dd60:	f107 0310 	add.w	r3, r7, #16
 800dd64:	461a      	mov	r2, r3
 800dd66:	68b9      	ldr	r1, [r7, #8]
 800dd68:	69b8      	ldr	r0, [r7, #24]
 800dd6a:	f000 fd2f 	bl	800e7cc <xQueueReceiveFromISR>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d003      	beq.n	800dd7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dd74:	f06f 0302 	mvn.w	r3, #2
 800dd78:	61fb      	str	r3, [r7, #28]
 800dd7a:	e027      	b.n	800ddcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d024      	beq.n	800ddcc <osMessageQueueGet+0xac>
 800dd82:	4b15      	ldr	r3, [pc, #84]	; (800ddd8 <osMessageQueueGet+0xb8>)
 800dd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	e01b      	b.n	800ddcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <osMessageQueueGet+0x80>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d103      	bne.n	800dda8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dda0:	f06f 0303 	mvn.w	r3, #3
 800dda4:	61fb      	str	r3, [r7, #28]
 800dda6:	e011      	b.n	800ddcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	68b9      	ldr	r1, [r7, #8]
 800ddac:	69b8      	ldr	r0, [r7, #24]
 800ddae:	f000 fc2d 	bl	800e60c <xQueueReceive>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d009      	beq.n	800ddcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d003      	beq.n	800ddc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ddbe:	f06f 0301 	mvn.w	r3, #1
 800ddc2:	61fb      	str	r3, [r7, #28]
 800ddc4:	e002      	b.n	800ddcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ddc6:	f06f 0302 	mvn.w	r3, #2
 800ddca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ddcc:	69fb      	ldr	r3, [r7, #28]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3720      	adds	r7, #32
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	e000ed04 	.word	0xe000ed04

0800dddc <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08a      	sub	sp, #40	; 0x28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf2:	e023      	b.n	800de3c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddf4:	f3ef 8305 	mrs	r3, IPSR
 800ddf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ddfa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d019      	beq.n	800de34 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800de00:	f3ef 8211 	mrs	r2, BASEPRI
 800de04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	613a      	str	r2, [r7, #16]
 800de16:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800de18:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800de1a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de32:	e003      	b.n	800de3c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800de34:	6a38      	ldr	r0, [r7, #32]
 800de36:	f000 fd49 	bl	800e8cc <uxQueueSpacesAvailable>
 800de3a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3728      	adds	r7, #40	; 0x28
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800de46:	b580      	push	{r7, lr}
 800de48:	b086      	sub	sp, #24
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de52:	f3ef 8305 	mrs	r3, IPSR
 800de56:	60fb      	str	r3, [r7, #12]
  return(result);
 800de58:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800de5e:	f06f 0305 	mvn.w	r3, #5
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	e00c      	b.n	800de80 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d103      	bne.n	800de74 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800de6c:	f06f 0303 	mvn.w	r3, #3
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	e005      	b.n	800de80 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800de74:	2300      	movs	r3, #0
 800de76:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800de78:	2100      	movs	r1, #0
 800de7a:	6938      	ldr	r0, [r7, #16]
 800de7c:	f000 f8ee 	bl	800e05c <xQueueGenericReset>
  }

  return (stat);
 800de80:	697b      	ldr	r3, [r7, #20]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4a07      	ldr	r2, [pc, #28]	; (800deb8 <vApplicationGetIdleTaskMemory+0x2c>)
 800de9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	4a06      	ldr	r2, [pc, #24]	; (800debc <vApplicationGetIdleTaskMemory+0x30>)
 800dea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2280      	movs	r2, #128	; 0x80
 800dea8:	601a      	str	r2, [r3, #0]
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	200016cc 	.word	0x200016cc
 800debc:	20001788 	.word	0x20001788

0800dec0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4a07      	ldr	r2, [pc, #28]	; (800deec <vApplicationGetTimerTaskMemory+0x2c>)
 800ded0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	4a06      	ldr	r2, [pc, #24]	; (800def0 <vApplicationGetTimerTaskMemory+0x30>)
 800ded6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dede:	601a      	str	r2, [r3, #0]
}
 800dee0:	bf00      	nop
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	20001988 	.word	0x20001988
 800def0:	20001a44 	.word	0x20001a44

0800def4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f103 0208 	add.w	r2, r3, #8
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f04f 32ff 	mov.w	r2, #4294967295
 800df0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f103 0208 	add.w	r2, r3, #8
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f103 0208 	add.w	r2, r3, #8
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df42:	bf00      	nop
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df4e:	b480      	push	{r7}
 800df50:	b085      	sub	sp, #20
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	689a      	ldr	r2, [r3, #8]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	601a      	str	r2, [r3, #0]
}
 800df8a:	bf00      	nop
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df96:	b480      	push	{r7}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfac:	d103      	bne.n	800dfb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	e00c      	b.n	800dfd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3308      	adds	r3, #8
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	e002      	b.n	800dfc4 <vListInsert+0x2e>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d2f6      	bcs.n	800dfbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	601a      	str	r2, [r3, #0]
}
 800dffc:	bf00      	nop
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	6892      	ldr	r2, [r2, #8]
 800e01e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	6852      	ldr	r2, [r2, #4]
 800e028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d103      	bne.n	800e03c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	1e5a      	subs	r2, r3, #1
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10a      	bne.n	800e086 <xQueueGenericReset+0x2a>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	60bb      	str	r3, [r7, #8]
}
 800e082:	bf00      	nop
 800e084:	e7fe      	b.n	800e084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e086:	f002 fb6d 	bl	8010764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e092:	68f9      	ldr	r1, [r7, #12]
 800e094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e096:	fb01 f303 	mul.w	r3, r1, r3
 800e09a:	441a      	add	r2, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	68f9      	ldr	r1, [r7, #12]
 800e0ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0bc:	fb01 f303 	mul.w	r3, r1, r3
 800e0c0:	441a      	add	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	22ff      	movs	r2, #255	; 0xff
 800e0ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	22ff      	movs	r2, #255	; 0xff
 800e0d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d114      	bne.n	800e106 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d01a      	beq.n	800e11a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3310      	adds	r3, #16
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f001 fa19 	bl	800f520 <xTaskRemoveFromEventList>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d012      	beq.n	800e11a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0f4:	4b0c      	ldr	r3, [pc, #48]	; (800e128 <xQueueGenericReset+0xcc>)
 800e0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	e009      	b.n	800e11a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3310      	adds	r3, #16
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fef2 	bl	800def4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3324      	adds	r3, #36	; 0x24
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff feed 	bl	800def4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e11a:	f002 fb53 	bl	80107c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e11e:	2301      	movs	r3, #1
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	e000ed04 	.word	0xe000ed04

0800e12c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08e      	sub	sp, #56	; 0x38
 800e130:	af02      	add	r7, sp, #8
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10a      	bne.n	800e156 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10a      	bne.n	800e172 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e16e:	bf00      	nop
 800e170:	e7fe      	b.n	800e170 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <xQueueGenericCreateStatic+0x52>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <xQueueGenericCreateStatic+0x56>
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <xQueueGenericCreateStatic+0x58>
 800e182:	2300      	movs	r3, #0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10a      	bne.n	800e19e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18c:	f383 8811 	msr	BASEPRI, r3
 800e190:	f3bf 8f6f 	isb	sy
 800e194:	f3bf 8f4f 	dsb	sy
 800e198:	623b      	str	r3, [r7, #32]
}
 800e19a:	bf00      	nop
 800e19c:	e7fe      	b.n	800e19c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d102      	bne.n	800e1aa <xQueueGenericCreateStatic+0x7e>
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <xQueueGenericCreateStatic+0x82>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e000      	b.n	800e1b0 <xQueueGenericCreateStatic+0x84>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10a      	bne.n	800e1ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	61fb      	str	r3, [r7, #28]
}
 800e1c6:	bf00      	nop
 800e1c8:	e7fe      	b.n	800e1c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e1ca:	2350      	movs	r3, #80	; 0x50
 800e1cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2b50      	cmp	r3, #80	; 0x50
 800e1d2:	d00a      	beq.n	800e1ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	61bb      	str	r3, [r7, #24]
}
 800e1e6:	bf00      	nop
 800e1e8:	e7fe      	b.n	800e1e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4613      	mov	r3, r2
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	68b9      	ldr	r1, [r7, #8]
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 f83f 	bl	800e290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e214:	4618      	mov	r0, r3
 800e216:	3730      	adds	r7, #48	; 0x30
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	; 0x28
 800e220:	af02      	add	r7, sp, #8
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	4613      	mov	r3, r2
 800e228:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10a      	bne.n	800e246 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	613b      	str	r3, [r7, #16]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	fb02 f303 	mul.w	r3, r2, r3
 800e24e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	3350      	adds	r3, #80	; 0x50
 800e254:	4618      	mov	r0, r3
 800e256:	f002 fba7 	bl	80109a8 <pvPortMalloc>
 800e25a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d011      	beq.n	800e286 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	3350      	adds	r3, #80	; 0x50
 800e26a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e274:	79fa      	ldrb	r2, [r7, #7]
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	4613      	mov	r3, r2
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	68b9      	ldr	r1, [r7, #8]
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 f805 	bl	800e290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e286:	69bb      	ldr	r3, [r7, #24]
	}
 800e288:	4618      	mov	r0, r3
 800e28a:	3720      	adds	r7, #32
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d103      	bne.n	800e2ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	601a      	str	r2, [r3, #0]
 800e2aa:	e002      	b.n	800e2b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e2be:	2101      	movs	r1, #1
 800e2c0:	69b8      	ldr	r0, [r7, #24]
 800e2c2:	f7ff fecb 	bl	800e05c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	78fa      	ldrb	r2, [r7, #3]
 800e2ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08e      	sub	sp, #56	; 0x38
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <xQueueGenericSend+0x32>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d103      	bne.n	800e318 <xQueueGenericSend+0x40>
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <xQueueGenericSend+0x44>
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <xQueueGenericSend+0x46>
 800e31c:	2300      	movs	r3, #0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <xQueueGenericSend+0x60>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d103      	bne.n	800e346 <xQueueGenericSend+0x6e>
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <xQueueGenericSend+0x72>
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <xQueueGenericSend+0x74>
 800e34a:	2300      	movs	r3, #0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xQueueGenericSend+0x8e>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	623b      	str	r3, [r7, #32]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e366:	f001 fa9d 	bl	800f8a4 <xTaskGetSchedulerState>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <xQueueGenericSend+0x9e>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <xQueueGenericSend+0xa2>
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <xQueueGenericSend+0xa4>
 800e37a:	2300      	movs	r3, #0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <xQueueGenericSend+0xbe>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	61fb      	str	r3, [r7, #28]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e396:	f002 f9e5 	bl	8010764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d302      	bcc.n	800e3ac <xQueueGenericSend+0xd4>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d129      	bne.n	800e400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	68b9      	ldr	r1, [r7, #8]
 800e3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3b2:	f000 faae 	bl	800e912 <prvCopyDataToQueue>
 800e3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d010      	beq.n	800e3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	3324      	adds	r3, #36	; 0x24
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f001 f8ab 	bl	800f520 <xTaskRemoveFromEventList>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d013      	beq.n	800e3f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3d0:	4b3f      	ldr	r3, [pc, #252]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	e00a      	b.n	800e3f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3e8:	4b39      	ldr	r3, [pc, #228]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3f8:	f002 f9e4 	bl	80107c4 <vPortExitCritical>
				return pdPASS;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e063      	b.n	800e4c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e406:	f002 f9dd 	bl	80107c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	e05c      	b.n	800e4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e410:	2b00      	cmp	r3, #0
 800e412:	d106      	bne.n	800e422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	4618      	mov	r0, r3
 800e41a:	f001 f8e5 	bl	800f5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e41e:	2301      	movs	r3, #1
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e422:	f002 f9cf 	bl	80107c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e426:	f000 fe3f 	bl	800f0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e42a:	f002 f99b 	bl	8010764 <vPortEnterCritical>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e434:	b25b      	sxtb	r3, r3
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43a:	d103      	bne.n	800e444 <xQueueGenericSend+0x16c>
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e44a:	b25b      	sxtb	r3, r3
 800e44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e450:	d103      	bne.n	800e45a <xQueueGenericSend+0x182>
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e45a:	f002 f9b3 	bl	80107c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e45e:	1d3a      	adds	r2, r7, #4
 800e460:	f107 0314 	add.w	r3, r7, #20
 800e464:	4611      	mov	r1, r2
 800e466:	4618      	mov	r0, r3
 800e468:	f001 f8d4 	bl	800f614 <xTaskCheckForTimeOut>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d124      	bne.n	800e4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e474:	f000 fb45 	bl	800eb02 <prvIsQueueFull>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d018      	beq.n	800e4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	3310      	adds	r3, #16
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fffa 	bl	800f480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48e:	f000 fad0 	bl	800ea32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e492:	f000 fe17 	bl	800f0c4 <xTaskResumeAll>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f47f af7c 	bne.w	800e396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e49e:	4b0c      	ldr	r3, [pc, #48]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	e772      	b.n	800e396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4b2:	f000 fabe 	bl	800ea32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4b6:	f000 fe05 	bl	800f0c4 <xTaskResumeAll>
 800e4ba:	e76c      	b.n	800e396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4be:	f000 fab8 	bl	800ea32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4c2:	f000 fdff 	bl	800f0c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3738      	adds	r7, #56	; 0x38
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	e000ed04 	.word	0xe000ed04

0800e4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b090      	sub	sp, #64	; 0x40
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10a      	bne.n	800e502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4fe:	bf00      	nop
 800e500:	e7fe      	b.n	800e500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d103      	bne.n	800e510 <xQueueGenericSendFromISR+0x3c>
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <xQueueGenericSendFromISR+0x40>
 800e510:	2301      	movs	r3, #1
 800e512:	e000      	b.n	800e516 <xQueueGenericSendFromISR+0x42>
 800e514:	2300      	movs	r3, #0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10a      	bne.n	800e530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e52c:	bf00      	nop
 800e52e:	e7fe      	b.n	800e52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d103      	bne.n	800e53e <xQueueGenericSendFromISR+0x6a>
 800e536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d101      	bne.n	800e542 <xQueueGenericSendFromISR+0x6e>
 800e53e:	2301      	movs	r3, #1
 800e540:	e000      	b.n	800e544 <xQueueGenericSendFromISR+0x70>
 800e542:	2300      	movs	r3, #0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10a      	bne.n	800e55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	623b      	str	r3, [r7, #32]
}
 800e55a:	bf00      	nop
 800e55c:	e7fe      	b.n	800e55c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e55e:	f002 f9e3 	bl	8010928 <vPortValidateInterruptPriority>
	__asm volatile
 800e562:	f3ef 8211 	mrs	r2, BASEPRI
 800e566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	61fa      	str	r2, [r7, #28]
 800e578:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e57a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e57c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	429a      	cmp	r2, r3
 800e588:	d302      	bcc.n	800e590 <xQueueGenericSendFromISR+0xbc>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d12f      	bne.n	800e5f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5a6:	f000 f9b4 	bl	800e912 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b2:	d112      	bne.n	800e5da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d016      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	3324      	adds	r3, #36	; 0x24
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 ffad 	bl	800f520 <xTaskRemoveFromEventList>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00e      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00b      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	e007      	b.n	800e5ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5de:	3301      	adds	r3, #1
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	b25a      	sxtb	r2, r3
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5ee:	e001      	b.n	800e5f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f383 8811 	msr	BASEPRI, r3
}
 800e5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e602:	4618      	mov	r0, r3
 800e604:	3740      	adds	r7, #64	; 0x40
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b08c      	sub	sp, #48	; 0x30
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e618:	2300      	movs	r3, #0
 800e61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10a      	bne.n	800e63c <xQueueReceive+0x30>
	__asm volatile
 800e626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	623b      	str	r3, [r7, #32]
}
 800e638:	bf00      	nop
 800e63a:	e7fe      	b.n	800e63a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d103      	bne.n	800e64a <xQueueReceive+0x3e>
 800e642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <xQueueReceive+0x42>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e000      	b.n	800e650 <xQueueReceive+0x44>
 800e64e:	2300      	movs	r3, #0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <xQueueReceive+0x5e>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	61fb      	str	r3, [r7, #28]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e66a:	f001 f91b 	bl	800f8a4 <xTaskGetSchedulerState>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <xQueueReceive+0x6e>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <xQueueReceive+0x72>
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <xQueueReceive+0x74>
 800e67e:	2300      	movs	r3, #0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <xQueueReceive+0x8e>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	61bb      	str	r3, [r7, #24]
}
 800e696:	bf00      	nop
 800e698:	e7fe      	b.n	800e698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e69a:	f002 f863 	bl	8010764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d01f      	beq.n	800e6ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6aa:	68b9      	ldr	r1, [r7, #8]
 800e6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ae:	f000 f99a 	bl	800e9e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00f      	beq.n	800e6e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	3310      	adds	r3, #16
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 ff2a 	bl	800f520 <xTaskRemoveFromEventList>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d007      	beq.n	800e6e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6d2:	4b3d      	ldr	r3, [pc, #244]	; (800e7c8 <xQueueReceive+0x1bc>)
 800e6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d8:	601a      	str	r2, [r3, #0]
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6e2:	f002 f86f 	bl	80107c4 <vPortExitCritical>
				return pdPASS;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e069      	b.n	800e7be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d103      	bne.n	800e6f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6f0:	f002 f868 	bl	80107c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	e062      	b.n	800e7be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d106      	bne.n	800e70c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6fe:	f107 0310 	add.w	r3, r7, #16
 800e702:	4618      	mov	r0, r3
 800e704:	f000 ff70 	bl	800f5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e708:	2301      	movs	r3, #1
 800e70a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e70c:	f002 f85a 	bl	80107c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e710:	f000 fcca 	bl	800f0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e714:	f002 f826 	bl	8010764 <vPortEnterCritical>
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e724:	d103      	bne.n	800e72e <xQueueReceive+0x122>
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e734:	b25b      	sxtb	r3, r3
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d103      	bne.n	800e744 <xQueueReceive+0x138>
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e744:	f002 f83e 	bl	80107c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e748:	1d3a      	adds	r2, r7, #4
 800e74a:	f107 0310 	add.w	r3, r7, #16
 800e74e:	4611      	mov	r1, r2
 800e750:	4618      	mov	r0, r3
 800e752:	f000 ff5f 	bl	800f614 <xTaskCheckForTimeOut>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d123      	bne.n	800e7a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75e:	f000 f9ba 	bl	800ead6 <prvIsQueueEmpty>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d017      	beq.n	800e798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	3324      	adds	r3, #36	; 0x24
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f000 fe85 	bl	800f480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e778:	f000 f95b 	bl	800ea32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e77c:	f000 fca2 	bl	800f0c4 <xTaskResumeAll>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d189      	bne.n	800e69a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e786:	4b10      	ldr	r3, [pc, #64]	; (800e7c8 <xQueueReceive+0x1bc>)
 800e788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	e780      	b.n	800e69a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e79a:	f000 f94a 	bl	800ea32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e79e:	f000 fc91 	bl	800f0c4 <xTaskResumeAll>
 800e7a2:	e77a      	b.n	800e69a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a6:	f000 f944 	bl	800ea32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7aa:	f000 fc8b 	bl	800f0c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7b0:	f000 f991 	bl	800ead6 <prvIsQueueEmpty>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f43f af6f 	beq.w	800e69a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3730      	adds	r7, #48	; 0x30
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08e      	sub	sp, #56	; 0x38
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10a      	bne.n	800e7f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	623b      	str	r3, [r7, #32]
}
 800e7f4:	bf00      	nop
 800e7f6:	e7fe      	b.n	800e7f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d103      	bne.n	800e806 <xQueueReceiveFromISR+0x3a>
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <xQueueReceiveFromISR+0x3e>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <xQueueReceiveFromISR+0x40>
 800e80a:	2300      	movs	r3, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10a      	bne.n	800e826 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	61fb      	str	r3, [r7, #28]
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e826:	f002 f87f 	bl	8010928 <vPortValidateInterruptPriority>
	__asm volatile
 800e82a:	f3ef 8211 	mrs	r2, BASEPRI
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	61ba      	str	r2, [r7, #24]
 800e840:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e842:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e844:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d02f      	beq.n	800e8b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e85c:	68b9      	ldr	r1, [r7, #8]
 800e85e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e860:	f000 f8c1 	bl	800e9e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e874:	d112      	bne.n	800e89c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d016      	beq.n	800e8ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	3310      	adds	r3, #16
 800e882:	4618      	mov	r0, r3
 800e884:	f000 fe4c 	bl	800f520 <xTaskRemoveFromEventList>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00e      	beq.n	800e8ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00b      	beq.n	800e8ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	601a      	str	r2, [r3, #0]
 800e89a:	e007      	b.n	800e8ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	b25a      	sxtb	r2, r3
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e8b0:	e001      	b.n	800e8b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f383 8811 	msr	BASEPRI, r3
}
 800e8c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3738      	adds	r7, #56	; 0x38
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	60fb      	str	r3, [r7, #12]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800e8f4:	f001 ff36 	bl	8010764 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e904:	f001 ff5e 	bl	80107c4 <vPortExitCritical>

	return uxReturn;
 800e908:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b086      	sub	sp, #24
 800e916:	af00      	add	r7, sp, #0
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e926:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d10d      	bne.n	800e94c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d14d      	bne.n	800e9d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 ffcf 	bl	800f8e0 <xTaskPriorityDisinherit>
 800e942:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	609a      	str	r2, [r3, #8]
 800e94a:	e043      	b.n	800e9d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d119      	bne.n	800e986 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6858      	ldr	r0, [r3, #4]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95a:	461a      	mov	r2, r3
 800e95c:	68b9      	ldr	r1, [r7, #8]
 800e95e:	f002 fb70 	bl	8011042 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	441a      	add	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	685a      	ldr	r2, [r3, #4]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d32b      	bcc.n	800e9d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	605a      	str	r2, [r3, #4]
 800e984:	e026      	b.n	800e9d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	68d8      	ldr	r0, [r3, #12]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98e:	461a      	mov	r2, r3
 800e990:	68b9      	ldr	r1, [r7, #8]
 800e992:	f002 fb56 	bl	8011042 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99e:	425b      	negs	r3, r3
 800e9a0:	441a      	add	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	68da      	ldr	r2, [r3, #12]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d207      	bcs.n	800e9c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ba:	425b      	negs	r3, r3
 800e9bc:	441a      	add	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d105      	bne.n	800e9d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	1c5a      	adds	r2, r3, #1
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e9dc:	697b      	ldr	r3, [r7, #20]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3718      	adds	r7, #24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d018      	beq.n	800ea2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea00:	441a      	add	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	68da      	ldr	r2, [r3, #12]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d303      	bcc.n	800ea1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68d9      	ldr	r1, [r3, #12]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea22:	461a      	mov	r2, r3
 800ea24:	6838      	ldr	r0, [r7, #0]
 800ea26:	f002 fb0c 	bl	8011042 <memcpy>
	}
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea3a:	f001 fe93 	bl	8010764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea46:	e011      	b.n	800ea6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d012      	beq.n	800ea76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3324      	adds	r3, #36	; 0x24
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fd63 	bl	800f520 <xTaskRemoveFromEventList>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea60:	f000 fe3a 	bl	800f6d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	dce9      	bgt.n	800ea48 <prvUnlockQueue+0x16>
 800ea74:	e000      	b.n	800ea78 <prvUnlockQueue+0x46>
					break;
 800ea76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	22ff      	movs	r2, #255	; 0xff
 800ea7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea80:	f001 fea0 	bl	80107c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea84:	f001 fe6e 	bl	8010764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea90:	e011      	b.n	800eab6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d012      	beq.n	800eac0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	3310      	adds	r3, #16
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 fd3e 	bl	800f520 <xTaskRemoveFromEventList>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eaaa:	f000 fe15 	bl	800f6d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eaae:	7bbb      	ldrb	r3, [r7, #14]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	dce9      	bgt.n	800ea92 <prvUnlockQueue+0x60>
 800eabe:	e000      	b.n	800eac2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eac0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	22ff      	movs	r2, #255	; 0xff
 800eac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eaca:	f001 fe7b 	bl	80107c4 <vPortExitCritical>
}
 800eace:	bf00      	nop
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b084      	sub	sp, #16
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eade:	f001 fe41 	bl	8010764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d102      	bne.n	800eaf0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eaea:	2301      	movs	r3, #1
 800eaec:	60fb      	str	r3, [r7, #12]
 800eaee:	e001      	b.n	800eaf4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eaf4:	f001 fe66 	bl	80107c4 <vPortExitCritical>

	return xReturn;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb0a:	f001 fe2b 	bl	8010764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d102      	bne.n	800eb20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	e001      	b.n	800eb24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb24:	f001 fe4e 	bl	80107c4 <vPortExitCritical>

	return xReturn;
 800eb28:	68fb      	ldr	r3, [r7, #12]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60fb      	str	r3, [r7, #12]
 800eb42:	e014      	b.n	800eb6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb44:	4a0f      	ldr	r2, [pc, #60]	; (800eb84 <vQueueAddToRegistry+0x50>)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10b      	bne.n	800eb68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb50:	490c      	ldr	r1, [pc, #48]	; (800eb84 <vQueueAddToRegistry+0x50>)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	683a      	ldr	r2, [r7, #0]
 800eb56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb5a:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <vQueueAddToRegistry+0x50>)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	00db      	lsls	r3, r3, #3
 800eb60:	4413      	add	r3, r2
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb66:	e006      	b.n	800eb76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b07      	cmp	r3, #7
 800eb72:	d9e7      	bls.n	800eb44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	20001e44 	.word	0x20001e44

0800eb88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb98:	f001 fde4 	bl	8010764 <vPortEnterCritical>
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eba2:	b25b      	sxtb	r3, r3
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d103      	bne.n	800ebb2 <vQueueWaitForMessageRestricted+0x2a>
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebb8:	b25b      	sxtb	r3, r3
 800ebba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbe:	d103      	bne.n	800ebc8 <vQueueWaitForMessageRestricted+0x40>
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebc8:	f001 fdfc 	bl	80107c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d106      	bne.n	800ebe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	3324      	adds	r3, #36	; 0x24
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fc73 	bl	800f4c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ebe2:	6978      	ldr	r0, [r7, #20]
 800ebe4:	f7ff ff25 	bl	800ea32 <prvUnlockQueue>
	}
 800ebe8:	bf00      	nop
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08e      	sub	sp, #56	; 0x38
 800ebf4:	af04      	add	r7, sp, #16
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10a      	bne.n	800ec1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	623b      	str	r3, [r7, #32]
}
 800ec16:	bf00      	nop
 800ec18:	e7fe      	b.n	800ec18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <xTaskCreateStatic+0x46>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	61fb      	str	r3, [r7, #28]
}
 800ec32:	bf00      	nop
 800ec34:	e7fe      	b.n	800ec34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec36:	23bc      	movs	r3, #188	; 0xbc
 800ec38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2bbc      	cmp	r3, #188	; 0xbc
 800ec3e:	d00a      	beq.n	800ec56 <xTaskCreateStatic+0x66>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	61bb      	str	r3, [r7, #24]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d01e      	beq.n	800ec9c <xTaskCreateStatic+0xac>
 800ec5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d01b      	beq.n	800ec9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	2202      	movs	r2, #2
 800ec72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec76:	2300      	movs	r3, #0
 800ec78:	9303      	str	r3, [sp, #12]
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	f107 0314 	add.w	r3, r7, #20
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	68b9      	ldr	r1, [r7, #8]
 800ec8e:	68f8      	ldr	r0, [r7, #12]
 800ec90:	f000 f850 	bl	800ed34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec96:	f000 f8f3 	bl	800ee80 <prvAddNewTaskToReadyList>
 800ec9a:	e001      	b.n	800eca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eca0:	697b      	ldr	r3, [r7, #20]
	}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3728      	adds	r7, #40	; 0x28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b08c      	sub	sp, #48	; 0x30
 800ecae:	af04      	add	r7, sp, #16
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	60b9      	str	r1, [r7, #8]
 800ecb4:	603b      	str	r3, [r7, #0]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f001 fe72 	bl	80109a8 <pvPortMalloc>
 800ecc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00e      	beq.n	800ecea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eccc:	20bc      	movs	r0, #188	; 0xbc
 800ecce:	f001 fe6b 	bl	80109a8 <pvPortMalloc>
 800ecd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d003      	beq.n	800ece2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	631a      	str	r2, [r3, #48]	; 0x30
 800ece0:	e005      	b.n	800ecee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ece2:	6978      	ldr	r0, [r7, #20]
 800ece4:	f001 ff2c 	bl	8010b40 <vPortFree>
 800ece8:	e001      	b.n	800ecee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d017      	beq.n	800ed24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ecfc:	88fa      	ldrh	r2, [r7, #6]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	9302      	str	r3, [sp, #8]
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	68b9      	ldr	r1, [r7, #8]
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f000 f80e 	bl	800ed34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed18:	69f8      	ldr	r0, [r7, #28]
 800ed1a:	f000 f8b1 	bl	800ee80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	61bb      	str	r3, [r7, #24]
 800ed22:	e002      	b.n	800ed2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed24:	f04f 33ff 	mov.w	r3, #4294967295
 800ed28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed2a:	69bb      	ldr	r3, [r7, #24]
	}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3720      	adds	r7, #32
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b088      	sub	sp, #32
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	21a5      	movs	r1, #165	; 0xa5
 800ed4e:	f002 f9a0 	bl	8011092 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	f023 0307 	bic.w	r3, r3, #7
 800ed6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	f003 0307 	and.w	r3, r3, #7
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00a      	beq.n	800ed8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ed76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	617b      	str	r3, [r7, #20]
}
 800ed88:	bf00      	nop
 800ed8a:	e7fe      	b.n	800ed8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d01f      	beq.n	800edd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed92:	2300      	movs	r3, #0
 800ed94:	61fb      	str	r3, [r7, #28]
 800ed96:	e012      	b.n	800edbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	7819      	ldrb	r1, [r3, #0]
 800eda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	4413      	add	r3, r2
 800eda6:	3334      	adds	r3, #52	; 0x34
 800eda8:	460a      	mov	r2, r1
 800edaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	4413      	add	r3, r2
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d006      	beq.n	800edc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	3301      	adds	r3, #1
 800edbc:	61fb      	str	r3, [r7, #28]
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	2b0f      	cmp	r3, #15
 800edc2:	d9e9      	bls.n	800ed98 <prvInitialiseNewTask+0x64>
 800edc4:	e000      	b.n	800edc8 <prvInitialiseNewTask+0x94>
			{
				break;
 800edc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800edd0:	e003      	b.n	800edda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eddc:	2b37      	cmp	r3, #55	; 0x37
 800edde:	d901      	bls.n	800ede4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ede0:	2337      	movs	r3, #55	; 0x37
 800ede2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ede8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	2200      	movs	r2, #0
 800edf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	3304      	adds	r3, #4
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff f89a 	bl	800df34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	3318      	adds	r3, #24
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff f895 	bl	800df34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	3354      	adds	r3, #84	; 0x54
 800ee34:	2260      	movs	r2, #96	; 0x60
 800ee36:	2100      	movs	r1, #0
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f002 f92a 	bl	8011092 <memset>
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	4a0c      	ldr	r2, [pc, #48]	; (800ee74 <prvInitialiseNewTask+0x140>)
 800ee42:	659a      	str	r2, [r3, #88]	; 0x58
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	4a0c      	ldr	r2, [pc, #48]	; (800ee78 <prvInitialiseNewTask+0x144>)
 800ee48:	65da      	str	r2, [r3, #92]	; 0x5c
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	4a0b      	ldr	r2, [pc, #44]	; (800ee7c <prvInitialiseNewTask+0x148>)
 800ee4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	68f9      	ldr	r1, [r7, #12]
 800ee54:	69b8      	ldr	r0, [r7, #24]
 800ee56:	f001 fb55 	bl	8010504 <pxPortInitialiseStack>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d002      	beq.n	800ee6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee6c:	bf00      	nop
 800ee6e:	3720      	adds	r7, #32
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	08015658 	.word	0x08015658
 800ee78:	08015678 	.word	0x08015678
 800ee7c:	08015638 	.word	0x08015638

0800ee80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee88:	f001 fc6c 	bl	8010764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee8c:	4b2d      	ldr	r3, [pc, #180]	; (800ef44 <prvAddNewTaskToReadyList+0xc4>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	3301      	adds	r3, #1
 800ee92:	4a2c      	ldr	r2, [pc, #176]	; (800ef44 <prvAddNewTaskToReadyList+0xc4>)
 800ee94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee96:	4b2c      	ldr	r3, [pc, #176]	; (800ef48 <prvAddNewTaskToReadyList+0xc8>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d109      	bne.n	800eeb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee9e:	4a2a      	ldr	r2, [pc, #168]	; (800ef48 <prvAddNewTaskToReadyList+0xc8>)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eea4:	4b27      	ldr	r3, [pc, #156]	; (800ef44 <prvAddNewTaskToReadyList+0xc4>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d110      	bne.n	800eece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eeac:	f000 fc38 	bl	800f720 <prvInitialiseTaskLists>
 800eeb0:	e00d      	b.n	800eece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eeb2:	4b26      	ldr	r3, [pc, #152]	; (800ef4c <prvAddNewTaskToReadyList+0xcc>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d109      	bne.n	800eece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eeba:	4b23      	ldr	r3, [pc, #140]	; (800ef48 <prvAddNewTaskToReadyList+0xc8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d802      	bhi.n	800eece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eec8:	4a1f      	ldr	r2, [pc, #124]	; (800ef48 <prvAddNewTaskToReadyList+0xc8>)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eece:	4b20      	ldr	r3, [pc, #128]	; (800ef50 <prvAddNewTaskToReadyList+0xd0>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	3301      	adds	r3, #1
 800eed4:	4a1e      	ldr	r2, [pc, #120]	; (800ef50 <prvAddNewTaskToReadyList+0xd0>)
 800eed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eed8:	4b1d      	ldr	r3, [pc, #116]	; (800ef50 <prvAddNewTaskToReadyList+0xd0>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee4:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <prvAddNewTaskToReadyList+0xd4>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d903      	bls.n	800eef4 <prvAddNewTaskToReadyList+0x74>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	4a18      	ldr	r2, [pc, #96]	; (800ef54 <prvAddNewTaskToReadyList+0xd4>)
 800eef2:	6013      	str	r3, [r2, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	4a15      	ldr	r2, [pc, #84]	; (800ef58 <prvAddNewTaskToReadyList+0xd8>)
 800ef02:	441a      	add	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	3304      	adds	r3, #4
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	f7ff f81f 	bl	800df4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef10:	f001 fc58 	bl	80107c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef14:	4b0d      	ldr	r3, [pc, #52]	; (800ef4c <prvAddNewTaskToReadyList+0xcc>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00e      	beq.n	800ef3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef1c:	4b0a      	ldr	r3, [pc, #40]	; (800ef48 <prvAddNewTaskToReadyList+0xc8>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d207      	bcs.n	800ef3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef2a:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <prvAddNewTaskToReadyList+0xdc>)
 800ef2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef3a:	bf00      	nop
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20002358 	.word	0x20002358
 800ef48:	20001e84 	.word	0x20001e84
 800ef4c:	20002364 	.word	0x20002364
 800ef50:	20002374 	.word	0x20002374
 800ef54:	20002360 	.word	0x20002360
 800ef58:	20001e88 	.word	0x20001e88
 800ef5c:	e000ed04 	.word	0xe000ed04

0800ef60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d017      	beq.n	800efa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef72:	4b13      	ldr	r3, [pc, #76]	; (800efc0 <vTaskDelay+0x60>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00a      	beq.n	800ef90 <vTaskDelay+0x30>
	__asm volatile
 800ef7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	60bb      	str	r3, [r7, #8]
}
 800ef8c:	bf00      	nop
 800ef8e:	e7fe      	b.n	800ef8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ef90:	f000 f88a 	bl	800f0a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef94:	2100      	movs	r1, #0
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 ff12 	bl	800fdc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef9c:	f000 f892 	bl	800f0c4 <xTaskResumeAll>
 800efa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d107      	bne.n	800efb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800efa8:	4b06      	ldr	r3, [pc, #24]	; (800efc4 <vTaskDelay+0x64>)
 800efaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20002380 	.word	0x20002380
 800efc4:	e000ed04 	.word	0xe000ed04

0800efc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	; 0x28
 800efcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800efd6:	463a      	mov	r2, r7
 800efd8:	1d39      	adds	r1, r7, #4
 800efda:	f107 0308 	add.w	r3, r7, #8
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe ff54 	bl	800de8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	9202      	str	r2, [sp, #8]
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	2300      	movs	r3, #0
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	2300      	movs	r3, #0
 800eff4:	460a      	mov	r2, r1
 800eff6:	4924      	ldr	r1, [pc, #144]	; (800f088 <vTaskStartScheduler+0xc0>)
 800eff8:	4824      	ldr	r0, [pc, #144]	; (800f08c <vTaskStartScheduler+0xc4>)
 800effa:	f7ff fdf9 	bl	800ebf0 <xTaskCreateStatic>
 800effe:	4603      	mov	r3, r0
 800f000:	4a23      	ldr	r2, [pc, #140]	; (800f090 <vTaskStartScheduler+0xc8>)
 800f002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f004:	4b22      	ldr	r3, [pc, #136]	; (800f090 <vTaskStartScheduler+0xc8>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f00c:	2301      	movs	r3, #1
 800f00e:	617b      	str	r3, [r7, #20]
 800f010:	e001      	b.n	800f016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f012:	2300      	movs	r3, #0
 800f014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d102      	bne.n	800f022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f01c:	f000 ff24 	bl	800fe68 <xTimerCreateTimerTask>
 800f020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d11b      	bne.n	800f060 <vTaskStartScheduler+0x98>
	__asm volatile
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	613b      	str	r3, [r7, #16]
}
 800f03a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f03c:	4b15      	ldr	r3, [pc, #84]	; (800f094 <vTaskStartScheduler+0xcc>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3354      	adds	r3, #84	; 0x54
 800f042:	4a15      	ldr	r2, [pc, #84]	; (800f098 <vTaskStartScheduler+0xd0>)
 800f044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f046:	4b15      	ldr	r3, [pc, #84]	; (800f09c <vTaskStartScheduler+0xd4>)
 800f048:	f04f 32ff 	mov.w	r2, #4294967295
 800f04c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f04e:	4b14      	ldr	r3, [pc, #80]	; (800f0a0 <vTaskStartScheduler+0xd8>)
 800f050:	2201      	movs	r2, #1
 800f052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f054:	4b13      	ldr	r3, [pc, #76]	; (800f0a4 <vTaskStartScheduler+0xdc>)
 800f056:	2200      	movs	r2, #0
 800f058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f05a:	f001 fae1 	bl	8010620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f05e:	e00e      	b.n	800f07e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d10a      	bne.n	800f07e <vTaskStartScheduler+0xb6>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	60fb      	str	r3, [r7, #12]
}
 800f07a:	bf00      	nop
 800f07c:	e7fe      	b.n	800f07c <vTaskStartScheduler+0xb4>
}
 800f07e:	bf00      	nop
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	08015258 	.word	0x08015258
 800f08c:	0800f6f1 	.word	0x0800f6f1
 800f090:	2000237c 	.word	0x2000237c
 800f094:	20001e84 	.word	0x20001e84
 800f098:	20000058 	.word	0x20000058
 800f09c:	20002378 	.word	0x20002378
 800f0a0:	20002364 	.word	0x20002364
 800f0a4:	2000235c 	.word	0x2000235c

0800f0a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f0ac:	4b04      	ldr	r3, [pc, #16]	; (800f0c0 <vTaskSuspendAll+0x18>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	4a03      	ldr	r2, [pc, #12]	; (800f0c0 <vTaskSuspendAll+0x18>)
 800f0b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f0b6:	bf00      	nop
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	20002380 	.word	0x20002380

0800f0c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f0d2:	4b42      	ldr	r3, [pc, #264]	; (800f1dc <xTaskResumeAll+0x118>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	603b      	str	r3, [r7, #0]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f0f0:	f001 fb38 	bl	8010764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f0f4:	4b39      	ldr	r3, [pc, #228]	; (800f1dc <xTaskResumeAll+0x118>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	4a38      	ldr	r2, [pc, #224]	; (800f1dc <xTaskResumeAll+0x118>)
 800f0fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0fe:	4b37      	ldr	r3, [pc, #220]	; (800f1dc <xTaskResumeAll+0x118>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d162      	bne.n	800f1cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f106:	4b36      	ldr	r3, [pc, #216]	; (800f1e0 <xTaskResumeAll+0x11c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d05e      	beq.n	800f1cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f10e:	e02f      	b.n	800f170 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f110:	4b34      	ldr	r3, [pc, #208]	; (800f1e4 <xTaskResumeAll+0x120>)
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3318      	adds	r3, #24
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe ff73 	bl	800e008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3304      	adds	r3, #4
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe ff6e 	bl	800e008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f130:	4b2d      	ldr	r3, [pc, #180]	; (800f1e8 <xTaskResumeAll+0x124>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	429a      	cmp	r2, r3
 800f136:	d903      	bls.n	800f140 <xTaskResumeAll+0x7c>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13c:	4a2a      	ldr	r2, [pc, #168]	; (800f1e8 <xTaskResumeAll+0x124>)
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f144:	4613      	mov	r3, r2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	4413      	add	r3, r2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	4a27      	ldr	r2, [pc, #156]	; (800f1ec <xTaskResumeAll+0x128>)
 800f14e:	441a      	add	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3304      	adds	r3, #4
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f7fe fef9 	bl	800df4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f160:	4b23      	ldr	r3, [pc, #140]	; (800f1f0 <xTaskResumeAll+0x12c>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f166:	429a      	cmp	r2, r3
 800f168:	d302      	bcc.n	800f170 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f16a:	4b22      	ldr	r3, [pc, #136]	; (800f1f4 <xTaskResumeAll+0x130>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f170:	4b1c      	ldr	r3, [pc, #112]	; (800f1e4 <xTaskResumeAll+0x120>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1cb      	bne.n	800f110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f17e:	f000 fb71 	bl	800f864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f182:	4b1d      	ldr	r3, [pc, #116]	; (800f1f8 <xTaskResumeAll+0x134>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d010      	beq.n	800f1b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f18e:	f000 f859 	bl	800f244 <xTaskIncrementTick>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f198:	4b16      	ldr	r3, [pc, #88]	; (800f1f4 <xTaskResumeAll+0x130>)
 800f19a:	2201      	movs	r2, #1
 800f19c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1f1      	bne.n	800f18e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f1aa:	4b13      	ldr	r3, [pc, #76]	; (800f1f8 <xTaskResumeAll+0x134>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1b0:	4b10      	ldr	r3, [pc, #64]	; (800f1f4 <xTaskResumeAll+0x130>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d009      	beq.n	800f1cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <xTaskResumeAll+0x138>)
 800f1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1cc:	f001 fafa 	bl	80107c4 <vPortExitCritical>

	return xAlreadyYielded;
 800f1d0:	68bb      	ldr	r3, [r7, #8]
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	20002380 	.word	0x20002380
 800f1e0:	20002358 	.word	0x20002358
 800f1e4:	20002318 	.word	0x20002318
 800f1e8:	20002360 	.word	0x20002360
 800f1ec:	20001e88 	.word	0x20001e88
 800f1f0:	20001e84 	.word	0x20001e84
 800f1f4:	2000236c 	.word	0x2000236c
 800f1f8:	20002368 	.word	0x20002368
 800f1fc:	e000ed04 	.word	0xe000ed04

0800f200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <xTaskGetTickCount+0x1c>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f20c:	687b      	ldr	r3, [r7, #4]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	370c      	adds	r7, #12
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	2000235c 	.word	0x2000235c

0800f220 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f226:	f001 fb7f 	bl	8010928 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f22a:	2300      	movs	r3, #0
 800f22c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f22e:	4b04      	ldr	r3, [pc, #16]	; (800f240 <xTaskGetTickCountFromISR+0x20>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f234:	683b      	ldr	r3, [r7, #0]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	2000235c 	.word	0x2000235c

0800f244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f24a:	2300      	movs	r3, #0
 800f24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f24e:	4b4f      	ldr	r3, [pc, #316]	; (800f38c <xTaskIncrementTick+0x148>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 808f 	bne.w	800f376 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f258:	4b4d      	ldr	r3, [pc, #308]	; (800f390 <xTaskIncrementTick+0x14c>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3301      	adds	r3, #1
 800f25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f260:	4a4b      	ldr	r2, [pc, #300]	; (800f390 <xTaskIncrementTick+0x14c>)
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d120      	bne.n	800f2ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f26c:	4b49      	ldr	r3, [pc, #292]	; (800f394 <xTaskIncrementTick+0x150>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00a      	beq.n	800f28c <xTaskIncrementTick+0x48>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	603b      	str	r3, [r7, #0]
}
 800f288:	bf00      	nop
 800f28a:	e7fe      	b.n	800f28a <xTaskIncrementTick+0x46>
 800f28c:	4b41      	ldr	r3, [pc, #260]	; (800f394 <xTaskIncrementTick+0x150>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	4b41      	ldr	r3, [pc, #260]	; (800f398 <xTaskIncrementTick+0x154>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a3f      	ldr	r2, [pc, #252]	; (800f394 <xTaskIncrementTick+0x150>)
 800f298:	6013      	str	r3, [r2, #0]
 800f29a:	4a3f      	ldr	r2, [pc, #252]	; (800f398 <xTaskIncrementTick+0x154>)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6013      	str	r3, [r2, #0]
 800f2a0:	4b3e      	ldr	r3, [pc, #248]	; (800f39c <xTaskIncrementTick+0x158>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	4a3d      	ldr	r2, [pc, #244]	; (800f39c <xTaskIncrementTick+0x158>)
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	f000 fadb 	bl	800f864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2ae:	4b3c      	ldr	r3, [pc, #240]	; (800f3a0 <xTaskIncrementTick+0x15c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	693a      	ldr	r2, [r7, #16]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d349      	bcc.n	800f34c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2b8:	4b36      	ldr	r3, [pc, #216]	; (800f394 <xTaskIncrementTick+0x150>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d104      	bne.n	800f2cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2c2:	4b37      	ldr	r3, [pc, #220]	; (800f3a0 <xTaskIncrementTick+0x15c>)
 800f2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c8:	601a      	str	r2, [r3, #0]
					break;
 800f2ca:	e03f      	b.n	800f34c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2cc:	4b31      	ldr	r3, [pc, #196]	; (800f394 <xTaskIncrementTick+0x150>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d203      	bcs.n	800f2ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2e4:	4a2e      	ldr	r2, [pc, #184]	; (800f3a0 <xTaskIncrementTick+0x15c>)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f2ea:	e02f      	b.n	800f34c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe fe89 	bl	800e008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d004      	beq.n	800f308 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	3318      	adds	r3, #24
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe fe80 	bl	800e008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30c:	4b25      	ldr	r3, [pc, #148]	; (800f3a4 <xTaskIncrementTick+0x160>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d903      	bls.n	800f31c <xTaskIncrementTick+0xd8>
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	4a22      	ldr	r2, [pc, #136]	; (800f3a4 <xTaskIncrementTick+0x160>)
 800f31a:	6013      	str	r3, [r2, #0]
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f320:	4613      	mov	r3, r2
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	4413      	add	r3, r2
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4a1f      	ldr	r2, [pc, #124]	; (800f3a8 <xTaskIncrementTick+0x164>)
 800f32a:	441a      	add	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	3304      	adds	r3, #4
 800f330:	4619      	mov	r1, r3
 800f332:	4610      	mov	r0, r2
 800f334:	f7fe fe0b 	bl	800df4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f33c:	4b1b      	ldr	r3, [pc, #108]	; (800f3ac <xTaskIncrementTick+0x168>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f342:	429a      	cmp	r2, r3
 800f344:	d3b8      	bcc.n	800f2b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f346:	2301      	movs	r3, #1
 800f348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f34a:	e7b5      	b.n	800f2b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f34c:	4b17      	ldr	r3, [pc, #92]	; (800f3ac <xTaskIncrementTick+0x168>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f352:	4915      	ldr	r1, [pc, #84]	; (800f3a8 <xTaskIncrementTick+0x164>)
 800f354:	4613      	mov	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	4413      	add	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b01      	cmp	r3, #1
 800f362:	d901      	bls.n	800f368 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f364:	2301      	movs	r3, #1
 800f366:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f368:	4b11      	ldr	r3, [pc, #68]	; (800f3b0 <xTaskIncrementTick+0x16c>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d007      	beq.n	800f380 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	e004      	b.n	800f380 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f376:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <xTaskIncrementTick+0x170>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	3301      	adds	r3, #1
 800f37c:	4a0d      	ldr	r2, [pc, #52]	; (800f3b4 <xTaskIncrementTick+0x170>)
 800f37e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f380:	697b      	ldr	r3, [r7, #20]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20002380 	.word	0x20002380
 800f390:	2000235c 	.word	0x2000235c
 800f394:	20002310 	.word	0x20002310
 800f398:	20002314 	.word	0x20002314
 800f39c:	20002370 	.word	0x20002370
 800f3a0:	20002378 	.word	0x20002378
 800f3a4:	20002360 	.word	0x20002360
 800f3a8:	20001e88 	.word	0x20001e88
 800f3ac:	20001e84 	.word	0x20001e84
 800f3b0:	2000236c 	.word	0x2000236c
 800f3b4:	20002368 	.word	0x20002368

0800f3b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3be:	4b2a      	ldr	r3, [pc, #168]	; (800f468 <vTaskSwitchContext+0xb0>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3c6:	4b29      	ldr	r3, [pc, #164]	; (800f46c <vTaskSwitchContext+0xb4>)
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3cc:	e046      	b.n	800f45c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f3ce:	4b27      	ldr	r3, [pc, #156]	; (800f46c <vTaskSwitchContext+0xb4>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3d4:	4b26      	ldr	r3, [pc, #152]	; (800f470 <vTaskSwitchContext+0xb8>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	60fb      	str	r3, [r7, #12]
 800f3da:	e010      	b.n	800f3fe <vTaskSwitchContext+0x46>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d10a      	bne.n	800f3f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800f3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e6:	f383 8811 	msr	BASEPRI, r3
 800f3ea:	f3bf 8f6f 	isb	sy
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	607b      	str	r3, [r7, #4]
}
 800f3f4:	bf00      	nop
 800f3f6:	e7fe      	b.n	800f3f6 <vTaskSwitchContext+0x3e>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	60fb      	str	r3, [r7, #12]
 800f3fe:	491d      	ldr	r1, [pc, #116]	; (800f474 <vTaskSwitchContext+0xbc>)
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	440b      	add	r3, r1
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0e4      	beq.n	800f3dc <vTaskSwitchContext+0x24>
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	4613      	mov	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4a15      	ldr	r2, [pc, #84]	; (800f474 <vTaskSwitchContext+0xbc>)
 800f41e:	4413      	add	r3, r2
 800f420:	60bb      	str	r3, [r7, #8]
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	605a      	str	r2, [r3, #4]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	685a      	ldr	r2, [r3, #4]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	3308      	adds	r3, #8
 800f434:	429a      	cmp	r2, r3
 800f436:	d104      	bne.n	800f442 <vTaskSwitchContext+0x8a>
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	605a      	str	r2, [r3, #4]
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	4a0b      	ldr	r2, [pc, #44]	; (800f478 <vTaskSwitchContext+0xc0>)
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	4a08      	ldr	r2, [pc, #32]	; (800f470 <vTaskSwitchContext+0xb8>)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f452:	4b09      	ldr	r3, [pc, #36]	; (800f478 <vTaskSwitchContext+0xc0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	3354      	adds	r3, #84	; 0x54
 800f458:	4a08      	ldr	r2, [pc, #32]	; (800f47c <vTaskSwitchContext+0xc4>)
 800f45a:	6013      	str	r3, [r2, #0]
}
 800f45c:	bf00      	nop
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	20002380 	.word	0x20002380
 800f46c:	2000236c 	.word	0x2000236c
 800f470:	20002360 	.word	0x20002360
 800f474:	20001e88 	.word	0x20001e88
 800f478:	20001e84 	.word	0x20001e84
 800f47c:	20000058 	.word	0x20000058

0800f480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10a      	bne.n	800f4a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	60fb      	str	r3, [r7, #12]
}
 800f4a2:	bf00      	nop
 800f4a4:	e7fe      	b.n	800f4a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4a6:	4b07      	ldr	r3, [pc, #28]	; (800f4c4 <vTaskPlaceOnEventList+0x44>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3318      	adds	r3, #24
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7fe fd71 	bl	800df96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	6838      	ldr	r0, [r7, #0]
 800f4b8:	f000 fc82 	bl	800fdc0 <prvAddCurrentTaskToDelayedList>
}
 800f4bc:	bf00      	nop
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20001e84 	.word	0x20001e84

0800f4c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10a      	bne.n	800f4f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	617b      	str	r3, [r7, #20]
}
 800f4ec:	bf00      	nop
 800f4ee:	e7fe      	b.n	800f4ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	; (800f51c <vTaskPlaceOnEventListRestricted+0x54>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3318      	adds	r3, #24
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7fe fd28 	bl	800df4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f504:	f04f 33ff 	mov.w	r3, #4294967295
 800f508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	68b8      	ldr	r0, [r7, #8]
 800f50e:	f000 fc57 	bl	800fdc0 <prvAddCurrentTaskToDelayedList>
	}
 800f512:	bf00      	nop
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	20001e84 	.word	0x20001e84

0800f520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10a      	bne.n	800f54c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	60fb      	str	r3, [r7, #12]
}
 800f548:	bf00      	nop
 800f54a:	e7fe      	b.n	800f54a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	3318      	adds	r3, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f7fe fd59 	bl	800e008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f556:	4b1e      	ldr	r3, [pc, #120]	; (800f5d0 <xTaskRemoveFromEventList+0xb0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d11d      	bne.n	800f59a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	3304      	adds	r3, #4
 800f562:	4618      	mov	r0, r3
 800f564:	f7fe fd50 	bl	800e008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56c:	4b19      	ldr	r3, [pc, #100]	; (800f5d4 <xTaskRemoveFromEventList+0xb4>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	d903      	bls.n	800f57c <xTaskRemoveFromEventList+0x5c>
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	4a16      	ldr	r2, [pc, #88]	; (800f5d4 <xTaskRemoveFromEventList+0xb4>)
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f580:	4613      	mov	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	4a13      	ldr	r2, [pc, #76]	; (800f5d8 <xTaskRemoveFromEventList+0xb8>)
 800f58a:	441a      	add	r2, r3
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	3304      	adds	r3, #4
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7fe fcdb 	bl	800df4e <vListInsertEnd>
 800f598:	e005      	b.n	800f5a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	3318      	adds	r3, #24
 800f59e:	4619      	mov	r1, r3
 800f5a0:	480e      	ldr	r0, [pc, #56]	; (800f5dc <xTaskRemoveFromEventList+0xbc>)
 800f5a2:	f7fe fcd4 	bl	800df4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	; (800f5e0 <xTaskRemoveFromEventList+0xc0>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d905      	bls.n	800f5c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f5b8:	4b0a      	ldr	r3, [pc, #40]	; (800f5e4 <xTaskRemoveFromEventList+0xc4>)
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	601a      	str	r2, [r3, #0]
 800f5be:	e001      	b.n	800f5c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f5c4:	697b      	ldr	r3, [r7, #20]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3718      	adds	r7, #24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20002380 	.word	0x20002380
 800f5d4:	20002360 	.word	0x20002360
 800f5d8:	20001e88 	.word	0x20001e88
 800f5dc:	20002318 	.word	0x20002318
 800f5e0:	20001e84 	.word	0x20001e84
 800f5e4:	2000236c 	.word	0x2000236c

0800f5e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5f0:	4b06      	ldr	r3, [pc, #24]	; (800f60c <vTaskInternalSetTimeOutState+0x24>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5f8:	4b05      	ldr	r3, [pc, #20]	; (800f610 <vTaskInternalSetTimeOutState+0x28>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	605a      	str	r2, [r3, #4]
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	20002370 	.word	0x20002370
 800f610:	2000235c 	.word	0x2000235c

0800f614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10a      	bne.n	800f63a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	613b      	str	r3, [r7, #16]
}
 800f636:	bf00      	nop
 800f638:	e7fe      	b.n	800f638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10a      	bne.n	800f656 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	60fb      	str	r3, [r7, #12]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f656:	f001 f885 	bl	8010764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f65a:	4b1d      	ldr	r3, [pc, #116]	; (800f6d0 <xTaskCheckForTimeOut+0xbc>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	69ba      	ldr	r2, [r7, #24]
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d102      	bne.n	800f67a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f674:	2300      	movs	r3, #0
 800f676:	61fb      	str	r3, [r7, #28]
 800f678:	e023      	b.n	800f6c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <xTaskCheckForTimeOut+0xc0>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d007      	beq.n	800f696 <xTaskCheckForTimeOut+0x82>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	69ba      	ldr	r2, [r7, #24]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d302      	bcc.n	800f696 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f690:	2301      	movs	r3, #1
 800f692:	61fb      	str	r3, [r7, #28]
 800f694:	e015      	b.n	800f6c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d20b      	bcs.n	800f6b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	1ad2      	subs	r2, r2, r3
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7ff ff9b 	bl	800f5e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	61fb      	str	r3, [r7, #28]
 800f6b6:	e004      	b.n	800f6c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f6c2:	f001 f87f 	bl	80107c4 <vPortExitCritical>

	return xReturn;
 800f6c6:	69fb      	ldr	r3, [r7, #28]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3720      	adds	r7, #32
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	2000235c 	.word	0x2000235c
 800f6d4:	20002370 	.word	0x20002370

0800f6d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6dc:	4b03      	ldr	r3, [pc, #12]	; (800f6ec <vTaskMissedYield+0x14>)
 800f6de:	2201      	movs	r2, #1
 800f6e0:	601a      	str	r2, [r3, #0]
}
 800f6e2:	bf00      	nop
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	2000236c 	.word	0x2000236c

0800f6f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6f8:	f000 f852 	bl	800f7a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6fc:	4b06      	ldr	r3, [pc, #24]	; (800f718 <prvIdleTask+0x28>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b01      	cmp	r3, #1
 800f702:	d9f9      	bls.n	800f6f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f704:	4b05      	ldr	r3, [pc, #20]	; (800f71c <prvIdleTask+0x2c>)
 800f706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f714:	e7f0      	b.n	800f6f8 <prvIdleTask+0x8>
 800f716:	bf00      	nop
 800f718:	20001e88 	.word	0x20001e88
 800f71c:	e000ed04 	.word	0xe000ed04

0800f720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f726:	2300      	movs	r3, #0
 800f728:	607b      	str	r3, [r7, #4]
 800f72a:	e00c      	b.n	800f746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	4613      	mov	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4413      	add	r3, r2
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	4a12      	ldr	r2, [pc, #72]	; (800f780 <prvInitialiseTaskLists+0x60>)
 800f738:	4413      	add	r3, r2
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fbda 	bl	800def4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3301      	adds	r3, #1
 800f744:	607b      	str	r3, [r7, #4]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b37      	cmp	r3, #55	; 0x37
 800f74a:	d9ef      	bls.n	800f72c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f74c:	480d      	ldr	r0, [pc, #52]	; (800f784 <prvInitialiseTaskLists+0x64>)
 800f74e:	f7fe fbd1 	bl	800def4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f752:	480d      	ldr	r0, [pc, #52]	; (800f788 <prvInitialiseTaskLists+0x68>)
 800f754:	f7fe fbce 	bl	800def4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f758:	480c      	ldr	r0, [pc, #48]	; (800f78c <prvInitialiseTaskLists+0x6c>)
 800f75a:	f7fe fbcb 	bl	800def4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f75e:	480c      	ldr	r0, [pc, #48]	; (800f790 <prvInitialiseTaskLists+0x70>)
 800f760:	f7fe fbc8 	bl	800def4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f764:	480b      	ldr	r0, [pc, #44]	; (800f794 <prvInitialiseTaskLists+0x74>)
 800f766:	f7fe fbc5 	bl	800def4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f76a:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <prvInitialiseTaskLists+0x78>)
 800f76c:	4a05      	ldr	r2, [pc, #20]	; (800f784 <prvInitialiseTaskLists+0x64>)
 800f76e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f770:	4b0a      	ldr	r3, [pc, #40]	; (800f79c <prvInitialiseTaskLists+0x7c>)
 800f772:	4a05      	ldr	r2, [pc, #20]	; (800f788 <prvInitialiseTaskLists+0x68>)
 800f774:	601a      	str	r2, [r3, #0]
}
 800f776:	bf00      	nop
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20001e88 	.word	0x20001e88
 800f784:	200022e8 	.word	0x200022e8
 800f788:	200022fc 	.word	0x200022fc
 800f78c:	20002318 	.word	0x20002318
 800f790:	2000232c 	.word	0x2000232c
 800f794:	20002344 	.word	0x20002344
 800f798:	20002310 	.word	0x20002310
 800f79c:	20002314 	.word	0x20002314

0800f7a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7a6:	e019      	b.n	800f7dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f7a8:	f000 ffdc 	bl	8010764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ac:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <prvCheckTasksWaitingTermination+0x50>)
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe fc25 	bl	800e008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f7be:	4b0d      	ldr	r3, [pc, #52]	; (800f7f4 <prvCheckTasksWaitingTermination+0x54>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	4a0b      	ldr	r2, [pc, #44]	; (800f7f4 <prvCheckTasksWaitingTermination+0x54>)
 800f7c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f7c8:	4b0b      	ldr	r3, [pc, #44]	; (800f7f8 <prvCheckTasksWaitingTermination+0x58>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <prvCheckTasksWaitingTermination+0x58>)
 800f7d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7d2:	f000 fff7 	bl	80107c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f810 	bl	800f7fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7dc:	4b06      	ldr	r3, [pc, #24]	; (800f7f8 <prvCheckTasksWaitingTermination+0x58>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1e1      	bne.n	800f7a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7e4:	bf00      	nop
 800f7e6:	bf00      	nop
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	2000232c 	.word	0x2000232c
 800f7f4:	20002358 	.word	0x20002358
 800f7f8:	20002340 	.word	0x20002340

0800f7fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3354      	adds	r3, #84	; 0x54
 800f808:	4618      	mov	r0, r3
 800f80a:	f002 fb3f 	bl	8011e8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f814:	2b00      	cmp	r3, #0
 800f816:	d108      	bne.n	800f82a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81c:	4618      	mov	r0, r3
 800f81e:	f001 f98f 	bl	8010b40 <vPortFree>
				vPortFree( pxTCB );
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f001 f98c 	bl	8010b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f828:	e018      	b.n	800f85c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f830:	2b01      	cmp	r3, #1
 800f832:	d103      	bne.n	800f83c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f001 f983 	bl	8010b40 <vPortFree>
	}
 800f83a:	e00f      	b.n	800f85c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f842:	2b02      	cmp	r3, #2
 800f844:	d00a      	beq.n	800f85c <prvDeleteTCB+0x60>
	__asm volatile
 800f846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84a:	f383 8811 	msr	BASEPRI, r3
 800f84e:	f3bf 8f6f 	isb	sy
 800f852:	f3bf 8f4f 	dsb	sy
 800f856:	60fb      	str	r3, [r7, #12]
}
 800f858:	bf00      	nop
 800f85a:	e7fe      	b.n	800f85a <prvDeleteTCB+0x5e>
	}
 800f85c:	bf00      	nop
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f86a:	4b0c      	ldr	r3, [pc, #48]	; (800f89c <prvResetNextTaskUnblockTime+0x38>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f874:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800f876:	f04f 32ff 	mov.w	r2, #4294967295
 800f87a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f87c:	e008      	b.n	800f890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f87e:	4b07      	ldr	r3, [pc, #28]	; (800f89c <prvResetNextTaskUnblockTime+0x38>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	4a04      	ldr	r2, [pc, #16]	; (800f8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800f88e:	6013      	str	r3, [r2, #0]
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	20002310 	.word	0x20002310
 800f8a0:	20002378 	.word	0x20002378

0800f8a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <xTaskGetSchedulerState+0x34>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d102      	bne.n	800f8b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	607b      	str	r3, [r7, #4]
 800f8b6:	e008      	b.n	800f8ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8b8:	4b08      	ldr	r3, [pc, #32]	; (800f8dc <xTaskGetSchedulerState+0x38>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d102      	bne.n	800f8c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	607b      	str	r3, [r7, #4]
 800f8c4:	e001      	b.n	800f8ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f8ca:	687b      	ldr	r3, [r7, #4]
	}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	370c      	adds	r7, #12
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	20002364 	.word	0x20002364
 800f8dc:	20002380 	.word	0x20002380

0800f8e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d056      	beq.n	800f9a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8f6:	4b2e      	ldr	r3, [pc, #184]	; (800f9b0 <xTaskPriorityDisinherit+0xd0>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d00a      	beq.n	800f916 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	60fb      	str	r3, [r7, #12]
}
 800f912:	bf00      	nop
 800f914:	e7fe      	b.n	800f914 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10a      	bne.n	800f934 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	60bb      	str	r3, [r7, #8]
}
 800f930:	bf00      	nop
 800f932:	e7fe      	b.n	800f932 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f938:	1e5a      	subs	r2, r3, #1
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f946:	429a      	cmp	r2, r3
 800f948:	d02c      	beq.n	800f9a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d128      	bne.n	800f9a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	3304      	adds	r3, #4
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fb56 	bl	800e008 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f974:	4b0f      	ldr	r3, [pc, #60]	; (800f9b4 <xTaskPriorityDisinherit+0xd4>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d903      	bls.n	800f984 <xTaskPriorityDisinherit+0xa4>
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f980:	4a0c      	ldr	r2, [pc, #48]	; (800f9b4 <xTaskPriorityDisinherit+0xd4>)
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4a09      	ldr	r2, [pc, #36]	; (800f9b8 <xTaskPriorityDisinherit+0xd8>)
 800f992:	441a      	add	r2, r3
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	3304      	adds	r3, #4
 800f998:	4619      	mov	r1, r3
 800f99a:	4610      	mov	r0, r2
 800f99c:	f7fe fad7 	bl	800df4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9a4:	697b      	ldr	r3, [r7, #20]
	}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20001e84 	.word	0x20001e84
 800f9b4:	20002360 	.word	0x20002360
 800f9b8:	20001e88 	.word	0x20001e88

0800f9bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b086      	sub	sp, #24
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f9ca:	f000 fecb 	bl	8010764 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f9ce:	4b29      	ldr	r3, [pc, #164]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d01c      	beq.n	800fa16 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f9dc:	4b25      	ldr	r3, [pc, #148]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	43d2      	mvns	r2, r2
 800f9e8:	400a      	ands	r2, r1
 800f9ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f9ee:	4b21      	ldr	r3, [pc, #132]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00b      	beq.n	800fa16 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9fe:	2101      	movs	r1, #1
 800fa00:	6838      	ldr	r0, [r7, #0]
 800fa02:	f000 f9dd 	bl	800fdc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fa06:	4b1c      	ldr	r3, [pc, #112]	; (800fa78 <xTaskNotifyWait+0xbc>)
 800fa08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa0c:	601a      	str	r2, [r3, #0]
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa16:	f000 fed5 	bl	80107c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fa1a:	f000 fea3 	bl	8010764 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d005      	beq.n	800fa30 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fa24:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fa30:	4b10      	ldr	r3, [pc, #64]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d002      	beq.n	800fa44 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	e00a      	b.n	800fa5a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fa44:	4b0b      	ldr	r3, [pc, #44]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	43d2      	mvns	r2, r2
 800fa50:	400a      	ands	r2, r1
 800fa52:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800fa56:	2301      	movs	r3, #1
 800fa58:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa5a:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <xTaskNotifyWait+0xb8>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800fa64:	f000 feae 	bl	80107c4 <vPortExitCritical>

		return xReturn;
 800fa68:	697b      	ldr	r3, [r7, #20]
	}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3718      	adds	r7, #24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20001e84 	.word	0x20001e84
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08a      	sub	sp, #40	; 0x28
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	603b      	str	r3, [r7, #0]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d10a      	bne.n	800faac <xTaskGenericNotify+0x30>
	__asm volatile
 800fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9a:	f383 8811 	msr	BASEPRI, r3
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	f3bf 8f4f 	dsb	sy
 800faa6:	61bb      	str	r3, [r7, #24]
}
 800faa8:	bf00      	nop
 800faaa:	e7fe      	b.n	800faaa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fab0:	f000 fe58 	bl	8010764 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d004      	beq.n	800fac4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800faba:	6a3b      	ldr	r3, [r7, #32]
 800fabc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800faca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	2202      	movs	r2, #2
 800fad0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	2b04      	cmp	r3, #4
 800fad8:	d82d      	bhi.n	800fb36 <xTaskGenericNotify+0xba>
 800fada:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <xTaskGenericNotify+0x64>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800fb59 	.word	0x0800fb59
 800fae4:	0800faf5 	.word	0x0800faf5
 800fae8:	0800fb07 	.word	0x0800fb07
 800faec:	0800fb17 	.word	0x0800fb17
 800faf0:	0800fb21 	.word	0x0800fb21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	431a      	orrs	r2, r3
 800fafe:	6a3b      	ldr	r3, [r7, #32]
 800fb00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb04:	e02b      	b.n	800fb5e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fb06:	6a3b      	ldr	r3, [r7, #32]
 800fb08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb14:	e023      	b.n	800fb5e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fb16:	6a3b      	ldr	r3, [r7, #32]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fb1e:	e01e      	b.n	800fb5e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fb20:	7ffb      	ldrb	r3, [r7, #31]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d004      	beq.n	800fb30 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fb26:	6a3b      	ldr	r3, [r7, #32]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fb2e:	e016      	b.n	800fb5e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fb34:	e013      	b.n	800fb5e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb40:	d00c      	beq.n	800fb5c <xTaskGenericNotify+0xe0>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb46:	f383 8811 	msr	BASEPRI, r3
 800fb4a:	f3bf 8f6f 	isb	sy
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	617b      	str	r3, [r7, #20]
}
 800fb54:	bf00      	nop
 800fb56:	e7fe      	b.n	800fb56 <xTaskGenericNotify+0xda>
					break;
 800fb58:	bf00      	nop
 800fb5a:	e000      	b.n	800fb5e <xTaskGenericNotify+0xe2>

					break;
 800fb5c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fb5e:	7ffb      	ldrb	r3, [r7, #31]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d13a      	bne.n	800fbda <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb64:	6a3b      	ldr	r3, [r7, #32]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fa4d 	bl	800e008 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fb6e:	6a3b      	ldr	r3, [r7, #32]
 800fb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb72:	4b1d      	ldr	r3, [pc, #116]	; (800fbe8 <xTaskGenericNotify+0x16c>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d903      	bls.n	800fb82 <xTaskGenericNotify+0x106>
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7e:	4a1a      	ldr	r2, [pc, #104]	; (800fbe8 <xTaskGenericNotify+0x16c>)
 800fb80:	6013      	str	r3, [r2, #0]
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb86:	4613      	mov	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	4a17      	ldr	r2, [pc, #92]	; (800fbec <xTaskGenericNotify+0x170>)
 800fb90:	441a      	add	r2, r3
 800fb92:	6a3b      	ldr	r3, [r7, #32]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4619      	mov	r1, r3
 800fb98:	4610      	mov	r0, r2
 800fb9a:	f7fe f9d8 	bl	800df4e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fb9e:	6a3b      	ldr	r3, [r7, #32]
 800fba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <xTaskGenericNotify+0x140>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	613b      	str	r3, [r7, #16]
}
 800fbb8:	bf00      	nop
 800fbba:	e7fe      	b.n	800fbba <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc0:	4b0b      	ldr	r3, [pc, #44]	; (800fbf0 <xTaskGenericNotify+0x174>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d907      	bls.n	800fbda <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fbca:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <xTaskGenericNotify+0x178>)
 800fbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fbda:	f000 fdf3 	bl	80107c4 <vPortExitCritical>

		return xReturn;
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3728      	adds	r7, #40	; 0x28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	20002360 	.word	0x20002360
 800fbec:	20001e88 	.word	0x20001e88
 800fbf0:	20001e84 	.word	0x20001e84
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08e      	sub	sp, #56	; 0x38
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	4613      	mov	r3, r2
 800fc06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10a      	bne.n	800fc28 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc24:	bf00      	nop
 800fc26:	e7fe      	b.n	800fc26 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc28:	f000 fe7e 	bl	8010928 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800fc30:	f3ef 8211 	mrs	r2, BASEPRI
 800fc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	623a      	str	r2, [r7, #32]
 800fc46:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800fc48:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	2202      	movs	r2, #2
 800fc6a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	2b04      	cmp	r3, #4
 800fc72:	d82f      	bhi.n	800fcd4 <xTaskGenericNotifyFromISR+0xdc>
 800fc74:	a201      	add	r2, pc, #4	; (adr r2, 800fc7c <xTaskGenericNotifyFromISR+0x84>)
 800fc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc7a:	bf00      	nop
 800fc7c:	0800fcf7 	.word	0x0800fcf7
 800fc80:	0800fc91 	.word	0x0800fc91
 800fc84:	0800fca3 	.word	0x0800fca3
 800fc88:	0800fcb3 	.word	0x0800fcb3
 800fc8c:	0800fcbd 	.word	0x0800fcbd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc92:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fca0:	e02c      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fca8:	1c5a      	adds	r2, r3, #1
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fcb0:	e024      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fcba:	e01f      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fcbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d004      	beq.n	800fcce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fccc:	e016      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fcd2:	e013      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcde:	d00c      	beq.n	800fcfa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	61bb      	str	r3, [r7, #24]
}
 800fcf2:	bf00      	nop
 800fcf4:	e7fe      	b.n	800fcf4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800fcf6:	bf00      	nop
 800fcf8:	e000      	b.n	800fcfc <xTaskGenericNotifyFromISR+0x104>
					break;
 800fcfa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fcfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d146      	bne.n	800fd92 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00a      	beq.n	800fd22 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800fd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	617b      	str	r3, [r7, #20]
}
 800fd1e:	bf00      	nop
 800fd20:	e7fe      	b.n	800fd20 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd22:	4b21      	ldr	r3, [pc, #132]	; (800fda8 <xTaskGenericNotifyFromISR+0x1b0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d11d      	bne.n	800fd66 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe f96a 	bl	800e008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd38:	4b1c      	ldr	r3, [pc, #112]	; (800fdac <xTaskGenericNotifyFromISR+0x1b4>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d903      	bls.n	800fd48 <xTaskGenericNotifyFromISR+0x150>
 800fd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd44:	4a19      	ldr	r2, [pc, #100]	; (800fdac <xTaskGenericNotifyFromISR+0x1b4>)
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4413      	add	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4a16      	ldr	r2, [pc, #88]	; (800fdb0 <xTaskGenericNotifyFromISR+0x1b8>)
 800fd56:	441a      	add	r2, r3
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4610      	mov	r0, r2
 800fd60:	f7fe f8f5 	bl	800df4e <vListInsertEnd>
 800fd64:	e005      	b.n	800fd72 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	3318      	adds	r3, #24
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4811      	ldr	r0, [pc, #68]	; (800fdb4 <xTaskGenericNotifyFromISR+0x1bc>)
 800fd6e:	f7fe f8ee 	bl	800df4e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd76:	4b10      	ldr	r3, [pc, #64]	; (800fdb8 <xTaskGenericNotifyFromISR+0x1c0>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d908      	bls.n	800fd92 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fd86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	; (800fdbc <xTaskGenericNotifyFromISR+0x1c4>)
 800fd8e:	2201      	movs	r2, #1
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	f383 8811 	msr	BASEPRI, r3
}
 800fd9c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3738      	adds	r7, #56	; 0x38
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20002380 	.word	0x20002380
 800fdac:	20002360 	.word	0x20002360
 800fdb0:	20001e88 	.word	0x20001e88
 800fdb4:	20002318 	.word	0x20002318
 800fdb8:	20001e84 	.word	0x20001e84
 800fdbc:	2000236c 	.word	0x2000236c

0800fdc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fdca:	4b21      	ldr	r3, [pc, #132]	; (800fe50 <prvAddCurrentTaskToDelayedList+0x90>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdd0:	4b20      	ldr	r3, [pc, #128]	; (800fe54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fe f916 	bl	800e008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde2:	d10a      	bne.n	800fdfa <prvAddCurrentTaskToDelayedList+0x3a>
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdea:	4b1a      	ldr	r3, [pc, #104]	; (800fe54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3304      	adds	r3, #4
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	4819      	ldr	r0, [pc, #100]	; (800fe58 <prvAddCurrentTaskToDelayedList+0x98>)
 800fdf4:	f7fe f8ab 	bl	800df4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fdf8:	e026      	b.n	800fe48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4413      	add	r3, r2
 800fe00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fe02:	4b14      	ldr	r3, [pc, #80]	; (800fe54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d209      	bcs.n	800fe26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe12:	4b12      	ldr	r3, [pc, #72]	; (800fe5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	4b0f      	ldr	r3, [pc, #60]	; (800fe54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	3304      	adds	r3, #4
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	4610      	mov	r0, r2
 800fe20:	f7fe f8b9 	bl	800df96 <vListInsert>
}
 800fe24:	e010      	b.n	800fe48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe26:	4b0e      	ldr	r3, [pc, #56]	; (800fe60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	4b0a      	ldr	r3, [pc, #40]	; (800fe54 <prvAddCurrentTaskToDelayedList+0x94>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f7fe f8af 	bl	800df96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fe38:	4b0a      	ldr	r3, [pc, #40]	; (800fe64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d202      	bcs.n	800fe48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fe42:	4a08      	ldr	r2, [pc, #32]	; (800fe64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	6013      	str	r3, [r2, #0]
}
 800fe48:	bf00      	nop
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	2000235c 	.word	0x2000235c
 800fe54:	20001e84 	.word	0x20001e84
 800fe58:	20002344 	.word	0x20002344
 800fe5c:	20002314 	.word	0x20002314
 800fe60:	20002310 	.word	0x20002310
 800fe64:	20002378 	.word	0x20002378

0800fe68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b08a      	sub	sp, #40	; 0x28
 800fe6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fe72:	f000 fb07 	bl	8010484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fe76:	4b1c      	ldr	r3, [pc, #112]	; (800fee8 <xTimerCreateTimerTask+0x80>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d021      	beq.n	800fec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe86:	1d3a      	adds	r2, r7, #4
 800fe88:	f107 0108 	add.w	r1, r7, #8
 800fe8c:	f107 030c 	add.w	r3, r7, #12
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fe f815 	bl	800dec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe96:	6879      	ldr	r1, [r7, #4]
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	9202      	str	r2, [sp, #8]
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	2302      	movs	r3, #2
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	2300      	movs	r3, #0
 800fea6:	460a      	mov	r2, r1
 800fea8:	4910      	ldr	r1, [pc, #64]	; (800feec <xTimerCreateTimerTask+0x84>)
 800feaa:	4811      	ldr	r0, [pc, #68]	; (800fef0 <xTimerCreateTimerTask+0x88>)
 800feac:	f7fe fea0 	bl	800ebf0 <xTaskCreateStatic>
 800feb0:	4603      	mov	r3, r0
 800feb2:	4a10      	ldr	r2, [pc, #64]	; (800fef4 <xTimerCreateTimerTask+0x8c>)
 800feb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800feb6:	4b0f      	ldr	r3, [pc, #60]	; (800fef4 <xTimerCreateTimerTask+0x8c>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800febe:	2301      	movs	r3, #1
 800fec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10a      	bne.n	800fede <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	613b      	str	r3, [r7, #16]
}
 800feda:	bf00      	nop
 800fedc:	e7fe      	b.n	800fedc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fede:	697b      	ldr	r3, [r7, #20]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	200023b4 	.word	0x200023b4
 800feec:	08015260 	.word	0x08015260
 800fef0:	0801002d 	.word	0x0801002d
 800fef4:	200023b8 	.word	0x200023b8

0800fef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b08a      	sub	sp, #40	; 0x28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
 800ff04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ff06:	2300      	movs	r3, #0
 800ff08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10a      	bne.n	800ff26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	623b      	str	r3, [r7, #32]
}
 800ff22:	bf00      	nop
 800ff24:	e7fe      	b.n	800ff24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff26:	4b1a      	ldr	r3, [pc, #104]	; (800ff90 <xTimerGenericCommand+0x98>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d02a      	beq.n	800ff84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	2b05      	cmp	r3, #5
 800ff3e:	dc18      	bgt.n	800ff72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ff40:	f7ff fcb0 	bl	800f8a4 <xTaskGetSchedulerState>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b02      	cmp	r3, #2
 800ff48:	d109      	bne.n	800ff5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ff4a:	4b11      	ldr	r3, [pc, #68]	; (800ff90 <xTimerGenericCommand+0x98>)
 800ff4c:	6818      	ldr	r0, [r3, #0]
 800ff4e:	f107 0110 	add.w	r1, r7, #16
 800ff52:	2300      	movs	r3, #0
 800ff54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff56:	f7fe f9bf 	bl	800e2d8 <xQueueGenericSend>
 800ff5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ff5c:	e012      	b.n	800ff84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ff5e:	4b0c      	ldr	r3, [pc, #48]	; (800ff90 <xTimerGenericCommand+0x98>)
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	f107 0110 	add.w	r1, r7, #16
 800ff66:	2300      	movs	r3, #0
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f7fe f9b5 	bl	800e2d8 <xQueueGenericSend>
 800ff6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ff70:	e008      	b.n	800ff84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff72:	4b07      	ldr	r3, [pc, #28]	; (800ff90 <xTimerGenericCommand+0x98>)
 800ff74:	6818      	ldr	r0, [r3, #0]
 800ff76:	f107 0110 	add.w	r1, r7, #16
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	683a      	ldr	r2, [r7, #0]
 800ff7e:	f7fe faa9 	bl	800e4d4 <xQueueGenericSendFromISR>
 800ff82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3728      	adds	r7, #40	; 0x28
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	200023b4 	.word	0x200023b4

0800ff94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff9e:	4b22      	ldr	r3, [pc, #136]	; (8010028 <prvProcessExpiredTimer+0x94>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe f82b 	bl	800e008 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffb8:	f003 0304 	and.w	r3, r3, #4
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d022      	beq.n	8010006 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	699a      	ldr	r2, [r3, #24]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	18d1      	adds	r1, r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	6978      	ldr	r0, [r7, #20]
 800ffce:	f000 f8d1 	bl	8010174 <prvInsertTimerInActiveList>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d01f      	beq.n	8010018 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffd8:	2300      	movs	r3, #0
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	2300      	movs	r3, #0
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	6978      	ldr	r0, [r7, #20]
 800ffe4:	f7ff ff88 	bl	800fef8 <xTimerGenericCommand>
 800ffe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d113      	bne.n	8010018 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	60fb      	str	r3, [r7, #12]
}
 8010002:	bf00      	nop
 8010004:	e7fe      	b.n	8010004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801000c:	f023 0301 	bic.w	r3, r3, #1
 8010010:	b2da      	uxtb	r2, r3
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	6978      	ldr	r0, [r7, #20]
 801001e:	4798      	blx	r3
}
 8010020:	bf00      	nop
 8010022:	3718      	adds	r7, #24
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	200023ac 	.word	0x200023ac

0801002c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010034:	f107 0308 	add.w	r3, r7, #8
 8010038:	4618      	mov	r0, r3
 801003a:	f000 f857 	bl	80100ec <prvGetNextExpireTime>
 801003e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	4619      	mov	r1, r3
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 f803 	bl	8010050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801004a:	f000 f8d5 	bl	80101f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801004e:	e7f1      	b.n	8010034 <prvTimerTask+0x8>

08010050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801005a:	f7ff f825 	bl	800f0a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801005e:	f107 0308 	add.w	r3, r7, #8
 8010062:	4618      	mov	r0, r3
 8010064:	f000 f866 	bl	8010134 <prvSampleTimeNow>
 8010068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d130      	bne.n	80100d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10a      	bne.n	801008c <prvProcessTimerOrBlockTask+0x3c>
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	429a      	cmp	r2, r3
 801007c:	d806      	bhi.n	801008c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801007e:	f7ff f821 	bl	800f0c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010082:	68f9      	ldr	r1, [r7, #12]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ff85 	bl	800ff94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801008a:	e024      	b.n	80100d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d008      	beq.n	80100a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010092:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <prvProcessTimerOrBlockTask+0x90>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d101      	bne.n	80100a0 <prvProcessTimerOrBlockTask+0x50>
 801009c:	2301      	movs	r3, #1
 801009e:	e000      	b.n	80100a2 <prvProcessTimerOrBlockTask+0x52>
 80100a0:	2300      	movs	r3, #0
 80100a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80100a4:	4b0f      	ldr	r3, [pc, #60]	; (80100e4 <prvProcessTimerOrBlockTask+0x94>)
 80100a6:	6818      	ldr	r0, [r3, #0]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	1ad3      	subs	r3, r2, r3
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	4619      	mov	r1, r3
 80100b2:	f7fe fd69 	bl	800eb88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80100b6:	f7ff f805 	bl	800f0c4 <xTaskResumeAll>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10a      	bne.n	80100d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80100c0:	4b09      	ldr	r3, [pc, #36]	; (80100e8 <prvProcessTimerOrBlockTask+0x98>)
 80100c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	f3bf 8f6f 	isb	sy
}
 80100d0:	e001      	b.n	80100d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80100d2:	f7fe fff7 	bl	800f0c4 <xTaskResumeAll>
}
 80100d6:	bf00      	nop
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	200023b0 	.word	0x200023b0
 80100e4:	200023b4 	.word	0x200023b4
 80100e8:	e000ed04 	.word	0xe000ed04

080100ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80100f4:	4b0e      	ldr	r3, [pc, #56]	; (8010130 <prvGetNextExpireTime+0x44>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <prvGetNextExpireTime+0x16>
 80100fe:	2201      	movs	r2, #1
 8010100:	e000      	b.n	8010104 <prvGetNextExpireTime+0x18>
 8010102:	2200      	movs	r2, #0
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d105      	bne.n	801011c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010110:	4b07      	ldr	r3, [pc, #28]	; (8010130 <prvGetNextExpireTime+0x44>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	60fb      	str	r3, [r7, #12]
 801011a:	e001      	b.n	8010120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801011c:	2300      	movs	r3, #0
 801011e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010120:	68fb      	ldr	r3, [r7, #12]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	200023ac 	.word	0x200023ac

08010134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801013c:	f7ff f860 	bl	800f200 <xTaskGetTickCount>
 8010140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <prvSampleTimeNow+0x3c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	429a      	cmp	r2, r3
 801014a:	d205      	bcs.n	8010158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801014c:	f000 f936 	bl	80103bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	e002      	b.n	801015e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801015e:	4a04      	ldr	r2, [pc, #16]	; (8010170 <prvSampleTimeNow+0x3c>)
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010164:	68fb      	ldr	r3, [r7, #12]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	200023bc 	.word	0x200023bc

08010174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010182:	2300      	movs	r3, #0
 8010184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d812      	bhi.n	80101c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	1ad2      	subs	r2, r2, r3
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	699b      	ldr	r3, [r3, #24]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d302      	bcc.n	80101ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101a8:	2301      	movs	r3, #1
 80101aa:	617b      	str	r3, [r7, #20]
 80101ac:	e01b      	b.n	80101e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101ae:	4b10      	ldr	r3, [pc, #64]	; (80101f0 <prvInsertTimerInActiveList+0x7c>)
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3304      	adds	r3, #4
 80101b6:	4619      	mov	r1, r3
 80101b8:	4610      	mov	r0, r2
 80101ba:	f7fd feec 	bl	800df96 <vListInsert>
 80101be:	e012      	b.n	80101e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d206      	bcs.n	80101d6 <prvInsertTimerInActiveList+0x62>
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d302      	bcc.n	80101d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101d0:	2301      	movs	r3, #1
 80101d2:	617b      	str	r3, [r7, #20]
 80101d4:	e007      	b.n	80101e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101d6:	4b07      	ldr	r3, [pc, #28]	; (80101f4 <prvInsertTimerInActiveList+0x80>)
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	3304      	adds	r3, #4
 80101de:	4619      	mov	r1, r3
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fd fed8 	bl	800df96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80101e6:	697b      	ldr	r3, [r7, #20]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3718      	adds	r7, #24
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	200023b0 	.word	0x200023b0
 80101f4:	200023ac 	.word	0x200023ac

080101f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08e      	sub	sp, #56	; 0x38
 80101fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101fe:	e0ca      	b.n	8010396 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	da18      	bge.n	8010238 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010206:	1d3b      	adds	r3, r7, #4
 8010208:	3304      	adds	r3, #4
 801020a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	2b00      	cmp	r3, #0
 8010210:	d10a      	bne.n	8010228 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010216:	f383 8811 	msr	BASEPRI, r3
 801021a:	f3bf 8f6f 	isb	sy
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	61fb      	str	r3, [r7, #28]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801022e:	6850      	ldr	r0, [r2, #4]
 8010230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010232:	6892      	ldr	r2, [r2, #8]
 8010234:	4611      	mov	r1, r2
 8010236:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	f2c0 80aa 	blt.w	8010394 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801024c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024e:	3304      	adds	r3, #4
 8010250:	4618      	mov	r0, r3
 8010252:	f7fd fed9 	bl	800e008 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010256:	463b      	mov	r3, r7
 8010258:	4618      	mov	r0, r3
 801025a:	f7ff ff6b 	bl	8010134 <prvSampleTimeNow>
 801025e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b09      	cmp	r3, #9
 8010264:	f200 8097 	bhi.w	8010396 <prvProcessReceivedCommands+0x19e>
 8010268:	a201      	add	r2, pc, #4	; (adr r2, 8010270 <prvProcessReceivedCommands+0x78>)
 801026a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801026e:	bf00      	nop
 8010270:	08010299 	.word	0x08010299
 8010274:	08010299 	.word	0x08010299
 8010278:	08010299 	.word	0x08010299
 801027c:	0801030d 	.word	0x0801030d
 8010280:	08010321 	.word	0x08010321
 8010284:	0801036b 	.word	0x0801036b
 8010288:	08010299 	.word	0x08010299
 801028c:	08010299 	.word	0x08010299
 8010290:	0801030d 	.word	0x0801030d
 8010294:	08010321 	.word	0x08010321
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801029e:	f043 0301 	orr.w	r3, r3, #1
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	18d1      	adds	r1, r2, r3
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b8:	f7ff ff5c 	bl	8010174 <prvInsertTimerInActiveList>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d069      	beq.n	8010396 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102d0:	f003 0304 	and.w	r3, r3, #4
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d05e      	beq.n	8010396 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	699b      	ldr	r3, [r3, #24]
 80102de:	441a      	add	r2, r3
 80102e0:	2300      	movs	r3, #0
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	2300      	movs	r3, #0
 80102e6:	2100      	movs	r1, #0
 80102e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102ea:	f7ff fe05 	bl	800fef8 <xTimerGenericCommand>
 80102ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d14f      	bne.n	8010396 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	61bb      	str	r3, [r7, #24]
}
 8010308:	bf00      	nop
 801030a:	e7fe      	b.n	801030a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010312:	f023 0301 	bic.w	r3, r3, #1
 8010316:	b2da      	uxtb	r2, r3
 8010318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801031e:	e03a      	b.n	8010396 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010326:	f043 0301 	orr.w	r3, r3, #1
 801032a:	b2da      	uxtb	r2, r3
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10a      	bne.n	8010356 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	617b      	str	r3, [r7, #20]
}
 8010352:	bf00      	nop
 8010354:	e7fe      	b.n	8010354 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010358:	699a      	ldr	r2, [r3, #24]
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	18d1      	adds	r1, r2, r3
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010364:	f7ff ff06 	bl	8010174 <prvInsertTimerInActiveList>
					break;
 8010368:	e015      	b.n	8010396 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010370:	f003 0302 	and.w	r3, r3, #2
 8010374:	2b00      	cmp	r3, #0
 8010376:	d103      	bne.n	8010380 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801037a:	f000 fbe1 	bl	8010b40 <vPortFree>
 801037e:	e00a      	b.n	8010396 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010386:	f023 0301 	bic.w	r3, r3, #1
 801038a:	b2da      	uxtb	r2, r3
 801038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010392:	e000      	b.n	8010396 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010396:	4b08      	ldr	r3, [pc, #32]	; (80103b8 <prvProcessReceivedCommands+0x1c0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	1d39      	adds	r1, r7, #4
 801039c:	2200      	movs	r2, #0
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe f934 	bl	800e60c <xQueueReceive>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f47f af2a 	bne.w	8010200 <prvProcessReceivedCommands+0x8>
	}
}
 80103ac:	bf00      	nop
 80103ae:	bf00      	nop
 80103b0:	3730      	adds	r7, #48	; 0x30
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	200023b4 	.word	0x200023b4

080103bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b088      	sub	sp, #32
 80103c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103c2:	e048      	b.n	8010456 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103c4:	4b2d      	ldr	r3, [pc, #180]	; (801047c <prvSwitchTimerLists+0xc0>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ce:	4b2b      	ldr	r3, [pc, #172]	; (801047c <prvSwitchTimerLists+0xc0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	3304      	adds	r3, #4
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd fe13 	bl	800e008 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6a1b      	ldr	r3, [r3, #32]
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103f0:	f003 0304 	and.w	r3, r3, #4
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d02e      	beq.n	8010456 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	699b      	ldr	r3, [r3, #24]
 80103fc:	693a      	ldr	r2, [r7, #16]
 80103fe:	4413      	add	r3, r2
 8010400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010402:	68ba      	ldr	r2, [r7, #8]
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	429a      	cmp	r2, r3
 8010408:	d90e      	bls.n	8010428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010416:	4b19      	ldr	r3, [pc, #100]	; (801047c <prvSwitchTimerLists+0xc0>)
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3304      	adds	r3, #4
 801041e:	4619      	mov	r1, r3
 8010420:	4610      	mov	r0, r2
 8010422:	f7fd fdb8 	bl	800df96 <vListInsert>
 8010426:	e016      	b.n	8010456 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010428:	2300      	movs	r3, #0
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	2300      	movs	r3, #0
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	2100      	movs	r1, #0
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7ff fd60 	bl	800fef8 <xTimerGenericCommand>
 8010438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10a      	bne.n	8010456 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	603b      	str	r3, [r7, #0]
}
 8010452:	bf00      	nop
 8010454:	e7fe      	b.n	8010454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010456:	4b09      	ldr	r3, [pc, #36]	; (801047c <prvSwitchTimerLists+0xc0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1b1      	bne.n	80103c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010460:	4b06      	ldr	r3, [pc, #24]	; (801047c <prvSwitchTimerLists+0xc0>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010466:	4b06      	ldr	r3, [pc, #24]	; (8010480 <prvSwitchTimerLists+0xc4>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a04      	ldr	r2, [pc, #16]	; (801047c <prvSwitchTimerLists+0xc0>)
 801046c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801046e:	4a04      	ldr	r2, [pc, #16]	; (8010480 <prvSwitchTimerLists+0xc4>)
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	6013      	str	r3, [r2, #0]
}
 8010474:	bf00      	nop
 8010476:	3718      	adds	r7, #24
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	200023ac 	.word	0x200023ac
 8010480:	200023b0 	.word	0x200023b0

08010484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801048a:	f000 f96b 	bl	8010764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801048e:	4b15      	ldr	r3, [pc, #84]	; (80104e4 <prvCheckForValidListAndQueue+0x60>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d120      	bne.n	80104d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010496:	4814      	ldr	r0, [pc, #80]	; (80104e8 <prvCheckForValidListAndQueue+0x64>)
 8010498:	f7fd fd2c 	bl	800def4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801049c:	4813      	ldr	r0, [pc, #76]	; (80104ec <prvCheckForValidListAndQueue+0x68>)
 801049e:	f7fd fd29 	bl	800def4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80104a2:	4b13      	ldr	r3, [pc, #76]	; (80104f0 <prvCheckForValidListAndQueue+0x6c>)
 80104a4:	4a10      	ldr	r2, [pc, #64]	; (80104e8 <prvCheckForValidListAndQueue+0x64>)
 80104a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104a8:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <prvCheckForValidListAndQueue+0x70>)
 80104aa:	4a10      	ldr	r2, [pc, #64]	; (80104ec <prvCheckForValidListAndQueue+0x68>)
 80104ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80104ae:	2300      	movs	r3, #0
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4b11      	ldr	r3, [pc, #68]	; (80104f8 <prvCheckForValidListAndQueue+0x74>)
 80104b4:	4a11      	ldr	r2, [pc, #68]	; (80104fc <prvCheckForValidListAndQueue+0x78>)
 80104b6:	2110      	movs	r1, #16
 80104b8:	200a      	movs	r0, #10
 80104ba:	f7fd fe37 	bl	800e12c <xQueueGenericCreateStatic>
 80104be:	4603      	mov	r3, r0
 80104c0:	4a08      	ldr	r2, [pc, #32]	; (80104e4 <prvCheckForValidListAndQueue+0x60>)
 80104c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80104c4:	4b07      	ldr	r3, [pc, #28]	; (80104e4 <prvCheckForValidListAndQueue+0x60>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d005      	beq.n	80104d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104cc:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <prvCheckForValidListAndQueue+0x60>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	490b      	ldr	r1, [pc, #44]	; (8010500 <prvCheckForValidListAndQueue+0x7c>)
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fe fb2e 	bl	800eb34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104d8:	f000 f974 	bl	80107c4 <vPortExitCritical>
}
 80104dc:	bf00      	nop
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	200023b4 	.word	0x200023b4
 80104e8:	20002384 	.word	0x20002384
 80104ec:	20002398 	.word	0x20002398
 80104f0:	200023ac 	.word	0x200023ac
 80104f4:	200023b0 	.word	0x200023b0
 80104f8:	20002460 	.word	0x20002460
 80104fc:	200023c0 	.word	0x200023c0
 8010500:	08015268 	.word	0x08015268

08010504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	3b04      	subs	r3, #4
 8010514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801051c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	3b04      	subs	r3, #4
 8010522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	f023 0201 	bic.w	r2, r3, #1
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	3b04      	subs	r3, #4
 8010532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010534:	4a0c      	ldr	r2, [pc, #48]	; (8010568 <pxPortInitialiseStack+0x64>)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	3b14      	subs	r3, #20
 801053e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	3b04      	subs	r3, #4
 801054a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f06f 0202 	mvn.w	r2, #2
 8010552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3b20      	subs	r3, #32
 8010558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801055a:	68fb      	ldr	r3, [r7, #12]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	0801056d 	.word	0x0801056d

0801056c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010576:	4b12      	ldr	r3, [pc, #72]	; (80105c0 <prvTaskExitError+0x54>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057e:	d00a      	beq.n	8010596 <prvTaskExitError+0x2a>
	__asm volatile
 8010580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010584:	f383 8811 	msr	BASEPRI, r3
 8010588:	f3bf 8f6f 	isb	sy
 801058c:	f3bf 8f4f 	dsb	sy
 8010590:	60fb      	str	r3, [r7, #12]
}
 8010592:	bf00      	nop
 8010594:	e7fe      	b.n	8010594 <prvTaskExitError+0x28>
	__asm volatile
 8010596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059a:	f383 8811 	msr	BASEPRI, r3
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	60bb      	str	r3, [r7, #8]
}
 80105a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105aa:	bf00      	nop
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d0fc      	beq.n	80105ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105b2:	bf00      	nop
 80105b4:	bf00      	nop
 80105b6:	3714      	adds	r7, #20
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	20000054 	.word	0x20000054
	...

080105d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80105d0:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <pxCurrentTCBConst2>)
 80105d2:	6819      	ldr	r1, [r3, #0]
 80105d4:	6808      	ldr	r0, [r1, #0]
 80105d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105da:	f380 8809 	msr	PSP, r0
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f04f 0000 	mov.w	r0, #0
 80105e6:	f380 8811 	msr	BASEPRI, r0
 80105ea:	4770      	bx	lr
 80105ec:	f3af 8000 	nop.w

080105f0 <pxCurrentTCBConst2>:
 80105f0:	20001e84 	.word	0x20001e84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop

080105f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105f8:	4808      	ldr	r0, [pc, #32]	; (801061c <prvPortStartFirstTask+0x24>)
 80105fa:	6800      	ldr	r0, [r0, #0]
 80105fc:	6800      	ldr	r0, [r0, #0]
 80105fe:	f380 8808 	msr	MSP, r0
 8010602:	f04f 0000 	mov.w	r0, #0
 8010606:	f380 8814 	msr	CONTROL, r0
 801060a:	b662      	cpsie	i
 801060c:	b661      	cpsie	f
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	df00      	svc	0
 8010618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801061a:	bf00      	nop
 801061c:	e000ed08 	.word	0xe000ed08

08010620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b086      	sub	sp, #24
 8010624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010626:	4b46      	ldr	r3, [pc, #280]	; (8010740 <xPortStartScheduler+0x120>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a46      	ldr	r2, [pc, #280]	; (8010744 <xPortStartScheduler+0x124>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d10a      	bne.n	8010646 <xPortStartScheduler+0x26>
	__asm volatile
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	613b      	str	r3, [r7, #16]
}
 8010642:	bf00      	nop
 8010644:	e7fe      	b.n	8010644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010646:	4b3e      	ldr	r3, [pc, #248]	; (8010740 <xPortStartScheduler+0x120>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4a3f      	ldr	r2, [pc, #252]	; (8010748 <xPortStartScheduler+0x128>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d10a      	bne.n	8010666 <xPortStartScheduler+0x46>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	60fb      	str	r3, [r7, #12]
}
 8010662:	bf00      	nop
 8010664:	e7fe      	b.n	8010664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010666:	4b39      	ldr	r3, [pc, #228]	; (801074c <xPortStartScheduler+0x12c>)
 8010668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	b2db      	uxtb	r3, r3
 8010670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	22ff      	movs	r2, #255	; 0xff
 8010676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	b2db      	uxtb	r3, r3
 801067e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010680:	78fb      	ldrb	r3, [r7, #3]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010688:	b2da      	uxtb	r2, r3
 801068a:	4b31      	ldr	r3, [pc, #196]	; (8010750 <xPortStartScheduler+0x130>)
 801068c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801068e:	4b31      	ldr	r3, [pc, #196]	; (8010754 <xPortStartScheduler+0x134>)
 8010690:	2207      	movs	r2, #7
 8010692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010694:	e009      	b.n	80106aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010696:	4b2f      	ldr	r3, [pc, #188]	; (8010754 <xPortStartScheduler+0x134>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3b01      	subs	r3, #1
 801069c:	4a2d      	ldr	r2, [pc, #180]	; (8010754 <xPortStartScheduler+0x134>)
 801069e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106a0:	78fb      	ldrb	r3, [r7, #3]
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	005b      	lsls	r3, r3, #1
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106aa:	78fb      	ldrb	r3, [r7, #3]
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b2:	2b80      	cmp	r3, #128	; 0x80
 80106b4:	d0ef      	beq.n	8010696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80106b6:	4b27      	ldr	r3, [pc, #156]	; (8010754 <xPortStartScheduler+0x134>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f1c3 0307 	rsb	r3, r3, #7
 80106be:	2b04      	cmp	r3, #4
 80106c0:	d00a      	beq.n	80106d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	60bb      	str	r3, [r7, #8]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80106d8:	4b1e      	ldr	r3, [pc, #120]	; (8010754 <xPortStartScheduler+0x134>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	021b      	lsls	r3, r3, #8
 80106de:	4a1d      	ldr	r2, [pc, #116]	; (8010754 <xPortStartScheduler+0x134>)
 80106e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80106e2:	4b1c      	ldr	r3, [pc, #112]	; (8010754 <xPortStartScheduler+0x134>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80106ea:	4a1a      	ldr	r2, [pc, #104]	; (8010754 <xPortStartScheduler+0x134>)
 80106ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80106f6:	4b18      	ldr	r3, [pc, #96]	; (8010758 <xPortStartScheduler+0x138>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a17      	ldr	r2, [pc, #92]	; (8010758 <xPortStartScheduler+0x138>)
 80106fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010702:	4b15      	ldr	r3, [pc, #84]	; (8010758 <xPortStartScheduler+0x138>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4a14      	ldr	r2, [pc, #80]	; (8010758 <xPortStartScheduler+0x138>)
 8010708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801070c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801070e:	f000 f8dd 	bl	80108cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010712:	4b12      	ldr	r3, [pc, #72]	; (801075c <xPortStartScheduler+0x13c>)
 8010714:	2200      	movs	r2, #0
 8010716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010718:	f000 f8fc 	bl	8010914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801071c:	4b10      	ldr	r3, [pc, #64]	; (8010760 <xPortStartScheduler+0x140>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a0f      	ldr	r2, [pc, #60]	; (8010760 <xPortStartScheduler+0x140>)
 8010722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010728:	f7ff ff66 	bl	80105f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801072c:	f7fe fe44 	bl	800f3b8 <vTaskSwitchContext>
	prvTaskExitError();
 8010730:	f7ff ff1c 	bl	801056c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3718      	adds	r7, #24
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	e000ed00 	.word	0xe000ed00
 8010744:	410fc271 	.word	0x410fc271
 8010748:	410fc270 	.word	0x410fc270
 801074c:	e000e400 	.word	0xe000e400
 8010750:	200024b0 	.word	0x200024b0
 8010754:	200024b4 	.word	0x200024b4
 8010758:	e000ed20 	.word	0xe000ed20
 801075c:	20000054 	.word	0x20000054
 8010760:	e000ef34 	.word	0xe000ef34

08010764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
	__asm volatile
 801076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	607b      	str	r3, [r7, #4]
}
 801077c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801077e:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <vPortEnterCritical+0x58>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	3301      	adds	r3, #1
 8010784:	4a0d      	ldr	r2, [pc, #52]	; (80107bc <vPortEnterCritical+0x58>)
 8010786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010788:	4b0c      	ldr	r3, [pc, #48]	; (80107bc <vPortEnterCritical+0x58>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b01      	cmp	r3, #1
 801078e:	d10f      	bne.n	80107b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010790:	4b0b      	ldr	r3, [pc, #44]	; (80107c0 <vPortEnterCritical+0x5c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00a      	beq.n	80107b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	603b      	str	r3, [r7, #0]
}
 80107ac:	bf00      	nop
 80107ae:	e7fe      	b.n	80107ae <vPortEnterCritical+0x4a>
	}
}
 80107b0:	bf00      	nop
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr
 80107bc:	20000054 	.word	0x20000054
 80107c0:	e000ed04 	.word	0xe000ed04

080107c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80107ca:	4b12      	ldr	r3, [pc, #72]	; (8010814 <vPortExitCritical+0x50>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d10a      	bne.n	80107e8 <vPortExitCritical+0x24>
	__asm volatile
 80107d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d6:	f383 8811 	msr	BASEPRI, r3
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	607b      	str	r3, [r7, #4]
}
 80107e4:	bf00      	nop
 80107e6:	e7fe      	b.n	80107e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80107e8:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <vPortExitCritical+0x50>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	4a09      	ldr	r2, [pc, #36]	; (8010814 <vPortExitCritical+0x50>)
 80107f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80107f2:	4b08      	ldr	r3, [pc, #32]	; (8010814 <vPortExitCritical+0x50>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d105      	bne.n	8010806 <vPortExitCritical+0x42>
 80107fa:	2300      	movs	r3, #0
 80107fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	f383 8811 	msr	BASEPRI, r3
}
 8010804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010806:	bf00      	nop
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	20000054 	.word	0x20000054
	...

08010820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010820:	f3ef 8009 	mrs	r0, PSP
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	4b15      	ldr	r3, [pc, #84]	; (8010880 <pxCurrentTCBConst>)
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	f01e 0f10 	tst.w	lr, #16
 8010830:	bf08      	it	eq
 8010832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801083a:	6010      	str	r0, [r2, #0]
 801083c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010844:	f380 8811 	msr	BASEPRI, r0
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f7fe fdb2 	bl	800f3b8 <vTaskSwitchContext>
 8010854:	f04f 0000 	mov.w	r0, #0
 8010858:	f380 8811 	msr	BASEPRI, r0
 801085c:	bc09      	pop	{r0, r3}
 801085e:	6819      	ldr	r1, [r3, #0]
 8010860:	6808      	ldr	r0, [r1, #0]
 8010862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010866:	f01e 0f10 	tst.w	lr, #16
 801086a:	bf08      	it	eq
 801086c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010870:	f380 8809 	msr	PSP, r0
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	f3af 8000 	nop.w

08010880 <pxCurrentTCBConst>:
 8010880:	20001e84 	.word	0x20001e84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010884:	bf00      	nop
 8010886:	bf00      	nop

08010888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	607b      	str	r3, [r7, #4]
}
 80108a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108a2:	f7fe fccf 	bl	800f244 <xTaskIncrementTick>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d003      	beq.n	80108b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80108ac:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <xPortSysTickHandler+0x40>)
 80108ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	2300      	movs	r3, #0
 80108b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	f383 8811 	msr	BASEPRI, r3
}
 80108be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80108c0:	bf00      	nop
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	e000ed04 	.word	0xe000ed04

080108cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80108cc:	b480      	push	{r7}
 80108ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80108d0:	4b0b      	ldr	r3, [pc, #44]	; (8010900 <vPortSetupTimerInterrupt+0x34>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80108d6:	4b0b      	ldr	r3, [pc, #44]	; (8010904 <vPortSetupTimerInterrupt+0x38>)
 80108d8:	2200      	movs	r2, #0
 80108da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108dc:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <vPortSetupTimerInterrupt+0x3c>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a0a      	ldr	r2, [pc, #40]	; (801090c <vPortSetupTimerInterrupt+0x40>)
 80108e2:	fba2 2303 	umull	r2, r3, r2, r3
 80108e6:	099b      	lsrs	r3, r3, #6
 80108e8:	4a09      	ldr	r2, [pc, #36]	; (8010910 <vPortSetupTimerInterrupt+0x44>)
 80108ea:	3b01      	subs	r3, #1
 80108ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80108ee:	4b04      	ldr	r3, [pc, #16]	; (8010900 <vPortSetupTimerInterrupt+0x34>)
 80108f0:	2207      	movs	r2, #7
 80108f2:	601a      	str	r2, [r3, #0]
}
 80108f4:	bf00      	nop
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	e000e010 	.word	0xe000e010
 8010904:	e000e018 	.word	0xe000e018
 8010908:	20000010 	.word	0x20000010
 801090c:	10624dd3 	.word	0x10624dd3
 8010910:	e000e014 	.word	0xe000e014

08010914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010924 <vPortEnableVFP+0x10>
 8010918:	6801      	ldr	r1, [r0, #0]
 801091a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801091e:	6001      	str	r1, [r0, #0]
 8010920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010922:	bf00      	nop
 8010924:	e000ed88 	.word	0xe000ed88

08010928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010928:	b480      	push	{r7}
 801092a:	b085      	sub	sp, #20
 801092c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801092e:	f3ef 8305 	mrs	r3, IPSR
 8010932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b0f      	cmp	r3, #15
 8010938:	d914      	bls.n	8010964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801093a:	4a17      	ldr	r2, [pc, #92]	; (8010998 <vPortValidateInterruptPriority+0x70>)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	4413      	add	r3, r2
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010944:	4b15      	ldr	r3, [pc, #84]	; (801099c <vPortValidateInterruptPriority+0x74>)
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	7afa      	ldrb	r2, [r7, #11]
 801094a:	429a      	cmp	r2, r3
 801094c:	d20a      	bcs.n	8010964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	f383 8811 	msr	BASEPRI, r3
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	f3bf 8f4f 	dsb	sy
 801095e:	607b      	str	r3, [r7, #4]
}
 8010960:	bf00      	nop
 8010962:	e7fe      	b.n	8010962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010964:	4b0e      	ldr	r3, [pc, #56]	; (80109a0 <vPortValidateInterruptPriority+0x78>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801096c:	4b0d      	ldr	r3, [pc, #52]	; (80109a4 <vPortValidateInterruptPriority+0x7c>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	429a      	cmp	r2, r3
 8010972:	d90a      	bls.n	801098a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010978:	f383 8811 	msr	BASEPRI, r3
 801097c:	f3bf 8f6f 	isb	sy
 8010980:	f3bf 8f4f 	dsb	sy
 8010984:	603b      	str	r3, [r7, #0]
}
 8010986:	bf00      	nop
 8010988:	e7fe      	b.n	8010988 <vPortValidateInterruptPriority+0x60>
	}
 801098a:	bf00      	nop
 801098c:	3714      	adds	r7, #20
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	e000e3f0 	.word	0xe000e3f0
 801099c:	200024b0 	.word	0x200024b0
 80109a0:	e000ed0c 	.word	0xe000ed0c
 80109a4:	200024b4 	.word	0x200024b4

080109a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b08a      	sub	sp, #40	; 0x28
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80109b4:	f7fe fb78 	bl	800f0a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80109b8:	4b5b      	ldr	r3, [pc, #364]	; (8010b28 <pvPortMalloc+0x180>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80109c0:	f000 f920 	bl	8010c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109c4:	4b59      	ldr	r3, [pc, #356]	; (8010b2c <pvPortMalloc+0x184>)
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4013      	ands	r3, r2
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f040 8093 	bne.w	8010af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01d      	beq.n	8010a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80109d8:	2208      	movs	r2, #8
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4413      	add	r3, r2
 80109de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f003 0307 	and.w	r3, r3, #7
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d014      	beq.n	8010a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f023 0307 	bic.w	r3, r3, #7
 80109f0:	3308      	adds	r3, #8
 80109f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f003 0307 	and.w	r3, r3, #7
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <pvPortMalloc+0x6c>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	617b      	str	r3, [r7, #20]
}
 8010a10:	bf00      	nop
 8010a12:	e7fe      	b.n	8010a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d06e      	beq.n	8010af8 <pvPortMalloc+0x150>
 8010a1a:	4b45      	ldr	r3, [pc, #276]	; (8010b30 <pvPortMalloc+0x188>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d869      	bhi.n	8010af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a24:	4b43      	ldr	r3, [pc, #268]	; (8010b34 <pvPortMalloc+0x18c>)
 8010a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a28:	4b42      	ldr	r3, [pc, #264]	; (8010b34 <pvPortMalloc+0x18c>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a2e:	e004      	b.n	8010a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d903      	bls.n	8010a4c <pvPortMalloc+0xa4>
 8010a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1f1      	bne.n	8010a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a4c:	4b36      	ldr	r3, [pc, #216]	; (8010b28 <pvPortMalloc+0x180>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d050      	beq.n	8010af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a56:	6a3b      	ldr	r3, [r7, #32]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2208      	movs	r2, #8
 8010a5c:	4413      	add	r3, r2
 8010a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	685a      	ldr	r2, [r3, #4]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	1ad2      	subs	r2, r2, r3
 8010a70:	2308      	movs	r3, #8
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d91f      	bls.n	8010ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a80:	69bb      	ldr	r3, [r7, #24]
 8010a82:	f003 0307 	and.w	r3, r3, #7
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00a      	beq.n	8010aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8010a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a8e:	f383 8811 	msr	BASEPRI, r3
 8010a92:	f3bf 8f6f 	isb	sy
 8010a96:	f3bf 8f4f 	dsb	sy
 8010a9a:	613b      	str	r3, [r7, #16]
}
 8010a9c:	bf00      	nop
 8010a9e:	e7fe      	b.n	8010a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	1ad2      	subs	r2, r2, r3
 8010aa8:	69bb      	ldr	r3, [r7, #24]
 8010aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ab2:	69b8      	ldr	r0, [r7, #24]
 8010ab4:	f000 f908 	bl	8010cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ab8:	4b1d      	ldr	r3, [pc, #116]	; (8010b30 <pvPortMalloc+0x188>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	4a1b      	ldr	r2, [pc, #108]	; (8010b30 <pvPortMalloc+0x188>)
 8010ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ac6:	4b1a      	ldr	r3, [pc, #104]	; (8010b30 <pvPortMalloc+0x188>)
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	4b1b      	ldr	r3, [pc, #108]	; (8010b38 <pvPortMalloc+0x190>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d203      	bcs.n	8010ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ad2:	4b17      	ldr	r3, [pc, #92]	; (8010b30 <pvPortMalloc+0x188>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a18      	ldr	r2, [pc, #96]	; (8010b38 <pvPortMalloc+0x190>)
 8010ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	4b13      	ldr	r3, [pc, #76]	; (8010b2c <pvPortMalloc+0x184>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	431a      	orrs	r2, r3
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	2200      	movs	r2, #0
 8010aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010aee:	4b13      	ldr	r3, [pc, #76]	; (8010b3c <pvPortMalloc+0x194>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	3301      	adds	r3, #1
 8010af4:	4a11      	ldr	r2, [pc, #68]	; (8010b3c <pvPortMalloc+0x194>)
 8010af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010af8:	f7fe fae4 	bl	800f0c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f003 0307 	and.w	r3, r3, #7
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00a      	beq.n	8010b1c <pvPortMalloc+0x174>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	60fb      	str	r3, [r7, #12]
}
 8010b18:	bf00      	nop
 8010b1a:	e7fe      	b.n	8010b1a <pvPortMalloc+0x172>
	return pvReturn;
 8010b1c:	69fb      	ldr	r3, [r7, #28]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3728      	adds	r7, #40	; 0x28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20003848 	.word	0x20003848
 8010b2c:	2000385c 	.word	0x2000385c
 8010b30:	2000384c 	.word	0x2000384c
 8010b34:	20003840 	.word	0x20003840
 8010b38:	20003850 	.word	0x20003850
 8010b3c:	20003854 	.word	0x20003854

08010b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d04d      	beq.n	8010bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b52:	2308      	movs	r3, #8
 8010b54:	425b      	negs	r3, r3
 8010b56:	697a      	ldr	r2, [r7, #20]
 8010b58:	4413      	add	r3, r2
 8010b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	4b24      	ldr	r3, [pc, #144]	; (8010bf8 <vPortFree+0xb8>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4013      	ands	r3, r2
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d10a      	bne.n	8010b84 <vPortFree+0x44>
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	60fb      	str	r3, [r7, #12]
}
 8010b80:	bf00      	nop
 8010b82:	e7fe      	b.n	8010b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00a      	beq.n	8010ba2 <vPortFree+0x62>
	__asm volatile
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	60bb      	str	r3, [r7, #8]
}
 8010b9e:	bf00      	nop
 8010ba0:	e7fe      	b.n	8010ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	4b14      	ldr	r3, [pc, #80]	; (8010bf8 <vPortFree+0xb8>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4013      	ands	r3, r2
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d01e      	beq.n	8010bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d11a      	bne.n	8010bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	685a      	ldr	r2, [r3, #4]
 8010bbc:	4b0e      	ldr	r3, [pc, #56]	; (8010bf8 <vPortFree+0xb8>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	43db      	mvns	r3, r3
 8010bc2:	401a      	ands	r2, r3
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010bc8:	f7fe fa6e 	bl	800f0a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	685a      	ldr	r2, [r3, #4]
 8010bd0:	4b0a      	ldr	r3, [pc, #40]	; (8010bfc <vPortFree+0xbc>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	4a09      	ldr	r2, [pc, #36]	; (8010bfc <vPortFree+0xbc>)
 8010bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010bda:	6938      	ldr	r0, [r7, #16]
 8010bdc:	f000 f874 	bl	8010cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010be0:	4b07      	ldr	r3, [pc, #28]	; (8010c00 <vPortFree+0xc0>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	3301      	adds	r3, #1
 8010be6:	4a06      	ldr	r2, [pc, #24]	; (8010c00 <vPortFree+0xc0>)
 8010be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010bea:	f7fe fa6b 	bl	800f0c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010bee:	bf00      	nop
 8010bf0:	3718      	adds	r7, #24
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	2000385c 	.word	0x2000385c
 8010bfc:	2000384c 	.word	0x2000384c
 8010c00:	20003858 	.word	0x20003858

08010c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8010c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c10:	4b27      	ldr	r3, [pc, #156]	; (8010cb0 <prvHeapInit+0xac>)
 8010c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f003 0307 	and.w	r3, r3, #7
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00c      	beq.n	8010c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	3307      	adds	r3, #7
 8010c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f023 0307 	bic.w	r3, r3, #7
 8010c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	4a1f      	ldr	r2, [pc, #124]	; (8010cb0 <prvHeapInit+0xac>)
 8010c34:	4413      	add	r3, r2
 8010c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c3c:	4a1d      	ldr	r2, [pc, #116]	; (8010cb4 <prvHeapInit+0xb0>)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c42:	4b1c      	ldr	r3, [pc, #112]	; (8010cb4 <prvHeapInit+0xb0>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68ba      	ldr	r2, [r7, #8]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c50:	2208      	movs	r2, #8
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	1a9b      	subs	r3, r3, r2
 8010c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f023 0307 	bic.w	r3, r3, #7
 8010c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4a15      	ldr	r2, [pc, #84]	; (8010cb8 <prvHeapInit+0xb4>)
 8010c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c66:	4b14      	ldr	r3, [pc, #80]	; (8010cb8 <prvHeapInit+0xb4>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c6e:	4b12      	ldr	r3, [pc, #72]	; (8010cb8 <prvHeapInit+0xb4>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2200      	movs	r2, #0
 8010c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	1ad2      	subs	r2, r2, r3
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c84:	4b0c      	ldr	r3, [pc, #48]	; (8010cb8 <prvHeapInit+0xb4>)
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	4a0a      	ldr	r2, [pc, #40]	; (8010cbc <prvHeapInit+0xb8>)
 8010c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	4a09      	ldr	r2, [pc, #36]	; (8010cc0 <prvHeapInit+0xbc>)
 8010c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c9c:	4b09      	ldr	r3, [pc, #36]	; (8010cc4 <prvHeapInit+0xc0>)
 8010c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ca2:	601a      	str	r2, [r3, #0]
}
 8010ca4:	bf00      	nop
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr
 8010cb0:	200024b8 	.word	0x200024b8
 8010cb4:	20003840 	.word	0x20003840
 8010cb8:	20003848 	.word	0x20003848
 8010cbc:	20003850 	.word	0x20003850
 8010cc0:	2000384c 	.word	0x2000384c
 8010cc4:	2000385c 	.word	0x2000385c

08010cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010cd0:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <prvInsertBlockIntoFreeList+0xac>)
 8010cd2:	60fb      	str	r3, [r7, #12]
 8010cd4:	e002      	b.n	8010cdc <prvInsertBlockIntoFreeList+0x14>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	60fb      	str	r3, [r7, #12]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d8f7      	bhi.n	8010cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d108      	bne.n	8010d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	441a      	add	r2, r3
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	441a      	add	r2, r3
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d118      	bne.n	8010d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	4b15      	ldr	r3, [pc, #84]	; (8010d78 <prvInsertBlockIntoFreeList+0xb0>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d00d      	beq.n	8010d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	685a      	ldr	r2, [r3, #4]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	441a      	add	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	e008      	b.n	8010d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d46:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <prvInsertBlockIntoFreeList+0xb0>)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	e003      	b.n	8010d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d002      	beq.n	8010d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d66:	bf00      	nop
 8010d68:	3714      	adds	r7, #20
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	20003840 	.word	0x20003840
 8010d78:	20003848 	.word	0x20003848

08010d7c <__assert_func>:
 8010d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d7e:	4614      	mov	r4, r2
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <__assert_func+0x2c>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4605      	mov	r5, r0
 8010d88:	68d8      	ldr	r0, [r3, #12]
 8010d8a:	b14c      	cbz	r4, 8010da0 <__assert_func+0x24>
 8010d8c:	4b07      	ldr	r3, [pc, #28]	; (8010dac <__assert_func+0x30>)
 8010d8e:	9100      	str	r1, [sp, #0]
 8010d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d94:	4906      	ldr	r1, [pc, #24]	; (8010db0 <__assert_func+0x34>)
 8010d96:	462b      	mov	r3, r5
 8010d98:	f000 f8ea 	bl	8010f70 <fiprintf>
 8010d9c:	f001 fa9c 	bl	80122d8 <abort>
 8010da0:	4b04      	ldr	r3, [pc, #16]	; (8010db4 <__assert_func+0x38>)
 8010da2:	461c      	mov	r4, r3
 8010da4:	e7f3      	b.n	8010d8e <__assert_func+0x12>
 8010da6:	bf00      	nop
 8010da8:	20000058 	.word	0x20000058
 8010dac:	080155fb 	.word	0x080155fb
 8010db0:	08015608 	.word	0x08015608
 8010db4:	08015636 	.word	0x08015636

08010db8 <__errno>:
 8010db8:	4b01      	ldr	r3, [pc, #4]	; (8010dc0 <__errno+0x8>)
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	20000058 	.word	0x20000058

08010dc4 <std>:
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	b510      	push	{r4, lr}
 8010dc8:	4604      	mov	r4, r0
 8010dca:	e9c0 3300 	strd	r3, r3, [r0]
 8010dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dd2:	6083      	str	r3, [r0, #8]
 8010dd4:	8181      	strh	r1, [r0, #12]
 8010dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8010dd8:	81c2      	strh	r2, [r0, #14]
 8010dda:	6183      	str	r3, [r0, #24]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	2208      	movs	r2, #8
 8010de0:	305c      	adds	r0, #92	; 0x5c
 8010de2:	f000 f956 	bl	8011092 <memset>
 8010de6:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <std+0x38>)
 8010de8:	6263      	str	r3, [r4, #36]	; 0x24
 8010dea:	4b05      	ldr	r3, [pc, #20]	; (8010e00 <std+0x3c>)
 8010dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dee:	4b05      	ldr	r3, [pc, #20]	; (8010e04 <std+0x40>)
 8010df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010df2:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <std+0x44>)
 8010df4:	6224      	str	r4, [r4, #32]
 8010df6:	6323      	str	r3, [r4, #48]	; 0x30
 8010df8:	bd10      	pop	{r4, pc}
 8010dfa:	bf00      	nop
 8010dfc:	08011fa5 	.word	0x08011fa5
 8010e00:	08011fc7 	.word	0x08011fc7
 8010e04:	08011fff 	.word	0x08011fff
 8010e08:	08012023 	.word	0x08012023

08010e0c <_cleanup_r>:
 8010e0c:	4901      	ldr	r1, [pc, #4]	; (8010e14 <_cleanup_r+0x8>)
 8010e0e:	f000 b8c1 	b.w	8010f94 <_fwalk_reent>
 8010e12:	bf00      	nop
 8010e14:	08013109 	.word	0x08013109

08010e18 <__sfmoreglue>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	2268      	movs	r2, #104	; 0x68
 8010e1c:	1e4d      	subs	r5, r1, #1
 8010e1e:	4355      	muls	r5, r2
 8010e20:	460e      	mov	r6, r1
 8010e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e26:	f000 f95d 	bl	80110e4 <_malloc_r>
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	b140      	cbz	r0, 8010e40 <__sfmoreglue+0x28>
 8010e2e:	2100      	movs	r1, #0
 8010e30:	e9c0 1600 	strd	r1, r6, [r0]
 8010e34:	300c      	adds	r0, #12
 8010e36:	60a0      	str	r0, [r4, #8]
 8010e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e3c:	f000 f929 	bl	8011092 <memset>
 8010e40:	4620      	mov	r0, r4
 8010e42:	bd70      	pop	{r4, r5, r6, pc}

08010e44 <__sfp_lock_acquire>:
 8010e44:	4801      	ldr	r0, [pc, #4]	; (8010e4c <__sfp_lock_acquire+0x8>)
 8010e46:	f000 b8ea 	b.w	801101e <__retarget_lock_acquire_recursive>
 8010e4a:	bf00      	nop
 8010e4c:	20003861 	.word	0x20003861

08010e50 <__sfp_lock_release>:
 8010e50:	4801      	ldr	r0, [pc, #4]	; (8010e58 <__sfp_lock_release+0x8>)
 8010e52:	f000 b8e5 	b.w	8011020 <__retarget_lock_release_recursive>
 8010e56:	bf00      	nop
 8010e58:	20003861 	.word	0x20003861

08010e5c <__sinit_lock_acquire>:
 8010e5c:	4801      	ldr	r0, [pc, #4]	; (8010e64 <__sinit_lock_acquire+0x8>)
 8010e5e:	f000 b8de 	b.w	801101e <__retarget_lock_acquire_recursive>
 8010e62:	bf00      	nop
 8010e64:	20003862 	.word	0x20003862

08010e68 <__sinit_lock_release>:
 8010e68:	4801      	ldr	r0, [pc, #4]	; (8010e70 <__sinit_lock_release+0x8>)
 8010e6a:	f000 b8d9 	b.w	8011020 <__retarget_lock_release_recursive>
 8010e6e:	bf00      	nop
 8010e70:	20003862 	.word	0x20003862

08010e74 <__sinit>:
 8010e74:	b510      	push	{r4, lr}
 8010e76:	4604      	mov	r4, r0
 8010e78:	f7ff fff0 	bl	8010e5c <__sinit_lock_acquire>
 8010e7c:	69a3      	ldr	r3, [r4, #24]
 8010e7e:	b11b      	cbz	r3, 8010e88 <__sinit+0x14>
 8010e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e84:	f7ff bff0 	b.w	8010e68 <__sinit_lock_release>
 8010e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8010e8e:	4b13      	ldr	r3, [pc, #76]	; (8010edc <__sinit+0x68>)
 8010e90:	4a13      	ldr	r2, [pc, #76]	; (8010ee0 <__sinit+0x6c>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	bf04      	itt	eq
 8010e9a:	2301      	moveq	r3, #1
 8010e9c:	61a3      	streq	r3, [r4, #24]
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f000 f820 	bl	8010ee4 <__sfp>
 8010ea4:	6060      	str	r0, [r4, #4]
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f000 f81c 	bl	8010ee4 <__sfp>
 8010eac:	60a0      	str	r0, [r4, #8]
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 f818 	bl	8010ee4 <__sfp>
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	60e0      	str	r0, [r4, #12]
 8010eb8:	2104      	movs	r1, #4
 8010eba:	6860      	ldr	r0, [r4, #4]
 8010ebc:	f7ff ff82 	bl	8010dc4 <std>
 8010ec0:	68a0      	ldr	r0, [r4, #8]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	2109      	movs	r1, #9
 8010ec6:	f7ff ff7d 	bl	8010dc4 <std>
 8010eca:	68e0      	ldr	r0, [r4, #12]
 8010ecc:	2202      	movs	r2, #2
 8010ece:	2112      	movs	r1, #18
 8010ed0:	f7ff ff78 	bl	8010dc4 <std>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	61a3      	str	r3, [r4, #24]
 8010ed8:	e7d2      	b.n	8010e80 <__sinit+0xc>
 8010eda:	bf00      	nop
 8010edc:	08015698 	.word	0x08015698
 8010ee0:	08010e0d 	.word	0x08010e0d

08010ee4 <__sfp>:
 8010ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee6:	4607      	mov	r7, r0
 8010ee8:	f7ff ffac 	bl	8010e44 <__sfp_lock_acquire>
 8010eec:	4b1e      	ldr	r3, [pc, #120]	; (8010f68 <__sfp+0x84>)
 8010eee:	681e      	ldr	r6, [r3, #0]
 8010ef0:	69b3      	ldr	r3, [r6, #24]
 8010ef2:	b913      	cbnz	r3, 8010efa <__sfp+0x16>
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	f7ff ffbd 	bl	8010e74 <__sinit>
 8010efa:	3648      	adds	r6, #72	; 0x48
 8010efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f00:	3b01      	subs	r3, #1
 8010f02:	d503      	bpl.n	8010f0c <__sfp+0x28>
 8010f04:	6833      	ldr	r3, [r6, #0]
 8010f06:	b30b      	cbz	r3, 8010f4c <__sfp+0x68>
 8010f08:	6836      	ldr	r6, [r6, #0]
 8010f0a:	e7f7      	b.n	8010efc <__sfp+0x18>
 8010f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f10:	b9d5      	cbnz	r5, 8010f48 <__sfp+0x64>
 8010f12:	4b16      	ldr	r3, [pc, #88]	; (8010f6c <__sfp+0x88>)
 8010f14:	60e3      	str	r3, [r4, #12]
 8010f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8010f1c:	f000 f87e 	bl	801101c <__retarget_lock_init_recursive>
 8010f20:	f7ff ff96 	bl	8010e50 <__sfp_lock_release>
 8010f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f2c:	6025      	str	r5, [r4, #0]
 8010f2e:	61a5      	str	r5, [r4, #24]
 8010f30:	2208      	movs	r2, #8
 8010f32:	4629      	mov	r1, r5
 8010f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f38:	f000 f8ab 	bl	8011092 <memset>
 8010f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f44:	4620      	mov	r0, r4
 8010f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f48:	3468      	adds	r4, #104	; 0x68
 8010f4a:	e7d9      	b.n	8010f00 <__sfp+0x1c>
 8010f4c:	2104      	movs	r1, #4
 8010f4e:	4638      	mov	r0, r7
 8010f50:	f7ff ff62 	bl	8010e18 <__sfmoreglue>
 8010f54:	4604      	mov	r4, r0
 8010f56:	6030      	str	r0, [r6, #0]
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d1d5      	bne.n	8010f08 <__sfp+0x24>
 8010f5c:	f7ff ff78 	bl	8010e50 <__sfp_lock_release>
 8010f60:	230c      	movs	r3, #12
 8010f62:	603b      	str	r3, [r7, #0]
 8010f64:	e7ee      	b.n	8010f44 <__sfp+0x60>
 8010f66:	bf00      	nop
 8010f68:	08015698 	.word	0x08015698
 8010f6c:	ffff0001 	.word	0xffff0001

08010f70 <fiprintf>:
 8010f70:	b40e      	push	{r1, r2, r3}
 8010f72:	b503      	push	{r0, r1, lr}
 8010f74:	4601      	mov	r1, r0
 8010f76:	ab03      	add	r3, sp, #12
 8010f78:	4805      	ldr	r0, [pc, #20]	; (8010f90 <fiprintf+0x20>)
 8010f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7e:	6800      	ldr	r0, [r0, #0]
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	f000 f94d 	bl	8011220 <_vfiprintf_r>
 8010f86:	b002      	add	sp, #8
 8010f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f8c:	b003      	add	sp, #12
 8010f8e:	4770      	bx	lr
 8010f90:	20000058 	.word	0x20000058

08010f94 <_fwalk_reent>:
 8010f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f98:	4606      	mov	r6, r0
 8010f9a:	4688      	mov	r8, r1
 8010f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fa0:	2700      	movs	r7, #0
 8010fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8010faa:	d505      	bpl.n	8010fb8 <_fwalk_reent+0x24>
 8010fac:	6824      	ldr	r4, [r4, #0]
 8010fae:	2c00      	cmp	r4, #0
 8010fb0:	d1f7      	bne.n	8010fa2 <_fwalk_reent+0xe>
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb8:	89ab      	ldrh	r3, [r5, #12]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d907      	bls.n	8010fce <_fwalk_reent+0x3a>
 8010fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	d003      	beq.n	8010fce <_fwalk_reent+0x3a>
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	4630      	mov	r0, r6
 8010fca:	47c0      	blx	r8
 8010fcc:	4307      	orrs	r7, r0
 8010fce:	3568      	adds	r5, #104	; 0x68
 8010fd0:	e7e9      	b.n	8010fa6 <_fwalk_reent+0x12>
	...

08010fd4 <__libc_init_array>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	4d0d      	ldr	r5, [pc, #52]	; (801100c <__libc_init_array+0x38>)
 8010fd8:	4c0d      	ldr	r4, [pc, #52]	; (8011010 <__libc_init_array+0x3c>)
 8010fda:	1b64      	subs	r4, r4, r5
 8010fdc:	10a4      	asrs	r4, r4, #2
 8010fde:	2600      	movs	r6, #0
 8010fe0:	42a6      	cmp	r6, r4
 8010fe2:	d109      	bne.n	8010ff8 <__libc_init_array+0x24>
 8010fe4:	4d0b      	ldr	r5, [pc, #44]	; (8011014 <__libc_init_array+0x40>)
 8010fe6:	4c0c      	ldr	r4, [pc, #48]	; (8011018 <__libc_init_array+0x44>)
 8010fe8:	f002 ff6a 	bl	8013ec0 <_init>
 8010fec:	1b64      	subs	r4, r4, r5
 8010fee:	10a4      	asrs	r4, r4, #2
 8010ff0:	2600      	movs	r6, #0
 8010ff2:	42a6      	cmp	r6, r4
 8010ff4:	d105      	bne.n	8011002 <__libc_init_array+0x2e>
 8010ff6:	bd70      	pop	{r4, r5, r6, pc}
 8010ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ffc:	4798      	blx	r3
 8010ffe:	3601      	adds	r6, #1
 8011000:	e7ee      	b.n	8010fe0 <__libc_init_array+0xc>
 8011002:	f855 3b04 	ldr.w	r3, [r5], #4
 8011006:	4798      	blx	r3
 8011008:	3601      	adds	r6, #1
 801100a:	e7f2      	b.n	8010ff2 <__libc_init_array+0x1e>
 801100c:	08015a40 	.word	0x08015a40
 8011010:	08015a40 	.word	0x08015a40
 8011014:	08015a40 	.word	0x08015a40
 8011018:	08015a44 	.word	0x08015a44

0801101c <__retarget_lock_init_recursive>:
 801101c:	4770      	bx	lr

0801101e <__retarget_lock_acquire_recursive>:
 801101e:	4770      	bx	lr

08011020 <__retarget_lock_release_recursive>:
 8011020:	4770      	bx	lr

08011022 <memcmp>:
 8011022:	b510      	push	{r4, lr}
 8011024:	3901      	subs	r1, #1
 8011026:	4402      	add	r2, r0
 8011028:	4290      	cmp	r0, r2
 801102a:	d101      	bne.n	8011030 <memcmp+0xe>
 801102c:	2000      	movs	r0, #0
 801102e:	e005      	b.n	801103c <memcmp+0x1a>
 8011030:	7803      	ldrb	r3, [r0, #0]
 8011032:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011036:	42a3      	cmp	r3, r4
 8011038:	d001      	beq.n	801103e <memcmp+0x1c>
 801103a:	1b18      	subs	r0, r3, r4
 801103c:	bd10      	pop	{r4, pc}
 801103e:	3001      	adds	r0, #1
 8011040:	e7f2      	b.n	8011028 <memcmp+0x6>

08011042 <memcpy>:
 8011042:	440a      	add	r2, r1
 8011044:	4291      	cmp	r1, r2
 8011046:	f100 33ff 	add.w	r3, r0, #4294967295
 801104a:	d100      	bne.n	801104e <memcpy+0xc>
 801104c:	4770      	bx	lr
 801104e:	b510      	push	{r4, lr}
 8011050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011058:	4291      	cmp	r1, r2
 801105a:	d1f9      	bne.n	8011050 <memcpy+0xe>
 801105c:	bd10      	pop	{r4, pc}

0801105e <memmove>:
 801105e:	4288      	cmp	r0, r1
 8011060:	b510      	push	{r4, lr}
 8011062:	eb01 0402 	add.w	r4, r1, r2
 8011066:	d902      	bls.n	801106e <memmove+0x10>
 8011068:	4284      	cmp	r4, r0
 801106a:	4623      	mov	r3, r4
 801106c:	d807      	bhi.n	801107e <memmove+0x20>
 801106e:	1e43      	subs	r3, r0, #1
 8011070:	42a1      	cmp	r1, r4
 8011072:	d008      	beq.n	8011086 <memmove+0x28>
 8011074:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011078:	f803 2f01 	strb.w	r2, [r3, #1]!
 801107c:	e7f8      	b.n	8011070 <memmove+0x12>
 801107e:	4402      	add	r2, r0
 8011080:	4601      	mov	r1, r0
 8011082:	428a      	cmp	r2, r1
 8011084:	d100      	bne.n	8011088 <memmove+0x2a>
 8011086:	bd10      	pop	{r4, pc}
 8011088:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801108c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011090:	e7f7      	b.n	8011082 <memmove+0x24>

08011092 <memset>:
 8011092:	4402      	add	r2, r0
 8011094:	4603      	mov	r3, r0
 8011096:	4293      	cmp	r3, r2
 8011098:	d100      	bne.n	801109c <memset+0xa>
 801109a:	4770      	bx	lr
 801109c:	f803 1b01 	strb.w	r1, [r3], #1
 80110a0:	e7f9      	b.n	8011096 <memset+0x4>
	...

080110a4 <sbrk_aligned>:
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	4e0e      	ldr	r6, [pc, #56]	; (80110e0 <sbrk_aligned+0x3c>)
 80110a8:	460c      	mov	r4, r1
 80110aa:	6831      	ldr	r1, [r6, #0]
 80110ac:	4605      	mov	r5, r0
 80110ae:	b911      	cbnz	r1, 80110b6 <sbrk_aligned+0x12>
 80110b0:	f000 ff48 	bl	8011f44 <_sbrk_r>
 80110b4:	6030      	str	r0, [r6, #0]
 80110b6:	4621      	mov	r1, r4
 80110b8:	4628      	mov	r0, r5
 80110ba:	f000 ff43 	bl	8011f44 <_sbrk_r>
 80110be:	1c43      	adds	r3, r0, #1
 80110c0:	d00a      	beq.n	80110d8 <sbrk_aligned+0x34>
 80110c2:	1cc4      	adds	r4, r0, #3
 80110c4:	f024 0403 	bic.w	r4, r4, #3
 80110c8:	42a0      	cmp	r0, r4
 80110ca:	d007      	beq.n	80110dc <sbrk_aligned+0x38>
 80110cc:	1a21      	subs	r1, r4, r0
 80110ce:	4628      	mov	r0, r5
 80110d0:	f000 ff38 	bl	8011f44 <_sbrk_r>
 80110d4:	3001      	adds	r0, #1
 80110d6:	d101      	bne.n	80110dc <sbrk_aligned+0x38>
 80110d8:	f04f 34ff 	mov.w	r4, #4294967295
 80110dc:	4620      	mov	r0, r4
 80110de:	bd70      	pop	{r4, r5, r6, pc}
 80110e0:	20003868 	.word	0x20003868

080110e4 <_malloc_r>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	1ccd      	adds	r5, r1, #3
 80110ea:	f025 0503 	bic.w	r5, r5, #3
 80110ee:	3508      	adds	r5, #8
 80110f0:	2d0c      	cmp	r5, #12
 80110f2:	bf38      	it	cc
 80110f4:	250c      	movcc	r5, #12
 80110f6:	2d00      	cmp	r5, #0
 80110f8:	4607      	mov	r7, r0
 80110fa:	db01      	blt.n	8011100 <_malloc_r+0x1c>
 80110fc:	42a9      	cmp	r1, r5
 80110fe:	d905      	bls.n	801110c <_malloc_r+0x28>
 8011100:	230c      	movs	r3, #12
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	2600      	movs	r6, #0
 8011106:	4630      	mov	r0, r6
 8011108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801110c:	4e2e      	ldr	r6, [pc, #184]	; (80111c8 <_malloc_r+0xe4>)
 801110e:	f002 f8bb 	bl	8013288 <__malloc_lock>
 8011112:	6833      	ldr	r3, [r6, #0]
 8011114:	461c      	mov	r4, r3
 8011116:	bb34      	cbnz	r4, 8011166 <_malloc_r+0x82>
 8011118:	4629      	mov	r1, r5
 801111a:	4638      	mov	r0, r7
 801111c:	f7ff ffc2 	bl	80110a4 <sbrk_aligned>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	4604      	mov	r4, r0
 8011124:	d14d      	bne.n	80111c2 <_malloc_r+0xde>
 8011126:	6834      	ldr	r4, [r6, #0]
 8011128:	4626      	mov	r6, r4
 801112a:	2e00      	cmp	r6, #0
 801112c:	d140      	bne.n	80111b0 <_malloc_r+0xcc>
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	4631      	mov	r1, r6
 8011132:	4638      	mov	r0, r7
 8011134:	eb04 0803 	add.w	r8, r4, r3
 8011138:	f000 ff04 	bl	8011f44 <_sbrk_r>
 801113c:	4580      	cmp	r8, r0
 801113e:	d13a      	bne.n	80111b6 <_malloc_r+0xd2>
 8011140:	6821      	ldr	r1, [r4, #0]
 8011142:	3503      	adds	r5, #3
 8011144:	1a6d      	subs	r5, r5, r1
 8011146:	f025 0503 	bic.w	r5, r5, #3
 801114a:	3508      	adds	r5, #8
 801114c:	2d0c      	cmp	r5, #12
 801114e:	bf38      	it	cc
 8011150:	250c      	movcc	r5, #12
 8011152:	4629      	mov	r1, r5
 8011154:	4638      	mov	r0, r7
 8011156:	f7ff ffa5 	bl	80110a4 <sbrk_aligned>
 801115a:	3001      	adds	r0, #1
 801115c:	d02b      	beq.n	80111b6 <_malloc_r+0xd2>
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	442b      	add	r3, r5
 8011162:	6023      	str	r3, [r4, #0]
 8011164:	e00e      	b.n	8011184 <_malloc_r+0xa0>
 8011166:	6822      	ldr	r2, [r4, #0]
 8011168:	1b52      	subs	r2, r2, r5
 801116a:	d41e      	bmi.n	80111aa <_malloc_r+0xc6>
 801116c:	2a0b      	cmp	r2, #11
 801116e:	d916      	bls.n	801119e <_malloc_r+0xba>
 8011170:	1961      	adds	r1, r4, r5
 8011172:	42a3      	cmp	r3, r4
 8011174:	6025      	str	r5, [r4, #0]
 8011176:	bf18      	it	ne
 8011178:	6059      	strne	r1, [r3, #4]
 801117a:	6863      	ldr	r3, [r4, #4]
 801117c:	bf08      	it	eq
 801117e:	6031      	streq	r1, [r6, #0]
 8011180:	5162      	str	r2, [r4, r5]
 8011182:	604b      	str	r3, [r1, #4]
 8011184:	4638      	mov	r0, r7
 8011186:	f104 060b 	add.w	r6, r4, #11
 801118a:	f002 f883 	bl	8013294 <__malloc_unlock>
 801118e:	f026 0607 	bic.w	r6, r6, #7
 8011192:	1d23      	adds	r3, r4, #4
 8011194:	1af2      	subs	r2, r6, r3
 8011196:	d0b6      	beq.n	8011106 <_malloc_r+0x22>
 8011198:	1b9b      	subs	r3, r3, r6
 801119a:	50a3      	str	r3, [r4, r2]
 801119c:	e7b3      	b.n	8011106 <_malloc_r+0x22>
 801119e:	6862      	ldr	r2, [r4, #4]
 80111a0:	42a3      	cmp	r3, r4
 80111a2:	bf0c      	ite	eq
 80111a4:	6032      	streq	r2, [r6, #0]
 80111a6:	605a      	strne	r2, [r3, #4]
 80111a8:	e7ec      	b.n	8011184 <_malloc_r+0xa0>
 80111aa:	4623      	mov	r3, r4
 80111ac:	6864      	ldr	r4, [r4, #4]
 80111ae:	e7b2      	b.n	8011116 <_malloc_r+0x32>
 80111b0:	4634      	mov	r4, r6
 80111b2:	6876      	ldr	r6, [r6, #4]
 80111b4:	e7b9      	b.n	801112a <_malloc_r+0x46>
 80111b6:	230c      	movs	r3, #12
 80111b8:	603b      	str	r3, [r7, #0]
 80111ba:	4638      	mov	r0, r7
 80111bc:	f002 f86a 	bl	8013294 <__malloc_unlock>
 80111c0:	e7a1      	b.n	8011106 <_malloc_r+0x22>
 80111c2:	6025      	str	r5, [r4, #0]
 80111c4:	e7de      	b.n	8011184 <_malloc_r+0xa0>
 80111c6:	bf00      	nop
 80111c8:	20003864 	.word	0x20003864

080111cc <__sfputc_r>:
 80111cc:	6893      	ldr	r3, [r2, #8]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	b410      	push	{r4}
 80111d4:	6093      	str	r3, [r2, #8]
 80111d6:	da08      	bge.n	80111ea <__sfputc_r+0x1e>
 80111d8:	6994      	ldr	r4, [r2, #24]
 80111da:	42a3      	cmp	r3, r4
 80111dc:	db01      	blt.n	80111e2 <__sfputc_r+0x16>
 80111de:	290a      	cmp	r1, #10
 80111e0:	d103      	bne.n	80111ea <__sfputc_r+0x1e>
 80111e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e6:	f000 bfa5 	b.w	8012134 <__swbuf_r>
 80111ea:	6813      	ldr	r3, [r2, #0]
 80111ec:	1c58      	adds	r0, r3, #1
 80111ee:	6010      	str	r0, [r2, #0]
 80111f0:	7019      	strb	r1, [r3, #0]
 80111f2:	4608      	mov	r0, r1
 80111f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <__sfputs_r>:
 80111fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111fc:	4606      	mov	r6, r0
 80111fe:	460f      	mov	r7, r1
 8011200:	4614      	mov	r4, r2
 8011202:	18d5      	adds	r5, r2, r3
 8011204:	42ac      	cmp	r4, r5
 8011206:	d101      	bne.n	801120c <__sfputs_r+0x12>
 8011208:	2000      	movs	r0, #0
 801120a:	e007      	b.n	801121c <__sfputs_r+0x22>
 801120c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011210:	463a      	mov	r2, r7
 8011212:	4630      	mov	r0, r6
 8011214:	f7ff ffda 	bl	80111cc <__sfputc_r>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d1f3      	bne.n	8011204 <__sfputs_r+0xa>
 801121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011220 <_vfiprintf_r>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	460d      	mov	r5, r1
 8011226:	b09d      	sub	sp, #116	; 0x74
 8011228:	4614      	mov	r4, r2
 801122a:	4698      	mov	r8, r3
 801122c:	4606      	mov	r6, r0
 801122e:	b118      	cbz	r0, 8011238 <_vfiprintf_r+0x18>
 8011230:	6983      	ldr	r3, [r0, #24]
 8011232:	b90b      	cbnz	r3, 8011238 <_vfiprintf_r+0x18>
 8011234:	f7ff fe1e 	bl	8010e74 <__sinit>
 8011238:	4b89      	ldr	r3, [pc, #548]	; (8011460 <_vfiprintf_r+0x240>)
 801123a:	429d      	cmp	r5, r3
 801123c:	d11b      	bne.n	8011276 <_vfiprintf_r+0x56>
 801123e:	6875      	ldr	r5, [r6, #4]
 8011240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011242:	07d9      	lsls	r1, r3, #31
 8011244:	d405      	bmi.n	8011252 <_vfiprintf_r+0x32>
 8011246:	89ab      	ldrh	r3, [r5, #12]
 8011248:	059a      	lsls	r2, r3, #22
 801124a:	d402      	bmi.n	8011252 <_vfiprintf_r+0x32>
 801124c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801124e:	f7ff fee6 	bl	801101e <__retarget_lock_acquire_recursive>
 8011252:	89ab      	ldrh	r3, [r5, #12]
 8011254:	071b      	lsls	r3, r3, #28
 8011256:	d501      	bpl.n	801125c <_vfiprintf_r+0x3c>
 8011258:	692b      	ldr	r3, [r5, #16]
 801125a:	b9eb      	cbnz	r3, 8011298 <_vfiprintf_r+0x78>
 801125c:	4629      	mov	r1, r5
 801125e:	4630      	mov	r0, r6
 8011260:	f000 ffcc 	bl	80121fc <__swsetup_r>
 8011264:	b1c0      	cbz	r0, 8011298 <_vfiprintf_r+0x78>
 8011266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011268:	07dc      	lsls	r4, r3, #31
 801126a:	d50e      	bpl.n	801128a <_vfiprintf_r+0x6a>
 801126c:	f04f 30ff 	mov.w	r0, #4294967295
 8011270:	b01d      	add	sp, #116	; 0x74
 8011272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011276:	4b7b      	ldr	r3, [pc, #492]	; (8011464 <_vfiprintf_r+0x244>)
 8011278:	429d      	cmp	r5, r3
 801127a:	d101      	bne.n	8011280 <_vfiprintf_r+0x60>
 801127c:	68b5      	ldr	r5, [r6, #8]
 801127e:	e7df      	b.n	8011240 <_vfiprintf_r+0x20>
 8011280:	4b79      	ldr	r3, [pc, #484]	; (8011468 <_vfiprintf_r+0x248>)
 8011282:	429d      	cmp	r5, r3
 8011284:	bf08      	it	eq
 8011286:	68f5      	ldreq	r5, [r6, #12]
 8011288:	e7da      	b.n	8011240 <_vfiprintf_r+0x20>
 801128a:	89ab      	ldrh	r3, [r5, #12]
 801128c:	0598      	lsls	r0, r3, #22
 801128e:	d4ed      	bmi.n	801126c <_vfiprintf_r+0x4c>
 8011290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011292:	f7ff fec5 	bl	8011020 <__retarget_lock_release_recursive>
 8011296:	e7e9      	b.n	801126c <_vfiprintf_r+0x4c>
 8011298:	2300      	movs	r3, #0
 801129a:	9309      	str	r3, [sp, #36]	; 0x24
 801129c:	2320      	movs	r3, #32
 801129e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80112a6:	2330      	movs	r3, #48	; 0x30
 80112a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801146c <_vfiprintf_r+0x24c>
 80112ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112b0:	f04f 0901 	mov.w	r9, #1
 80112b4:	4623      	mov	r3, r4
 80112b6:	469a      	mov	sl, r3
 80112b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112bc:	b10a      	cbz	r2, 80112c2 <_vfiprintf_r+0xa2>
 80112be:	2a25      	cmp	r2, #37	; 0x25
 80112c0:	d1f9      	bne.n	80112b6 <_vfiprintf_r+0x96>
 80112c2:	ebba 0b04 	subs.w	fp, sl, r4
 80112c6:	d00b      	beq.n	80112e0 <_vfiprintf_r+0xc0>
 80112c8:	465b      	mov	r3, fp
 80112ca:	4622      	mov	r2, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	4630      	mov	r0, r6
 80112d0:	f7ff ff93 	bl	80111fa <__sfputs_r>
 80112d4:	3001      	adds	r0, #1
 80112d6:	f000 80aa 	beq.w	801142e <_vfiprintf_r+0x20e>
 80112da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112dc:	445a      	add	r2, fp
 80112de:	9209      	str	r2, [sp, #36]	; 0x24
 80112e0:	f89a 3000 	ldrb.w	r3, [sl]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f000 80a2 	beq.w	801142e <_vfiprintf_r+0x20e>
 80112ea:	2300      	movs	r3, #0
 80112ec:	f04f 32ff 	mov.w	r2, #4294967295
 80112f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112f4:	f10a 0a01 	add.w	sl, sl, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	9307      	str	r3, [sp, #28]
 80112fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011300:	931a      	str	r3, [sp, #104]	; 0x68
 8011302:	4654      	mov	r4, sl
 8011304:	2205      	movs	r2, #5
 8011306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801130a:	4858      	ldr	r0, [pc, #352]	; (801146c <_vfiprintf_r+0x24c>)
 801130c:	f7ee ff68 	bl	80001e0 <memchr>
 8011310:	9a04      	ldr	r2, [sp, #16]
 8011312:	b9d8      	cbnz	r0, 801134c <_vfiprintf_r+0x12c>
 8011314:	06d1      	lsls	r1, r2, #27
 8011316:	bf44      	itt	mi
 8011318:	2320      	movmi	r3, #32
 801131a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801131e:	0713      	lsls	r3, r2, #28
 8011320:	bf44      	itt	mi
 8011322:	232b      	movmi	r3, #43	; 0x2b
 8011324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011328:	f89a 3000 	ldrb.w	r3, [sl]
 801132c:	2b2a      	cmp	r3, #42	; 0x2a
 801132e:	d015      	beq.n	801135c <_vfiprintf_r+0x13c>
 8011330:	9a07      	ldr	r2, [sp, #28]
 8011332:	4654      	mov	r4, sl
 8011334:	2000      	movs	r0, #0
 8011336:	f04f 0c0a 	mov.w	ip, #10
 801133a:	4621      	mov	r1, r4
 801133c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011340:	3b30      	subs	r3, #48	; 0x30
 8011342:	2b09      	cmp	r3, #9
 8011344:	d94e      	bls.n	80113e4 <_vfiprintf_r+0x1c4>
 8011346:	b1b0      	cbz	r0, 8011376 <_vfiprintf_r+0x156>
 8011348:	9207      	str	r2, [sp, #28]
 801134a:	e014      	b.n	8011376 <_vfiprintf_r+0x156>
 801134c:	eba0 0308 	sub.w	r3, r0, r8
 8011350:	fa09 f303 	lsl.w	r3, r9, r3
 8011354:	4313      	orrs	r3, r2
 8011356:	9304      	str	r3, [sp, #16]
 8011358:	46a2      	mov	sl, r4
 801135a:	e7d2      	b.n	8011302 <_vfiprintf_r+0xe2>
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	1d19      	adds	r1, r3, #4
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	9103      	str	r1, [sp, #12]
 8011364:	2b00      	cmp	r3, #0
 8011366:	bfbb      	ittet	lt
 8011368:	425b      	neglt	r3, r3
 801136a:	f042 0202 	orrlt.w	r2, r2, #2
 801136e:	9307      	strge	r3, [sp, #28]
 8011370:	9307      	strlt	r3, [sp, #28]
 8011372:	bfb8      	it	lt
 8011374:	9204      	strlt	r2, [sp, #16]
 8011376:	7823      	ldrb	r3, [r4, #0]
 8011378:	2b2e      	cmp	r3, #46	; 0x2e
 801137a:	d10c      	bne.n	8011396 <_vfiprintf_r+0x176>
 801137c:	7863      	ldrb	r3, [r4, #1]
 801137e:	2b2a      	cmp	r3, #42	; 0x2a
 8011380:	d135      	bne.n	80113ee <_vfiprintf_r+0x1ce>
 8011382:	9b03      	ldr	r3, [sp, #12]
 8011384:	1d1a      	adds	r2, r3, #4
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	9203      	str	r2, [sp, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	bfb8      	it	lt
 801138e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011392:	3402      	adds	r4, #2
 8011394:	9305      	str	r3, [sp, #20]
 8011396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801147c <_vfiprintf_r+0x25c>
 801139a:	7821      	ldrb	r1, [r4, #0]
 801139c:	2203      	movs	r2, #3
 801139e:	4650      	mov	r0, sl
 80113a0:	f7ee ff1e 	bl	80001e0 <memchr>
 80113a4:	b140      	cbz	r0, 80113b8 <_vfiprintf_r+0x198>
 80113a6:	2340      	movs	r3, #64	; 0x40
 80113a8:	eba0 000a 	sub.w	r0, r0, sl
 80113ac:	fa03 f000 	lsl.w	r0, r3, r0
 80113b0:	9b04      	ldr	r3, [sp, #16]
 80113b2:	4303      	orrs	r3, r0
 80113b4:	3401      	adds	r4, #1
 80113b6:	9304      	str	r3, [sp, #16]
 80113b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113bc:	482c      	ldr	r0, [pc, #176]	; (8011470 <_vfiprintf_r+0x250>)
 80113be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113c2:	2206      	movs	r2, #6
 80113c4:	f7ee ff0c 	bl	80001e0 <memchr>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	d03f      	beq.n	801144c <_vfiprintf_r+0x22c>
 80113cc:	4b29      	ldr	r3, [pc, #164]	; (8011474 <_vfiprintf_r+0x254>)
 80113ce:	bb1b      	cbnz	r3, 8011418 <_vfiprintf_r+0x1f8>
 80113d0:	9b03      	ldr	r3, [sp, #12]
 80113d2:	3307      	adds	r3, #7
 80113d4:	f023 0307 	bic.w	r3, r3, #7
 80113d8:	3308      	adds	r3, #8
 80113da:	9303      	str	r3, [sp, #12]
 80113dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113de:	443b      	add	r3, r7
 80113e0:	9309      	str	r3, [sp, #36]	; 0x24
 80113e2:	e767      	b.n	80112b4 <_vfiprintf_r+0x94>
 80113e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80113e8:	460c      	mov	r4, r1
 80113ea:	2001      	movs	r0, #1
 80113ec:	e7a5      	b.n	801133a <_vfiprintf_r+0x11a>
 80113ee:	2300      	movs	r3, #0
 80113f0:	3401      	adds	r4, #1
 80113f2:	9305      	str	r3, [sp, #20]
 80113f4:	4619      	mov	r1, r3
 80113f6:	f04f 0c0a 	mov.w	ip, #10
 80113fa:	4620      	mov	r0, r4
 80113fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011400:	3a30      	subs	r2, #48	; 0x30
 8011402:	2a09      	cmp	r2, #9
 8011404:	d903      	bls.n	801140e <_vfiprintf_r+0x1ee>
 8011406:	2b00      	cmp	r3, #0
 8011408:	d0c5      	beq.n	8011396 <_vfiprintf_r+0x176>
 801140a:	9105      	str	r1, [sp, #20]
 801140c:	e7c3      	b.n	8011396 <_vfiprintf_r+0x176>
 801140e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011412:	4604      	mov	r4, r0
 8011414:	2301      	movs	r3, #1
 8011416:	e7f0      	b.n	80113fa <_vfiprintf_r+0x1da>
 8011418:	ab03      	add	r3, sp, #12
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	462a      	mov	r2, r5
 801141e:	4b16      	ldr	r3, [pc, #88]	; (8011478 <_vfiprintf_r+0x258>)
 8011420:	a904      	add	r1, sp, #16
 8011422:	4630      	mov	r0, r6
 8011424:	f000 f8cc 	bl	80115c0 <_printf_float>
 8011428:	4607      	mov	r7, r0
 801142a:	1c78      	adds	r0, r7, #1
 801142c:	d1d6      	bne.n	80113dc <_vfiprintf_r+0x1bc>
 801142e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011430:	07d9      	lsls	r1, r3, #31
 8011432:	d405      	bmi.n	8011440 <_vfiprintf_r+0x220>
 8011434:	89ab      	ldrh	r3, [r5, #12]
 8011436:	059a      	lsls	r2, r3, #22
 8011438:	d402      	bmi.n	8011440 <_vfiprintf_r+0x220>
 801143a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801143c:	f7ff fdf0 	bl	8011020 <__retarget_lock_release_recursive>
 8011440:	89ab      	ldrh	r3, [r5, #12]
 8011442:	065b      	lsls	r3, r3, #25
 8011444:	f53f af12 	bmi.w	801126c <_vfiprintf_r+0x4c>
 8011448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801144a:	e711      	b.n	8011270 <_vfiprintf_r+0x50>
 801144c:	ab03      	add	r3, sp, #12
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	462a      	mov	r2, r5
 8011452:	4b09      	ldr	r3, [pc, #36]	; (8011478 <_vfiprintf_r+0x258>)
 8011454:	a904      	add	r1, sp, #16
 8011456:	4630      	mov	r0, r6
 8011458:	f000 fb56 	bl	8011b08 <_printf_i>
 801145c:	e7e4      	b.n	8011428 <_vfiprintf_r+0x208>
 801145e:	bf00      	nop
 8011460:	08015658 	.word	0x08015658
 8011464:	08015678 	.word	0x08015678
 8011468:	08015638 	.word	0x08015638
 801146c:	0801569c 	.word	0x0801569c
 8011470:	080156a6 	.word	0x080156a6
 8011474:	080115c1 	.word	0x080115c1
 8011478:	080111fb 	.word	0x080111fb
 801147c:	080156a2 	.word	0x080156a2

08011480 <__cvt>:
 8011480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011484:	ec55 4b10 	vmov	r4, r5, d0
 8011488:	2d00      	cmp	r5, #0
 801148a:	460e      	mov	r6, r1
 801148c:	4619      	mov	r1, r3
 801148e:	462b      	mov	r3, r5
 8011490:	bfbb      	ittet	lt
 8011492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011496:	461d      	movlt	r5, r3
 8011498:	2300      	movge	r3, #0
 801149a:	232d      	movlt	r3, #45	; 0x2d
 801149c:	700b      	strb	r3, [r1, #0]
 801149e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80114a4:	4691      	mov	r9, r2
 80114a6:	f023 0820 	bic.w	r8, r3, #32
 80114aa:	bfbc      	itt	lt
 80114ac:	4622      	movlt	r2, r4
 80114ae:	4614      	movlt	r4, r2
 80114b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114b4:	d005      	beq.n	80114c2 <__cvt+0x42>
 80114b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80114ba:	d100      	bne.n	80114be <__cvt+0x3e>
 80114bc:	3601      	adds	r6, #1
 80114be:	2102      	movs	r1, #2
 80114c0:	e000      	b.n	80114c4 <__cvt+0x44>
 80114c2:	2103      	movs	r1, #3
 80114c4:	ab03      	add	r3, sp, #12
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	ab02      	add	r3, sp, #8
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	ec45 4b10 	vmov	d0, r4, r5
 80114d0:	4653      	mov	r3, sl
 80114d2:	4632      	mov	r2, r6
 80114d4:	f000 ffa4 	bl	8012420 <_dtoa_r>
 80114d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80114dc:	4607      	mov	r7, r0
 80114de:	d102      	bne.n	80114e6 <__cvt+0x66>
 80114e0:	f019 0f01 	tst.w	r9, #1
 80114e4:	d022      	beq.n	801152c <__cvt+0xac>
 80114e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114ea:	eb07 0906 	add.w	r9, r7, r6
 80114ee:	d110      	bne.n	8011512 <__cvt+0x92>
 80114f0:	783b      	ldrb	r3, [r7, #0]
 80114f2:	2b30      	cmp	r3, #48	; 0x30
 80114f4:	d10a      	bne.n	801150c <__cvt+0x8c>
 80114f6:	2200      	movs	r2, #0
 80114f8:	2300      	movs	r3, #0
 80114fa:	4620      	mov	r0, r4
 80114fc:	4629      	mov	r1, r5
 80114fe:	f7ef fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011502:	b918      	cbnz	r0, 801150c <__cvt+0x8c>
 8011504:	f1c6 0601 	rsb	r6, r6, #1
 8011508:	f8ca 6000 	str.w	r6, [sl]
 801150c:	f8da 3000 	ldr.w	r3, [sl]
 8011510:	4499      	add	r9, r3
 8011512:	2200      	movs	r2, #0
 8011514:	2300      	movs	r3, #0
 8011516:	4620      	mov	r0, r4
 8011518:	4629      	mov	r1, r5
 801151a:	f7ef fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 801151e:	b108      	cbz	r0, 8011524 <__cvt+0xa4>
 8011520:	f8cd 900c 	str.w	r9, [sp, #12]
 8011524:	2230      	movs	r2, #48	; 0x30
 8011526:	9b03      	ldr	r3, [sp, #12]
 8011528:	454b      	cmp	r3, r9
 801152a:	d307      	bcc.n	801153c <__cvt+0xbc>
 801152c:	9b03      	ldr	r3, [sp, #12]
 801152e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011530:	1bdb      	subs	r3, r3, r7
 8011532:	4638      	mov	r0, r7
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	b004      	add	sp, #16
 8011538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153c:	1c59      	adds	r1, r3, #1
 801153e:	9103      	str	r1, [sp, #12]
 8011540:	701a      	strb	r2, [r3, #0]
 8011542:	e7f0      	b.n	8011526 <__cvt+0xa6>

08011544 <__exponent>:
 8011544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011546:	4603      	mov	r3, r0
 8011548:	2900      	cmp	r1, #0
 801154a:	bfb8      	it	lt
 801154c:	4249      	neglt	r1, r1
 801154e:	f803 2b02 	strb.w	r2, [r3], #2
 8011552:	bfb4      	ite	lt
 8011554:	222d      	movlt	r2, #45	; 0x2d
 8011556:	222b      	movge	r2, #43	; 0x2b
 8011558:	2909      	cmp	r1, #9
 801155a:	7042      	strb	r2, [r0, #1]
 801155c:	dd2a      	ble.n	80115b4 <__exponent+0x70>
 801155e:	f10d 0407 	add.w	r4, sp, #7
 8011562:	46a4      	mov	ip, r4
 8011564:	270a      	movs	r7, #10
 8011566:	46a6      	mov	lr, r4
 8011568:	460a      	mov	r2, r1
 801156a:	fb91 f6f7 	sdiv	r6, r1, r7
 801156e:	fb07 1516 	mls	r5, r7, r6, r1
 8011572:	3530      	adds	r5, #48	; 0x30
 8011574:	2a63      	cmp	r2, #99	; 0x63
 8011576:	f104 34ff 	add.w	r4, r4, #4294967295
 801157a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801157e:	4631      	mov	r1, r6
 8011580:	dcf1      	bgt.n	8011566 <__exponent+0x22>
 8011582:	3130      	adds	r1, #48	; 0x30
 8011584:	f1ae 0502 	sub.w	r5, lr, #2
 8011588:	f804 1c01 	strb.w	r1, [r4, #-1]
 801158c:	1c44      	adds	r4, r0, #1
 801158e:	4629      	mov	r1, r5
 8011590:	4561      	cmp	r1, ip
 8011592:	d30a      	bcc.n	80115aa <__exponent+0x66>
 8011594:	f10d 0209 	add.w	r2, sp, #9
 8011598:	eba2 020e 	sub.w	r2, r2, lr
 801159c:	4565      	cmp	r5, ip
 801159e:	bf88      	it	hi
 80115a0:	2200      	movhi	r2, #0
 80115a2:	4413      	add	r3, r2
 80115a4:	1a18      	subs	r0, r3, r0
 80115a6:	b003      	add	sp, #12
 80115a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80115b2:	e7ed      	b.n	8011590 <__exponent+0x4c>
 80115b4:	2330      	movs	r3, #48	; 0x30
 80115b6:	3130      	adds	r1, #48	; 0x30
 80115b8:	7083      	strb	r3, [r0, #2]
 80115ba:	70c1      	strb	r1, [r0, #3]
 80115bc:	1d03      	adds	r3, r0, #4
 80115be:	e7f1      	b.n	80115a4 <__exponent+0x60>

080115c0 <_printf_float>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	ed2d 8b02 	vpush	{d8}
 80115c8:	b08d      	sub	sp, #52	; 0x34
 80115ca:	460c      	mov	r4, r1
 80115cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80115d0:	4616      	mov	r6, r2
 80115d2:	461f      	mov	r7, r3
 80115d4:	4605      	mov	r5, r0
 80115d6:	f001 fdd3 	bl	8013180 <_localeconv_r>
 80115da:	f8d0 a000 	ldr.w	sl, [r0]
 80115de:	4650      	mov	r0, sl
 80115e0:	f7ee fdf6 	bl	80001d0 <strlen>
 80115e4:	2300      	movs	r3, #0
 80115e6:	930a      	str	r3, [sp, #40]	; 0x28
 80115e8:	6823      	ldr	r3, [r4, #0]
 80115ea:	9305      	str	r3, [sp, #20]
 80115ec:	f8d8 3000 	ldr.w	r3, [r8]
 80115f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80115f4:	3307      	adds	r3, #7
 80115f6:	f023 0307 	bic.w	r3, r3, #7
 80115fa:	f103 0208 	add.w	r2, r3, #8
 80115fe:	f8c8 2000 	str.w	r2, [r8]
 8011602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011606:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801160a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801160e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011612:	9307      	str	r3, [sp, #28]
 8011614:	f8cd 8018 	str.w	r8, [sp, #24]
 8011618:	ee08 0a10 	vmov	s16, r0
 801161c:	4b9f      	ldr	r3, [pc, #636]	; (801189c <_printf_float+0x2dc>)
 801161e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011622:	f04f 32ff 	mov.w	r2, #4294967295
 8011626:	f7ef fa81 	bl	8000b2c <__aeabi_dcmpun>
 801162a:	bb88      	cbnz	r0, 8011690 <_printf_float+0xd0>
 801162c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011630:	4b9a      	ldr	r3, [pc, #616]	; (801189c <_printf_float+0x2dc>)
 8011632:	f04f 32ff 	mov.w	r2, #4294967295
 8011636:	f7ef fa5b 	bl	8000af0 <__aeabi_dcmple>
 801163a:	bb48      	cbnz	r0, 8011690 <_printf_float+0xd0>
 801163c:	2200      	movs	r2, #0
 801163e:	2300      	movs	r3, #0
 8011640:	4640      	mov	r0, r8
 8011642:	4649      	mov	r1, r9
 8011644:	f7ef fa4a 	bl	8000adc <__aeabi_dcmplt>
 8011648:	b110      	cbz	r0, 8011650 <_printf_float+0x90>
 801164a:	232d      	movs	r3, #45	; 0x2d
 801164c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011650:	4b93      	ldr	r3, [pc, #588]	; (80118a0 <_printf_float+0x2e0>)
 8011652:	4894      	ldr	r0, [pc, #592]	; (80118a4 <_printf_float+0x2e4>)
 8011654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011658:	bf94      	ite	ls
 801165a:	4698      	movls	r8, r3
 801165c:	4680      	movhi	r8, r0
 801165e:	2303      	movs	r3, #3
 8011660:	6123      	str	r3, [r4, #16]
 8011662:	9b05      	ldr	r3, [sp, #20]
 8011664:	f023 0204 	bic.w	r2, r3, #4
 8011668:	6022      	str	r2, [r4, #0]
 801166a:	f04f 0900 	mov.w	r9, #0
 801166e:	9700      	str	r7, [sp, #0]
 8011670:	4633      	mov	r3, r6
 8011672:	aa0b      	add	r2, sp, #44	; 0x2c
 8011674:	4621      	mov	r1, r4
 8011676:	4628      	mov	r0, r5
 8011678:	f000 f9d8 	bl	8011a2c <_printf_common>
 801167c:	3001      	adds	r0, #1
 801167e:	f040 8090 	bne.w	80117a2 <_printf_float+0x1e2>
 8011682:	f04f 30ff 	mov.w	r0, #4294967295
 8011686:	b00d      	add	sp, #52	; 0x34
 8011688:	ecbd 8b02 	vpop	{d8}
 801168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011690:	4642      	mov	r2, r8
 8011692:	464b      	mov	r3, r9
 8011694:	4640      	mov	r0, r8
 8011696:	4649      	mov	r1, r9
 8011698:	f7ef fa48 	bl	8000b2c <__aeabi_dcmpun>
 801169c:	b140      	cbz	r0, 80116b0 <_printf_float+0xf0>
 801169e:	464b      	mov	r3, r9
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bfbc      	itt	lt
 80116a4:	232d      	movlt	r3, #45	; 0x2d
 80116a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80116aa:	487f      	ldr	r0, [pc, #508]	; (80118a8 <_printf_float+0x2e8>)
 80116ac:	4b7f      	ldr	r3, [pc, #508]	; (80118ac <_printf_float+0x2ec>)
 80116ae:	e7d1      	b.n	8011654 <_printf_float+0x94>
 80116b0:	6863      	ldr	r3, [r4, #4]
 80116b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80116b6:	9206      	str	r2, [sp, #24]
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	d13f      	bne.n	801173c <_printf_float+0x17c>
 80116bc:	2306      	movs	r3, #6
 80116be:	6063      	str	r3, [r4, #4]
 80116c0:	9b05      	ldr	r3, [sp, #20]
 80116c2:	6861      	ldr	r1, [r4, #4]
 80116c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80116c8:	2300      	movs	r3, #0
 80116ca:	9303      	str	r3, [sp, #12]
 80116cc:	ab0a      	add	r3, sp, #40	; 0x28
 80116ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80116d2:	ab09      	add	r3, sp, #36	; 0x24
 80116d4:	ec49 8b10 	vmov	d0, r8, r9
 80116d8:	9300      	str	r3, [sp, #0]
 80116da:	6022      	str	r2, [r4, #0]
 80116dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80116e0:	4628      	mov	r0, r5
 80116e2:	f7ff fecd 	bl	8011480 <__cvt>
 80116e6:	9b06      	ldr	r3, [sp, #24]
 80116e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116ea:	2b47      	cmp	r3, #71	; 0x47
 80116ec:	4680      	mov	r8, r0
 80116ee:	d108      	bne.n	8011702 <_printf_float+0x142>
 80116f0:	1cc8      	adds	r0, r1, #3
 80116f2:	db02      	blt.n	80116fa <_printf_float+0x13a>
 80116f4:	6863      	ldr	r3, [r4, #4]
 80116f6:	4299      	cmp	r1, r3
 80116f8:	dd41      	ble.n	801177e <_printf_float+0x1be>
 80116fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80116fe:	fa5f fb8b 	uxtb.w	fp, fp
 8011702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011706:	d820      	bhi.n	801174a <_printf_float+0x18a>
 8011708:	3901      	subs	r1, #1
 801170a:	465a      	mov	r2, fp
 801170c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011710:	9109      	str	r1, [sp, #36]	; 0x24
 8011712:	f7ff ff17 	bl	8011544 <__exponent>
 8011716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011718:	1813      	adds	r3, r2, r0
 801171a:	2a01      	cmp	r2, #1
 801171c:	4681      	mov	r9, r0
 801171e:	6123      	str	r3, [r4, #16]
 8011720:	dc02      	bgt.n	8011728 <_printf_float+0x168>
 8011722:	6822      	ldr	r2, [r4, #0]
 8011724:	07d2      	lsls	r2, r2, #31
 8011726:	d501      	bpl.n	801172c <_printf_float+0x16c>
 8011728:	3301      	adds	r3, #1
 801172a:	6123      	str	r3, [r4, #16]
 801172c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011730:	2b00      	cmp	r3, #0
 8011732:	d09c      	beq.n	801166e <_printf_float+0xae>
 8011734:	232d      	movs	r3, #45	; 0x2d
 8011736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801173a:	e798      	b.n	801166e <_printf_float+0xae>
 801173c:	9a06      	ldr	r2, [sp, #24]
 801173e:	2a47      	cmp	r2, #71	; 0x47
 8011740:	d1be      	bne.n	80116c0 <_printf_float+0x100>
 8011742:	2b00      	cmp	r3, #0
 8011744:	d1bc      	bne.n	80116c0 <_printf_float+0x100>
 8011746:	2301      	movs	r3, #1
 8011748:	e7b9      	b.n	80116be <_printf_float+0xfe>
 801174a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801174e:	d118      	bne.n	8011782 <_printf_float+0x1c2>
 8011750:	2900      	cmp	r1, #0
 8011752:	6863      	ldr	r3, [r4, #4]
 8011754:	dd0b      	ble.n	801176e <_printf_float+0x1ae>
 8011756:	6121      	str	r1, [r4, #16]
 8011758:	b913      	cbnz	r3, 8011760 <_printf_float+0x1a0>
 801175a:	6822      	ldr	r2, [r4, #0]
 801175c:	07d0      	lsls	r0, r2, #31
 801175e:	d502      	bpl.n	8011766 <_printf_float+0x1a6>
 8011760:	3301      	adds	r3, #1
 8011762:	440b      	add	r3, r1
 8011764:	6123      	str	r3, [r4, #16]
 8011766:	65a1      	str	r1, [r4, #88]	; 0x58
 8011768:	f04f 0900 	mov.w	r9, #0
 801176c:	e7de      	b.n	801172c <_printf_float+0x16c>
 801176e:	b913      	cbnz	r3, 8011776 <_printf_float+0x1b6>
 8011770:	6822      	ldr	r2, [r4, #0]
 8011772:	07d2      	lsls	r2, r2, #31
 8011774:	d501      	bpl.n	801177a <_printf_float+0x1ba>
 8011776:	3302      	adds	r3, #2
 8011778:	e7f4      	b.n	8011764 <_printf_float+0x1a4>
 801177a:	2301      	movs	r3, #1
 801177c:	e7f2      	b.n	8011764 <_printf_float+0x1a4>
 801177e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011784:	4299      	cmp	r1, r3
 8011786:	db05      	blt.n	8011794 <_printf_float+0x1d4>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	6121      	str	r1, [r4, #16]
 801178c:	07d8      	lsls	r0, r3, #31
 801178e:	d5ea      	bpl.n	8011766 <_printf_float+0x1a6>
 8011790:	1c4b      	adds	r3, r1, #1
 8011792:	e7e7      	b.n	8011764 <_printf_float+0x1a4>
 8011794:	2900      	cmp	r1, #0
 8011796:	bfd4      	ite	le
 8011798:	f1c1 0202 	rsble	r2, r1, #2
 801179c:	2201      	movgt	r2, #1
 801179e:	4413      	add	r3, r2
 80117a0:	e7e0      	b.n	8011764 <_printf_float+0x1a4>
 80117a2:	6823      	ldr	r3, [r4, #0]
 80117a4:	055a      	lsls	r2, r3, #21
 80117a6:	d407      	bmi.n	80117b8 <_printf_float+0x1f8>
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	4642      	mov	r2, r8
 80117ac:	4631      	mov	r1, r6
 80117ae:	4628      	mov	r0, r5
 80117b0:	47b8      	blx	r7
 80117b2:	3001      	adds	r0, #1
 80117b4:	d12c      	bne.n	8011810 <_printf_float+0x250>
 80117b6:	e764      	b.n	8011682 <_printf_float+0xc2>
 80117b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80117bc:	f240 80e0 	bls.w	8011980 <_printf_float+0x3c0>
 80117c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117c4:	2200      	movs	r2, #0
 80117c6:	2300      	movs	r3, #0
 80117c8:	f7ef f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d034      	beq.n	801183a <_printf_float+0x27a>
 80117d0:	4a37      	ldr	r2, [pc, #220]	; (80118b0 <_printf_float+0x2f0>)
 80117d2:	2301      	movs	r3, #1
 80117d4:	4631      	mov	r1, r6
 80117d6:	4628      	mov	r0, r5
 80117d8:	47b8      	blx	r7
 80117da:	3001      	adds	r0, #1
 80117dc:	f43f af51 	beq.w	8011682 <_printf_float+0xc2>
 80117e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117e4:	429a      	cmp	r2, r3
 80117e6:	db02      	blt.n	80117ee <_printf_float+0x22e>
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	07d8      	lsls	r0, r3, #31
 80117ec:	d510      	bpl.n	8011810 <_printf_float+0x250>
 80117ee:	ee18 3a10 	vmov	r3, s16
 80117f2:	4652      	mov	r2, sl
 80117f4:	4631      	mov	r1, r6
 80117f6:	4628      	mov	r0, r5
 80117f8:	47b8      	blx	r7
 80117fa:	3001      	adds	r0, #1
 80117fc:	f43f af41 	beq.w	8011682 <_printf_float+0xc2>
 8011800:	f04f 0800 	mov.w	r8, #0
 8011804:	f104 091a 	add.w	r9, r4, #26
 8011808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801180a:	3b01      	subs	r3, #1
 801180c:	4543      	cmp	r3, r8
 801180e:	dc09      	bgt.n	8011824 <_printf_float+0x264>
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	079b      	lsls	r3, r3, #30
 8011814:	f100 8105 	bmi.w	8011a22 <_printf_float+0x462>
 8011818:	68e0      	ldr	r0, [r4, #12]
 801181a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801181c:	4298      	cmp	r0, r3
 801181e:	bfb8      	it	lt
 8011820:	4618      	movlt	r0, r3
 8011822:	e730      	b.n	8011686 <_printf_float+0xc6>
 8011824:	2301      	movs	r3, #1
 8011826:	464a      	mov	r2, r9
 8011828:	4631      	mov	r1, r6
 801182a:	4628      	mov	r0, r5
 801182c:	47b8      	blx	r7
 801182e:	3001      	adds	r0, #1
 8011830:	f43f af27 	beq.w	8011682 <_printf_float+0xc2>
 8011834:	f108 0801 	add.w	r8, r8, #1
 8011838:	e7e6      	b.n	8011808 <_printf_float+0x248>
 801183a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183c:	2b00      	cmp	r3, #0
 801183e:	dc39      	bgt.n	80118b4 <_printf_float+0x2f4>
 8011840:	4a1b      	ldr	r2, [pc, #108]	; (80118b0 <_printf_float+0x2f0>)
 8011842:	2301      	movs	r3, #1
 8011844:	4631      	mov	r1, r6
 8011846:	4628      	mov	r0, r5
 8011848:	47b8      	blx	r7
 801184a:	3001      	adds	r0, #1
 801184c:	f43f af19 	beq.w	8011682 <_printf_float+0xc2>
 8011850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011854:	4313      	orrs	r3, r2
 8011856:	d102      	bne.n	801185e <_printf_float+0x29e>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	07d9      	lsls	r1, r3, #31
 801185c:	d5d8      	bpl.n	8011810 <_printf_float+0x250>
 801185e:	ee18 3a10 	vmov	r3, s16
 8011862:	4652      	mov	r2, sl
 8011864:	4631      	mov	r1, r6
 8011866:	4628      	mov	r0, r5
 8011868:	47b8      	blx	r7
 801186a:	3001      	adds	r0, #1
 801186c:	f43f af09 	beq.w	8011682 <_printf_float+0xc2>
 8011870:	f04f 0900 	mov.w	r9, #0
 8011874:	f104 0a1a 	add.w	sl, r4, #26
 8011878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801187a:	425b      	negs	r3, r3
 801187c:	454b      	cmp	r3, r9
 801187e:	dc01      	bgt.n	8011884 <_printf_float+0x2c4>
 8011880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011882:	e792      	b.n	80117aa <_printf_float+0x1ea>
 8011884:	2301      	movs	r3, #1
 8011886:	4652      	mov	r2, sl
 8011888:	4631      	mov	r1, r6
 801188a:	4628      	mov	r0, r5
 801188c:	47b8      	blx	r7
 801188e:	3001      	adds	r0, #1
 8011890:	f43f aef7 	beq.w	8011682 <_printf_float+0xc2>
 8011894:	f109 0901 	add.w	r9, r9, #1
 8011898:	e7ee      	b.n	8011878 <_printf_float+0x2b8>
 801189a:	bf00      	nop
 801189c:	7fefffff 	.word	0x7fefffff
 80118a0:	080156ad 	.word	0x080156ad
 80118a4:	080156b1 	.word	0x080156b1
 80118a8:	080156b9 	.word	0x080156b9
 80118ac:	080156b5 	.word	0x080156b5
 80118b0:	080156bd 	.word	0x080156bd
 80118b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118b8:	429a      	cmp	r2, r3
 80118ba:	bfa8      	it	ge
 80118bc:	461a      	movge	r2, r3
 80118be:	2a00      	cmp	r2, #0
 80118c0:	4691      	mov	r9, r2
 80118c2:	dc37      	bgt.n	8011934 <_printf_float+0x374>
 80118c4:	f04f 0b00 	mov.w	fp, #0
 80118c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118cc:	f104 021a 	add.w	r2, r4, #26
 80118d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118d2:	9305      	str	r3, [sp, #20]
 80118d4:	eba3 0309 	sub.w	r3, r3, r9
 80118d8:	455b      	cmp	r3, fp
 80118da:	dc33      	bgt.n	8011944 <_printf_float+0x384>
 80118dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118e0:	429a      	cmp	r2, r3
 80118e2:	db3b      	blt.n	801195c <_printf_float+0x39c>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	07da      	lsls	r2, r3, #31
 80118e8:	d438      	bmi.n	801195c <_printf_float+0x39c>
 80118ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ec:	9a05      	ldr	r2, [sp, #20]
 80118ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118f0:	1a9a      	subs	r2, r3, r2
 80118f2:	eba3 0901 	sub.w	r9, r3, r1
 80118f6:	4591      	cmp	r9, r2
 80118f8:	bfa8      	it	ge
 80118fa:	4691      	movge	r9, r2
 80118fc:	f1b9 0f00 	cmp.w	r9, #0
 8011900:	dc35      	bgt.n	801196e <_printf_float+0x3ae>
 8011902:	f04f 0800 	mov.w	r8, #0
 8011906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801190a:	f104 0a1a 	add.w	sl, r4, #26
 801190e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011912:	1a9b      	subs	r3, r3, r2
 8011914:	eba3 0309 	sub.w	r3, r3, r9
 8011918:	4543      	cmp	r3, r8
 801191a:	f77f af79 	ble.w	8011810 <_printf_float+0x250>
 801191e:	2301      	movs	r3, #1
 8011920:	4652      	mov	r2, sl
 8011922:	4631      	mov	r1, r6
 8011924:	4628      	mov	r0, r5
 8011926:	47b8      	blx	r7
 8011928:	3001      	adds	r0, #1
 801192a:	f43f aeaa 	beq.w	8011682 <_printf_float+0xc2>
 801192e:	f108 0801 	add.w	r8, r8, #1
 8011932:	e7ec      	b.n	801190e <_printf_float+0x34e>
 8011934:	4613      	mov	r3, r2
 8011936:	4631      	mov	r1, r6
 8011938:	4642      	mov	r2, r8
 801193a:	4628      	mov	r0, r5
 801193c:	47b8      	blx	r7
 801193e:	3001      	adds	r0, #1
 8011940:	d1c0      	bne.n	80118c4 <_printf_float+0x304>
 8011942:	e69e      	b.n	8011682 <_printf_float+0xc2>
 8011944:	2301      	movs	r3, #1
 8011946:	4631      	mov	r1, r6
 8011948:	4628      	mov	r0, r5
 801194a:	9205      	str	r2, [sp, #20]
 801194c:	47b8      	blx	r7
 801194e:	3001      	adds	r0, #1
 8011950:	f43f ae97 	beq.w	8011682 <_printf_float+0xc2>
 8011954:	9a05      	ldr	r2, [sp, #20]
 8011956:	f10b 0b01 	add.w	fp, fp, #1
 801195a:	e7b9      	b.n	80118d0 <_printf_float+0x310>
 801195c:	ee18 3a10 	vmov	r3, s16
 8011960:	4652      	mov	r2, sl
 8011962:	4631      	mov	r1, r6
 8011964:	4628      	mov	r0, r5
 8011966:	47b8      	blx	r7
 8011968:	3001      	adds	r0, #1
 801196a:	d1be      	bne.n	80118ea <_printf_float+0x32a>
 801196c:	e689      	b.n	8011682 <_printf_float+0xc2>
 801196e:	9a05      	ldr	r2, [sp, #20]
 8011970:	464b      	mov	r3, r9
 8011972:	4442      	add	r2, r8
 8011974:	4631      	mov	r1, r6
 8011976:	4628      	mov	r0, r5
 8011978:	47b8      	blx	r7
 801197a:	3001      	adds	r0, #1
 801197c:	d1c1      	bne.n	8011902 <_printf_float+0x342>
 801197e:	e680      	b.n	8011682 <_printf_float+0xc2>
 8011980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011982:	2a01      	cmp	r2, #1
 8011984:	dc01      	bgt.n	801198a <_printf_float+0x3ca>
 8011986:	07db      	lsls	r3, r3, #31
 8011988:	d538      	bpl.n	80119fc <_printf_float+0x43c>
 801198a:	2301      	movs	r3, #1
 801198c:	4642      	mov	r2, r8
 801198e:	4631      	mov	r1, r6
 8011990:	4628      	mov	r0, r5
 8011992:	47b8      	blx	r7
 8011994:	3001      	adds	r0, #1
 8011996:	f43f ae74 	beq.w	8011682 <_printf_float+0xc2>
 801199a:	ee18 3a10 	vmov	r3, s16
 801199e:	4652      	mov	r2, sl
 80119a0:	4631      	mov	r1, r6
 80119a2:	4628      	mov	r0, r5
 80119a4:	47b8      	blx	r7
 80119a6:	3001      	adds	r0, #1
 80119a8:	f43f ae6b 	beq.w	8011682 <_printf_float+0xc2>
 80119ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119b0:	2200      	movs	r2, #0
 80119b2:	2300      	movs	r3, #0
 80119b4:	f7ef f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80119b8:	b9d8      	cbnz	r0, 80119f2 <_printf_float+0x432>
 80119ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119bc:	f108 0201 	add.w	r2, r8, #1
 80119c0:	3b01      	subs	r3, #1
 80119c2:	4631      	mov	r1, r6
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b8      	blx	r7
 80119c8:	3001      	adds	r0, #1
 80119ca:	d10e      	bne.n	80119ea <_printf_float+0x42a>
 80119cc:	e659      	b.n	8011682 <_printf_float+0xc2>
 80119ce:	2301      	movs	r3, #1
 80119d0:	4652      	mov	r2, sl
 80119d2:	4631      	mov	r1, r6
 80119d4:	4628      	mov	r0, r5
 80119d6:	47b8      	blx	r7
 80119d8:	3001      	adds	r0, #1
 80119da:	f43f ae52 	beq.w	8011682 <_printf_float+0xc2>
 80119de:	f108 0801 	add.w	r8, r8, #1
 80119e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119e4:	3b01      	subs	r3, #1
 80119e6:	4543      	cmp	r3, r8
 80119e8:	dcf1      	bgt.n	80119ce <_printf_float+0x40e>
 80119ea:	464b      	mov	r3, r9
 80119ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80119f0:	e6dc      	b.n	80117ac <_printf_float+0x1ec>
 80119f2:	f04f 0800 	mov.w	r8, #0
 80119f6:	f104 0a1a 	add.w	sl, r4, #26
 80119fa:	e7f2      	b.n	80119e2 <_printf_float+0x422>
 80119fc:	2301      	movs	r3, #1
 80119fe:	4642      	mov	r2, r8
 8011a00:	e7df      	b.n	80119c2 <_printf_float+0x402>
 8011a02:	2301      	movs	r3, #1
 8011a04:	464a      	mov	r2, r9
 8011a06:	4631      	mov	r1, r6
 8011a08:	4628      	mov	r0, r5
 8011a0a:	47b8      	blx	r7
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	f43f ae38 	beq.w	8011682 <_printf_float+0xc2>
 8011a12:	f108 0801 	add.w	r8, r8, #1
 8011a16:	68e3      	ldr	r3, [r4, #12]
 8011a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a1a:	1a5b      	subs	r3, r3, r1
 8011a1c:	4543      	cmp	r3, r8
 8011a1e:	dcf0      	bgt.n	8011a02 <_printf_float+0x442>
 8011a20:	e6fa      	b.n	8011818 <_printf_float+0x258>
 8011a22:	f04f 0800 	mov.w	r8, #0
 8011a26:	f104 0919 	add.w	r9, r4, #25
 8011a2a:	e7f4      	b.n	8011a16 <_printf_float+0x456>

08011a2c <_printf_common>:
 8011a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a30:	4616      	mov	r6, r2
 8011a32:	4699      	mov	r9, r3
 8011a34:	688a      	ldr	r2, [r1, #8]
 8011a36:	690b      	ldr	r3, [r1, #16]
 8011a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	bfb8      	it	lt
 8011a40:	4613      	movlt	r3, r2
 8011a42:	6033      	str	r3, [r6, #0]
 8011a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a48:	4607      	mov	r7, r0
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	b10a      	cbz	r2, 8011a52 <_printf_common+0x26>
 8011a4e:	3301      	adds	r3, #1
 8011a50:	6033      	str	r3, [r6, #0]
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	0699      	lsls	r1, r3, #26
 8011a56:	bf42      	ittt	mi
 8011a58:	6833      	ldrmi	r3, [r6, #0]
 8011a5a:	3302      	addmi	r3, #2
 8011a5c:	6033      	strmi	r3, [r6, #0]
 8011a5e:	6825      	ldr	r5, [r4, #0]
 8011a60:	f015 0506 	ands.w	r5, r5, #6
 8011a64:	d106      	bne.n	8011a74 <_printf_common+0x48>
 8011a66:	f104 0a19 	add.w	sl, r4, #25
 8011a6a:	68e3      	ldr	r3, [r4, #12]
 8011a6c:	6832      	ldr	r2, [r6, #0]
 8011a6e:	1a9b      	subs	r3, r3, r2
 8011a70:	42ab      	cmp	r3, r5
 8011a72:	dc26      	bgt.n	8011ac2 <_printf_common+0x96>
 8011a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a78:	1e13      	subs	r3, r2, #0
 8011a7a:	6822      	ldr	r2, [r4, #0]
 8011a7c:	bf18      	it	ne
 8011a7e:	2301      	movne	r3, #1
 8011a80:	0692      	lsls	r2, r2, #26
 8011a82:	d42b      	bmi.n	8011adc <_printf_common+0xb0>
 8011a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a88:	4649      	mov	r1, r9
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	47c0      	blx	r8
 8011a8e:	3001      	adds	r0, #1
 8011a90:	d01e      	beq.n	8011ad0 <_printf_common+0xa4>
 8011a92:	6823      	ldr	r3, [r4, #0]
 8011a94:	68e5      	ldr	r5, [r4, #12]
 8011a96:	6832      	ldr	r2, [r6, #0]
 8011a98:	f003 0306 	and.w	r3, r3, #6
 8011a9c:	2b04      	cmp	r3, #4
 8011a9e:	bf08      	it	eq
 8011aa0:	1aad      	subeq	r5, r5, r2
 8011aa2:	68a3      	ldr	r3, [r4, #8]
 8011aa4:	6922      	ldr	r2, [r4, #16]
 8011aa6:	bf0c      	ite	eq
 8011aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011aac:	2500      	movne	r5, #0
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	bfc4      	itt	gt
 8011ab2:	1a9b      	subgt	r3, r3, r2
 8011ab4:	18ed      	addgt	r5, r5, r3
 8011ab6:	2600      	movs	r6, #0
 8011ab8:	341a      	adds	r4, #26
 8011aba:	42b5      	cmp	r5, r6
 8011abc:	d11a      	bne.n	8011af4 <_printf_common+0xc8>
 8011abe:	2000      	movs	r0, #0
 8011ac0:	e008      	b.n	8011ad4 <_printf_common+0xa8>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	4652      	mov	r2, sl
 8011ac6:	4649      	mov	r1, r9
 8011ac8:	4638      	mov	r0, r7
 8011aca:	47c0      	blx	r8
 8011acc:	3001      	adds	r0, #1
 8011ace:	d103      	bne.n	8011ad8 <_printf_common+0xac>
 8011ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad8:	3501      	adds	r5, #1
 8011ada:	e7c6      	b.n	8011a6a <_printf_common+0x3e>
 8011adc:	18e1      	adds	r1, r4, r3
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	2030      	movs	r0, #48	; 0x30
 8011ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ae6:	4422      	add	r2, r4
 8011ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011af0:	3302      	adds	r3, #2
 8011af2:	e7c7      	b.n	8011a84 <_printf_common+0x58>
 8011af4:	2301      	movs	r3, #1
 8011af6:	4622      	mov	r2, r4
 8011af8:	4649      	mov	r1, r9
 8011afa:	4638      	mov	r0, r7
 8011afc:	47c0      	blx	r8
 8011afe:	3001      	adds	r0, #1
 8011b00:	d0e6      	beq.n	8011ad0 <_printf_common+0xa4>
 8011b02:	3601      	adds	r6, #1
 8011b04:	e7d9      	b.n	8011aba <_printf_common+0x8e>
	...

08011b08 <_printf_i>:
 8011b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b0c:	7e0f      	ldrb	r7, [r1, #24]
 8011b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b10:	2f78      	cmp	r7, #120	; 0x78
 8011b12:	4691      	mov	r9, r2
 8011b14:	4680      	mov	r8, r0
 8011b16:	460c      	mov	r4, r1
 8011b18:	469a      	mov	sl, r3
 8011b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b1e:	d807      	bhi.n	8011b30 <_printf_i+0x28>
 8011b20:	2f62      	cmp	r7, #98	; 0x62
 8011b22:	d80a      	bhi.n	8011b3a <_printf_i+0x32>
 8011b24:	2f00      	cmp	r7, #0
 8011b26:	f000 80d8 	beq.w	8011cda <_printf_i+0x1d2>
 8011b2a:	2f58      	cmp	r7, #88	; 0x58
 8011b2c:	f000 80a3 	beq.w	8011c76 <_printf_i+0x16e>
 8011b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b38:	e03a      	b.n	8011bb0 <_printf_i+0xa8>
 8011b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b3e:	2b15      	cmp	r3, #21
 8011b40:	d8f6      	bhi.n	8011b30 <_printf_i+0x28>
 8011b42:	a101      	add	r1, pc, #4	; (adr r1, 8011b48 <_printf_i+0x40>)
 8011b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b48:	08011ba1 	.word	0x08011ba1
 8011b4c:	08011bb5 	.word	0x08011bb5
 8011b50:	08011b31 	.word	0x08011b31
 8011b54:	08011b31 	.word	0x08011b31
 8011b58:	08011b31 	.word	0x08011b31
 8011b5c:	08011b31 	.word	0x08011b31
 8011b60:	08011bb5 	.word	0x08011bb5
 8011b64:	08011b31 	.word	0x08011b31
 8011b68:	08011b31 	.word	0x08011b31
 8011b6c:	08011b31 	.word	0x08011b31
 8011b70:	08011b31 	.word	0x08011b31
 8011b74:	08011cc1 	.word	0x08011cc1
 8011b78:	08011be5 	.word	0x08011be5
 8011b7c:	08011ca3 	.word	0x08011ca3
 8011b80:	08011b31 	.word	0x08011b31
 8011b84:	08011b31 	.word	0x08011b31
 8011b88:	08011ce3 	.word	0x08011ce3
 8011b8c:	08011b31 	.word	0x08011b31
 8011b90:	08011be5 	.word	0x08011be5
 8011b94:	08011b31 	.word	0x08011b31
 8011b98:	08011b31 	.word	0x08011b31
 8011b9c:	08011cab 	.word	0x08011cab
 8011ba0:	682b      	ldr	r3, [r5, #0]
 8011ba2:	1d1a      	adds	r2, r3, #4
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	602a      	str	r2, [r5, #0]
 8011ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e0a3      	b.n	8011cfc <_printf_i+0x1f4>
 8011bb4:	6820      	ldr	r0, [r4, #0]
 8011bb6:	6829      	ldr	r1, [r5, #0]
 8011bb8:	0606      	lsls	r6, r0, #24
 8011bba:	f101 0304 	add.w	r3, r1, #4
 8011bbe:	d50a      	bpl.n	8011bd6 <_printf_i+0xce>
 8011bc0:	680e      	ldr	r6, [r1, #0]
 8011bc2:	602b      	str	r3, [r5, #0]
 8011bc4:	2e00      	cmp	r6, #0
 8011bc6:	da03      	bge.n	8011bd0 <_printf_i+0xc8>
 8011bc8:	232d      	movs	r3, #45	; 0x2d
 8011bca:	4276      	negs	r6, r6
 8011bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bd0:	485e      	ldr	r0, [pc, #376]	; (8011d4c <_printf_i+0x244>)
 8011bd2:	230a      	movs	r3, #10
 8011bd4:	e019      	b.n	8011c0a <_printf_i+0x102>
 8011bd6:	680e      	ldr	r6, [r1, #0]
 8011bd8:	602b      	str	r3, [r5, #0]
 8011bda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011bde:	bf18      	it	ne
 8011be0:	b236      	sxthne	r6, r6
 8011be2:	e7ef      	b.n	8011bc4 <_printf_i+0xbc>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	6820      	ldr	r0, [r4, #0]
 8011be8:	1d19      	adds	r1, r3, #4
 8011bea:	6029      	str	r1, [r5, #0]
 8011bec:	0601      	lsls	r1, r0, #24
 8011bee:	d501      	bpl.n	8011bf4 <_printf_i+0xec>
 8011bf0:	681e      	ldr	r6, [r3, #0]
 8011bf2:	e002      	b.n	8011bfa <_printf_i+0xf2>
 8011bf4:	0646      	lsls	r6, r0, #25
 8011bf6:	d5fb      	bpl.n	8011bf0 <_printf_i+0xe8>
 8011bf8:	881e      	ldrh	r6, [r3, #0]
 8011bfa:	4854      	ldr	r0, [pc, #336]	; (8011d4c <_printf_i+0x244>)
 8011bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8011bfe:	bf0c      	ite	eq
 8011c00:	2308      	moveq	r3, #8
 8011c02:	230a      	movne	r3, #10
 8011c04:	2100      	movs	r1, #0
 8011c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c0a:	6865      	ldr	r5, [r4, #4]
 8011c0c:	60a5      	str	r5, [r4, #8]
 8011c0e:	2d00      	cmp	r5, #0
 8011c10:	bfa2      	ittt	ge
 8011c12:	6821      	ldrge	r1, [r4, #0]
 8011c14:	f021 0104 	bicge.w	r1, r1, #4
 8011c18:	6021      	strge	r1, [r4, #0]
 8011c1a:	b90e      	cbnz	r6, 8011c20 <_printf_i+0x118>
 8011c1c:	2d00      	cmp	r5, #0
 8011c1e:	d04d      	beq.n	8011cbc <_printf_i+0x1b4>
 8011c20:	4615      	mov	r5, r2
 8011c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c26:	fb03 6711 	mls	r7, r3, r1, r6
 8011c2a:	5dc7      	ldrb	r7, [r0, r7]
 8011c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011c30:	4637      	mov	r7, r6
 8011c32:	42bb      	cmp	r3, r7
 8011c34:	460e      	mov	r6, r1
 8011c36:	d9f4      	bls.n	8011c22 <_printf_i+0x11a>
 8011c38:	2b08      	cmp	r3, #8
 8011c3a:	d10b      	bne.n	8011c54 <_printf_i+0x14c>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	07de      	lsls	r6, r3, #31
 8011c40:	d508      	bpl.n	8011c54 <_printf_i+0x14c>
 8011c42:	6923      	ldr	r3, [r4, #16]
 8011c44:	6861      	ldr	r1, [r4, #4]
 8011c46:	4299      	cmp	r1, r3
 8011c48:	bfde      	ittt	le
 8011c4a:	2330      	movle	r3, #48	; 0x30
 8011c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011c54:	1b52      	subs	r2, r2, r5
 8011c56:	6122      	str	r2, [r4, #16]
 8011c58:	f8cd a000 	str.w	sl, [sp]
 8011c5c:	464b      	mov	r3, r9
 8011c5e:	aa03      	add	r2, sp, #12
 8011c60:	4621      	mov	r1, r4
 8011c62:	4640      	mov	r0, r8
 8011c64:	f7ff fee2 	bl	8011a2c <_printf_common>
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d14c      	bne.n	8011d06 <_printf_i+0x1fe>
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c70:	b004      	add	sp, #16
 8011c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c76:	4835      	ldr	r0, [pc, #212]	; (8011d4c <_printf_i+0x244>)
 8011c78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011c7c:	6829      	ldr	r1, [r5, #0]
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8011c84:	6029      	str	r1, [r5, #0]
 8011c86:	061d      	lsls	r5, r3, #24
 8011c88:	d514      	bpl.n	8011cb4 <_printf_i+0x1ac>
 8011c8a:	07df      	lsls	r7, r3, #31
 8011c8c:	bf44      	itt	mi
 8011c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8011c92:	6023      	strmi	r3, [r4, #0]
 8011c94:	b91e      	cbnz	r6, 8011c9e <_printf_i+0x196>
 8011c96:	6823      	ldr	r3, [r4, #0]
 8011c98:	f023 0320 	bic.w	r3, r3, #32
 8011c9c:	6023      	str	r3, [r4, #0]
 8011c9e:	2310      	movs	r3, #16
 8011ca0:	e7b0      	b.n	8011c04 <_printf_i+0xfc>
 8011ca2:	6823      	ldr	r3, [r4, #0]
 8011ca4:	f043 0320 	orr.w	r3, r3, #32
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	2378      	movs	r3, #120	; 0x78
 8011cac:	4828      	ldr	r0, [pc, #160]	; (8011d50 <_printf_i+0x248>)
 8011cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011cb2:	e7e3      	b.n	8011c7c <_printf_i+0x174>
 8011cb4:	0659      	lsls	r1, r3, #25
 8011cb6:	bf48      	it	mi
 8011cb8:	b2b6      	uxthmi	r6, r6
 8011cba:	e7e6      	b.n	8011c8a <_printf_i+0x182>
 8011cbc:	4615      	mov	r5, r2
 8011cbe:	e7bb      	b.n	8011c38 <_printf_i+0x130>
 8011cc0:	682b      	ldr	r3, [r5, #0]
 8011cc2:	6826      	ldr	r6, [r4, #0]
 8011cc4:	6961      	ldr	r1, [r4, #20]
 8011cc6:	1d18      	adds	r0, r3, #4
 8011cc8:	6028      	str	r0, [r5, #0]
 8011cca:	0635      	lsls	r5, r6, #24
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	d501      	bpl.n	8011cd4 <_printf_i+0x1cc>
 8011cd0:	6019      	str	r1, [r3, #0]
 8011cd2:	e002      	b.n	8011cda <_printf_i+0x1d2>
 8011cd4:	0670      	lsls	r0, r6, #25
 8011cd6:	d5fb      	bpl.n	8011cd0 <_printf_i+0x1c8>
 8011cd8:	8019      	strh	r1, [r3, #0]
 8011cda:	2300      	movs	r3, #0
 8011cdc:	6123      	str	r3, [r4, #16]
 8011cde:	4615      	mov	r5, r2
 8011ce0:	e7ba      	b.n	8011c58 <_printf_i+0x150>
 8011ce2:	682b      	ldr	r3, [r5, #0]
 8011ce4:	1d1a      	adds	r2, r3, #4
 8011ce6:	602a      	str	r2, [r5, #0]
 8011ce8:	681d      	ldr	r5, [r3, #0]
 8011cea:	6862      	ldr	r2, [r4, #4]
 8011cec:	2100      	movs	r1, #0
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f7ee fa76 	bl	80001e0 <memchr>
 8011cf4:	b108      	cbz	r0, 8011cfa <_printf_i+0x1f2>
 8011cf6:	1b40      	subs	r0, r0, r5
 8011cf8:	6060      	str	r0, [r4, #4]
 8011cfa:	6863      	ldr	r3, [r4, #4]
 8011cfc:	6123      	str	r3, [r4, #16]
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d04:	e7a8      	b.n	8011c58 <_printf_i+0x150>
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	462a      	mov	r2, r5
 8011d0a:	4649      	mov	r1, r9
 8011d0c:	4640      	mov	r0, r8
 8011d0e:	47d0      	blx	sl
 8011d10:	3001      	adds	r0, #1
 8011d12:	d0ab      	beq.n	8011c6c <_printf_i+0x164>
 8011d14:	6823      	ldr	r3, [r4, #0]
 8011d16:	079b      	lsls	r3, r3, #30
 8011d18:	d413      	bmi.n	8011d42 <_printf_i+0x23a>
 8011d1a:	68e0      	ldr	r0, [r4, #12]
 8011d1c:	9b03      	ldr	r3, [sp, #12]
 8011d1e:	4298      	cmp	r0, r3
 8011d20:	bfb8      	it	lt
 8011d22:	4618      	movlt	r0, r3
 8011d24:	e7a4      	b.n	8011c70 <_printf_i+0x168>
 8011d26:	2301      	movs	r3, #1
 8011d28:	4632      	mov	r2, r6
 8011d2a:	4649      	mov	r1, r9
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	47d0      	blx	sl
 8011d30:	3001      	adds	r0, #1
 8011d32:	d09b      	beq.n	8011c6c <_printf_i+0x164>
 8011d34:	3501      	adds	r5, #1
 8011d36:	68e3      	ldr	r3, [r4, #12]
 8011d38:	9903      	ldr	r1, [sp, #12]
 8011d3a:	1a5b      	subs	r3, r3, r1
 8011d3c:	42ab      	cmp	r3, r5
 8011d3e:	dcf2      	bgt.n	8011d26 <_printf_i+0x21e>
 8011d40:	e7eb      	b.n	8011d1a <_printf_i+0x212>
 8011d42:	2500      	movs	r5, #0
 8011d44:	f104 0619 	add.w	r6, r4, #25
 8011d48:	e7f5      	b.n	8011d36 <_printf_i+0x22e>
 8011d4a:	bf00      	nop
 8011d4c:	080156bf 	.word	0x080156bf
 8011d50:	080156d0 	.word	0x080156d0

08011d54 <iprintf>:
 8011d54:	b40f      	push	{r0, r1, r2, r3}
 8011d56:	4b0a      	ldr	r3, [pc, #40]	; (8011d80 <iprintf+0x2c>)
 8011d58:	b513      	push	{r0, r1, r4, lr}
 8011d5a:	681c      	ldr	r4, [r3, #0]
 8011d5c:	b124      	cbz	r4, 8011d68 <iprintf+0x14>
 8011d5e:	69a3      	ldr	r3, [r4, #24]
 8011d60:	b913      	cbnz	r3, 8011d68 <iprintf+0x14>
 8011d62:	4620      	mov	r0, r4
 8011d64:	f7ff f886 	bl	8010e74 <__sinit>
 8011d68:	ab05      	add	r3, sp, #20
 8011d6a:	9a04      	ldr	r2, [sp, #16]
 8011d6c:	68a1      	ldr	r1, [r4, #8]
 8011d6e:	9301      	str	r3, [sp, #4]
 8011d70:	4620      	mov	r0, r4
 8011d72:	f7ff fa55 	bl	8011220 <_vfiprintf_r>
 8011d76:	b002      	add	sp, #8
 8011d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d7c:	b004      	add	sp, #16
 8011d7e:	4770      	bx	lr
 8011d80:	20000058 	.word	0x20000058

08011d84 <_puts_r>:
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	460e      	mov	r6, r1
 8011d88:	4605      	mov	r5, r0
 8011d8a:	b118      	cbz	r0, 8011d94 <_puts_r+0x10>
 8011d8c:	6983      	ldr	r3, [r0, #24]
 8011d8e:	b90b      	cbnz	r3, 8011d94 <_puts_r+0x10>
 8011d90:	f7ff f870 	bl	8010e74 <__sinit>
 8011d94:	69ab      	ldr	r3, [r5, #24]
 8011d96:	68ac      	ldr	r4, [r5, #8]
 8011d98:	b913      	cbnz	r3, 8011da0 <_puts_r+0x1c>
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f7ff f86a 	bl	8010e74 <__sinit>
 8011da0:	4b2c      	ldr	r3, [pc, #176]	; (8011e54 <_puts_r+0xd0>)
 8011da2:	429c      	cmp	r4, r3
 8011da4:	d120      	bne.n	8011de8 <_puts_r+0x64>
 8011da6:	686c      	ldr	r4, [r5, #4]
 8011da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011daa:	07db      	lsls	r3, r3, #31
 8011dac:	d405      	bmi.n	8011dba <_puts_r+0x36>
 8011dae:	89a3      	ldrh	r3, [r4, #12]
 8011db0:	0598      	lsls	r0, r3, #22
 8011db2:	d402      	bmi.n	8011dba <_puts_r+0x36>
 8011db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011db6:	f7ff f932 	bl	801101e <__retarget_lock_acquire_recursive>
 8011dba:	89a3      	ldrh	r3, [r4, #12]
 8011dbc:	0719      	lsls	r1, r3, #28
 8011dbe:	d51d      	bpl.n	8011dfc <_puts_r+0x78>
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	b1db      	cbz	r3, 8011dfc <_puts_r+0x78>
 8011dc4:	3e01      	subs	r6, #1
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	60a3      	str	r3, [r4, #8]
 8011dd0:	bb39      	cbnz	r1, 8011e22 <_puts_r+0x9e>
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	da38      	bge.n	8011e48 <_puts_r+0xc4>
 8011dd6:	4622      	mov	r2, r4
 8011dd8:	210a      	movs	r1, #10
 8011dda:	4628      	mov	r0, r5
 8011ddc:	f000 f9aa 	bl	8012134 <__swbuf_r>
 8011de0:	3001      	adds	r0, #1
 8011de2:	d011      	beq.n	8011e08 <_puts_r+0x84>
 8011de4:	250a      	movs	r5, #10
 8011de6:	e011      	b.n	8011e0c <_puts_r+0x88>
 8011de8:	4b1b      	ldr	r3, [pc, #108]	; (8011e58 <_puts_r+0xd4>)
 8011dea:	429c      	cmp	r4, r3
 8011dec:	d101      	bne.n	8011df2 <_puts_r+0x6e>
 8011dee:	68ac      	ldr	r4, [r5, #8]
 8011df0:	e7da      	b.n	8011da8 <_puts_r+0x24>
 8011df2:	4b1a      	ldr	r3, [pc, #104]	; (8011e5c <_puts_r+0xd8>)
 8011df4:	429c      	cmp	r4, r3
 8011df6:	bf08      	it	eq
 8011df8:	68ec      	ldreq	r4, [r5, #12]
 8011dfa:	e7d5      	b.n	8011da8 <_puts_r+0x24>
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f000 f9fc 	bl	80121fc <__swsetup_r>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d0dd      	beq.n	8011dc4 <_puts_r+0x40>
 8011e08:	f04f 35ff 	mov.w	r5, #4294967295
 8011e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e0e:	07da      	lsls	r2, r3, #31
 8011e10:	d405      	bmi.n	8011e1e <_puts_r+0x9a>
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	059b      	lsls	r3, r3, #22
 8011e16:	d402      	bmi.n	8011e1e <_puts_r+0x9a>
 8011e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e1a:	f7ff f901 	bl	8011020 <__retarget_lock_release_recursive>
 8011e1e:	4628      	mov	r0, r5
 8011e20:	bd70      	pop	{r4, r5, r6, pc}
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	da04      	bge.n	8011e30 <_puts_r+0xac>
 8011e26:	69a2      	ldr	r2, [r4, #24]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	dc06      	bgt.n	8011e3a <_puts_r+0xb6>
 8011e2c:	290a      	cmp	r1, #10
 8011e2e:	d004      	beq.n	8011e3a <_puts_r+0xb6>
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	1c5a      	adds	r2, r3, #1
 8011e34:	6022      	str	r2, [r4, #0]
 8011e36:	7019      	strb	r1, [r3, #0]
 8011e38:	e7c5      	b.n	8011dc6 <_puts_r+0x42>
 8011e3a:	4622      	mov	r2, r4
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	f000 f979 	bl	8012134 <__swbuf_r>
 8011e42:	3001      	adds	r0, #1
 8011e44:	d1bf      	bne.n	8011dc6 <_puts_r+0x42>
 8011e46:	e7df      	b.n	8011e08 <_puts_r+0x84>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	250a      	movs	r5, #10
 8011e4c:	1c5a      	adds	r2, r3, #1
 8011e4e:	6022      	str	r2, [r4, #0]
 8011e50:	701d      	strb	r5, [r3, #0]
 8011e52:	e7db      	b.n	8011e0c <_puts_r+0x88>
 8011e54:	08015658 	.word	0x08015658
 8011e58:	08015678 	.word	0x08015678
 8011e5c:	08015638 	.word	0x08015638

08011e60 <puts>:
 8011e60:	4b02      	ldr	r3, [pc, #8]	; (8011e6c <puts+0xc>)
 8011e62:	4601      	mov	r1, r0
 8011e64:	6818      	ldr	r0, [r3, #0]
 8011e66:	f7ff bf8d 	b.w	8011d84 <_puts_r>
 8011e6a:	bf00      	nop
 8011e6c:	20000058 	.word	0x20000058

08011e70 <cleanup_glue>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	460c      	mov	r4, r1
 8011e74:	6809      	ldr	r1, [r1, #0]
 8011e76:	4605      	mov	r5, r0
 8011e78:	b109      	cbz	r1, 8011e7e <cleanup_glue+0xe>
 8011e7a:	f7ff fff9 	bl	8011e70 <cleanup_glue>
 8011e7e:	4621      	mov	r1, r4
 8011e80:	4628      	mov	r0, r5
 8011e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e86:	f001 bda5 	b.w	80139d4 <_free_r>
	...

08011e8c <_reclaim_reent>:
 8011e8c:	4b2c      	ldr	r3, [pc, #176]	; (8011f40 <_reclaim_reent+0xb4>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4283      	cmp	r3, r0
 8011e92:	b570      	push	{r4, r5, r6, lr}
 8011e94:	4604      	mov	r4, r0
 8011e96:	d051      	beq.n	8011f3c <_reclaim_reent+0xb0>
 8011e98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011e9a:	b143      	cbz	r3, 8011eae <_reclaim_reent+0x22>
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d14a      	bne.n	8011f38 <_reclaim_reent+0xac>
 8011ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ea4:	6819      	ldr	r1, [r3, #0]
 8011ea6:	b111      	cbz	r1, 8011eae <_reclaim_reent+0x22>
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f001 fd93 	bl	80139d4 <_free_r>
 8011eae:	6961      	ldr	r1, [r4, #20]
 8011eb0:	b111      	cbz	r1, 8011eb8 <_reclaim_reent+0x2c>
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	f001 fd8e 	bl	80139d4 <_free_r>
 8011eb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011eba:	b111      	cbz	r1, 8011ec2 <_reclaim_reent+0x36>
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f001 fd89 	bl	80139d4 <_free_r>
 8011ec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ec4:	b111      	cbz	r1, 8011ecc <_reclaim_reent+0x40>
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f001 fd84 	bl	80139d4 <_free_r>
 8011ecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ece:	b111      	cbz	r1, 8011ed6 <_reclaim_reent+0x4a>
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f001 fd7f 	bl	80139d4 <_free_r>
 8011ed6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011ed8:	b111      	cbz	r1, 8011ee0 <_reclaim_reent+0x54>
 8011eda:	4620      	mov	r0, r4
 8011edc:	f001 fd7a 	bl	80139d4 <_free_r>
 8011ee0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011ee2:	b111      	cbz	r1, 8011eea <_reclaim_reent+0x5e>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f001 fd75 	bl	80139d4 <_free_r>
 8011eea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011eec:	b111      	cbz	r1, 8011ef4 <_reclaim_reent+0x68>
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f001 fd70 	bl	80139d4 <_free_r>
 8011ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ef6:	b111      	cbz	r1, 8011efe <_reclaim_reent+0x72>
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f001 fd6b 	bl	80139d4 <_free_r>
 8011efe:	69a3      	ldr	r3, [r4, #24]
 8011f00:	b1e3      	cbz	r3, 8011f3c <_reclaim_reent+0xb0>
 8011f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f04:	4620      	mov	r0, r4
 8011f06:	4798      	blx	r3
 8011f08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f0a:	b1b9      	cbz	r1, 8011f3c <_reclaim_reent+0xb0>
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f12:	f7ff bfad 	b.w	8011e70 <cleanup_glue>
 8011f16:	5949      	ldr	r1, [r1, r5]
 8011f18:	b941      	cbnz	r1, 8011f2c <_reclaim_reent+0xa0>
 8011f1a:	3504      	adds	r5, #4
 8011f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f1e:	2d80      	cmp	r5, #128	; 0x80
 8011f20:	68d9      	ldr	r1, [r3, #12]
 8011f22:	d1f8      	bne.n	8011f16 <_reclaim_reent+0x8a>
 8011f24:	4620      	mov	r0, r4
 8011f26:	f001 fd55 	bl	80139d4 <_free_r>
 8011f2a:	e7ba      	b.n	8011ea2 <_reclaim_reent+0x16>
 8011f2c:	680e      	ldr	r6, [r1, #0]
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f001 fd50 	bl	80139d4 <_free_r>
 8011f34:	4631      	mov	r1, r6
 8011f36:	e7ef      	b.n	8011f18 <_reclaim_reent+0x8c>
 8011f38:	2500      	movs	r5, #0
 8011f3a:	e7ef      	b.n	8011f1c <_reclaim_reent+0x90>
 8011f3c:	bd70      	pop	{r4, r5, r6, pc}
 8011f3e:	bf00      	nop
 8011f40:	20000058 	.word	0x20000058

08011f44 <_sbrk_r>:
 8011f44:	b538      	push	{r3, r4, r5, lr}
 8011f46:	4d06      	ldr	r5, [pc, #24]	; (8011f60 <_sbrk_r+0x1c>)
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	602b      	str	r3, [r5, #0]
 8011f50:	f7f0 fbcc 	bl	80026ec <_sbrk>
 8011f54:	1c43      	adds	r3, r0, #1
 8011f56:	d102      	bne.n	8011f5e <_sbrk_r+0x1a>
 8011f58:	682b      	ldr	r3, [r5, #0]
 8011f5a:	b103      	cbz	r3, 8011f5e <_sbrk_r+0x1a>
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	bd38      	pop	{r3, r4, r5, pc}
 8011f60:	2000386c 	.word	0x2000386c

08011f64 <siprintf>:
 8011f64:	b40e      	push	{r1, r2, r3}
 8011f66:	b500      	push	{lr}
 8011f68:	b09c      	sub	sp, #112	; 0x70
 8011f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8011f6c:	9002      	str	r0, [sp, #8]
 8011f6e:	9006      	str	r0, [sp, #24]
 8011f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f74:	4809      	ldr	r0, [pc, #36]	; (8011f9c <siprintf+0x38>)
 8011f76:	9107      	str	r1, [sp, #28]
 8011f78:	9104      	str	r1, [sp, #16]
 8011f7a:	4909      	ldr	r1, [pc, #36]	; (8011fa0 <siprintf+0x3c>)
 8011f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f80:	9105      	str	r1, [sp, #20]
 8011f82:	6800      	ldr	r0, [r0, #0]
 8011f84:	9301      	str	r3, [sp, #4]
 8011f86:	a902      	add	r1, sp, #8
 8011f88:	f001 fdfa 	bl	8013b80 <_svfiprintf_r>
 8011f8c:	9b02      	ldr	r3, [sp, #8]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	701a      	strb	r2, [r3, #0]
 8011f92:	b01c      	add	sp, #112	; 0x70
 8011f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f98:	b003      	add	sp, #12
 8011f9a:	4770      	bx	lr
 8011f9c:	20000058 	.word	0x20000058
 8011fa0:	ffff0208 	.word	0xffff0208

08011fa4 <__sread>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fac:	f001 fee8 	bl	8013d80 <_read_r>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	bfab      	itete	ge
 8011fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011fb8:	181b      	addge	r3, r3, r0
 8011fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011fbe:	bfac      	ite	ge
 8011fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011fc2:	81a3      	strhlt	r3, [r4, #12]
 8011fc4:	bd10      	pop	{r4, pc}

08011fc6 <__swrite>:
 8011fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fca:	461f      	mov	r7, r3
 8011fcc:	898b      	ldrh	r3, [r1, #12]
 8011fce:	05db      	lsls	r3, r3, #23
 8011fd0:	4605      	mov	r5, r0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	d505      	bpl.n	8011fe4 <__swrite+0x1e>
 8011fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fdc:	2302      	movs	r3, #2
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f001 f8d2 	bl	8013188 <_lseek_r>
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	4632      	mov	r2, r6
 8011ff2:	463b      	mov	r3, r7
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffa:	f000 b8ed 	b.w	80121d8 <_write_r>

08011ffe <__sseek>:
 8011ffe:	b510      	push	{r4, lr}
 8012000:	460c      	mov	r4, r1
 8012002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012006:	f001 f8bf 	bl	8013188 <_lseek_r>
 801200a:	1c43      	adds	r3, r0, #1
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	bf15      	itete	ne
 8012010:	6560      	strne	r0, [r4, #84]	; 0x54
 8012012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801201a:	81a3      	strheq	r3, [r4, #12]
 801201c:	bf18      	it	ne
 801201e:	81a3      	strhne	r3, [r4, #12]
 8012020:	bd10      	pop	{r4, pc}

08012022 <__sclose>:
 8012022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012026:	f000 b95f 	b.w	80122e8 <_close_r>

0801202a <strncpy>:
 801202a:	b510      	push	{r4, lr}
 801202c:	3901      	subs	r1, #1
 801202e:	4603      	mov	r3, r0
 8012030:	b132      	cbz	r2, 8012040 <strncpy+0x16>
 8012032:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012036:	f803 4b01 	strb.w	r4, [r3], #1
 801203a:	3a01      	subs	r2, #1
 801203c:	2c00      	cmp	r4, #0
 801203e:	d1f7      	bne.n	8012030 <strncpy+0x6>
 8012040:	441a      	add	r2, r3
 8012042:	2100      	movs	r1, #0
 8012044:	4293      	cmp	r3, r2
 8012046:	d100      	bne.n	801204a <strncpy+0x20>
 8012048:	bd10      	pop	{r4, pc}
 801204a:	f803 1b01 	strb.w	r1, [r3], #1
 801204e:	e7f9      	b.n	8012044 <strncpy+0x1a>

08012050 <strstr>:
 8012050:	780a      	ldrb	r2, [r1, #0]
 8012052:	b570      	push	{r4, r5, r6, lr}
 8012054:	b96a      	cbnz	r2, 8012072 <strstr+0x22>
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	429a      	cmp	r2, r3
 801205a:	d109      	bne.n	8012070 <strstr+0x20>
 801205c:	460c      	mov	r4, r1
 801205e:	4605      	mov	r5, r0
 8012060:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012064:	2b00      	cmp	r3, #0
 8012066:	d0f6      	beq.n	8012056 <strstr+0x6>
 8012068:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801206c:	429e      	cmp	r6, r3
 801206e:	d0f7      	beq.n	8012060 <strstr+0x10>
 8012070:	3001      	adds	r0, #1
 8012072:	7803      	ldrb	r3, [r0, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d1ef      	bne.n	8012058 <strstr+0x8>
 8012078:	4618      	mov	r0, r3
 801207a:	e7ec      	b.n	8012056 <strstr+0x6>

0801207c <strtok>:
 801207c:	4b16      	ldr	r3, [pc, #88]	; (80120d8 <strtok+0x5c>)
 801207e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012080:	681e      	ldr	r6, [r3, #0]
 8012082:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012084:	4605      	mov	r5, r0
 8012086:	b9fc      	cbnz	r4, 80120c8 <strtok+0x4c>
 8012088:	2050      	movs	r0, #80	; 0x50
 801208a:	9101      	str	r1, [sp, #4]
 801208c:	f001 f8f4 	bl	8013278 <malloc>
 8012090:	9901      	ldr	r1, [sp, #4]
 8012092:	65b0      	str	r0, [r6, #88]	; 0x58
 8012094:	4602      	mov	r2, r0
 8012096:	b920      	cbnz	r0, 80120a2 <strtok+0x26>
 8012098:	4b10      	ldr	r3, [pc, #64]	; (80120dc <strtok+0x60>)
 801209a:	4811      	ldr	r0, [pc, #68]	; (80120e0 <strtok+0x64>)
 801209c:	2157      	movs	r1, #87	; 0x57
 801209e:	f7fe fe6d 	bl	8010d7c <__assert_func>
 80120a2:	e9c0 4400 	strd	r4, r4, [r0]
 80120a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80120aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80120ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80120b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80120b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80120ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80120be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80120c2:	6184      	str	r4, [r0, #24]
 80120c4:	7704      	strb	r4, [r0, #28]
 80120c6:	6244      	str	r4, [r0, #36]	; 0x24
 80120c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80120ca:	2301      	movs	r3, #1
 80120cc:	4628      	mov	r0, r5
 80120ce:	b002      	add	sp, #8
 80120d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120d4:	f000 b806 	b.w	80120e4 <__strtok_r>
 80120d8:	20000058 	.word	0x20000058
 80120dc:	080156e1 	.word	0x080156e1
 80120e0:	080156f8 	.word	0x080156f8

080120e4 <__strtok_r>:
 80120e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120e6:	b908      	cbnz	r0, 80120ec <__strtok_r+0x8>
 80120e8:	6810      	ldr	r0, [r2, #0]
 80120ea:	b188      	cbz	r0, 8012110 <__strtok_r+0x2c>
 80120ec:	4604      	mov	r4, r0
 80120ee:	4620      	mov	r0, r4
 80120f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80120f4:	460f      	mov	r7, r1
 80120f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80120fa:	b91e      	cbnz	r6, 8012104 <__strtok_r+0x20>
 80120fc:	b965      	cbnz	r5, 8012118 <__strtok_r+0x34>
 80120fe:	6015      	str	r5, [r2, #0]
 8012100:	4628      	mov	r0, r5
 8012102:	e005      	b.n	8012110 <__strtok_r+0x2c>
 8012104:	42b5      	cmp	r5, r6
 8012106:	d1f6      	bne.n	80120f6 <__strtok_r+0x12>
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1f0      	bne.n	80120ee <__strtok_r+0xa>
 801210c:	6014      	str	r4, [r2, #0]
 801210e:	7003      	strb	r3, [r0, #0]
 8012110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012112:	461c      	mov	r4, r3
 8012114:	e00c      	b.n	8012130 <__strtok_r+0x4c>
 8012116:	b915      	cbnz	r5, 801211e <__strtok_r+0x3a>
 8012118:	f814 3b01 	ldrb.w	r3, [r4], #1
 801211c:	460e      	mov	r6, r1
 801211e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012122:	42ab      	cmp	r3, r5
 8012124:	d1f7      	bne.n	8012116 <__strtok_r+0x32>
 8012126:	2b00      	cmp	r3, #0
 8012128:	d0f3      	beq.n	8012112 <__strtok_r+0x2e>
 801212a:	2300      	movs	r3, #0
 801212c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012130:	6014      	str	r4, [r2, #0]
 8012132:	e7ed      	b.n	8012110 <__strtok_r+0x2c>

08012134 <__swbuf_r>:
 8012134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012136:	460e      	mov	r6, r1
 8012138:	4614      	mov	r4, r2
 801213a:	4605      	mov	r5, r0
 801213c:	b118      	cbz	r0, 8012146 <__swbuf_r+0x12>
 801213e:	6983      	ldr	r3, [r0, #24]
 8012140:	b90b      	cbnz	r3, 8012146 <__swbuf_r+0x12>
 8012142:	f7fe fe97 	bl	8010e74 <__sinit>
 8012146:	4b21      	ldr	r3, [pc, #132]	; (80121cc <__swbuf_r+0x98>)
 8012148:	429c      	cmp	r4, r3
 801214a:	d12b      	bne.n	80121a4 <__swbuf_r+0x70>
 801214c:	686c      	ldr	r4, [r5, #4]
 801214e:	69a3      	ldr	r3, [r4, #24]
 8012150:	60a3      	str	r3, [r4, #8]
 8012152:	89a3      	ldrh	r3, [r4, #12]
 8012154:	071a      	lsls	r2, r3, #28
 8012156:	d52f      	bpl.n	80121b8 <__swbuf_r+0x84>
 8012158:	6923      	ldr	r3, [r4, #16]
 801215a:	b36b      	cbz	r3, 80121b8 <__swbuf_r+0x84>
 801215c:	6923      	ldr	r3, [r4, #16]
 801215e:	6820      	ldr	r0, [r4, #0]
 8012160:	1ac0      	subs	r0, r0, r3
 8012162:	6963      	ldr	r3, [r4, #20]
 8012164:	b2f6      	uxtb	r6, r6
 8012166:	4283      	cmp	r3, r0
 8012168:	4637      	mov	r7, r6
 801216a:	dc04      	bgt.n	8012176 <__swbuf_r+0x42>
 801216c:	4621      	mov	r1, r4
 801216e:	4628      	mov	r0, r5
 8012170:	f000 ffca 	bl	8013108 <_fflush_r>
 8012174:	bb30      	cbnz	r0, 80121c4 <__swbuf_r+0x90>
 8012176:	68a3      	ldr	r3, [r4, #8]
 8012178:	3b01      	subs	r3, #1
 801217a:	60a3      	str	r3, [r4, #8]
 801217c:	6823      	ldr	r3, [r4, #0]
 801217e:	1c5a      	adds	r2, r3, #1
 8012180:	6022      	str	r2, [r4, #0]
 8012182:	701e      	strb	r6, [r3, #0]
 8012184:	6963      	ldr	r3, [r4, #20]
 8012186:	3001      	adds	r0, #1
 8012188:	4283      	cmp	r3, r0
 801218a:	d004      	beq.n	8012196 <__swbuf_r+0x62>
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	07db      	lsls	r3, r3, #31
 8012190:	d506      	bpl.n	80121a0 <__swbuf_r+0x6c>
 8012192:	2e0a      	cmp	r6, #10
 8012194:	d104      	bne.n	80121a0 <__swbuf_r+0x6c>
 8012196:	4621      	mov	r1, r4
 8012198:	4628      	mov	r0, r5
 801219a:	f000 ffb5 	bl	8013108 <_fflush_r>
 801219e:	b988      	cbnz	r0, 80121c4 <__swbuf_r+0x90>
 80121a0:	4638      	mov	r0, r7
 80121a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a4:	4b0a      	ldr	r3, [pc, #40]	; (80121d0 <__swbuf_r+0x9c>)
 80121a6:	429c      	cmp	r4, r3
 80121a8:	d101      	bne.n	80121ae <__swbuf_r+0x7a>
 80121aa:	68ac      	ldr	r4, [r5, #8]
 80121ac:	e7cf      	b.n	801214e <__swbuf_r+0x1a>
 80121ae:	4b09      	ldr	r3, [pc, #36]	; (80121d4 <__swbuf_r+0xa0>)
 80121b0:	429c      	cmp	r4, r3
 80121b2:	bf08      	it	eq
 80121b4:	68ec      	ldreq	r4, [r5, #12]
 80121b6:	e7ca      	b.n	801214e <__swbuf_r+0x1a>
 80121b8:	4621      	mov	r1, r4
 80121ba:	4628      	mov	r0, r5
 80121bc:	f000 f81e 	bl	80121fc <__swsetup_r>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d0cb      	beq.n	801215c <__swbuf_r+0x28>
 80121c4:	f04f 37ff 	mov.w	r7, #4294967295
 80121c8:	e7ea      	b.n	80121a0 <__swbuf_r+0x6c>
 80121ca:	bf00      	nop
 80121cc:	08015658 	.word	0x08015658
 80121d0:	08015678 	.word	0x08015678
 80121d4:	08015638 	.word	0x08015638

080121d8 <_write_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d07      	ldr	r5, [pc, #28]	; (80121f8 <_write_r+0x20>)
 80121dc:	4604      	mov	r4, r0
 80121de:	4608      	mov	r0, r1
 80121e0:	4611      	mov	r1, r2
 80121e2:	2200      	movs	r2, #0
 80121e4:	602a      	str	r2, [r5, #0]
 80121e6:	461a      	mov	r2, r3
 80121e8:	f7ef fa6a 	bl	80016c0 <_write>
 80121ec:	1c43      	adds	r3, r0, #1
 80121ee:	d102      	bne.n	80121f6 <_write_r+0x1e>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	b103      	cbz	r3, 80121f6 <_write_r+0x1e>
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	2000386c 	.word	0x2000386c

080121fc <__swsetup_r>:
 80121fc:	4b32      	ldr	r3, [pc, #200]	; (80122c8 <__swsetup_r+0xcc>)
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	681d      	ldr	r5, [r3, #0]
 8012202:	4606      	mov	r6, r0
 8012204:	460c      	mov	r4, r1
 8012206:	b125      	cbz	r5, 8012212 <__swsetup_r+0x16>
 8012208:	69ab      	ldr	r3, [r5, #24]
 801220a:	b913      	cbnz	r3, 8012212 <__swsetup_r+0x16>
 801220c:	4628      	mov	r0, r5
 801220e:	f7fe fe31 	bl	8010e74 <__sinit>
 8012212:	4b2e      	ldr	r3, [pc, #184]	; (80122cc <__swsetup_r+0xd0>)
 8012214:	429c      	cmp	r4, r3
 8012216:	d10f      	bne.n	8012238 <__swsetup_r+0x3c>
 8012218:	686c      	ldr	r4, [r5, #4]
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012220:	0719      	lsls	r1, r3, #28
 8012222:	d42c      	bmi.n	801227e <__swsetup_r+0x82>
 8012224:	06dd      	lsls	r5, r3, #27
 8012226:	d411      	bmi.n	801224c <__swsetup_r+0x50>
 8012228:	2309      	movs	r3, #9
 801222a:	6033      	str	r3, [r6, #0]
 801222c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012230:	81a3      	strh	r3, [r4, #12]
 8012232:	f04f 30ff 	mov.w	r0, #4294967295
 8012236:	e03e      	b.n	80122b6 <__swsetup_r+0xba>
 8012238:	4b25      	ldr	r3, [pc, #148]	; (80122d0 <__swsetup_r+0xd4>)
 801223a:	429c      	cmp	r4, r3
 801223c:	d101      	bne.n	8012242 <__swsetup_r+0x46>
 801223e:	68ac      	ldr	r4, [r5, #8]
 8012240:	e7eb      	b.n	801221a <__swsetup_r+0x1e>
 8012242:	4b24      	ldr	r3, [pc, #144]	; (80122d4 <__swsetup_r+0xd8>)
 8012244:	429c      	cmp	r4, r3
 8012246:	bf08      	it	eq
 8012248:	68ec      	ldreq	r4, [r5, #12]
 801224a:	e7e6      	b.n	801221a <__swsetup_r+0x1e>
 801224c:	0758      	lsls	r0, r3, #29
 801224e:	d512      	bpl.n	8012276 <__swsetup_r+0x7a>
 8012250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012252:	b141      	cbz	r1, 8012266 <__swsetup_r+0x6a>
 8012254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012258:	4299      	cmp	r1, r3
 801225a:	d002      	beq.n	8012262 <__swsetup_r+0x66>
 801225c:	4630      	mov	r0, r6
 801225e:	f001 fbb9 	bl	80139d4 <_free_r>
 8012262:	2300      	movs	r3, #0
 8012264:	6363      	str	r3, [r4, #52]	; 0x34
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801226c:	81a3      	strh	r3, [r4, #12]
 801226e:	2300      	movs	r3, #0
 8012270:	6063      	str	r3, [r4, #4]
 8012272:	6923      	ldr	r3, [r4, #16]
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	f043 0308 	orr.w	r3, r3, #8
 801227c:	81a3      	strh	r3, [r4, #12]
 801227e:	6923      	ldr	r3, [r4, #16]
 8012280:	b94b      	cbnz	r3, 8012296 <__swsetup_r+0x9a>
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801228c:	d003      	beq.n	8012296 <__swsetup_r+0x9a>
 801228e:	4621      	mov	r1, r4
 8012290:	4630      	mov	r0, r6
 8012292:	f000 ffb1 	bl	80131f8 <__smakebuf_r>
 8012296:	89a0      	ldrh	r0, [r4, #12]
 8012298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801229c:	f010 0301 	ands.w	r3, r0, #1
 80122a0:	d00a      	beq.n	80122b8 <__swsetup_r+0xbc>
 80122a2:	2300      	movs	r3, #0
 80122a4:	60a3      	str	r3, [r4, #8]
 80122a6:	6963      	ldr	r3, [r4, #20]
 80122a8:	425b      	negs	r3, r3
 80122aa:	61a3      	str	r3, [r4, #24]
 80122ac:	6923      	ldr	r3, [r4, #16]
 80122ae:	b943      	cbnz	r3, 80122c2 <__swsetup_r+0xc6>
 80122b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80122b4:	d1ba      	bne.n	801222c <__swsetup_r+0x30>
 80122b6:	bd70      	pop	{r4, r5, r6, pc}
 80122b8:	0781      	lsls	r1, r0, #30
 80122ba:	bf58      	it	pl
 80122bc:	6963      	ldrpl	r3, [r4, #20]
 80122be:	60a3      	str	r3, [r4, #8]
 80122c0:	e7f4      	b.n	80122ac <__swsetup_r+0xb0>
 80122c2:	2000      	movs	r0, #0
 80122c4:	e7f7      	b.n	80122b6 <__swsetup_r+0xba>
 80122c6:	bf00      	nop
 80122c8:	20000058 	.word	0x20000058
 80122cc:	08015658 	.word	0x08015658
 80122d0:	08015678 	.word	0x08015678
 80122d4:	08015638 	.word	0x08015638

080122d8 <abort>:
 80122d8:	b508      	push	{r3, lr}
 80122da:	2006      	movs	r0, #6
 80122dc:	f001 fd8a 	bl	8013df4 <raise>
 80122e0:	2001      	movs	r0, #1
 80122e2:	f7f0 f9a7 	bl	8002634 <_exit>
	...

080122e8 <_close_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d06      	ldr	r5, [pc, #24]	; (8012304 <_close_r+0x1c>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	f7f0 f9c5 	bl	8002682 <_close>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d102      	bne.n	8012302 <_close_r+0x1a>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	b103      	cbz	r3, 8012302 <_close_r+0x1a>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd38      	pop	{r3, r4, r5, pc}
 8012304:	2000386c 	.word	0x2000386c

08012308 <quorem>:
 8012308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	6903      	ldr	r3, [r0, #16]
 801230e:	690c      	ldr	r4, [r1, #16]
 8012310:	42a3      	cmp	r3, r4
 8012312:	4607      	mov	r7, r0
 8012314:	f2c0 8081 	blt.w	801241a <quorem+0x112>
 8012318:	3c01      	subs	r4, #1
 801231a:	f101 0814 	add.w	r8, r1, #20
 801231e:	f100 0514 	add.w	r5, r0, #20
 8012322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801232c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012330:	3301      	adds	r3, #1
 8012332:	429a      	cmp	r2, r3
 8012334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801233c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012340:	d331      	bcc.n	80123a6 <quorem+0x9e>
 8012342:	f04f 0e00 	mov.w	lr, #0
 8012346:	4640      	mov	r0, r8
 8012348:	46ac      	mov	ip, r5
 801234a:	46f2      	mov	sl, lr
 801234c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012350:	b293      	uxth	r3, r2
 8012352:	fb06 e303 	mla	r3, r6, r3, lr
 8012356:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801235a:	b29b      	uxth	r3, r3
 801235c:	ebaa 0303 	sub.w	r3, sl, r3
 8012360:	f8dc a000 	ldr.w	sl, [ip]
 8012364:	0c12      	lsrs	r2, r2, #16
 8012366:	fa13 f38a 	uxtah	r3, r3, sl
 801236a:	fb06 e202 	mla	r2, r6, r2, lr
 801236e:	9300      	str	r3, [sp, #0]
 8012370:	9b00      	ldr	r3, [sp, #0]
 8012372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012376:	b292      	uxth	r2, r2
 8012378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801237c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012380:	f8bd 3000 	ldrh.w	r3, [sp]
 8012384:	4581      	cmp	r9, r0
 8012386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801238a:	f84c 3b04 	str.w	r3, [ip], #4
 801238e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012392:	d2db      	bcs.n	801234c <quorem+0x44>
 8012394:	f855 300b 	ldr.w	r3, [r5, fp]
 8012398:	b92b      	cbnz	r3, 80123a6 <quorem+0x9e>
 801239a:	9b01      	ldr	r3, [sp, #4]
 801239c:	3b04      	subs	r3, #4
 801239e:	429d      	cmp	r5, r3
 80123a0:	461a      	mov	r2, r3
 80123a2:	d32e      	bcc.n	8012402 <quorem+0xfa>
 80123a4:	613c      	str	r4, [r7, #16]
 80123a6:	4638      	mov	r0, r7
 80123a8:	f001 f9fc 	bl	80137a4 <__mcmp>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	db24      	blt.n	80123fa <quorem+0xf2>
 80123b0:	3601      	adds	r6, #1
 80123b2:	4628      	mov	r0, r5
 80123b4:	f04f 0c00 	mov.w	ip, #0
 80123b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80123bc:	f8d0 e000 	ldr.w	lr, [r0]
 80123c0:	b293      	uxth	r3, r2
 80123c2:	ebac 0303 	sub.w	r3, ip, r3
 80123c6:	0c12      	lsrs	r2, r2, #16
 80123c8:	fa13 f38e 	uxtah	r3, r3, lr
 80123cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80123d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123da:	45c1      	cmp	r9, r8
 80123dc:	f840 3b04 	str.w	r3, [r0], #4
 80123e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80123e4:	d2e8      	bcs.n	80123b8 <quorem+0xb0>
 80123e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123ee:	b922      	cbnz	r2, 80123fa <quorem+0xf2>
 80123f0:	3b04      	subs	r3, #4
 80123f2:	429d      	cmp	r5, r3
 80123f4:	461a      	mov	r2, r3
 80123f6:	d30a      	bcc.n	801240e <quorem+0x106>
 80123f8:	613c      	str	r4, [r7, #16]
 80123fa:	4630      	mov	r0, r6
 80123fc:	b003      	add	sp, #12
 80123fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012402:	6812      	ldr	r2, [r2, #0]
 8012404:	3b04      	subs	r3, #4
 8012406:	2a00      	cmp	r2, #0
 8012408:	d1cc      	bne.n	80123a4 <quorem+0x9c>
 801240a:	3c01      	subs	r4, #1
 801240c:	e7c7      	b.n	801239e <quorem+0x96>
 801240e:	6812      	ldr	r2, [r2, #0]
 8012410:	3b04      	subs	r3, #4
 8012412:	2a00      	cmp	r2, #0
 8012414:	d1f0      	bne.n	80123f8 <quorem+0xf0>
 8012416:	3c01      	subs	r4, #1
 8012418:	e7eb      	b.n	80123f2 <quorem+0xea>
 801241a:	2000      	movs	r0, #0
 801241c:	e7ee      	b.n	80123fc <quorem+0xf4>
	...

08012420 <_dtoa_r>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	ed2d 8b04 	vpush	{d8-d9}
 8012428:	ec57 6b10 	vmov	r6, r7, d0
 801242c:	b093      	sub	sp, #76	; 0x4c
 801242e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012434:	9106      	str	r1, [sp, #24]
 8012436:	ee10 aa10 	vmov	sl, s0
 801243a:	4604      	mov	r4, r0
 801243c:	9209      	str	r2, [sp, #36]	; 0x24
 801243e:	930c      	str	r3, [sp, #48]	; 0x30
 8012440:	46bb      	mov	fp, r7
 8012442:	b975      	cbnz	r5, 8012462 <_dtoa_r+0x42>
 8012444:	2010      	movs	r0, #16
 8012446:	f000 ff17 	bl	8013278 <malloc>
 801244a:	4602      	mov	r2, r0
 801244c:	6260      	str	r0, [r4, #36]	; 0x24
 801244e:	b920      	cbnz	r0, 801245a <_dtoa_r+0x3a>
 8012450:	4ba7      	ldr	r3, [pc, #668]	; (80126f0 <_dtoa_r+0x2d0>)
 8012452:	21ea      	movs	r1, #234	; 0xea
 8012454:	48a7      	ldr	r0, [pc, #668]	; (80126f4 <_dtoa_r+0x2d4>)
 8012456:	f7fe fc91 	bl	8010d7c <__assert_func>
 801245a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801245e:	6005      	str	r5, [r0, #0]
 8012460:	60c5      	str	r5, [r0, #12]
 8012462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012464:	6819      	ldr	r1, [r3, #0]
 8012466:	b151      	cbz	r1, 801247e <_dtoa_r+0x5e>
 8012468:	685a      	ldr	r2, [r3, #4]
 801246a:	604a      	str	r2, [r1, #4]
 801246c:	2301      	movs	r3, #1
 801246e:	4093      	lsls	r3, r2
 8012470:	608b      	str	r3, [r1, #8]
 8012472:	4620      	mov	r0, r4
 8012474:	f000 ff54 	bl	8013320 <_Bfree>
 8012478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801247a:	2200      	movs	r2, #0
 801247c:	601a      	str	r2, [r3, #0]
 801247e:	1e3b      	subs	r3, r7, #0
 8012480:	bfaa      	itet	ge
 8012482:	2300      	movge	r3, #0
 8012484:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012488:	f8c8 3000 	strge.w	r3, [r8]
 801248c:	4b9a      	ldr	r3, [pc, #616]	; (80126f8 <_dtoa_r+0x2d8>)
 801248e:	bfbc      	itt	lt
 8012490:	2201      	movlt	r2, #1
 8012492:	f8c8 2000 	strlt.w	r2, [r8]
 8012496:	ea33 030b 	bics.w	r3, r3, fp
 801249a:	d11b      	bne.n	80124d4 <_dtoa_r+0xb4>
 801249c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801249e:	f242 730f 	movw	r3, #9999	; 0x270f
 80124a2:	6013      	str	r3, [r2, #0]
 80124a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124a8:	4333      	orrs	r3, r6
 80124aa:	f000 8592 	beq.w	8012fd2 <_dtoa_r+0xbb2>
 80124ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124b0:	b963      	cbnz	r3, 80124cc <_dtoa_r+0xac>
 80124b2:	4b92      	ldr	r3, [pc, #584]	; (80126fc <_dtoa_r+0x2dc>)
 80124b4:	e022      	b.n	80124fc <_dtoa_r+0xdc>
 80124b6:	4b92      	ldr	r3, [pc, #584]	; (8012700 <_dtoa_r+0x2e0>)
 80124b8:	9301      	str	r3, [sp, #4]
 80124ba:	3308      	adds	r3, #8
 80124bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124be:	6013      	str	r3, [r2, #0]
 80124c0:	9801      	ldr	r0, [sp, #4]
 80124c2:	b013      	add	sp, #76	; 0x4c
 80124c4:	ecbd 8b04 	vpop	{d8-d9}
 80124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124cc:	4b8b      	ldr	r3, [pc, #556]	; (80126fc <_dtoa_r+0x2dc>)
 80124ce:	9301      	str	r3, [sp, #4]
 80124d0:	3303      	adds	r3, #3
 80124d2:	e7f3      	b.n	80124bc <_dtoa_r+0x9c>
 80124d4:	2200      	movs	r2, #0
 80124d6:	2300      	movs	r3, #0
 80124d8:	4650      	mov	r0, sl
 80124da:	4659      	mov	r1, fp
 80124dc:	f7ee faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80124e0:	ec4b ab19 	vmov	d9, sl, fp
 80124e4:	4680      	mov	r8, r0
 80124e6:	b158      	cbz	r0, 8012500 <_dtoa_r+0xe0>
 80124e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124ea:	2301      	movs	r3, #1
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f000 856b 	beq.w	8012fcc <_dtoa_r+0xbac>
 80124f6:	4883      	ldr	r0, [pc, #524]	; (8012704 <_dtoa_r+0x2e4>)
 80124f8:	6018      	str	r0, [r3, #0]
 80124fa:	1e43      	subs	r3, r0, #1
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	e7df      	b.n	80124c0 <_dtoa_r+0xa0>
 8012500:	ec4b ab10 	vmov	d0, sl, fp
 8012504:	aa10      	add	r2, sp, #64	; 0x40
 8012506:	a911      	add	r1, sp, #68	; 0x44
 8012508:	4620      	mov	r0, r4
 801250a:	f001 f9f1 	bl	80138f0 <__d2b>
 801250e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012512:	ee08 0a10 	vmov	s16, r0
 8012516:	2d00      	cmp	r5, #0
 8012518:	f000 8084 	beq.w	8012624 <_dtoa_r+0x204>
 801251c:	ee19 3a90 	vmov	r3, s19
 8012520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012524:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012528:	4656      	mov	r6, sl
 801252a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801252e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012532:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012536:	4b74      	ldr	r3, [pc, #464]	; (8012708 <_dtoa_r+0x2e8>)
 8012538:	2200      	movs	r2, #0
 801253a:	4630      	mov	r0, r6
 801253c:	4639      	mov	r1, r7
 801253e:	f7ed fea3 	bl	8000288 <__aeabi_dsub>
 8012542:	a365      	add	r3, pc, #404	; (adr r3, 80126d8 <_dtoa_r+0x2b8>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	f7ee f856 	bl	80005f8 <__aeabi_dmul>
 801254c:	a364      	add	r3, pc, #400	; (adr r3, 80126e0 <_dtoa_r+0x2c0>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f7ed fe9b 	bl	800028c <__adddf3>
 8012556:	4606      	mov	r6, r0
 8012558:	4628      	mov	r0, r5
 801255a:	460f      	mov	r7, r1
 801255c:	f7ed ffe2 	bl	8000524 <__aeabi_i2d>
 8012560:	a361      	add	r3, pc, #388	; (adr r3, 80126e8 <_dtoa_r+0x2c8>)
 8012562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012566:	f7ee f847 	bl	80005f8 <__aeabi_dmul>
 801256a:	4602      	mov	r2, r0
 801256c:	460b      	mov	r3, r1
 801256e:	4630      	mov	r0, r6
 8012570:	4639      	mov	r1, r7
 8012572:	f7ed fe8b 	bl	800028c <__adddf3>
 8012576:	4606      	mov	r6, r0
 8012578:	460f      	mov	r7, r1
 801257a:	f7ee faed 	bl	8000b58 <__aeabi_d2iz>
 801257e:	2200      	movs	r2, #0
 8012580:	9000      	str	r0, [sp, #0]
 8012582:	2300      	movs	r3, #0
 8012584:	4630      	mov	r0, r6
 8012586:	4639      	mov	r1, r7
 8012588:	f7ee faa8 	bl	8000adc <__aeabi_dcmplt>
 801258c:	b150      	cbz	r0, 80125a4 <_dtoa_r+0x184>
 801258e:	9800      	ldr	r0, [sp, #0]
 8012590:	f7ed ffc8 	bl	8000524 <__aeabi_i2d>
 8012594:	4632      	mov	r2, r6
 8012596:	463b      	mov	r3, r7
 8012598:	f7ee fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 801259c:	b910      	cbnz	r0, 80125a4 <_dtoa_r+0x184>
 801259e:	9b00      	ldr	r3, [sp, #0]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	9300      	str	r3, [sp, #0]
 80125a4:	9b00      	ldr	r3, [sp, #0]
 80125a6:	2b16      	cmp	r3, #22
 80125a8:	d85a      	bhi.n	8012660 <_dtoa_r+0x240>
 80125aa:	9a00      	ldr	r2, [sp, #0]
 80125ac:	4b57      	ldr	r3, [pc, #348]	; (801270c <_dtoa_r+0x2ec>)
 80125ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b6:	ec51 0b19 	vmov	r0, r1, d9
 80125ba:	f7ee fa8f 	bl	8000adc <__aeabi_dcmplt>
 80125be:	2800      	cmp	r0, #0
 80125c0:	d050      	beq.n	8012664 <_dtoa_r+0x244>
 80125c2:	9b00      	ldr	r3, [sp, #0]
 80125c4:	3b01      	subs	r3, #1
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	2300      	movs	r3, #0
 80125ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80125cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125ce:	1b5d      	subs	r5, r3, r5
 80125d0:	1e6b      	subs	r3, r5, #1
 80125d2:	9305      	str	r3, [sp, #20]
 80125d4:	bf45      	ittet	mi
 80125d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80125da:	9304      	strmi	r3, [sp, #16]
 80125dc:	2300      	movpl	r3, #0
 80125de:	2300      	movmi	r3, #0
 80125e0:	bf4c      	ite	mi
 80125e2:	9305      	strmi	r3, [sp, #20]
 80125e4:	9304      	strpl	r3, [sp, #16]
 80125e6:	9b00      	ldr	r3, [sp, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	db3d      	blt.n	8012668 <_dtoa_r+0x248>
 80125ec:	9b05      	ldr	r3, [sp, #20]
 80125ee:	9a00      	ldr	r2, [sp, #0]
 80125f0:	920a      	str	r2, [sp, #40]	; 0x28
 80125f2:	4413      	add	r3, r2
 80125f4:	9305      	str	r3, [sp, #20]
 80125f6:	2300      	movs	r3, #0
 80125f8:	9307      	str	r3, [sp, #28]
 80125fa:	9b06      	ldr	r3, [sp, #24]
 80125fc:	2b09      	cmp	r3, #9
 80125fe:	f200 8089 	bhi.w	8012714 <_dtoa_r+0x2f4>
 8012602:	2b05      	cmp	r3, #5
 8012604:	bfc4      	itt	gt
 8012606:	3b04      	subgt	r3, #4
 8012608:	9306      	strgt	r3, [sp, #24]
 801260a:	9b06      	ldr	r3, [sp, #24]
 801260c:	f1a3 0302 	sub.w	r3, r3, #2
 8012610:	bfcc      	ite	gt
 8012612:	2500      	movgt	r5, #0
 8012614:	2501      	movle	r5, #1
 8012616:	2b03      	cmp	r3, #3
 8012618:	f200 8087 	bhi.w	801272a <_dtoa_r+0x30a>
 801261c:	e8df f003 	tbb	[pc, r3]
 8012620:	59383a2d 	.word	0x59383a2d
 8012624:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012628:	441d      	add	r5, r3
 801262a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801262e:	2b20      	cmp	r3, #32
 8012630:	bfc1      	itttt	gt
 8012632:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012636:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801263a:	fa0b f303 	lslgt.w	r3, fp, r3
 801263e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012642:	bfda      	itte	le
 8012644:	f1c3 0320 	rsble	r3, r3, #32
 8012648:	fa06 f003 	lslle.w	r0, r6, r3
 801264c:	4318      	orrgt	r0, r3
 801264e:	f7ed ff59 	bl	8000504 <__aeabi_ui2d>
 8012652:	2301      	movs	r3, #1
 8012654:	4606      	mov	r6, r0
 8012656:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801265a:	3d01      	subs	r5, #1
 801265c:	930e      	str	r3, [sp, #56]	; 0x38
 801265e:	e76a      	b.n	8012536 <_dtoa_r+0x116>
 8012660:	2301      	movs	r3, #1
 8012662:	e7b2      	b.n	80125ca <_dtoa_r+0x1aa>
 8012664:	900b      	str	r0, [sp, #44]	; 0x2c
 8012666:	e7b1      	b.n	80125cc <_dtoa_r+0x1ac>
 8012668:	9b04      	ldr	r3, [sp, #16]
 801266a:	9a00      	ldr	r2, [sp, #0]
 801266c:	1a9b      	subs	r3, r3, r2
 801266e:	9304      	str	r3, [sp, #16]
 8012670:	4253      	negs	r3, r2
 8012672:	9307      	str	r3, [sp, #28]
 8012674:	2300      	movs	r3, #0
 8012676:	930a      	str	r3, [sp, #40]	; 0x28
 8012678:	e7bf      	b.n	80125fa <_dtoa_r+0x1da>
 801267a:	2300      	movs	r3, #0
 801267c:	9308      	str	r3, [sp, #32]
 801267e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012680:	2b00      	cmp	r3, #0
 8012682:	dc55      	bgt.n	8012730 <_dtoa_r+0x310>
 8012684:	2301      	movs	r3, #1
 8012686:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801268a:	461a      	mov	r2, r3
 801268c:	9209      	str	r2, [sp, #36]	; 0x24
 801268e:	e00c      	b.n	80126aa <_dtoa_r+0x28a>
 8012690:	2301      	movs	r3, #1
 8012692:	e7f3      	b.n	801267c <_dtoa_r+0x25c>
 8012694:	2300      	movs	r3, #0
 8012696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012698:	9308      	str	r3, [sp, #32]
 801269a:	9b00      	ldr	r3, [sp, #0]
 801269c:	4413      	add	r3, r2
 801269e:	9302      	str	r3, [sp, #8]
 80126a0:	3301      	adds	r3, #1
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	9303      	str	r3, [sp, #12]
 80126a6:	bfb8      	it	lt
 80126a8:	2301      	movlt	r3, #1
 80126aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80126ac:	2200      	movs	r2, #0
 80126ae:	6042      	str	r2, [r0, #4]
 80126b0:	2204      	movs	r2, #4
 80126b2:	f102 0614 	add.w	r6, r2, #20
 80126b6:	429e      	cmp	r6, r3
 80126b8:	6841      	ldr	r1, [r0, #4]
 80126ba:	d93d      	bls.n	8012738 <_dtoa_r+0x318>
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 fdef 	bl	80132a0 <_Balloc>
 80126c2:	9001      	str	r0, [sp, #4]
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d13b      	bne.n	8012740 <_dtoa_r+0x320>
 80126c8:	4b11      	ldr	r3, [pc, #68]	; (8012710 <_dtoa_r+0x2f0>)
 80126ca:	4602      	mov	r2, r0
 80126cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80126d0:	e6c0      	b.n	8012454 <_dtoa_r+0x34>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e7df      	b.n	8012696 <_dtoa_r+0x276>
 80126d6:	bf00      	nop
 80126d8:	636f4361 	.word	0x636f4361
 80126dc:	3fd287a7 	.word	0x3fd287a7
 80126e0:	8b60c8b3 	.word	0x8b60c8b3
 80126e4:	3fc68a28 	.word	0x3fc68a28
 80126e8:	509f79fb 	.word	0x509f79fb
 80126ec:	3fd34413 	.word	0x3fd34413
 80126f0:	080156e1 	.word	0x080156e1
 80126f4:	08015762 	.word	0x08015762
 80126f8:	7ff00000 	.word	0x7ff00000
 80126fc:	0801575e 	.word	0x0801575e
 8012700:	08015755 	.word	0x08015755
 8012704:	080156be 	.word	0x080156be
 8012708:	3ff80000 	.word	0x3ff80000
 801270c:	08015858 	.word	0x08015858
 8012710:	080157bd 	.word	0x080157bd
 8012714:	2501      	movs	r5, #1
 8012716:	2300      	movs	r3, #0
 8012718:	9306      	str	r3, [sp, #24]
 801271a:	9508      	str	r5, [sp, #32]
 801271c:	f04f 33ff 	mov.w	r3, #4294967295
 8012720:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012724:	2200      	movs	r2, #0
 8012726:	2312      	movs	r3, #18
 8012728:	e7b0      	b.n	801268c <_dtoa_r+0x26c>
 801272a:	2301      	movs	r3, #1
 801272c:	9308      	str	r3, [sp, #32]
 801272e:	e7f5      	b.n	801271c <_dtoa_r+0x2fc>
 8012730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012732:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012736:	e7b8      	b.n	80126aa <_dtoa_r+0x28a>
 8012738:	3101      	adds	r1, #1
 801273a:	6041      	str	r1, [r0, #4]
 801273c:	0052      	lsls	r2, r2, #1
 801273e:	e7b8      	b.n	80126b2 <_dtoa_r+0x292>
 8012740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	9b03      	ldr	r3, [sp, #12]
 8012748:	2b0e      	cmp	r3, #14
 801274a:	f200 809d 	bhi.w	8012888 <_dtoa_r+0x468>
 801274e:	2d00      	cmp	r5, #0
 8012750:	f000 809a 	beq.w	8012888 <_dtoa_r+0x468>
 8012754:	9b00      	ldr	r3, [sp, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	dd32      	ble.n	80127c0 <_dtoa_r+0x3a0>
 801275a:	4ab7      	ldr	r2, [pc, #732]	; (8012a38 <_dtoa_r+0x618>)
 801275c:	f003 030f 	and.w	r3, r3, #15
 8012760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012768:	9b00      	ldr	r3, [sp, #0]
 801276a:	05d8      	lsls	r0, r3, #23
 801276c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012770:	d516      	bpl.n	80127a0 <_dtoa_r+0x380>
 8012772:	4bb2      	ldr	r3, [pc, #712]	; (8012a3c <_dtoa_r+0x61c>)
 8012774:	ec51 0b19 	vmov	r0, r1, d9
 8012778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801277c:	f7ee f866 	bl	800084c <__aeabi_ddiv>
 8012780:	f007 070f 	and.w	r7, r7, #15
 8012784:	4682      	mov	sl, r0
 8012786:	468b      	mov	fp, r1
 8012788:	2503      	movs	r5, #3
 801278a:	4eac      	ldr	r6, [pc, #688]	; (8012a3c <_dtoa_r+0x61c>)
 801278c:	b957      	cbnz	r7, 80127a4 <_dtoa_r+0x384>
 801278e:	4642      	mov	r2, r8
 8012790:	464b      	mov	r3, r9
 8012792:	4650      	mov	r0, sl
 8012794:	4659      	mov	r1, fp
 8012796:	f7ee f859 	bl	800084c <__aeabi_ddiv>
 801279a:	4682      	mov	sl, r0
 801279c:	468b      	mov	fp, r1
 801279e:	e028      	b.n	80127f2 <_dtoa_r+0x3d2>
 80127a0:	2502      	movs	r5, #2
 80127a2:	e7f2      	b.n	801278a <_dtoa_r+0x36a>
 80127a4:	07f9      	lsls	r1, r7, #31
 80127a6:	d508      	bpl.n	80127ba <_dtoa_r+0x39a>
 80127a8:	4640      	mov	r0, r8
 80127aa:	4649      	mov	r1, r9
 80127ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80127b0:	f7ed ff22 	bl	80005f8 <__aeabi_dmul>
 80127b4:	3501      	adds	r5, #1
 80127b6:	4680      	mov	r8, r0
 80127b8:	4689      	mov	r9, r1
 80127ba:	107f      	asrs	r7, r7, #1
 80127bc:	3608      	adds	r6, #8
 80127be:	e7e5      	b.n	801278c <_dtoa_r+0x36c>
 80127c0:	f000 809b 	beq.w	80128fa <_dtoa_r+0x4da>
 80127c4:	9b00      	ldr	r3, [sp, #0]
 80127c6:	4f9d      	ldr	r7, [pc, #628]	; (8012a3c <_dtoa_r+0x61c>)
 80127c8:	425e      	negs	r6, r3
 80127ca:	4b9b      	ldr	r3, [pc, #620]	; (8012a38 <_dtoa_r+0x618>)
 80127cc:	f006 020f 	and.w	r2, r6, #15
 80127d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d8:	ec51 0b19 	vmov	r0, r1, d9
 80127dc:	f7ed ff0c 	bl	80005f8 <__aeabi_dmul>
 80127e0:	1136      	asrs	r6, r6, #4
 80127e2:	4682      	mov	sl, r0
 80127e4:	468b      	mov	fp, r1
 80127e6:	2300      	movs	r3, #0
 80127e8:	2502      	movs	r5, #2
 80127ea:	2e00      	cmp	r6, #0
 80127ec:	d17a      	bne.n	80128e4 <_dtoa_r+0x4c4>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d1d3      	bne.n	801279a <_dtoa_r+0x37a>
 80127f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f000 8082 	beq.w	80128fe <_dtoa_r+0x4de>
 80127fa:	4b91      	ldr	r3, [pc, #580]	; (8012a40 <_dtoa_r+0x620>)
 80127fc:	2200      	movs	r2, #0
 80127fe:	4650      	mov	r0, sl
 8012800:	4659      	mov	r1, fp
 8012802:	f7ee f96b 	bl	8000adc <__aeabi_dcmplt>
 8012806:	2800      	cmp	r0, #0
 8012808:	d079      	beq.n	80128fe <_dtoa_r+0x4de>
 801280a:	9b03      	ldr	r3, [sp, #12]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d076      	beq.n	80128fe <_dtoa_r+0x4de>
 8012810:	9b02      	ldr	r3, [sp, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	dd36      	ble.n	8012884 <_dtoa_r+0x464>
 8012816:	9b00      	ldr	r3, [sp, #0]
 8012818:	4650      	mov	r0, sl
 801281a:	4659      	mov	r1, fp
 801281c:	1e5f      	subs	r7, r3, #1
 801281e:	2200      	movs	r2, #0
 8012820:	4b88      	ldr	r3, [pc, #544]	; (8012a44 <_dtoa_r+0x624>)
 8012822:	f7ed fee9 	bl	80005f8 <__aeabi_dmul>
 8012826:	9e02      	ldr	r6, [sp, #8]
 8012828:	4682      	mov	sl, r0
 801282a:	468b      	mov	fp, r1
 801282c:	3501      	adds	r5, #1
 801282e:	4628      	mov	r0, r5
 8012830:	f7ed fe78 	bl	8000524 <__aeabi_i2d>
 8012834:	4652      	mov	r2, sl
 8012836:	465b      	mov	r3, fp
 8012838:	f7ed fede 	bl	80005f8 <__aeabi_dmul>
 801283c:	4b82      	ldr	r3, [pc, #520]	; (8012a48 <_dtoa_r+0x628>)
 801283e:	2200      	movs	r2, #0
 8012840:	f7ed fd24 	bl	800028c <__adddf3>
 8012844:	46d0      	mov	r8, sl
 8012846:	46d9      	mov	r9, fp
 8012848:	4682      	mov	sl, r0
 801284a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801284e:	2e00      	cmp	r6, #0
 8012850:	d158      	bne.n	8012904 <_dtoa_r+0x4e4>
 8012852:	4b7e      	ldr	r3, [pc, #504]	; (8012a4c <_dtoa_r+0x62c>)
 8012854:	2200      	movs	r2, #0
 8012856:	4640      	mov	r0, r8
 8012858:	4649      	mov	r1, r9
 801285a:	f7ed fd15 	bl	8000288 <__aeabi_dsub>
 801285e:	4652      	mov	r2, sl
 8012860:	465b      	mov	r3, fp
 8012862:	4680      	mov	r8, r0
 8012864:	4689      	mov	r9, r1
 8012866:	f7ee f957 	bl	8000b18 <__aeabi_dcmpgt>
 801286a:	2800      	cmp	r0, #0
 801286c:	f040 8295 	bne.w	8012d9a <_dtoa_r+0x97a>
 8012870:	4652      	mov	r2, sl
 8012872:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012876:	4640      	mov	r0, r8
 8012878:	4649      	mov	r1, r9
 801287a:	f7ee f92f 	bl	8000adc <__aeabi_dcmplt>
 801287e:	2800      	cmp	r0, #0
 8012880:	f040 8289 	bne.w	8012d96 <_dtoa_r+0x976>
 8012884:	ec5b ab19 	vmov	sl, fp, d9
 8012888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801288a:	2b00      	cmp	r3, #0
 801288c:	f2c0 8148 	blt.w	8012b20 <_dtoa_r+0x700>
 8012890:	9a00      	ldr	r2, [sp, #0]
 8012892:	2a0e      	cmp	r2, #14
 8012894:	f300 8144 	bgt.w	8012b20 <_dtoa_r+0x700>
 8012898:	4b67      	ldr	r3, [pc, #412]	; (8012a38 <_dtoa_r+0x618>)
 801289a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801289e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80128a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f280 80d5 	bge.w	8012a54 <_dtoa_r+0x634>
 80128aa:	9b03      	ldr	r3, [sp, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f300 80d1 	bgt.w	8012a54 <_dtoa_r+0x634>
 80128b2:	f040 826f 	bne.w	8012d94 <_dtoa_r+0x974>
 80128b6:	4b65      	ldr	r3, [pc, #404]	; (8012a4c <_dtoa_r+0x62c>)
 80128b8:	2200      	movs	r2, #0
 80128ba:	4640      	mov	r0, r8
 80128bc:	4649      	mov	r1, r9
 80128be:	f7ed fe9b 	bl	80005f8 <__aeabi_dmul>
 80128c2:	4652      	mov	r2, sl
 80128c4:	465b      	mov	r3, fp
 80128c6:	f7ee f91d 	bl	8000b04 <__aeabi_dcmpge>
 80128ca:	9e03      	ldr	r6, [sp, #12]
 80128cc:	4637      	mov	r7, r6
 80128ce:	2800      	cmp	r0, #0
 80128d0:	f040 8245 	bne.w	8012d5e <_dtoa_r+0x93e>
 80128d4:	9d01      	ldr	r5, [sp, #4]
 80128d6:	2331      	movs	r3, #49	; 0x31
 80128d8:	f805 3b01 	strb.w	r3, [r5], #1
 80128dc:	9b00      	ldr	r3, [sp, #0]
 80128de:	3301      	adds	r3, #1
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	e240      	b.n	8012d66 <_dtoa_r+0x946>
 80128e4:	07f2      	lsls	r2, r6, #31
 80128e6:	d505      	bpl.n	80128f4 <_dtoa_r+0x4d4>
 80128e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128ec:	f7ed fe84 	bl	80005f8 <__aeabi_dmul>
 80128f0:	3501      	adds	r5, #1
 80128f2:	2301      	movs	r3, #1
 80128f4:	1076      	asrs	r6, r6, #1
 80128f6:	3708      	adds	r7, #8
 80128f8:	e777      	b.n	80127ea <_dtoa_r+0x3ca>
 80128fa:	2502      	movs	r5, #2
 80128fc:	e779      	b.n	80127f2 <_dtoa_r+0x3d2>
 80128fe:	9f00      	ldr	r7, [sp, #0]
 8012900:	9e03      	ldr	r6, [sp, #12]
 8012902:	e794      	b.n	801282e <_dtoa_r+0x40e>
 8012904:	9901      	ldr	r1, [sp, #4]
 8012906:	4b4c      	ldr	r3, [pc, #304]	; (8012a38 <_dtoa_r+0x618>)
 8012908:	4431      	add	r1, r6
 801290a:	910d      	str	r1, [sp, #52]	; 0x34
 801290c:	9908      	ldr	r1, [sp, #32]
 801290e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012916:	2900      	cmp	r1, #0
 8012918:	d043      	beq.n	80129a2 <_dtoa_r+0x582>
 801291a:	494d      	ldr	r1, [pc, #308]	; (8012a50 <_dtoa_r+0x630>)
 801291c:	2000      	movs	r0, #0
 801291e:	f7ed ff95 	bl	800084c <__aeabi_ddiv>
 8012922:	4652      	mov	r2, sl
 8012924:	465b      	mov	r3, fp
 8012926:	f7ed fcaf 	bl	8000288 <__aeabi_dsub>
 801292a:	9d01      	ldr	r5, [sp, #4]
 801292c:	4682      	mov	sl, r0
 801292e:	468b      	mov	fp, r1
 8012930:	4649      	mov	r1, r9
 8012932:	4640      	mov	r0, r8
 8012934:	f7ee f910 	bl	8000b58 <__aeabi_d2iz>
 8012938:	4606      	mov	r6, r0
 801293a:	f7ed fdf3 	bl	8000524 <__aeabi_i2d>
 801293e:	4602      	mov	r2, r0
 8012940:	460b      	mov	r3, r1
 8012942:	4640      	mov	r0, r8
 8012944:	4649      	mov	r1, r9
 8012946:	f7ed fc9f 	bl	8000288 <__aeabi_dsub>
 801294a:	3630      	adds	r6, #48	; 0x30
 801294c:	f805 6b01 	strb.w	r6, [r5], #1
 8012950:	4652      	mov	r2, sl
 8012952:	465b      	mov	r3, fp
 8012954:	4680      	mov	r8, r0
 8012956:	4689      	mov	r9, r1
 8012958:	f7ee f8c0 	bl	8000adc <__aeabi_dcmplt>
 801295c:	2800      	cmp	r0, #0
 801295e:	d163      	bne.n	8012a28 <_dtoa_r+0x608>
 8012960:	4642      	mov	r2, r8
 8012962:	464b      	mov	r3, r9
 8012964:	4936      	ldr	r1, [pc, #216]	; (8012a40 <_dtoa_r+0x620>)
 8012966:	2000      	movs	r0, #0
 8012968:	f7ed fc8e 	bl	8000288 <__aeabi_dsub>
 801296c:	4652      	mov	r2, sl
 801296e:	465b      	mov	r3, fp
 8012970:	f7ee f8b4 	bl	8000adc <__aeabi_dcmplt>
 8012974:	2800      	cmp	r0, #0
 8012976:	f040 80b5 	bne.w	8012ae4 <_dtoa_r+0x6c4>
 801297a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801297c:	429d      	cmp	r5, r3
 801297e:	d081      	beq.n	8012884 <_dtoa_r+0x464>
 8012980:	4b30      	ldr	r3, [pc, #192]	; (8012a44 <_dtoa_r+0x624>)
 8012982:	2200      	movs	r2, #0
 8012984:	4650      	mov	r0, sl
 8012986:	4659      	mov	r1, fp
 8012988:	f7ed fe36 	bl	80005f8 <__aeabi_dmul>
 801298c:	4b2d      	ldr	r3, [pc, #180]	; (8012a44 <_dtoa_r+0x624>)
 801298e:	4682      	mov	sl, r0
 8012990:	468b      	mov	fp, r1
 8012992:	4640      	mov	r0, r8
 8012994:	4649      	mov	r1, r9
 8012996:	2200      	movs	r2, #0
 8012998:	f7ed fe2e 	bl	80005f8 <__aeabi_dmul>
 801299c:	4680      	mov	r8, r0
 801299e:	4689      	mov	r9, r1
 80129a0:	e7c6      	b.n	8012930 <_dtoa_r+0x510>
 80129a2:	4650      	mov	r0, sl
 80129a4:	4659      	mov	r1, fp
 80129a6:	f7ed fe27 	bl	80005f8 <__aeabi_dmul>
 80129aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129ac:	9d01      	ldr	r5, [sp, #4]
 80129ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80129b0:	4682      	mov	sl, r0
 80129b2:	468b      	mov	fp, r1
 80129b4:	4649      	mov	r1, r9
 80129b6:	4640      	mov	r0, r8
 80129b8:	f7ee f8ce 	bl	8000b58 <__aeabi_d2iz>
 80129bc:	4606      	mov	r6, r0
 80129be:	f7ed fdb1 	bl	8000524 <__aeabi_i2d>
 80129c2:	3630      	adds	r6, #48	; 0x30
 80129c4:	4602      	mov	r2, r0
 80129c6:	460b      	mov	r3, r1
 80129c8:	4640      	mov	r0, r8
 80129ca:	4649      	mov	r1, r9
 80129cc:	f7ed fc5c 	bl	8000288 <__aeabi_dsub>
 80129d0:	f805 6b01 	strb.w	r6, [r5], #1
 80129d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129d6:	429d      	cmp	r5, r3
 80129d8:	4680      	mov	r8, r0
 80129da:	4689      	mov	r9, r1
 80129dc:	f04f 0200 	mov.w	r2, #0
 80129e0:	d124      	bne.n	8012a2c <_dtoa_r+0x60c>
 80129e2:	4b1b      	ldr	r3, [pc, #108]	; (8012a50 <_dtoa_r+0x630>)
 80129e4:	4650      	mov	r0, sl
 80129e6:	4659      	mov	r1, fp
 80129e8:	f7ed fc50 	bl	800028c <__adddf3>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4640      	mov	r0, r8
 80129f2:	4649      	mov	r1, r9
 80129f4:	f7ee f890 	bl	8000b18 <__aeabi_dcmpgt>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d173      	bne.n	8012ae4 <_dtoa_r+0x6c4>
 80129fc:	4652      	mov	r2, sl
 80129fe:	465b      	mov	r3, fp
 8012a00:	4913      	ldr	r1, [pc, #76]	; (8012a50 <_dtoa_r+0x630>)
 8012a02:	2000      	movs	r0, #0
 8012a04:	f7ed fc40 	bl	8000288 <__aeabi_dsub>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4649      	mov	r1, r9
 8012a10:	f7ee f864 	bl	8000adc <__aeabi_dcmplt>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f43f af35 	beq.w	8012884 <_dtoa_r+0x464>
 8012a1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a1c:	1e6b      	subs	r3, r5, #1
 8012a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a24:	2b30      	cmp	r3, #48	; 0x30
 8012a26:	d0f8      	beq.n	8012a1a <_dtoa_r+0x5fa>
 8012a28:	9700      	str	r7, [sp, #0]
 8012a2a:	e049      	b.n	8012ac0 <_dtoa_r+0x6a0>
 8012a2c:	4b05      	ldr	r3, [pc, #20]	; (8012a44 <_dtoa_r+0x624>)
 8012a2e:	f7ed fde3 	bl	80005f8 <__aeabi_dmul>
 8012a32:	4680      	mov	r8, r0
 8012a34:	4689      	mov	r9, r1
 8012a36:	e7bd      	b.n	80129b4 <_dtoa_r+0x594>
 8012a38:	08015858 	.word	0x08015858
 8012a3c:	08015830 	.word	0x08015830
 8012a40:	3ff00000 	.word	0x3ff00000
 8012a44:	40240000 	.word	0x40240000
 8012a48:	401c0000 	.word	0x401c0000
 8012a4c:	40140000 	.word	0x40140000
 8012a50:	3fe00000 	.word	0x3fe00000
 8012a54:	9d01      	ldr	r5, [sp, #4]
 8012a56:	4656      	mov	r6, sl
 8012a58:	465f      	mov	r7, fp
 8012a5a:	4642      	mov	r2, r8
 8012a5c:	464b      	mov	r3, r9
 8012a5e:	4630      	mov	r0, r6
 8012a60:	4639      	mov	r1, r7
 8012a62:	f7ed fef3 	bl	800084c <__aeabi_ddiv>
 8012a66:	f7ee f877 	bl	8000b58 <__aeabi_d2iz>
 8012a6a:	4682      	mov	sl, r0
 8012a6c:	f7ed fd5a 	bl	8000524 <__aeabi_i2d>
 8012a70:	4642      	mov	r2, r8
 8012a72:	464b      	mov	r3, r9
 8012a74:	f7ed fdc0 	bl	80005f8 <__aeabi_dmul>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	4639      	mov	r1, r7
 8012a80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012a84:	f7ed fc00 	bl	8000288 <__aeabi_dsub>
 8012a88:	f805 6b01 	strb.w	r6, [r5], #1
 8012a8c:	9e01      	ldr	r6, [sp, #4]
 8012a8e:	9f03      	ldr	r7, [sp, #12]
 8012a90:	1bae      	subs	r6, r5, r6
 8012a92:	42b7      	cmp	r7, r6
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	d135      	bne.n	8012b06 <_dtoa_r+0x6e6>
 8012a9a:	f7ed fbf7 	bl	800028c <__adddf3>
 8012a9e:	4642      	mov	r2, r8
 8012aa0:	464b      	mov	r3, r9
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	460f      	mov	r7, r1
 8012aa6:	f7ee f837 	bl	8000b18 <__aeabi_dcmpgt>
 8012aaa:	b9d0      	cbnz	r0, 8012ae2 <_dtoa_r+0x6c2>
 8012aac:	4642      	mov	r2, r8
 8012aae:	464b      	mov	r3, r9
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	4639      	mov	r1, r7
 8012ab4:	f7ee f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ab8:	b110      	cbz	r0, 8012ac0 <_dtoa_r+0x6a0>
 8012aba:	f01a 0f01 	tst.w	sl, #1
 8012abe:	d110      	bne.n	8012ae2 <_dtoa_r+0x6c2>
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	ee18 1a10 	vmov	r1, s16
 8012ac6:	f000 fc2b 	bl	8013320 <_Bfree>
 8012aca:	2300      	movs	r3, #0
 8012acc:	9800      	ldr	r0, [sp, #0]
 8012ace:	702b      	strb	r3, [r5, #0]
 8012ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ad2:	3001      	adds	r0, #1
 8012ad4:	6018      	str	r0, [r3, #0]
 8012ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f43f acf1 	beq.w	80124c0 <_dtoa_r+0xa0>
 8012ade:	601d      	str	r5, [r3, #0]
 8012ae0:	e4ee      	b.n	80124c0 <_dtoa_r+0xa0>
 8012ae2:	9f00      	ldr	r7, [sp, #0]
 8012ae4:	462b      	mov	r3, r5
 8012ae6:	461d      	mov	r5, r3
 8012ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aec:	2a39      	cmp	r2, #57	; 0x39
 8012aee:	d106      	bne.n	8012afe <_dtoa_r+0x6de>
 8012af0:	9a01      	ldr	r2, [sp, #4]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d1f7      	bne.n	8012ae6 <_dtoa_r+0x6c6>
 8012af6:	9901      	ldr	r1, [sp, #4]
 8012af8:	2230      	movs	r2, #48	; 0x30
 8012afa:	3701      	adds	r7, #1
 8012afc:	700a      	strb	r2, [r1, #0]
 8012afe:	781a      	ldrb	r2, [r3, #0]
 8012b00:	3201      	adds	r2, #1
 8012b02:	701a      	strb	r2, [r3, #0]
 8012b04:	e790      	b.n	8012a28 <_dtoa_r+0x608>
 8012b06:	4ba6      	ldr	r3, [pc, #664]	; (8012da0 <_dtoa_r+0x980>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f7ed fd75 	bl	80005f8 <__aeabi_dmul>
 8012b0e:	2200      	movs	r2, #0
 8012b10:	2300      	movs	r3, #0
 8012b12:	4606      	mov	r6, r0
 8012b14:	460f      	mov	r7, r1
 8012b16:	f7ed ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	d09d      	beq.n	8012a5a <_dtoa_r+0x63a>
 8012b1e:	e7cf      	b.n	8012ac0 <_dtoa_r+0x6a0>
 8012b20:	9a08      	ldr	r2, [sp, #32]
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	f000 80d7 	beq.w	8012cd6 <_dtoa_r+0x8b6>
 8012b28:	9a06      	ldr	r2, [sp, #24]
 8012b2a:	2a01      	cmp	r2, #1
 8012b2c:	f300 80ba 	bgt.w	8012ca4 <_dtoa_r+0x884>
 8012b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b32:	2a00      	cmp	r2, #0
 8012b34:	f000 80b2 	beq.w	8012c9c <_dtoa_r+0x87c>
 8012b38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b3c:	9e07      	ldr	r6, [sp, #28]
 8012b3e:	9d04      	ldr	r5, [sp, #16]
 8012b40:	9a04      	ldr	r2, [sp, #16]
 8012b42:	441a      	add	r2, r3
 8012b44:	9204      	str	r2, [sp, #16]
 8012b46:	9a05      	ldr	r2, [sp, #20]
 8012b48:	2101      	movs	r1, #1
 8012b4a:	441a      	add	r2, r3
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	9205      	str	r2, [sp, #20]
 8012b50:	f000 fc9e 	bl	8013490 <__i2b>
 8012b54:	4607      	mov	r7, r0
 8012b56:	2d00      	cmp	r5, #0
 8012b58:	dd0c      	ble.n	8012b74 <_dtoa_r+0x754>
 8012b5a:	9b05      	ldr	r3, [sp, #20]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dd09      	ble.n	8012b74 <_dtoa_r+0x754>
 8012b60:	42ab      	cmp	r3, r5
 8012b62:	9a04      	ldr	r2, [sp, #16]
 8012b64:	bfa8      	it	ge
 8012b66:	462b      	movge	r3, r5
 8012b68:	1ad2      	subs	r2, r2, r3
 8012b6a:	9204      	str	r2, [sp, #16]
 8012b6c:	9a05      	ldr	r2, [sp, #20]
 8012b6e:	1aed      	subs	r5, r5, r3
 8012b70:	1ad3      	subs	r3, r2, r3
 8012b72:	9305      	str	r3, [sp, #20]
 8012b74:	9b07      	ldr	r3, [sp, #28]
 8012b76:	b31b      	cbz	r3, 8012bc0 <_dtoa_r+0x7a0>
 8012b78:	9b08      	ldr	r3, [sp, #32]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	f000 80af 	beq.w	8012cde <_dtoa_r+0x8be>
 8012b80:	2e00      	cmp	r6, #0
 8012b82:	dd13      	ble.n	8012bac <_dtoa_r+0x78c>
 8012b84:	4639      	mov	r1, r7
 8012b86:	4632      	mov	r2, r6
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f000 fd41 	bl	8013610 <__pow5mult>
 8012b8e:	ee18 2a10 	vmov	r2, s16
 8012b92:	4601      	mov	r1, r0
 8012b94:	4607      	mov	r7, r0
 8012b96:	4620      	mov	r0, r4
 8012b98:	f000 fc90 	bl	80134bc <__multiply>
 8012b9c:	ee18 1a10 	vmov	r1, s16
 8012ba0:	4680      	mov	r8, r0
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f000 fbbc 	bl	8013320 <_Bfree>
 8012ba8:	ee08 8a10 	vmov	s16, r8
 8012bac:	9b07      	ldr	r3, [sp, #28]
 8012bae:	1b9a      	subs	r2, r3, r6
 8012bb0:	d006      	beq.n	8012bc0 <_dtoa_r+0x7a0>
 8012bb2:	ee18 1a10 	vmov	r1, s16
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f000 fd2a 	bl	8013610 <__pow5mult>
 8012bbc:	ee08 0a10 	vmov	s16, r0
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f000 fc64 	bl	8013490 <__i2b>
 8012bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	4606      	mov	r6, r0
 8012bce:	f340 8088 	ble.w	8012ce2 <_dtoa_r+0x8c2>
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	4601      	mov	r1, r0
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f000 fd1a 	bl	8013610 <__pow5mult>
 8012bdc:	9b06      	ldr	r3, [sp, #24]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	4606      	mov	r6, r0
 8012be2:	f340 8081 	ble.w	8012ce8 <_dtoa_r+0x8c8>
 8012be6:	f04f 0800 	mov.w	r8, #0
 8012bea:	6933      	ldr	r3, [r6, #16]
 8012bec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012bf0:	6918      	ldr	r0, [r3, #16]
 8012bf2:	f000 fbfd 	bl	80133f0 <__hi0bits>
 8012bf6:	f1c0 0020 	rsb	r0, r0, #32
 8012bfa:	9b05      	ldr	r3, [sp, #20]
 8012bfc:	4418      	add	r0, r3
 8012bfe:	f010 001f 	ands.w	r0, r0, #31
 8012c02:	f000 8092 	beq.w	8012d2a <_dtoa_r+0x90a>
 8012c06:	f1c0 0320 	rsb	r3, r0, #32
 8012c0a:	2b04      	cmp	r3, #4
 8012c0c:	f340 808a 	ble.w	8012d24 <_dtoa_r+0x904>
 8012c10:	f1c0 001c 	rsb	r0, r0, #28
 8012c14:	9b04      	ldr	r3, [sp, #16]
 8012c16:	4403      	add	r3, r0
 8012c18:	9304      	str	r3, [sp, #16]
 8012c1a:	9b05      	ldr	r3, [sp, #20]
 8012c1c:	4403      	add	r3, r0
 8012c1e:	4405      	add	r5, r0
 8012c20:	9305      	str	r3, [sp, #20]
 8012c22:	9b04      	ldr	r3, [sp, #16]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dd07      	ble.n	8012c38 <_dtoa_r+0x818>
 8012c28:	ee18 1a10 	vmov	r1, s16
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 fd48 	bl	80136c4 <__lshift>
 8012c34:	ee08 0a10 	vmov	s16, r0
 8012c38:	9b05      	ldr	r3, [sp, #20]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	dd05      	ble.n	8012c4a <_dtoa_r+0x82a>
 8012c3e:	4631      	mov	r1, r6
 8012c40:	461a      	mov	r2, r3
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 fd3e 	bl	80136c4 <__lshift>
 8012c48:	4606      	mov	r6, r0
 8012c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d06e      	beq.n	8012d2e <_dtoa_r+0x90e>
 8012c50:	ee18 0a10 	vmov	r0, s16
 8012c54:	4631      	mov	r1, r6
 8012c56:	f000 fda5 	bl	80137a4 <__mcmp>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	da67      	bge.n	8012d2e <_dtoa_r+0x90e>
 8012c5e:	9b00      	ldr	r3, [sp, #0]
 8012c60:	3b01      	subs	r3, #1
 8012c62:	ee18 1a10 	vmov	r1, s16
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	220a      	movs	r2, #10
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f000 fb79 	bl	8013364 <__multadd>
 8012c72:	9b08      	ldr	r3, [sp, #32]
 8012c74:	ee08 0a10 	vmov	s16, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 81b1 	beq.w	8012fe0 <_dtoa_r+0xbc0>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	4639      	mov	r1, r7
 8012c82:	220a      	movs	r2, #10
 8012c84:	4620      	mov	r0, r4
 8012c86:	f000 fb6d 	bl	8013364 <__multadd>
 8012c8a:	9b02      	ldr	r3, [sp, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	4607      	mov	r7, r0
 8012c90:	f300 808e 	bgt.w	8012db0 <_dtoa_r+0x990>
 8012c94:	9b06      	ldr	r3, [sp, #24]
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	dc51      	bgt.n	8012d3e <_dtoa_r+0x91e>
 8012c9a:	e089      	b.n	8012db0 <_dtoa_r+0x990>
 8012c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ca2:	e74b      	b.n	8012b3c <_dtoa_r+0x71c>
 8012ca4:	9b03      	ldr	r3, [sp, #12]
 8012ca6:	1e5e      	subs	r6, r3, #1
 8012ca8:	9b07      	ldr	r3, [sp, #28]
 8012caa:	42b3      	cmp	r3, r6
 8012cac:	bfbf      	itttt	lt
 8012cae:	9b07      	ldrlt	r3, [sp, #28]
 8012cb0:	9607      	strlt	r6, [sp, #28]
 8012cb2:	1af2      	sublt	r2, r6, r3
 8012cb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012cb6:	bfb6      	itet	lt
 8012cb8:	189b      	addlt	r3, r3, r2
 8012cba:	1b9e      	subge	r6, r3, r6
 8012cbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012cbe:	9b03      	ldr	r3, [sp, #12]
 8012cc0:	bfb8      	it	lt
 8012cc2:	2600      	movlt	r6, #0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bfb7      	itett	lt
 8012cc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012ccc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012cd0:	1a9d      	sublt	r5, r3, r2
 8012cd2:	2300      	movlt	r3, #0
 8012cd4:	e734      	b.n	8012b40 <_dtoa_r+0x720>
 8012cd6:	9e07      	ldr	r6, [sp, #28]
 8012cd8:	9d04      	ldr	r5, [sp, #16]
 8012cda:	9f08      	ldr	r7, [sp, #32]
 8012cdc:	e73b      	b.n	8012b56 <_dtoa_r+0x736>
 8012cde:	9a07      	ldr	r2, [sp, #28]
 8012ce0:	e767      	b.n	8012bb2 <_dtoa_r+0x792>
 8012ce2:	9b06      	ldr	r3, [sp, #24]
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	dc18      	bgt.n	8012d1a <_dtoa_r+0x8fa>
 8012ce8:	f1ba 0f00 	cmp.w	sl, #0
 8012cec:	d115      	bne.n	8012d1a <_dtoa_r+0x8fa>
 8012cee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cf2:	b993      	cbnz	r3, 8012d1a <_dtoa_r+0x8fa>
 8012cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cf8:	0d1b      	lsrs	r3, r3, #20
 8012cfa:	051b      	lsls	r3, r3, #20
 8012cfc:	b183      	cbz	r3, 8012d20 <_dtoa_r+0x900>
 8012cfe:	9b04      	ldr	r3, [sp, #16]
 8012d00:	3301      	adds	r3, #1
 8012d02:	9304      	str	r3, [sp, #16]
 8012d04:	9b05      	ldr	r3, [sp, #20]
 8012d06:	3301      	adds	r3, #1
 8012d08:	9305      	str	r3, [sp, #20]
 8012d0a:	f04f 0801 	mov.w	r8, #1
 8012d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f47f af6a 	bne.w	8012bea <_dtoa_r+0x7ca>
 8012d16:	2001      	movs	r0, #1
 8012d18:	e76f      	b.n	8012bfa <_dtoa_r+0x7da>
 8012d1a:	f04f 0800 	mov.w	r8, #0
 8012d1e:	e7f6      	b.n	8012d0e <_dtoa_r+0x8ee>
 8012d20:	4698      	mov	r8, r3
 8012d22:	e7f4      	b.n	8012d0e <_dtoa_r+0x8ee>
 8012d24:	f43f af7d 	beq.w	8012c22 <_dtoa_r+0x802>
 8012d28:	4618      	mov	r0, r3
 8012d2a:	301c      	adds	r0, #28
 8012d2c:	e772      	b.n	8012c14 <_dtoa_r+0x7f4>
 8012d2e:	9b03      	ldr	r3, [sp, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	dc37      	bgt.n	8012da4 <_dtoa_r+0x984>
 8012d34:	9b06      	ldr	r3, [sp, #24]
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	dd34      	ble.n	8012da4 <_dtoa_r+0x984>
 8012d3a:	9b03      	ldr	r3, [sp, #12]
 8012d3c:	9302      	str	r3, [sp, #8]
 8012d3e:	9b02      	ldr	r3, [sp, #8]
 8012d40:	b96b      	cbnz	r3, 8012d5e <_dtoa_r+0x93e>
 8012d42:	4631      	mov	r1, r6
 8012d44:	2205      	movs	r2, #5
 8012d46:	4620      	mov	r0, r4
 8012d48:	f000 fb0c 	bl	8013364 <__multadd>
 8012d4c:	4601      	mov	r1, r0
 8012d4e:	4606      	mov	r6, r0
 8012d50:	ee18 0a10 	vmov	r0, s16
 8012d54:	f000 fd26 	bl	80137a4 <__mcmp>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	f73f adbb 	bgt.w	80128d4 <_dtoa_r+0x4b4>
 8012d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d60:	9d01      	ldr	r5, [sp, #4]
 8012d62:	43db      	mvns	r3, r3
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	f04f 0800 	mov.w	r8, #0
 8012d6a:	4631      	mov	r1, r6
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f000 fad7 	bl	8013320 <_Bfree>
 8012d72:	2f00      	cmp	r7, #0
 8012d74:	f43f aea4 	beq.w	8012ac0 <_dtoa_r+0x6a0>
 8012d78:	f1b8 0f00 	cmp.w	r8, #0
 8012d7c:	d005      	beq.n	8012d8a <_dtoa_r+0x96a>
 8012d7e:	45b8      	cmp	r8, r7
 8012d80:	d003      	beq.n	8012d8a <_dtoa_r+0x96a>
 8012d82:	4641      	mov	r1, r8
 8012d84:	4620      	mov	r0, r4
 8012d86:	f000 facb 	bl	8013320 <_Bfree>
 8012d8a:	4639      	mov	r1, r7
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f000 fac7 	bl	8013320 <_Bfree>
 8012d92:	e695      	b.n	8012ac0 <_dtoa_r+0x6a0>
 8012d94:	2600      	movs	r6, #0
 8012d96:	4637      	mov	r7, r6
 8012d98:	e7e1      	b.n	8012d5e <_dtoa_r+0x93e>
 8012d9a:	9700      	str	r7, [sp, #0]
 8012d9c:	4637      	mov	r7, r6
 8012d9e:	e599      	b.n	80128d4 <_dtoa_r+0x4b4>
 8012da0:	40240000 	.word	0x40240000
 8012da4:	9b08      	ldr	r3, [sp, #32]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f000 80ca 	beq.w	8012f40 <_dtoa_r+0xb20>
 8012dac:	9b03      	ldr	r3, [sp, #12]
 8012dae:	9302      	str	r3, [sp, #8]
 8012db0:	2d00      	cmp	r5, #0
 8012db2:	dd05      	ble.n	8012dc0 <_dtoa_r+0x9a0>
 8012db4:	4639      	mov	r1, r7
 8012db6:	462a      	mov	r2, r5
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 fc83 	bl	80136c4 <__lshift>
 8012dbe:	4607      	mov	r7, r0
 8012dc0:	f1b8 0f00 	cmp.w	r8, #0
 8012dc4:	d05b      	beq.n	8012e7e <_dtoa_r+0xa5e>
 8012dc6:	6879      	ldr	r1, [r7, #4]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 fa69 	bl	80132a0 <_Balloc>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	b928      	cbnz	r0, 8012dde <_dtoa_r+0x9be>
 8012dd2:	4b87      	ldr	r3, [pc, #540]	; (8012ff0 <_dtoa_r+0xbd0>)
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012dda:	f7ff bb3b 	b.w	8012454 <_dtoa_r+0x34>
 8012dde:	693a      	ldr	r2, [r7, #16]
 8012de0:	3202      	adds	r2, #2
 8012de2:	0092      	lsls	r2, r2, #2
 8012de4:	f107 010c 	add.w	r1, r7, #12
 8012de8:	300c      	adds	r0, #12
 8012dea:	f7fe f92a 	bl	8011042 <memcpy>
 8012dee:	2201      	movs	r2, #1
 8012df0:	4629      	mov	r1, r5
 8012df2:	4620      	mov	r0, r4
 8012df4:	f000 fc66 	bl	80136c4 <__lshift>
 8012df8:	9b01      	ldr	r3, [sp, #4]
 8012dfa:	f103 0901 	add.w	r9, r3, #1
 8012dfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012e02:	4413      	add	r3, r2
 8012e04:	9305      	str	r3, [sp, #20]
 8012e06:	f00a 0301 	and.w	r3, sl, #1
 8012e0a:	46b8      	mov	r8, r7
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	4607      	mov	r7, r0
 8012e10:	4631      	mov	r1, r6
 8012e12:	ee18 0a10 	vmov	r0, s16
 8012e16:	f7ff fa77 	bl	8012308 <quorem>
 8012e1a:	4641      	mov	r1, r8
 8012e1c:	9002      	str	r0, [sp, #8]
 8012e1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012e22:	ee18 0a10 	vmov	r0, s16
 8012e26:	f000 fcbd 	bl	80137a4 <__mcmp>
 8012e2a:	463a      	mov	r2, r7
 8012e2c:	9003      	str	r0, [sp, #12]
 8012e2e:	4631      	mov	r1, r6
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 fcd3 	bl	80137dc <__mdiff>
 8012e36:	68c2      	ldr	r2, [r0, #12]
 8012e38:	f109 3bff 	add.w	fp, r9, #4294967295
 8012e3c:	4605      	mov	r5, r0
 8012e3e:	bb02      	cbnz	r2, 8012e82 <_dtoa_r+0xa62>
 8012e40:	4601      	mov	r1, r0
 8012e42:	ee18 0a10 	vmov	r0, s16
 8012e46:	f000 fcad 	bl	80137a4 <__mcmp>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	4620      	mov	r0, r4
 8012e50:	9207      	str	r2, [sp, #28]
 8012e52:	f000 fa65 	bl	8013320 <_Bfree>
 8012e56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012e5a:	ea43 0102 	orr.w	r1, r3, r2
 8012e5e:	9b04      	ldr	r3, [sp, #16]
 8012e60:	430b      	orrs	r3, r1
 8012e62:	464d      	mov	r5, r9
 8012e64:	d10f      	bne.n	8012e86 <_dtoa_r+0xa66>
 8012e66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012e6a:	d02a      	beq.n	8012ec2 <_dtoa_r+0xaa2>
 8012e6c:	9b03      	ldr	r3, [sp, #12]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	dd02      	ble.n	8012e78 <_dtoa_r+0xa58>
 8012e72:	9b02      	ldr	r3, [sp, #8]
 8012e74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012e78:	f88b a000 	strb.w	sl, [fp]
 8012e7c:	e775      	b.n	8012d6a <_dtoa_r+0x94a>
 8012e7e:	4638      	mov	r0, r7
 8012e80:	e7ba      	b.n	8012df8 <_dtoa_r+0x9d8>
 8012e82:	2201      	movs	r2, #1
 8012e84:	e7e2      	b.n	8012e4c <_dtoa_r+0xa2c>
 8012e86:	9b03      	ldr	r3, [sp, #12]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	db04      	blt.n	8012e96 <_dtoa_r+0xa76>
 8012e8c:	9906      	ldr	r1, [sp, #24]
 8012e8e:	430b      	orrs	r3, r1
 8012e90:	9904      	ldr	r1, [sp, #16]
 8012e92:	430b      	orrs	r3, r1
 8012e94:	d122      	bne.n	8012edc <_dtoa_r+0xabc>
 8012e96:	2a00      	cmp	r2, #0
 8012e98:	ddee      	ble.n	8012e78 <_dtoa_r+0xa58>
 8012e9a:	ee18 1a10 	vmov	r1, s16
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f000 fc0f 	bl	80136c4 <__lshift>
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	ee08 0a10 	vmov	s16, r0
 8012eac:	f000 fc7a 	bl	80137a4 <__mcmp>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	dc03      	bgt.n	8012ebc <_dtoa_r+0xa9c>
 8012eb4:	d1e0      	bne.n	8012e78 <_dtoa_r+0xa58>
 8012eb6:	f01a 0f01 	tst.w	sl, #1
 8012eba:	d0dd      	beq.n	8012e78 <_dtoa_r+0xa58>
 8012ebc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012ec0:	d1d7      	bne.n	8012e72 <_dtoa_r+0xa52>
 8012ec2:	2339      	movs	r3, #57	; 0x39
 8012ec4:	f88b 3000 	strb.w	r3, [fp]
 8012ec8:	462b      	mov	r3, r5
 8012eca:	461d      	mov	r5, r3
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ed2:	2a39      	cmp	r2, #57	; 0x39
 8012ed4:	d071      	beq.n	8012fba <_dtoa_r+0xb9a>
 8012ed6:	3201      	adds	r2, #1
 8012ed8:	701a      	strb	r2, [r3, #0]
 8012eda:	e746      	b.n	8012d6a <_dtoa_r+0x94a>
 8012edc:	2a00      	cmp	r2, #0
 8012ede:	dd07      	ble.n	8012ef0 <_dtoa_r+0xad0>
 8012ee0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012ee4:	d0ed      	beq.n	8012ec2 <_dtoa_r+0xaa2>
 8012ee6:	f10a 0301 	add.w	r3, sl, #1
 8012eea:	f88b 3000 	strb.w	r3, [fp]
 8012eee:	e73c      	b.n	8012d6a <_dtoa_r+0x94a>
 8012ef0:	9b05      	ldr	r3, [sp, #20]
 8012ef2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012ef6:	4599      	cmp	r9, r3
 8012ef8:	d047      	beq.n	8012f8a <_dtoa_r+0xb6a>
 8012efa:	ee18 1a10 	vmov	r1, s16
 8012efe:	2300      	movs	r3, #0
 8012f00:	220a      	movs	r2, #10
 8012f02:	4620      	mov	r0, r4
 8012f04:	f000 fa2e 	bl	8013364 <__multadd>
 8012f08:	45b8      	cmp	r8, r7
 8012f0a:	ee08 0a10 	vmov	s16, r0
 8012f0e:	f04f 0300 	mov.w	r3, #0
 8012f12:	f04f 020a 	mov.w	r2, #10
 8012f16:	4641      	mov	r1, r8
 8012f18:	4620      	mov	r0, r4
 8012f1a:	d106      	bne.n	8012f2a <_dtoa_r+0xb0a>
 8012f1c:	f000 fa22 	bl	8013364 <__multadd>
 8012f20:	4680      	mov	r8, r0
 8012f22:	4607      	mov	r7, r0
 8012f24:	f109 0901 	add.w	r9, r9, #1
 8012f28:	e772      	b.n	8012e10 <_dtoa_r+0x9f0>
 8012f2a:	f000 fa1b 	bl	8013364 <__multadd>
 8012f2e:	4639      	mov	r1, r7
 8012f30:	4680      	mov	r8, r0
 8012f32:	2300      	movs	r3, #0
 8012f34:	220a      	movs	r2, #10
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 fa14 	bl	8013364 <__multadd>
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	e7f1      	b.n	8012f24 <_dtoa_r+0xb04>
 8012f40:	9b03      	ldr	r3, [sp, #12]
 8012f42:	9302      	str	r3, [sp, #8]
 8012f44:	9d01      	ldr	r5, [sp, #4]
 8012f46:	ee18 0a10 	vmov	r0, s16
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	f7ff f9dc 	bl	8012308 <quorem>
 8012f50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012f54:	9b01      	ldr	r3, [sp, #4]
 8012f56:	f805 ab01 	strb.w	sl, [r5], #1
 8012f5a:	1aea      	subs	r2, r5, r3
 8012f5c:	9b02      	ldr	r3, [sp, #8]
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	dd09      	ble.n	8012f76 <_dtoa_r+0xb56>
 8012f62:	ee18 1a10 	vmov	r1, s16
 8012f66:	2300      	movs	r3, #0
 8012f68:	220a      	movs	r2, #10
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 f9fa 	bl	8013364 <__multadd>
 8012f70:	ee08 0a10 	vmov	s16, r0
 8012f74:	e7e7      	b.n	8012f46 <_dtoa_r+0xb26>
 8012f76:	9b02      	ldr	r3, [sp, #8]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	bfc8      	it	gt
 8012f7c:	461d      	movgt	r5, r3
 8012f7e:	9b01      	ldr	r3, [sp, #4]
 8012f80:	bfd8      	it	le
 8012f82:	2501      	movle	r5, #1
 8012f84:	441d      	add	r5, r3
 8012f86:	f04f 0800 	mov.w	r8, #0
 8012f8a:	ee18 1a10 	vmov	r1, s16
 8012f8e:	2201      	movs	r2, #1
 8012f90:	4620      	mov	r0, r4
 8012f92:	f000 fb97 	bl	80136c4 <__lshift>
 8012f96:	4631      	mov	r1, r6
 8012f98:	ee08 0a10 	vmov	s16, r0
 8012f9c:	f000 fc02 	bl	80137a4 <__mcmp>
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	dc91      	bgt.n	8012ec8 <_dtoa_r+0xaa8>
 8012fa4:	d102      	bne.n	8012fac <_dtoa_r+0xb8c>
 8012fa6:	f01a 0f01 	tst.w	sl, #1
 8012faa:	d18d      	bne.n	8012ec8 <_dtoa_r+0xaa8>
 8012fac:	462b      	mov	r3, r5
 8012fae:	461d      	mov	r5, r3
 8012fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fb4:	2a30      	cmp	r2, #48	; 0x30
 8012fb6:	d0fa      	beq.n	8012fae <_dtoa_r+0xb8e>
 8012fb8:	e6d7      	b.n	8012d6a <_dtoa_r+0x94a>
 8012fba:	9a01      	ldr	r2, [sp, #4]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d184      	bne.n	8012eca <_dtoa_r+0xaaa>
 8012fc0:	9b00      	ldr	r3, [sp, #0]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	2331      	movs	r3, #49	; 0x31
 8012fc8:	7013      	strb	r3, [r2, #0]
 8012fca:	e6ce      	b.n	8012d6a <_dtoa_r+0x94a>
 8012fcc:	4b09      	ldr	r3, [pc, #36]	; (8012ff4 <_dtoa_r+0xbd4>)
 8012fce:	f7ff ba95 	b.w	80124fc <_dtoa_r+0xdc>
 8012fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f47f aa6e 	bne.w	80124b6 <_dtoa_r+0x96>
 8012fda:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <_dtoa_r+0xbd8>)
 8012fdc:	f7ff ba8e 	b.w	80124fc <_dtoa_r+0xdc>
 8012fe0:	9b02      	ldr	r3, [sp, #8]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	dcae      	bgt.n	8012f44 <_dtoa_r+0xb24>
 8012fe6:	9b06      	ldr	r3, [sp, #24]
 8012fe8:	2b02      	cmp	r3, #2
 8012fea:	f73f aea8 	bgt.w	8012d3e <_dtoa_r+0x91e>
 8012fee:	e7a9      	b.n	8012f44 <_dtoa_r+0xb24>
 8012ff0:	080157bd 	.word	0x080157bd
 8012ff4:	080156bd 	.word	0x080156bd
 8012ff8:	08015755 	.word	0x08015755

08012ffc <__sflush_r>:
 8012ffc:	898a      	ldrh	r2, [r1, #12]
 8012ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013002:	4605      	mov	r5, r0
 8013004:	0710      	lsls	r0, r2, #28
 8013006:	460c      	mov	r4, r1
 8013008:	d458      	bmi.n	80130bc <__sflush_r+0xc0>
 801300a:	684b      	ldr	r3, [r1, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	dc05      	bgt.n	801301c <__sflush_r+0x20>
 8013010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013012:	2b00      	cmp	r3, #0
 8013014:	dc02      	bgt.n	801301c <__sflush_r+0x20>
 8013016:	2000      	movs	r0, #0
 8013018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801301c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801301e:	2e00      	cmp	r6, #0
 8013020:	d0f9      	beq.n	8013016 <__sflush_r+0x1a>
 8013022:	2300      	movs	r3, #0
 8013024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013028:	682f      	ldr	r7, [r5, #0]
 801302a:	602b      	str	r3, [r5, #0]
 801302c:	d032      	beq.n	8013094 <__sflush_r+0x98>
 801302e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	075a      	lsls	r2, r3, #29
 8013034:	d505      	bpl.n	8013042 <__sflush_r+0x46>
 8013036:	6863      	ldr	r3, [r4, #4]
 8013038:	1ac0      	subs	r0, r0, r3
 801303a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801303c:	b10b      	cbz	r3, 8013042 <__sflush_r+0x46>
 801303e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013040:	1ac0      	subs	r0, r0, r3
 8013042:	2300      	movs	r3, #0
 8013044:	4602      	mov	r2, r0
 8013046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013048:	6a21      	ldr	r1, [r4, #32]
 801304a:	4628      	mov	r0, r5
 801304c:	47b0      	blx	r6
 801304e:	1c43      	adds	r3, r0, #1
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	d106      	bne.n	8013062 <__sflush_r+0x66>
 8013054:	6829      	ldr	r1, [r5, #0]
 8013056:	291d      	cmp	r1, #29
 8013058:	d82c      	bhi.n	80130b4 <__sflush_r+0xb8>
 801305a:	4a2a      	ldr	r2, [pc, #168]	; (8013104 <__sflush_r+0x108>)
 801305c:	40ca      	lsrs	r2, r1
 801305e:	07d6      	lsls	r6, r2, #31
 8013060:	d528      	bpl.n	80130b4 <__sflush_r+0xb8>
 8013062:	2200      	movs	r2, #0
 8013064:	6062      	str	r2, [r4, #4]
 8013066:	04d9      	lsls	r1, r3, #19
 8013068:	6922      	ldr	r2, [r4, #16]
 801306a:	6022      	str	r2, [r4, #0]
 801306c:	d504      	bpl.n	8013078 <__sflush_r+0x7c>
 801306e:	1c42      	adds	r2, r0, #1
 8013070:	d101      	bne.n	8013076 <__sflush_r+0x7a>
 8013072:	682b      	ldr	r3, [r5, #0]
 8013074:	b903      	cbnz	r3, 8013078 <__sflush_r+0x7c>
 8013076:	6560      	str	r0, [r4, #84]	; 0x54
 8013078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801307a:	602f      	str	r7, [r5, #0]
 801307c:	2900      	cmp	r1, #0
 801307e:	d0ca      	beq.n	8013016 <__sflush_r+0x1a>
 8013080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013084:	4299      	cmp	r1, r3
 8013086:	d002      	beq.n	801308e <__sflush_r+0x92>
 8013088:	4628      	mov	r0, r5
 801308a:	f000 fca3 	bl	80139d4 <_free_r>
 801308e:	2000      	movs	r0, #0
 8013090:	6360      	str	r0, [r4, #52]	; 0x34
 8013092:	e7c1      	b.n	8013018 <__sflush_r+0x1c>
 8013094:	6a21      	ldr	r1, [r4, #32]
 8013096:	2301      	movs	r3, #1
 8013098:	4628      	mov	r0, r5
 801309a:	47b0      	blx	r6
 801309c:	1c41      	adds	r1, r0, #1
 801309e:	d1c7      	bne.n	8013030 <__sflush_r+0x34>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d0c4      	beq.n	8013030 <__sflush_r+0x34>
 80130a6:	2b1d      	cmp	r3, #29
 80130a8:	d001      	beq.n	80130ae <__sflush_r+0xb2>
 80130aa:	2b16      	cmp	r3, #22
 80130ac:	d101      	bne.n	80130b2 <__sflush_r+0xb6>
 80130ae:	602f      	str	r7, [r5, #0]
 80130b0:	e7b1      	b.n	8013016 <__sflush_r+0x1a>
 80130b2:	89a3      	ldrh	r3, [r4, #12]
 80130b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130b8:	81a3      	strh	r3, [r4, #12]
 80130ba:	e7ad      	b.n	8013018 <__sflush_r+0x1c>
 80130bc:	690f      	ldr	r7, [r1, #16]
 80130be:	2f00      	cmp	r7, #0
 80130c0:	d0a9      	beq.n	8013016 <__sflush_r+0x1a>
 80130c2:	0793      	lsls	r3, r2, #30
 80130c4:	680e      	ldr	r6, [r1, #0]
 80130c6:	bf08      	it	eq
 80130c8:	694b      	ldreq	r3, [r1, #20]
 80130ca:	600f      	str	r7, [r1, #0]
 80130cc:	bf18      	it	ne
 80130ce:	2300      	movne	r3, #0
 80130d0:	eba6 0807 	sub.w	r8, r6, r7
 80130d4:	608b      	str	r3, [r1, #8]
 80130d6:	f1b8 0f00 	cmp.w	r8, #0
 80130da:	dd9c      	ble.n	8013016 <__sflush_r+0x1a>
 80130dc:	6a21      	ldr	r1, [r4, #32]
 80130de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80130e0:	4643      	mov	r3, r8
 80130e2:	463a      	mov	r2, r7
 80130e4:	4628      	mov	r0, r5
 80130e6:	47b0      	blx	r6
 80130e8:	2800      	cmp	r0, #0
 80130ea:	dc06      	bgt.n	80130fa <__sflush_r+0xfe>
 80130ec:	89a3      	ldrh	r3, [r4, #12]
 80130ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130f2:	81a3      	strh	r3, [r4, #12]
 80130f4:	f04f 30ff 	mov.w	r0, #4294967295
 80130f8:	e78e      	b.n	8013018 <__sflush_r+0x1c>
 80130fa:	4407      	add	r7, r0
 80130fc:	eba8 0800 	sub.w	r8, r8, r0
 8013100:	e7e9      	b.n	80130d6 <__sflush_r+0xda>
 8013102:	bf00      	nop
 8013104:	20400001 	.word	0x20400001

08013108 <_fflush_r>:
 8013108:	b538      	push	{r3, r4, r5, lr}
 801310a:	690b      	ldr	r3, [r1, #16]
 801310c:	4605      	mov	r5, r0
 801310e:	460c      	mov	r4, r1
 8013110:	b913      	cbnz	r3, 8013118 <_fflush_r+0x10>
 8013112:	2500      	movs	r5, #0
 8013114:	4628      	mov	r0, r5
 8013116:	bd38      	pop	{r3, r4, r5, pc}
 8013118:	b118      	cbz	r0, 8013122 <_fflush_r+0x1a>
 801311a:	6983      	ldr	r3, [r0, #24]
 801311c:	b90b      	cbnz	r3, 8013122 <_fflush_r+0x1a>
 801311e:	f7fd fea9 	bl	8010e74 <__sinit>
 8013122:	4b14      	ldr	r3, [pc, #80]	; (8013174 <_fflush_r+0x6c>)
 8013124:	429c      	cmp	r4, r3
 8013126:	d11b      	bne.n	8013160 <_fflush_r+0x58>
 8013128:	686c      	ldr	r4, [r5, #4]
 801312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d0ef      	beq.n	8013112 <_fflush_r+0xa>
 8013132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013134:	07d0      	lsls	r0, r2, #31
 8013136:	d404      	bmi.n	8013142 <_fflush_r+0x3a>
 8013138:	0599      	lsls	r1, r3, #22
 801313a:	d402      	bmi.n	8013142 <_fflush_r+0x3a>
 801313c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801313e:	f7fd ff6e 	bl	801101e <__retarget_lock_acquire_recursive>
 8013142:	4628      	mov	r0, r5
 8013144:	4621      	mov	r1, r4
 8013146:	f7ff ff59 	bl	8012ffc <__sflush_r>
 801314a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801314c:	07da      	lsls	r2, r3, #31
 801314e:	4605      	mov	r5, r0
 8013150:	d4e0      	bmi.n	8013114 <_fflush_r+0xc>
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	059b      	lsls	r3, r3, #22
 8013156:	d4dd      	bmi.n	8013114 <_fflush_r+0xc>
 8013158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801315a:	f7fd ff61 	bl	8011020 <__retarget_lock_release_recursive>
 801315e:	e7d9      	b.n	8013114 <_fflush_r+0xc>
 8013160:	4b05      	ldr	r3, [pc, #20]	; (8013178 <_fflush_r+0x70>)
 8013162:	429c      	cmp	r4, r3
 8013164:	d101      	bne.n	801316a <_fflush_r+0x62>
 8013166:	68ac      	ldr	r4, [r5, #8]
 8013168:	e7df      	b.n	801312a <_fflush_r+0x22>
 801316a:	4b04      	ldr	r3, [pc, #16]	; (801317c <_fflush_r+0x74>)
 801316c:	429c      	cmp	r4, r3
 801316e:	bf08      	it	eq
 8013170:	68ec      	ldreq	r4, [r5, #12]
 8013172:	e7da      	b.n	801312a <_fflush_r+0x22>
 8013174:	08015658 	.word	0x08015658
 8013178:	08015678 	.word	0x08015678
 801317c:	08015638 	.word	0x08015638

08013180 <_localeconv_r>:
 8013180:	4800      	ldr	r0, [pc, #0]	; (8013184 <_localeconv_r+0x4>)
 8013182:	4770      	bx	lr
 8013184:	200001ac 	.word	0x200001ac

08013188 <_lseek_r>:
 8013188:	b538      	push	{r3, r4, r5, lr}
 801318a:	4d07      	ldr	r5, [pc, #28]	; (80131a8 <_lseek_r+0x20>)
 801318c:	4604      	mov	r4, r0
 801318e:	4608      	mov	r0, r1
 8013190:	4611      	mov	r1, r2
 8013192:	2200      	movs	r2, #0
 8013194:	602a      	str	r2, [r5, #0]
 8013196:	461a      	mov	r2, r3
 8013198:	f7ef fa9a 	bl	80026d0 <_lseek>
 801319c:	1c43      	adds	r3, r0, #1
 801319e:	d102      	bne.n	80131a6 <_lseek_r+0x1e>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	b103      	cbz	r3, 80131a6 <_lseek_r+0x1e>
 80131a4:	6023      	str	r3, [r4, #0]
 80131a6:	bd38      	pop	{r3, r4, r5, pc}
 80131a8:	2000386c 	.word	0x2000386c

080131ac <__swhatbuf_r>:
 80131ac:	b570      	push	{r4, r5, r6, lr}
 80131ae:	460e      	mov	r6, r1
 80131b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131b4:	2900      	cmp	r1, #0
 80131b6:	b096      	sub	sp, #88	; 0x58
 80131b8:	4614      	mov	r4, r2
 80131ba:	461d      	mov	r5, r3
 80131bc:	da08      	bge.n	80131d0 <__swhatbuf_r+0x24>
 80131be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	602a      	str	r2, [r5, #0]
 80131c6:	061a      	lsls	r2, r3, #24
 80131c8:	d410      	bmi.n	80131ec <__swhatbuf_r+0x40>
 80131ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131ce:	e00e      	b.n	80131ee <__swhatbuf_r+0x42>
 80131d0:	466a      	mov	r2, sp
 80131d2:	f000 fe2b 	bl	8013e2c <_fstat_r>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	dbf1      	blt.n	80131be <__swhatbuf_r+0x12>
 80131da:	9a01      	ldr	r2, [sp, #4]
 80131dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131e4:	425a      	negs	r2, r3
 80131e6:	415a      	adcs	r2, r3
 80131e8:	602a      	str	r2, [r5, #0]
 80131ea:	e7ee      	b.n	80131ca <__swhatbuf_r+0x1e>
 80131ec:	2340      	movs	r3, #64	; 0x40
 80131ee:	2000      	movs	r0, #0
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	b016      	add	sp, #88	; 0x58
 80131f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080131f8 <__smakebuf_r>:
 80131f8:	898b      	ldrh	r3, [r1, #12]
 80131fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131fc:	079d      	lsls	r5, r3, #30
 80131fe:	4606      	mov	r6, r0
 8013200:	460c      	mov	r4, r1
 8013202:	d507      	bpl.n	8013214 <__smakebuf_r+0x1c>
 8013204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013208:	6023      	str	r3, [r4, #0]
 801320a:	6123      	str	r3, [r4, #16]
 801320c:	2301      	movs	r3, #1
 801320e:	6163      	str	r3, [r4, #20]
 8013210:	b002      	add	sp, #8
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	ab01      	add	r3, sp, #4
 8013216:	466a      	mov	r2, sp
 8013218:	f7ff ffc8 	bl	80131ac <__swhatbuf_r>
 801321c:	9900      	ldr	r1, [sp, #0]
 801321e:	4605      	mov	r5, r0
 8013220:	4630      	mov	r0, r6
 8013222:	f7fd ff5f 	bl	80110e4 <_malloc_r>
 8013226:	b948      	cbnz	r0, 801323c <__smakebuf_r+0x44>
 8013228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322c:	059a      	lsls	r2, r3, #22
 801322e:	d4ef      	bmi.n	8013210 <__smakebuf_r+0x18>
 8013230:	f023 0303 	bic.w	r3, r3, #3
 8013234:	f043 0302 	orr.w	r3, r3, #2
 8013238:	81a3      	strh	r3, [r4, #12]
 801323a:	e7e3      	b.n	8013204 <__smakebuf_r+0xc>
 801323c:	4b0d      	ldr	r3, [pc, #52]	; (8013274 <__smakebuf_r+0x7c>)
 801323e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	6020      	str	r0, [r4, #0]
 8013244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013248:	81a3      	strh	r3, [r4, #12]
 801324a:	9b00      	ldr	r3, [sp, #0]
 801324c:	6163      	str	r3, [r4, #20]
 801324e:	9b01      	ldr	r3, [sp, #4]
 8013250:	6120      	str	r0, [r4, #16]
 8013252:	b15b      	cbz	r3, 801326c <__smakebuf_r+0x74>
 8013254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013258:	4630      	mov	r0, r6
 801325a:	f000 fdf9 	bl	8013e50 <_isatty_r>
 801325e:	b128      	cbz	r0, 801326c <__smakebuf_r+0x74>
 8013260:	89a3      	ldrh	r3, [r4, #12]
 8013262:	f023 0303 	bic.w	r3, r3, #3
 8013266:	f043 0301 	orr.w	r3, r3, #1
 801326a:	81a3      	strh	r3, [r4, #12]
 801326c:	89a0      	ldrh	r0, [r4, #12]
 801326e:	4305      	orrs	r5, r0
 8013270:	81a5      	strh	r5, [r4, #12]
 8013272:	e7cd      	b.n	8013210 <__smakebuf_r+0x18>
 8013274:	08010e0d 	.word	0x08010e0d

08013278 <malloc>:
 8013278:	4b02      	ldr	r3, [pc, #8]	; (8013284 <malloc+0xc>)
 801327a:	4601      	mov	r1, r0
 801327c:	6818      	ldr	r0, [r3, #0]
 801327e:	f7fd bf31 	b.w	80110e4 <_malloc_r>
 8013282:	bf00      	nop
 8013284:	20000058 	.word	0x20000058

08013288 <__malloc_lock>:
 8013288:	4801      	ldr	r0, [pc, #4]	; (8013290 <__malloc_lock+0x8>)
 801328a:	f7fd bec8 	b.w	801101e <__retarget_lock_acquire_recursive>
 801328e:	bf00      	nop
 8013290:	20003860 	.word	0x20003860

08013294 <__malloc_unlock>:
 8013294:	4801      	ldr	r0, [pc, #4]	; (801329c <__malloc_unlock+0x8>)
 8013296:	f7fd bec3 	b.w	8011020 <__retarget_lock_release_recursive>
 801329a:	bf00      	nop
 801329c:	20003860 	.word	0x20003860

080132a0 <_Balloc>:
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132a4:	4604      	mov	r4, r0
 80132a6:	460d      	mov	r5, r1
 80132a8:	b976      	cbnz	r6, 80132c8 <_Balloc+0x28>
 80132aa:	2010      	movs	r0, #16
 80132ac:	f7ff ffe4 	bl	8013278 <malloc>
 80132b0:	4602      	mov	r2, r0
 80132b2:	6260      	str	r0, [r4, #36]	; 0x24
 80132b4:	b920      	cbnz	r0, 80132c0 <_Balloc+0x20>
 80132b6:	4b18      	ldr	r3, [pc, #96]	; (8013318 <_Balloc+0x78>)
 80132b8:	4818      	ldr	r0, [pc, #96]	; (801331c <_Balloc+0x7c>)
 80132ba:	2166      	movs	r1, #102	; 0x66
 80132bc:	f7fd fd5e 	bl	8010d7c <__assert_func>
 80132c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132c4:	6006      	str	r6, [r0, #0]
 80132c6:	60c6      	str	r6, [r0, #12]
 80132c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132ca:	68f3      	ldr	r3, [r6, #12]
 80132cc:	b183      	cbz	r3, 80132f0 <_Balloc+0x50>
 80132ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132d6:	b9b8      	cbnz	r0, 8013308 <_Balloc+0x68>
 80132d8:	2101      	movs	r1, #1
 80132da:	fa01 f605 	lsl.w	r6, r1, r5
 80132de:	1d72      	adds	r2, r6, #5
 80132e0:	0092      	lsls	r2, r2, #2
 80132e2:	4620      	mov	r0, r4
 80132e4:	f000 fb60 	bl	80139a8 <_calloc_r>
 80132e8:	b160      	cbz	r0, 8013304 <_Balloc+0x64>
 80132ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132ee:	e00e      	b.n	801330e <_Balloc+0x6e>
 80132f0:	2221      	movs	r2, #33	; 0x21
 80132f2:	2104      	movs	r1, #4
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 fb57 	bl	80139a8 <_calloc_r>
 80132fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132fc:	60f0      	str	r0, [r6, #12]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d1e4      	bne.n	80132ce <_Balloc+0x2e>
 8013304:	2000      	movs	r0, #0
 8013306:	bd70      	pop	{r4, r5, r6, pc}
 8013308:	6802      	ldr	r2, [r0, #0]
 801330a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801330e:	2300      	movs	r3, #0
 8013310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013314:	e7f7      	b.n	8013306 <_Balloc+0x66>
 8013316:	bf00      	nop
 8013318:	080156e1 	.word	0x080156e1
 801331c:	080157ce 	.word	0x080157ce

08013320 <_Bfree>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013324:	4605      	mov	r5, r0
 8013326:	460c      	mov	r4, r1
 8013328:	b976      	cbnz	r6, 8013348 <_Bfree+0x28>
 801332a:	2010      	movs	r0, #16
 801332c:	f7ff ffa4 	bl	8013278 <malloc>
 8013330:	4602      	mov	r2, r0
 8013332:	6268      	str	r0, [r5, #36]	; 0x24
 8013334:	b920      	cbnz	r0, 8013340 <_Bfree+0x20>
 8013336:	4b09      	ldr	r3, [pc, #36]	; (801335c <_Bfree+0x3c>)
 8013338:	4809      	ldr	r0, [pc, #36]	; (8013360 <_Bfree+0x40>)
 801333a:	218a      	movs	r1, #138	; 0x8a
 801333c:	f7fd fd1e 	bl	8010d7c <__assert_func>
 8013340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013344:	6006      	str	r6, [r0, #0]
 8013346:	60c6      	str	r6, [r0, #12]
 8013348:	b13c      	cbz	r4, 801335a <_Bfree+0x3a>
 801334a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801334c:	6862      	ldr	r2, [r4, #4]
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013354:	6021      	str	r1, [r4, #0]
 8013356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801335a:	bd70      	pop	{r4, r5, r6, pc}
 801335c:	080156e1 	.word	0x080156e1
 8013360:	080157ce 	.word	0x080157ce

08013364 <__multadd>:
 8013364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013368:	690d      	ldr	r5, [r1, #16]
 801336a:	4607      	mov	r7, r0
 801336c:	460c      	mov	r4, r1
 801336e:	461e      	mov	r6, r3
 8013370:	f101 0c14 	add.w	ip, r1, #20
 8013374:	2000      	movs	r0, #0
 8013376:	f8dc 3000 	ldr.w	r3, [ip]
 801337a:	b299      	uxth	r1, r3
 801337c:	fb02 6101 	mla	r1, r2, r1, r6
 8013380:	0c1e      	lsrs	r6, r3, #16
 8013382:	0c0b      	lsrs	r3, r1, #16
 8013384:	fb02 3306 	mla	r3, r2, r6, r3
 8013388:	b289      	uxth	r1, r1
 801338a:	3001      	adds	r0, #1
 801338c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013390:	4285      	cmp	r5, r0
 8013392:	f84c 1b04 	str.w	r1, [ip], #4
 8013396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801339a:	dcec      	bgt.n	8013376 <__multadd+0x12>
 801339c:	b30e      	cbz	r6, 80133e2 <__multadd+0x7e>
 801339e:	68a3      	ldr	r3, [r4, #8]
 80133a0:	42ab      	cmp	r3, r5
 80133a2:	dc19      	bgt.n	80133d8 <__multadd+0x74>
 80133a4:	6861      	ldr	r1, [r4, #4]
 80133a6:	4638      	mov	r0, r7
 80133a8:	3101      	adds	r1, #1
 80133aa:	f7ff ff79 	bl	80132a0 <_Balloc>
 80133ae:	4680      	mov	r8, r0
 80133b0:	b928      	cbnz	r0, 80133be <__multadd+0x5a>
 80133b2:	4602      	mov	r2, r0
 80133b4:	4b0c      	ldr	r3, [pc, #48]	; (80133e8 <__multadd+0x84>)
 80133b6:	480d      	ldr	r0, [pc, #52]	; (80133ec <__multadd+0x88>)
 80133b8:	21b5      	movs	r1, #181	; 0xb5
 80133ba:	f7fd fcdf 	bl	8010d7c <__assert_func>
 80133be:	6922      	ldr	r2, [r4, #16]
 80133c0:	3202      	adds	r2, #2
 80133c2:	f104 010c 	add.w	r1, r4, #12
 80133c6:	0092      	lsls	r2, r2, #2
 80133c8:	300c      	adds	r0, #12
 80133ca:	f7fd fe3a 	bl	8011042 <memcpy>
 80133ce:	4621      	mov	r1, r4
 80133d0:	4638      	mov	r0, r7
 80133d2:	f7ff ffa5 	bl	8013320 <_Bfree>
 80133d6:	4644      	mov	r4, r8
 80133d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133dc:	3501      	adds	r5, #1
 80133de:	615e      	str	r6, [r3, #20]
 80133e0:	6125      	str	r5, [r4, #16]
 80133e2:	4620      	mov	r0, r4
 80133e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e8:	080157bd 	.word	0x080157bd
 80133ec:	080157ce 	.word	0x080157ce

080133f0 <__hi0bits>:
 80133f0:	0c03      	lsrs	r3, r0, #16
 80133f2:	041b      	lsls	r3, r3, #16
 80133f4:	b9d3      	cbnz	r3, 801342c <__hi0bits+0x3c>
 80133f6:	0400      	lsls	r0, r0, #16
 80133f8:	2310      	movs	r3, #16
 80133fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80133fe:	bf04      	itt	eq
 8013400:	0200      	lsleq	r0, r0, #8
 8013402:	3308      	addeq	r3, #8
 8013404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013408:	bf04      	itt	eq
 801340a:	0100      	lsleq	r0, r0, #4
 801340c:	3304      	addeq	r3, #4
 801340e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013412:	bf04      	itt	eq
 8013414:	0080      	lsleq	r0, r0, #2
 8013416:	3302      	addeq	r3, #2
 8013418:	2800      	cmp	r0, #0
 801341a:	db05      	blt.n	8013428 <__hi0bits+0x38>
 801341c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013420:	f103 0301 	add.w	r3, r3, #1
 8013424:	bf08      	it	eq
 8013426:	2320      	moveq	r3, #32
 8013428:	4618      	mov	r0, r3
 801342a:	4770      	bx	lr
 801342c:	2300      	movs	r3, #0
 801342e:	e7e4      	b.n	80133fa <__hi0bits+0xa>

08013430 <__lo0bits>:
 8013430:	6803      	ldr	r3, [r0, #0]
 8013432:	f013 0207 	ands.w	r2, r3, #7
 8013436:	4601      	mov	r1, r0
 8013438:	d00b      	beq.n	8013452 <__lo0bits+0x22>
 801343a:	07da      	lsls	r2, r3, #31
 801343c:	d423      	bmi.n	8013486 <__lo0bits+0x56>
 801343e:	0798      	lsls	r0, r3, #30
 8013440:	bf49      	itett	mi
 8013442:	085b      	lsrmi	r3, r3, #1
 8013444:	089b      	lsrpl	r3, r3, #2
 8013446:	2001      	movmi	r0, #1
 8013448:	600b      	strmi	r3, [r1, #0]
 801344a:	bf5c      	itt	pl
 801344c:	600b      	strpl	r3, [r1, #0]
 801344e:	2002      	movpl	r0, #2
 8013450:	4770      	bx	lr
 8013452:	b298      	uxth	r0, r3
 8013454:	b9a8      	cbnz	r0, 8013482 <__lo0bits+0x52>
 8013456:	0c1b      	lsrs	r3, r3, #16
 8013458:	2010      	movs	r0, #16
 801345a:	b2da      	uxtb	r2, r3
 801345c:	b90a      	cbnz	r2, 8013462 <__lo0bits+0x32>
 801345e:	3008      	adds	r0, #8
 8013460:	0a1b      	lsrs	r3, r3, #8
 8013462:	071a      	lsls	r2, r3, #28
 8013464:	bf04      	itt	eq
 8013466:	091b      	lsreq	r3, r3, #4
 8013468:	3004      	addeq	r0, #4
 801346a:	079a      	lsls	r2, r3, #30
 801346c:	bf04      	itt	eq
 801346e:	089b      	lsreq	r3, r3, #2
 8013470:	3002      	addeq	r0, #2
 8013472:	07da      	lsls	r2, r3, #31
 8013474:	d403      	bmi.n	801347e <__lo0bits+0x4e>
 8013476:	085b      	lsrs	r3, r3, #1
 8013478:	f100 0001 	add.w	r0, r0, #1
 801347c:	d005      	beq.n	801348a <__lo0bits+0x5a>
 801347e:	600b      	str	r3, [r1, #0]
 8013480:	4770      	bx	lr
 8013482:	4610      	mov	r0, r2
 8013484:	e7e9      	b.n	801345a <__lo0bits+0x2a>
 8013486:	2000      	movs	r0, #0
 8013488:	4770      	bx	lr
 801348a:	2020      	movs	r0, #32
 801348c:	4770      	bx	lr
	...

08013490 <__i2b>:
 8013490:	b510      	push	{r4, lr}
 8013492:	460c      	mov	r4, r1
 8013494:	2101      	movs	r1, #1
 8013496:	f7ff ff03 	bl	80132a0 <_Balloc>
 801349a:	4602      	mov	r2, r0
 801349c:	b928      	cbnz	r0, 80134aa <__i2b+0x1a>
 801349e:	4b05      	ldr	r3, [pc, #20]	; (80134b4 <__i2b+0x24>)
 80134a0:	4805      	ldr	r0, [pc, #20]	; (80134b8 <__i2b+0x28>)
 80134a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80134a6:	f7fd fc69 	bl	8010d7c <__assert_func>
 80134aa:	2301      	movs	r3, #1
 80134ac:	6144      	str	r4, [r0, #20]
 80134ae:	6103      	str	r3, [r0, #16]
 80134b0:	bd10      	pop	{r4, pc}
 80134b2:	bf00      	nop
 80134b4:	080157bd 	.word	0x080157bd
 80134b8:	080157ce 	.word	0x080157ce

080134bc <__multiply>:
 80134bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c0:	4691      	mov	r9, r2
 80134c2:	690a      	ldr	r2, [r1, #16]
 80134c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	bfb8      	it	lt
 80134cc:	460b      	movlt	r3, r1
 80134ce:	460c      	mov	r4, r1
 80134d0:	bfbc      	itt	lt
 80134d2:	464c      	movlt	r4, r9
 80134d4:	4699      	movlt	r9, r3
 80134d6:	6927      	ldr	r7, [r4, #16]
 80134d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134dc:	68a3      	ldr	r3, [r4, #8]
 80134de:	6861      	ldr	r1, [r4, #4]
 80134e0:	eb07 060a 	add.w	r6, r7, sl
 80134e4:	42b3      	cmp	r3, r6
 80134e6:	b085      	sub	sp, #20
 80134e8:	bfb8      	it	lt
 80134ea:	3101      	addlt	r1, #1
 80134ec:	f7ff fed8 	bl	80132a0 <_Balloc>
 80134f0:	b930      	cbnz	r0, 8013500 <__multiply+0x44>
 80134f2:	4602      	mov	r2, r0
 80134f4:	4b44      	ldr	r3, [pc, #272]	; (8013608 <__multiply+0x14c>)
 80134f6:	4845      	ldr	r0, [pc, #276]	; (801360c <__multiply+0x150>)
 80134f8:	f240 115d 	movw	r1, #349	; 0x15d
 80134fc:	f7fd fc3e 	bl	8010d7c <__assert_func>
 8013500:	f100 0514 	add.w	r5, r0, #20
 8013504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013508:	462b      	mov	r3, r5
 801350a:	2200      	movs	r2, #0
 801350c:	4543      	cmp	r3, r8
 801350e:	d321      	bcc.n	8013554 <__multiply+0x98>
 8013510:	f104 0314 	add.w	r3, r4, #20
 8013514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013518:	f109 0314 	add.w	r3, r9, #20
 801351c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013520:	9202      	str	r2, [sp, #8]
 8013522:	1b3a      	subs	r2, r7, r4
 8013524:	3a15      	subs	r2, #21
 8013526:	f022 0203 	bic.w	r2, r2, #3
 801352a:	3204      	adds	r2, #4
 801352c:	f104 0115 	add.w	r1, r4, #21
 8013530:	428f      	cmp	r7, r1
 8013532:	bf38      	it	cc
 8013534:	2204      	movcc	r2, #4
 8013536:	9201      	str	r2, [sp, #4]
 8013538:	9a02      	ldr	r2, [sp, #8]
 801353a:	9303      	str	r3, [sp, #12]
 801353c:	429a      	cmp	r2, r3
 801353e:	d80c      	bhi.n	801355a <__multiply+0x9e>
 8013540:	2e00      	cmp	r6, #0
 8013542:	dd03      	ble.n	801354c <__multiply+0x90>
 8013544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013548:	2b00      	cmp	r3, #0
 801354a:	d05a      	beq.n	8013602 <__multiply+0x146>
 801354c:	6106      	str	r6, [r0, #16]
 801354e:	b005      	add	sp, #20
 8013550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013554:	f843 2b04 	str.w	r2, [r3], #4
 8013558:	e7d8      	b.n	801350c <__multiply+0x50>
 801355a:	f8b3 a000 	ldrh.w	sl, [r3]
 801355e:	f1ba 0f00 	cmp.w	sl, #0
 8013562:	d024      	beq.n	80135ae <__multiply+0xf2>
 8013564:	f104 0e14 	add.w	lr, r4, #20
 8013568:	46a9      	mov	r9, r5
 801356a:	f04f 0c00 	mov.w	ip, #0
 801356e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013572:	f8d9 1000 	ldr.w	r1, [r9]
 8013576:	fa1f fb82 	uxth.w	fp, r2
 801357a:	b289      	uxth	r1, r1
 801357c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013584:	f8d9 2000 	ldr.w	r2, [r9]
 8013588:	4461      	add	r1, ip
 801358a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801358e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013596:	b289      	uxth	r1, r1
 8013598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801359c:	4577      	cmp	r7, lr
 801359e:	f849 1b04 	str.w	r1, [r9], #4
 80135a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135a6:	d8e2      	bhi.n	801356e <__multiply+0xb2>
 80135a8:	9a01      	ldr	r2, [sp, #4]
 80135aa:	f845 c002 	str.w	ip, [r5, r2]
 80135ae:	9a03      	ldr	r2, [sp, #12]
 80135b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80135b4:	3304      	adds	r3, #4
 80135b6:	f1b9 0f00 	cmp.w	r9, #0
 80135ba:	d020      	beq.n	80135fe <__multiply+0x142>
 80135bc:	6829      	ldr	r1, [r5, #0]
 80135be:	f104 0c14 	add.w	ip, r4, #20
 80135c2:	46ae      	mov	lr, r5
 80135c4:	f04f 0a00 	mov.w	sl, #0
 80135c8:	f8bc b000 	ldrh.w	fp, [ip]
 80135cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135d0:	fb09 220b 	mla	r2, r9, fp, r2
 80135d4:	4492      	add	sl, r2
 80135d6:	b289      	uxth	r1, r1
 80135d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80135dc:	f84e 1b04 	str.w	r1, [lr], #4
 80135e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80135e4:	f8be 1000 	ldrh.w	r1, [lr]
 80135e8:	0c12      	lsrs	r2, r2, #16
 80135ea:	fb09 1102 	mla	r1, r9, r2, r1
 80135ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80135f2:	4567      	cmp	r7, ip
 80135f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135f8:	d8e6      	bhi.n	80135c8 <__multiply+0x10c>
 80135fa:	9a01      	ldr	r2, [sp, #4]
 80135fc:	50a9      	str	r1, [r5, r2]
 80135fe:	3504      	adds	r5, #4
 8013600:	e79a      	b.n	8013538 <__multiply+0x7c>
 8013602:	3e01      	subs	r6, #1
 8013604:	e79c      	b.n	8013540 <__multiply+0x84>
 8013606:	bf00      	nop
 8013608:	080157bd 	.word	0x080157bd
 801360c:	080157ce 	.word	0x080157ce

08013610 <__pow5mult>:
 8013610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013614:	4615      	mov	r5, r2
 8013616:	f012 0203 	ands.w	r2, r2, #3
 801361a:	4606      	mov	r6, r0
 801361c:	460f      	mov	r7, r1
 801361e:	d007      	beq.n	8013630 <__pow5mult+0x20>
 8013620:	4c25      	ldr	r4, [pc, #148]	; (80136b8 <__pow5mult+0xa8>)
 8013622:	3a01      	subs	r2, #1
 8013624:	2300      	movs	r3, #0
 8013626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801362a:	f7ff fe9b 	bl	8013364 <__multadd>
 801362e:	4607      	mov	r7, r0
 8013630:	10ad      	asrs	r5, r5, #2
 8013632:	d03d      	beq.n	80136b0 <__pow5mult+0xa0>
 8013634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013636:	b97c      	cbnz	r4, 8013658 <__pow5mult+0x48>
 8013638:	2010      	movs	r0, #16
 801363a:	f7ff fe1d 	bl	8013278 <malloc>
 801363e:	4602      	mov	r2, r0
 8013640:	6270      	str	r0, [r6, #36]	; 0x24
 8013642:	b928      	cbnz	r0, 8013650 <__pow5mult+0x40>
 8013644:	4b1d      	ldr	r3, [pc, #116]	; (80136bc <__pow5mult+0xac>)
 8013646:	481e      	ldr	r0, [pc, #120]	; (80136c0 <__pow5mult+0xb0>)
 8013648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801364c:	f7fd fb96 	bl	8010d7c <__assert_func>
 8013650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013654:	6004      	str	r4, [r0, #0]
 8013656:	60c4      	str	r4, [r0, #12]
 8013658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801365c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013660:	b94c      	cbnz	r4, 8013676 <__pow5mult+0x66>
 8013662:	f240 2171 	movw	r1, #625	; 0x271
 8013666:	4630      	mov	r0, r6
 8013668:	f7ff ff12 	bl	8013490 <__i2b>
 801366c:	2300      	movs	r3, #0
 801366e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013672:	4604      	mov	r4, r0
 8013674:	6003      	str	r3, [r0, #0]
 8013676:	f04f 0900 	mov.w	r9, #0
 801367a:	07eb      	lsls	r3, r5, #31
 801367c:	d50a      	bpl.n	8013694 <__pow5mult+0x84>
 801367e:	4639      	mov	r1, r7
 8013680:	4622      	mov	r2, r4
 8013682:	4630      	mov	r0, r6
 8013684:	f7ff ff1a 	bl	80134bc <__multiply>
 8013688:	4639      	mov	r1, r7
 801368a:	4680      	mov	r8, r0
 801368c:	4630      	mov	r0, r6
 801368e:	f7ff fe47 	bl	8013320 <_Bfree>
 8013692:	4647      	mov	r7, r8
 8013694:	106d      	asrs	r5, r5, #1
 8013696:	d00b      	beq.n	80136b0 <__pow5mult+0xa0>
 8013698:	6820      	ldr	r0, [r4, #0]
 801369a:	b938      	cbnz	r0, 80136ac <__pow5mult+0x9c>
 801369c:	4622      	mov	r2, r4
 801369e:	4621      	mov	r1, r4
 80136a0:	4630      	mov	r0, r6
 80136a2:	f7ff ff0b 	bl	80134bc <__multiply>
 80136a6:	6020      	str	r0, [r4, #0]
 80136a8:	f8c0 9000 	str.w	r9, [r0]
 80136ac:	4604      	mov	r4, r0
 80136ae:	e7e4      	b.n	801367a <__pow5mult+0x6a>
 80136b0:	4638      	mov	r0, r7
 80136b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136b6:	bf00      	nop
 80136b8:	08015920 	.word	0x08015920
 80136bc:	080156e1 	.word	0x080156e1
 80136c0:	080157ce 	.word	0x080157ce

080136c4 <__lshift>:
 80136c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136c8:	460c      	mov	r4, r1
 80136ca:	6849      	ldr	r1, [r1, #4]
 80136cc:	6923      	ldr	r3, [r4, #16]
 80136ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136d2:	68a3      	ldr	r3, [r4, #8]
 80136d4:	4607      	mov	r7, r0
 80136d6:	4691      	mov	r9, r2
 80136d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136dc:	f108 0601 	add.w	r6, r8, #1
 80136e0:	42b3      	cmp	r3, r6
 80136e2:	db0b      	blt.n	80136fc <__lshift+0x38>
 80136e4:	4638      	mov	r0, r7
 80136e6:	f7ff fddb 	bl	80132a0 <_Balloc>
 80136ea:	4605      	mov	r5, r0
 80136ec:	b948      	cbnz	r0, 8013702 <__lshift+0x3e>
 80136ee:	4602      	mov	r2, r0
 80136f0:	4b2a      	ldr	r3, [pc, #168]	; (801379c <__lshift+0xd8>)
 80136f2:	482b      	ldr	r0, [pc, #172]	; (80137a0 <__lshift+0xdc>)
 80136f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80136f8:	f7fd fb40 	bl	8010d7c <__assert_func>
 80136fc:	3101      	adds	r1, #1
 80136fe:	005b      	lsls	r3, r3, #1
 8013700:	e7ee      	b.n	80136e0 <__lshift+0x1c>
 8013702:	2300      	movs	r3, #0
 8013704:	f100 0114 	add.w	r1, r0, #20
 8013708:	f100 0210 	add.w	r2, r0, #16
 801370c:	4618      	mov	r0, r3
 801370e:	4553      	cmp	r3, sl
 8013710:	db37      	blt.n	8013782 <__lshift+0xbe>
 8013712:	6920      	ldr	r0, [r4, #16]
 8013714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013718:	f104 0314 	add.w	r3, r4, #20
 801371c:	f019 091f 	ands.w	r9, r9, #31
 8013720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013728:	d02f      	beq.n	801378a <__lshift+0xc6>
 801372a:	f1c9 0e20 	rsb	lr, r9, #32
 801372e:	468a      	mov	sl, r1
 8013730:	f04f 0c00 	mov.w	ip, #0
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	fa02 f209 	lsl.w	r2, r2, r9
 801373a:	ea42 020c 	orr.w	r2, r2, ip
 801373e:	f84a 2b04 	str.w	r2, [sl], #4
 8013742:	f853 2b04 	ldr.w	r2, [r3], #4
 8013746:	4298      	cmp	r0, r3
 8013748:	fa22 fc0e 	lsr.w	ip, r2, lr
 801374c:	d8f2      	bhi.n	8013734 <__lshift+0x70>
 801374e:	1b03      	subs	r3, r0, r4
 8013750:	3b15      	subs	r3, #21
 8013752:	f023 0303 	bic.w	r3, r3, #3
 8013756:	3304      	adds	r3, #4
 8013758:	f104 0215 	add.w	r2, r4, #21
 801375c:	4290      	cmp	r0, r2
 801375e:	bf38      	it	cc
 8013760:	2304      	movcc	r3, #4
 8013762:	f841 c003 	str.w	ip, [r1, r3]
 8013766:	f1bc 0f00 	cmp.w	ip, #0
 801376a:	d001      	beq.n	8013770 <__lshift+0xac>
 801376c:	f108 0602 	add.w	r6, r8, #2
 8013770:	3e01      	subs	r6, #1
 8013772:	4638      	mov	r0, r7
 8013774:	612e      	str	r6, [r5, #16]
 8013776:	4621      	mov	r1, r4
 8013778:	f7ff fdd2 	bl	8013320 <_Bfree>
 801377c:	4628      	mov	r0, r5
 801377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013782:	f842 0f04 	str.w	r0, [r2, #4]!
 8013786:	3301      	adds	r3, #1
 8013788:	e7c1      	b.n	801370e <__lshift+0x4a>
 801378a:	3904      	subs	r1, #4
 801378c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013790:	f841 2f04 	str.w	r2, [r1, #4]!
 8013794:	4298      	cmp	r0, r3
 8013796:	d8f9      	bhi.n	801378c <__lshift+0xc8>
 8013798:	e7ea      	b.n	8013770 <__lshift+0xac>
 801379a:	bf00      	nop
 801379c:	080157bd 	.word	0x080157bd
 80137a0:	080157ce 	.word	0x080157ce

080137a4 <__mcmp>:
 80137a4:	b530      	push	{r4, r5, lr}
 80137a6:	6902      	ldr	r2, [r0, #16]
 80137a8:	690c      	ldr	r4, [r1, #16]
 80137aa:	1b12      	subs	r2, r2, r4
 80137ac:	d10e      	bne.n	80137cc <__mcmp+0x28>
 80137ae:	f100 0314 	add.w	r3, r0, #20
 80137b2:	3114      	adds	r1, #20
 80137b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80137b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80137bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80137c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80137c4:	42a5      	cmp	r5, r4
 80137c6:	d003      	beq.n	80137d0 <__mcmp+0x2c>
 80137c8:	d305      	bcc.n	80137d6 <__mcmp+0x32>
 80137ca:	2201      	movs	r2, #1
 80137cc:	4610      	mov	r0, r2
 80137ce:	bd30      	pop	{r4, r5, pc}
 80137d0:	4283      	cmp	r3, r0
 80137d2:	d3f3      	bcc.n	80137bc <__mcmp+0x18>
 80137d4:	e7fa      	b.n	80137cc <__mcmp+0x28>
 80137d6:	f04f 32ff 	mov.w	r2, #4294967295
 80137da:	e7f7      	b.n	80137cc <__mcmp+0x28>

080137dc <__mdiff>:
 80137dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	460c      	mov	r4, r1
 80137e2:	4606      	mov	r6, r0
 80137e4:	4611      	mov	r1, r2
 80137e6:	4620      	mov	r0, r4
 80137e8:	4690      	mov	r8, r2
 80137ea:	f7ff ffdb 	bl	80137a4 <__mcmp>
 80137ee:	1e05      	subs	r5, r0, #0
 80137f0:	d110      	bne.n	8013814 <__mdiff+0x38>
 80137f2:	4629      	mov	r1, r5
 80137f4:	4630      	mov	r0, r6
 80137f6:	f7ff fd53 	bl	80132a0 <_Balloc>
 80137fa:	b930      	cbnz	r0, 801380a <__mdiff+0x2e>
 80137fc:	4b3a      	ldr	r3, [pc, #232]	; (80138e8 <__mdiff+0x10c>)
 80137fe:	4602      	mov	r2, r0
 8013800:	f240 2132 	movw	r1, #562	; 0x232
 8013804:	4839      	ldr	r0, [pc, #228]	; (80138ec <__mdiff+0x110>)
 8013806:	f7fd fab9 	bl	8010d7c <__assert_func>
 801380a:	2301      	movs	r3, #1
 801380c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013814:	bfa4      	itt	ge
 8013816:	4643      	movge	r3, r8
 8013818:	46a0      	movge	r8, r4
 801381a:	4630      	mov	r0, r6
 801381c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013820:	bfa6      	itte	ge
 8013822:	461c      	movge	r4, r3
 8013824:	2500      	movge	r5, #0
 8013826:	2501      	movlt	r5, #1
 8013828:	f7ff fd3a 	bl	80132a0 <_Balloc>
 801382c:	b920      	cbnz	r0, 8013838 <__mdiff+0x5c>
 801382e:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <__mdiff+0x10c>)
 8013830:	4602      	mov	r2, r0
 8013832:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013836:	e7e5      	b.n	8013804 <__mdiff+0x28>
 8013838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801383c:	6926      	ldr	r6, [r4, #16]
 801383e:	60c5      	str	r5, [r0, #12]
 8013840:	f104 0914 	add.w	r9, r4, #20
 8013844:	f108 0514 	add.w	r5, r8, #20
 8013848:	f100 0e14 	add.w	lr, r0, #20
 801384c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013854:	f108 0210 	add.w	r2, r8, #16
 8013858:	46f2      	mov	sl, lr
 801385a:	2100      	movs	r1, #0
 801385c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013864:	fa1f f883 	uxth.w	r8, r3
 8013868:	fa11 f18b 	uxtah	r1, r1, fp
 801386c:	0c1b      	lsrs	r3, r3, #16
 801386e:	eba1 0808 	sub.w	r8, r1, r8
 8013872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801387a:	fa1f f888 	uxth.w	r8, r8
 801387e:	1419      	asrs	r1, r3, #16
 8013880:	454e      	cmp	r6, r9
 8013882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013886:	f84a 3b04 	str.w	r3, [sl], #4
 801388a:	d8e7      	bhi.n	801385c <__mdiff+0x80>
 801388c:	1b33      	subs	r3, r6, r4
 801388e:	3b15      	subs	r3, #21
 8013890:	f023 0303 	bic.w	r3, r3, #3
 8013894:	3304      	adds	r3, #4
 8013896:	3415      	adds	r4, #21
 8013898:	42a6      	cmp	r6, r4
 801389a:	bf38      	it	cc
 801389c:	2304      	movcc	r3, #4
 801389e:	441d      	add	r5, r3
 80138a0:	4473      	add	r3, lr
 80138a2:	469e      	mov	lr, r3
 80138a4:	462e      	mov	r6, r5
 80138a6:	4566      	cmp	r6, ip
 80138a8:	d30e      	bcc.n	80138c8 <__mdiff+0xec>
 80138aa:	f10c 0203 	add.w	r2, ip, #3
 80138ae:	1b52      	subs	r2, r2, r5
 80138b0:	f022 0203 	bic.w	r2, r2, #3
 80138b4:	3d03      	subs	r5, #3
 80138b6:	45ac      	cmp	ip, r5
 80138b8:	bf38      	it	cc
 80138ba:	2200      	movcc	r2, #0
 80138bc:	441a      	add	r2, r3
 80138be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80138c2:	b17b      	cbz	r3, 80138e4 <__mdiff+0x108>
 80138c4:	6107      	str	r7, [r0, #16]
 80138c6:	e7a3      	b.n	8013810 <__mdiff+0x34>
 80138c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80138cc:	fa11 f288 	uxtah	r2, r1, r8
 80138d0:	1414      	asrs	r4, r2, #16
 80138d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138d6:	b292      	uxth	r2, r2
 80138d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80138dc:	f84e 2b04 	str.w	r2, [lr], #4
 80138e0:	1421      	asrs	r1, r4, #16
 80138e2:	e7e0      	b.n	80138a6 <__mdiff+0xca>
 80138e4:	3f01      	subs	r7, #1
 80138e6:	e7ea      	b.n	80138be <__mdiff+0xe2>
 80138e8:	080157bd 	.word	0x080157bd
 80138ec:	080157ce 	.word	0x080157ce

080138f0 <__d2b>:
 80138f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138f4:	4689      	mov	r9, r1
 80138f6:	2101      	movs	r1, #1
 80138f8:	ec57 6b10 	vmov	r6, r7, d0
 80138fc:	4690      	mov	r8, r2
 80138fe:	f7ff fccf 	bl	80132a0 <_Balloc>
 8013902:	4604      	mov	r4, r0
 8013904:	b930      	cbnz	r0, 8013914 <__d2b+0x24>
 8013906:	4602      	mov	r2, r0
 8013908:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <__d2b+0xb0>)
 801390a:	4826      	ldr	r0, [pc, #152]	; (80139a4 <__d2b+0xb4>)
 801390c:	f240 310a 	movw	r1, #778	; 0x30a
 8013910:	f7fd fa34 	bl	8010d7c <__assert_func>
 8013914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801391c:	bb35      	cbnz	r5, 801396c <__d2b+0x7c>
 801391e:	2e00      	cmp	r6, #0
 8013920:	9301      	str	r3, [sp, #4]
 8013922:	d028      	beq.n	8013976 <__d2b+0x86>
 8013924:	4668      	mov	r0, sp
 8013926:	9600      	str	r6, [sp, #0]
 8013928:	f7ff fd82 	bl	8013430 <__lo0bits>
 801392c:	9900      	ldr	r1, [sp, #0]
 801392e:	b300      	cbz	r0, 8013972 <__d2b+0x82>
 8013930:	9a01      	ldr	r2, [sp, #4]
 8013932:	f1c0 0320 	rsb	r3, r0, #32
 8013936:	fa02 f303 	lsl.w	r3, r2, r3
 801393a:	430b      	orrs	r3, r1
 801393c:	40c2      	lsrs	r2, r0
 801393e:	6163      	str	r3, [r4, #20]
 8013940:	9201      	str	r2, [sp, #4]
 8013942:	9b01      	ldr	r3, [sp, #4]
 8013944:	61a3      	str	r3, [r4, #24]
 8013946:	2b00      	cmp	r3, #0
 8013948:	bf14      	ite	ne
 801394a:	2202      	movne	r2, #2
 801394c:	2201      	moveq	r2, #1
 801394e:	6122      	str	r2, [r4, #16]
 8013950:	b1d5      	cbz	r5, 8013988 <__d2b+0x98>
 8013952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013956:	4405      	add	r5, r0
 8013958:	f8c9 5000 	str.w	r5, [r9]
 801395c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013960:	f8c8 0000 	str.w	r0, [r8]
 8013964:	4620      	mov	r0, r4
 8013966:	b003      	add	sp, #12
 8013968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801396c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013970:	e7d5      	b.n	801391e <__d2b+0x2e>
 8013972:	6161      	str	r1, [r4, #20]
 8013974:	e7e5      	b.n	8013942 <__d2b+0x52>
 8013976:	a801      	add	r0, sp, #4
 8013978:	f7ff fd5a 	bl	8013430 <__lo0bits>
 801397c:	9b01      	ldr	r3, [sp, #4]
 801397e:	6163      	str	r3, [r4, #20]
 8013980:	2201      	movs	r2, #1
 8013982:	6122      	str	r2, [r4, #16]
 8013984:	3020      	adds	r0, #32
 8013986:	e7e3      	b.n	8013950 <__d2b+0x60>
 8013988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801398c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013990:	f8c9 0000 	str.w	r0, [r9]
 8013994:	6918      	ldr	r0, [r3, #16]
 8013996:	f7ff fd2b 	bl	80133f0 <__hi0bits>
 801399a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801399e:	e7df      	b.n	8013960 <__d2b+0x70>
 80139a0:	080157bd 	.word	0x080157bd
 80139a4:	080157ce 	.word	0x080157ce

080139a8 <_calloc_r>:
 80139a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139aa:	fba1 2402 	umull	r2, r4, r1, r2
 80139ae:	b94c      	cbnz	r4, 80139c4 <_calloc_r+0x1c>
 80139b0:	4611      	mov	r1, r2
 80139b2:	9201      	str	r2, [sp, #4]
 80139b4:	f7fd fb96 	bl	80110e4 <_malloc_r>
 80139b8:	9a01      	ldr	r2, [sp, #4]
 80139ba:	4605      	mov	r5, r0
 80139bc:	b930      	cbnz	r0, 80139cc <_calloc_r+0x24>
 80139be:	4628      	mov	r0, r5
 80139c0:	b003      	add	sp, #12
 80139c2:	bd30      	pop	{r4, r5, pc}
 80139c4:	220c      	movs	r2, #12
 80139c6:	6002      	str	r2, [r0, #0]
 80139c8:	2500      	movs	r5, #0
 80139ca:	e7f8      	b.n	80139be <_calloc_r+0x16>
 80139cc:	4621      	mov	r1, r4
 80139ce:	f7fd fb60 	bl	8011092 <memset>
 80139d2:	e7f4      	b.n	80139be <_calloc_r+0x16>

080139d4 <_free_r>:
 80139d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139d6:	2900      	cmp	r1, #0
 80139d8:	d044      	beq.n	8013a64 <_free_r+0x90>
 80139da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139de:	9001      	str	r0, [sp, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f1a1 0404 	sub.w	r4, r1, #4
 80139e6:	bfb8      	it	lt
 80139e8:	18e4      	addlt	r4, r4, r3
 80139ea:	f7ff fc4d 	bl	8013288 <__malloc_lock>
 80139ee:	4a1e      	ldr	r2, [pc, #120]	; (8013a68 <_free_r+0x94>)
 80139f0:	9801      	ldr	r0, [sp, #4]
 80139f2:	6813      	ldr	r3, [r2, #0]
 80139f4:	b933      	cbnz	r3, 8013a04 <_free_r+0x30>
 80139f6:	6063      	str	r3, [r4, #4]
 80139f8:	6014      	str	r4, [r2, #0]
 80139fa:	b003      	add	sp, #12
 80139fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a00:	f7ff bc48 	b.w	8013294 <__malloc_unlock>
 8013a04:	42a3      	cmp	r3, r4
 8013a06:	d908      	bls.n	8013a1a <_free_r+0x46>
 8013a08:	6825      	ldr	r5, [r4, #0]
 8013a0a:	1961      	adds	r1, r4, r5
 8013a0c:	428b      	cmp	r3, r1
 8013a0e:	bf01      	itttt	eq
 8013a10:	6819      	ldreq	r1, [r3, #0]
 8013a12:	685b      	ldreq	r3, [r3, #4]
 8013a14:	1949      	addeq	r1, r1, r5
 8013a16:	6021      	streq	r1, [r4, #0]
 8013a18:	e7ed      	b.n	80139f6 <_free_r+0x22>
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	b10b      	cbz	r3, 8013a24 <_free_r+0x50>
 8013a20:	42a3      	cmp	r3, r4
 8013a22:	d9fa      	bls.n	8013a1a <_free_r+0x46>
 8013a24:	6811      	ldr	r1, [r2, #0]
 8013a26:	1855      	adds	r5, r2, r1
 8013a28:	42a5      	cmp	r5, r4
 8013a2a:	d10b      	bne.n	8013a44 <_free_r+0x70>
 8013a2c:	6824      	ldr	r4, [r4, #0]
 8013a2e:	4421      	add	r1, r4
 8013a30:	1854      	adds	r4, r2, r1
 8013a32:	42a3      	cmp	r3, r4
 8013a34:	6011      	str	r1, [r2, #0]
 8013a36:	d1e0      	bne.n	80139fa <_free_r+0x26>
 8013a38:	681c      	ldr	r4, [r3, #0]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	6053      	str	r3, [r2, #4]
 8013a3e:	4421      	add	r1, r4
 8013a40:	6011      	str	r1, [r2, #0]
 8013a42:	e7da      	b.n	80139fa <_free_r+0x26>
 8013a44:	d902      	bls.n	8013a4c <_free_r+0x78>
 8013a46:	230c      	movs	r3, #12
 8013a48:	6003      	str	r3, [r0, #0]
 8013a4a:	e7d6      	b.n	80139fa <_free_r+0x26>
 8013a4c:	6825      	ldr	r5, [r4, #0]
 8013a4e:	1961      	adds	r1, r4, r5
 8013a50:	428b      	cmp	r3, r1
 8013a52:	bf04      	itt	eq
 8013a54:	6819      	ldreq	r1, [r3, #0]
 8013a56:	685b      	ldreq	r3, [r3, #4]
 8013a58:	6063      	str	r3, [r4, #4]
 8013a5a:	bf04      	itt	eq
 8013a5c:	1949      	addeq	r1, r1, r5
 8013a5e:	6021      	streq	r1, [r4, #0]
 8013a60:	6054      	str	r4, [r2, #4]
 8013a62:	e7ca      	b.n	80139fa <_free_r+0x26>
 8013a64:	b003      	add	sp, #12
 8013a66:	bd30      	pop	{r4, r5, pc}
 8013a68:	20003864 	.word	0x20003864

08013a6c <_realloc_r>:
 8013a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a70:	4680      	mov	r8, r0
 8013a72:	4614      	mov	r4, r2
 8013a74:	460e      	mov	r6, r1
 8013a76:	b921      	cbnz	r1, 8013a82 <_realloc_r+0x16>
 8013a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	f7fd bb31 	b.w	80110e4 <_malloc_r>
 8013a82:	b92a      	cbnz	r2, 8013a90 <_realloc_r+0x24>
 8013a84:	f7ff ffa6 	bl	80139d4 <_free_r>
 8013a88:	4625      	mov	r5, r4
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a90:	f000 fa00 	bl	8013e94 <_malloc_usable_size_r>
 8013a94:	4284      	cmp	r4, r0
 8013a96:	4607      	mov	r7, r0
 8013a98:	d802      	bhi.n	8013aa0 <_realloc_r+0x34>
 8013a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a9e:	d812      	bhi.n	8013ac6 <_realloc_r+0x5a>
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	f7fd fb1e 	bl	80110e4 <_malloc_r>
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d0ed      	beq.n	8013a8a <_realloc_r+0x1e>
 8013aae:	42bc      	cmp	r4, r7
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	bf28      	it	cs
 8013ab6:	463a      	movcs	r2, r7
 8013ab8:	f7fd fac3 	bl	8011042 <memcpy>
 8013abc:	4631      	mov	r1, r6
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7ff ff88 	bl	80139d4 <_free_r>
 8013ac4:	e7e1      	b.n	8013a8a <_realloc_r+0x1e>
 8013ac6:	4635      	mov	r5, r6
 8013ac8:	e7df      	b.n	8013a8a <_realloc_r+0x1e>

08013aca <__ssputs_r>:
 8013aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ace:	688e      	ldr	r6, [r1, #8]
 8013ad0:	429e      	cmp	r6, r3
 8013ad2:	4682      	mov	sl, r0
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	4690      	mov	r8, r2
 8013ad8:	461f      	mov	r7, r3
 8013ada:	d838      	bhi.n	8013b4e <__ssputs_r+0x84>
 8013adc:	898a      	ldrh	r2, [r1, #12]
 8013ade:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ae2:	d032      	beq.n	8013b4a <__ssputs_r+0x80>
 8013ae4:	6825      	ldr	r5, [r4, #0]
 8013ae6:	6909      	ldr	r1, [r1, #16]
 8013ae8:	eba5 0901 	sub.w	r9, r5, r1
 8013aec:	6965      	ldr	r5, [r4, #20]
 8013aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013af6:	3301      	adds	r3, #1
 8013af8:	444b      	add	r3, r9
 8013afa:	106d      	asrs	r5, r5, #1
 8013afc:	429d      	cmp	r5, r3
 8013afe:	bf38      	it	cc
 8013b00:	461d      	movcc	r5, r3
 8013b02:	0553      	lsls	r3, r2, #21
 8013b04:	d531      	bpl.n	8013b6a <__ssputs_r+0xa0>
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7fd faec 	bl	80110e4 <_malloc_r>
 8013b0c:	4606      	mov	r6, r0
 8013b0e:	b950      	cbnz	r0, 8013b26 <__ssputs_r+0x5c>
 8013b10:	230c      	movs	r3, #12
 8013b12:	f8ca 3000 	str.w	r3, [sl]
 8013b16:	89a3      	ldrh	r3, [r4, #12]
 8013b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b1c:	81a3      	strh	r3, [r4, #12]
 8013b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b26:	6921      	ldr	r1, [r4, #16]
 8013b28:	464a      	mov	r2, r9
 8013b2a:	f7fd fa8a 	bl	8011042 <memcpy>
 8013b2e:	89a3      	ldrh	r3, [r4, #12]
 8013b30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b38:	81a3      	strh	r3, [r4, #12]
 8013b3a:	6126      	str	r6, [r4, #16]
 8013b3c:	6165      	str	r5, [r4, #20]
 8013b3e:	444e      	add	r6, r9
 8013b40:	eba5 0509 	sub.w	r5, r5, r9
 8013b44:	6026      	str	r6, [r4, #0]
 8013b46:	60a5      	str	r5, [r4, #8]
 8013b48:	463e      	mov	r6, r7
 8013b4a:	42be      	cmp	r6, r7
 8013b4c:	d900      	bls.n	8013b50 <__ssputs_r+0x86>
 8013b4e:	463e      	mov	r6, r7
 8013b50:	6820      	ldr	r0, [r4, #0]
 8013b52:	4632      	mov	r2, r6
 8013b54:	4641      	mov	r1, r8
 8013b56:	f7fd fa82 	bl	801105e <memmove>
 8013b5a:	68a3      	ldr	r3, [r4, #8]
 8013b5c:	1b9b      	subs	r3, r3, r6
 8013b5e:	60a3      	str	r3, [r4, #8]
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	4433      	add	r3, r6
 8013b64:	6023      	str	r3, [r4, #0]
 8013b66:	2000      	movs	r0, #0
 8013b68:	e7db      	b.n	8013b22 <__ssputs_r+0x58>
 8013b6a:	462a      	mov	r2, r5
 8013b6c:	f7ff ff7e 	bl	8013a6c <_realloc_r>
 8013b70:	4606      	mov	r6, r0
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d1e1      	bne.n	8013b3a <__ssputs_r+0x70>
 8013b76:	6921      	ldr	r1, [r4, #16]
 8013b78:	4650      	mov	r0, sl
 8013b7a:	f7ff ff2b 	bl	80139d4 <_free_r>
 8013b7e:	e7c7      	b.n	8013b10 <__ssputs_r+0x46>

08013b80 <_svfiprintf_r>:
 8013b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b84:	4698      	mov	r8, r3
 8013b86:	898b      	ldrh	r3, [r1, #12]
 8013b88:	061b      	lsls	r3, r3, #24
 8013b8a:	b09d      	sub	sp, #116	; 0x74
 8013b8c:	4607      	mov	r7, r0
 8013b8e:	460d      	mov	r5, r1
 8013b90:	4614      	mov	r4, r2
 8013b92:	d50e      	bpl.n	8013bb2 <_svfiprintf_r+0x32>
 8013b94:	690b      	ldr	r3, [r1, #16]
 8013b96:	b963      	cbnz	r3, 8013bb2 <_svfiprintf_r+0x32>
 8013b98:	2140      	movs	r1, #64	; 0x40
 8013b9a:	f7fd faa3 	bl	80110e4 <_malloc_r>
 8013b9e:	6028      	str	r0, [r5, #0]
 8013ba0:	6128      	str	r0, [r5, #16]
 8013ba2:	b920      	cbnz	r0, 8013bae <_svfiprintf_r+0x2e>
 8013ba4:	230c      	movs	r3, #12
 8013ba6:	603b      	str	r3, [r7, #0]
 8013ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bac:	e0d1      	b.n	8013d52 <_svfiprintf_r+0x1d2>
 8013bae:	2340      	movs	r3, #64	; 0x40
 8013bb0:	616b      	str	r3, [r5, #20]
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013bb6:	2320      	movs	r3, #32
 8013bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bc0:	2330      	movs	r3, #48	; 0x30
 8013bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013d6c <_svfiprintf_r+0x1ec>
 8013bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bca:	f04f 0901 	mov.w	r9, #1
 8013bce:	4623      	mov	r3, r4
 8013bd0:	469a      	mov	sl, r3
 8013bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bd6:	b10a      	cbz	r2, 8013bdc <_svfiprintf_r+0x5c>
 8013bd8:	2a25      	cmp	r2, #37	; 0x25
 8013bda:	d1f9      	bne.n	8013bd0 <_svfiprintf_r+0x50>
 8013bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8013be0:	d00b      	beq.n	8013bfa <_svfiprintf_r+0x7a>
 8013be2:	465b      	mov	r3, fp
 8013be4:	4622      	mov	r2, r4
 8013be6:	4629      	mov	r1, r5
 8013be8:	4638      	mov	r0, r7
 8013bea:	f7ff ff6e 	bl	8013aca <__ssputs_r>
 8013bee:	3001      	adds	r0, #1
 8013bf0:	f000 80aa 	beq.w	8013d48 <_svfiprintf_r+0x1c8>
 8013bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bf6:	445a      	add	r2, fp
 8013bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8013bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	f000 80a2 	beq.w	8013d48 <_svfiprintf_r+0x1c8>
 8013c04:	2300      	movs	r3, #0
 8013c06:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c0e:	f10a 0a01 	add.w	sl, sl, #1
 8013c12:	9304      	str	r3, [sp, #16]
 8013c14:	9307      	str	r3, [sp, #28]
 8013c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8013c1c:	4654      	mov	r4, sl
 8013c1e:	2205      	movs	r2, #5
 8013c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c24:	4851      	ldr	r0, [pc, #324]	; (8013d6c <_svfiprintf_r+0x1ec>)
 8013c26:	f7ec fadb 	bl	80001e0 <memchr>
 8013c2a:	9a04      	ldr	r2, [sp, #16]
 8013c2c:	b9d8      	cbnz	r0, 8013c66 <_svfiprintf_r+0xe6>
 8013c2e:	06d0      	lsls	r0, r2, #27
 8013c30:	bf44      	itt	mi
 8013c32:	2320      	movmi	r3, #32
 8013c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c38:	0711      	lsls	r1, r2, #28
 8013c3a:	bf44      	itt	mi
 8013c3c:	232b      	movmi	r3, #43	; 0x2b
 8013c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c42:	f89a 3000 	ldrb.w	r3, [sl]
 8013c46:	2b2a      	cmp	r3, #42	; 0x2a
 8013c48:	d015      	beq.n	8013c76 <_svfiprintf_r+0xf6>
 8013c4a:	9a07      	ldr	r2, [sp, #28]
 8013c4c:	4654      	mov	r4, sl
 8013c4e:	2000      	movs	r0, #0
 8013c50:	f04f 0c0a 	mov.w	ip, #10
 8013c54:	4621      	mov	r1, r4
 8013c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c5a:	3b30      	subs	r3, #48	; 0x30
 8013c5c:	2b09      	cmp	r3, #9
 8013c5e:	d94e      	bls.n	8013cfe <_svfiprintf_r+0x17e>
 8013c60:	b1b0      	cbz	r0, 8013c90 <_svfiprintf_r+0x110>
 8013c62:	9207      	str	r2, [sp, #28]
 8013c64:	e014      	b.n	8013c90 <_svfiprintf_r+0x110>
 8013c66:	eba0 0308 	sub.w	r3, r0, r8
 8013c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	9304      	str	r3, [sp, #16]
 8013c72:	46a2      	mov	sl, r4
 8013c74:	e7d2      	b.n	8013c1c <_svfiprintf_r+0x9c>
 8013c76:	9b03      	ldr	r3, [sp, #12]
 8013c78:	1d19      	adds	r1, r3, #4
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	9103      	str	r1, [sp, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	bfbb      	ittet	lt
 8013c82:	425b      	neglt	r3, r3
 8013c84:	f042 0202 	orrlt.w	r2, r2, #2
 8013c88:	9307      	strge	r3, [sp, #28]
 8013c8a:	9307      	strlt	r3, [sp, #28]
 8013c8c:	bfb8      	it	lt
 8013c8e:	9204      	strlt	r2, [sp, #16]
 8013c90:	7823      	ldrb	r3, [r4, #0]
 8013c92:	2b2e      	cmp	r3, #46	; 0x2e
 8013c94:	d10c      	bne.n	8013cb0 <_svfiprintf_r+0x130>
 8013c96:	7863      	ldrb	r3, [r4, #1]
 8013c98:	2b2a      	cmp	r3, #42	; 0x2a
 8013c9a:	d135      	bne.n	8013d08 <_svfiprintf_r+0x188>
 8013c9c:	9b03      	ldr	r3, [sp, #12]
 8013c9e:	1d1a      	adds	r2, r3, #4
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	9203      	str	r2, [sp, #12]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	bfb8      	it	lt
 8013ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cac:	3402      	adds	r4, #2
 8013cae:	9305      	str	r3, [sp, #20]
 8013cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d7c <_svfiprintf_r+0x1fc>
 8013cb4:	7821      	ldrb	r1, [r4, #0]
 8013cb6:	2203      	movs	r2, #3
 8013cb8:	4650      	mov	r0, sl
 8013cba:	f7ec fa91 	bl	80001e0 <memchr>
 8013cbe:	b140      	cbz	r0, 8013cd2 <_svfiprintf_r+0x152>
 8013cc0:	2340      	movs	r3, #64	; 0x40
 8013cc2:	eba0 000a 	sub.w	r0, r0, sl
 8013cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8013cca:	9b04      	ldr	r3, [sp, #16]
 8013ccc:	4303      	orrs	r3, r0
 8013cce:	3401      	adds	r4, #1
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cd6:	4826      	ldr	r0, [pc, #152]	; (8013d70 <_svfiprintf_r+0x1f0>)
 8013cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cdc:	2206      	movs	r2, #6
 8013cde:	f7ec fa7f 	bl	80001e0 <memchr>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d038      	beq.n	8013d58 <_svfiprintf_r+0x1d8>
 8013ce6:	4b23      	ldr	r3, [pc, #140]	; (8013d74 <_svfiprintf_r+0x1f4>)
 8013ce8:	bb1b      	cbnz	r3, 8013d32 <_svfiprintf_r+0x1b2>
 8013cea:	9b03      	ldr	r3, [sp, #12]
 8013cec:	3307      	adds	r3, #7
 8013cee:	f023 0307 	bic.w	r3, r3, #7
 8013cf2:	3308      	adds	r3, #8
 8013cf4:	9303      	str	r3, [sp, #12]
 8013cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cf8:	4433      	add	r3, r6
 8013cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8013cfc:	e767      	b.n	8013bce <_svfiprintf_r+0x4e>
 8013cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d02:	460c      	mov	r4, r1
 8013d04:	2001      	movs	r0, #1
 8013d06:	e7a5      	b.n	8013c54 <_svfiprintf_r+0xd4>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	3401      	adds	r4, #1
 8013d0c:	9305      	str	r3, [sp, #20]
 8013d0e:	4619      	mov	r1, r3
 8013d10:	f04f 0c0a 	mov.w	ip, #10
 8013d14:	4620      	mov	r0, r4
 8013d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d1a:	3a30      	subs	r2, #48	; 0x30
 8013d1c:	2a09      	cmp	r2, #9
 8013d1e:	d903      	bls.n	8013d28 <_svfiprintf_r+0x1a8>
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d0c5      	beq.n	8013cb0 <_svfiprintf_r+0x130>
 8013d24:	9105      	str	r1, [sp, #20]
 8013d26:	e7c3      	b.n	8013cb0 <_svfiprintf_r+0x130>
 8013d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e7f0      	b.n	8013d14 <_svfiprintf_r+0x194>
 8013d32:	ab03      	add	r3, sp, #12
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	462a      	mov	r2, r5
 8013d38:	4b0f      	ldr	r3, [pc, #60]	; (8013d78 <_svfiprintf_r+0x1f8>)
 8013d3a:	a904      	add	r1, sp, #16
 8013d3c:	4638      	mov	r0, r7
 8013d3e:	f7fd fc3f 	bl	80115c0 <_printf_float>
 8013d42:	1c42      	adds	r2, r0, #1
 8013d44:	4606      	mov	r6, r0
 8013d46:	d1d6      	bne.n	8013cf6 <_svfiprintf_r+0x176>
 8013d48:	89ab      	ldrh	r3, [r5, #12]
 8013d4a:	065b      	lsls	r3, r3, #25
 8013d4c:	f53f af2c 	bmi.w	8013ba8 <_svfiprintf_r+0x28>
 8013d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d52:	b01d      	add	sp, #116	; 0x74
 8013d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d58:	ab03      	add	r3, sp, #12
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	462a      	mov	r2, r5
 8013d5e:	4b06      	ldr	r3, [pc, #24]	; (8013d78 <_svfiprintf_r+0x1f8>)
 8013d60:	a904      	add	r1, sp, #16
 8013d62:	4638      	mov	r0, r7
 8013d64:	f7fd fed0 	bl	8011b08 <_printf_i>
 8013d68:	e7eb      	b.n	8013d42 <_svfiprintf_r+0x1c2>
 8013d6a:	bf00      	nop
 8013d6c:	0801569c 	.word	0x0801569c
 8013d70:	080156a6 	.word	0x080156a6
 8013d74:	080115c1 	.word	0x080115c1
 8013d78:	08013acb 	.word	0x08013acb
 8013d7c:	080156a2 	.word	0x080156a2

08013d80 <_read_r>:
 8013d80:	b538      	push	{r3, r4, r5, lr}
 8013d82:	4d07      	ldr	r5, [pc, #28]	; (8013da0 <_read_r+0x20>)
 8013d84:	4604      	mov	r4, r0
 8013d86:	4608      	mov	r0, r1
 8013d88:	4611      	mov	r1, r2
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	602a      	str	r2, [r5, #0]
 8013d8e:	461a      	mov	r2, r3
 8013d90:	f7ee fc5a 	bl	8002648 <_read>
 8013d94:	1c43      	adds	r3, r0, #1
 8013d96:	d102      	bne.n	8013d9e <_read_r+0x1e>
 8013d98:	682b      	ldr	r3, [r5, #0]
 8013d9a:	b103      	cbz	r3, 8013d9e <_read_r+0x1e>
 8013d9c:	6023      	str	r3, [r4, #0]
 8013d9e:	bd38      	pop	{r3, r4, r5, pc}
 8013da0:	2000386c 	.word	0x2000386c

08013da4 <_raise_r>:
 8013da4:	291f      	cmp	r1, #31
 8013da6:	b538      	push	{r3, r4, r5, lr}
 8013da8:	4604      	mov	r4, r0
 8013daa:	460d      	mov	r5, r1
 8013dac:	d904      	bls.n	8013db8 <_raise_r+0x14>
 8013dae:	2316      	movs	r3, #22
 8013db0:	6003      	str	r3, [r0, #0]
 8013db2:	f04f 30ff 	mov.w	r0, #4294967295
 8013db6:	bd38      	pop	{r3, r4, r5, pc}
 8013db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013dba:	b112      	cbz	r2, 8013dc2 <_raise_r+0x1e>
 8013dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013dc0:	b94b      	cbnz	r3, 8013dd6 <_raise_r+0x32>
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f000 f830 	bl	8013e28 <_getpid_r>
 8013dc8:	462a      	mov	r2, r5
 8013dca:	4601      	mov	r1, r0
 8013dcc:	4620      	mov	r0, r4
 8013dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dd2:	f000 b817 	b.w	8013e04 <_kill_r>
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d00a      	beq.n	8013df0 <_raise_r+0x4c>
 8013dda:	1c59      	adds	r1, r3, #1
 8013ddc:	d103      	bne.n	8013de6 <_raise_r+0x42>
 8013dde:	2316      	movs	r3, #22
 8013de0:	6003      	str	r3, [r0, #0]
 8013de2:	2001      	movs	r0, #1
 8013de4:	e7e7      	b.n	8013db6 <_raise_r+0x12>
 8013de6:	2400      	movs	r4, #0
 8013de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013dec:	4628      	mov	r0, r5
 8013dee:	4798      	blx	r3
 8013df0:	2000      	movs	r0, #0
 8013df2:	e7e0      	b.n	8013db6 <_raise_r+0x12>

08013df4 <raise>:
 8013df4:	4b02      	ldr	r3, [pc, #8]	; (8013e00 <raise+0xc>)
 8013df6:	4601      	mov	r1, r0
 8013df8:	6818      	ldr	r0, [r3, #0]
 8013dfa:	f7ff bfd3 	b.w	8013da4 <_raise_r>
 8013dfe:	bf00      	nop
 8013e00:	20000058 	.word	0x20000058

08013e04 <_kill_r>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	4d07      	ldr	r5, [pc, #28]	; (8013e24 <_kill_r+0x20>)
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	4608      	mov	r0, r1
 8013e0e:	4611      	mov	r1, r2
 8013e10:	602b      	str	r3, [r5, #0]
 8013e12:	f7ee fbff 	bl	8002614 <_kill>
 8013e16:	1c43      	adds	r3, r0, #1
 8013e18:	d102      	bne.n	8013e20 <_kill_r+0x1c>
 8013e1a:	682b      	ldr	r3, [r5, #0]
 8013e1c:	b103      	cbz	r3, 8013e20 <_kill_r+0x1c>
 8013e1e:	6023      	str	r3, [r4, #0]
 8013e20:	bd38      	pop	{r3, r4, r5, pc}
 8013e22:	bf00      	nop
 8013e24:	2000386c 	.word	0x2000386c

08013e28 <_getpid_r>:
 8013e28:	f7ee bbec 	b.w	8002604 <_getpid>

08013e2c <_fstat_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4d07      	ldr	r5, [pc, #28]	; (8013e4c <_fstat_r+0x20>)
 8013e30:	2300      	movs	r3, #0
 8013e32:	4604      	mov	r4, r0
 8013e34:	4608      	mov	r0, r1
 8013e36:	4611      	mov	r1, r2
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	f7ee fc2e 	bl	800269a <_fstat>
 8013e3e:	1c43      	adds	r3, r0, #1
 8013e40:	d102      	bne.n	8013e48 <_fstat_r+0x1c>
 8013e42:	682b      	ldr	r3, [r5, #0]
 8013e44:	b103      	cbz	r3, 8013e48 <_fstat_r+0x1c>
 8013e46:	6023      	str	r3, [r4, #0]
 8013e48:	bd38      	pop	{r3, r4, r5, pc}
 8013e4a:	bf00      	nop
 8013e4c:	2000386c 	.word	0x2000386c

08013e50 <_isatty_r>:
 8013e50:	b538      	push	{r3, r4, r5, lr}
 8013e52:	4d06      	ldr	r5, [pc, #24]	; (8013e6c <_isatty_r+0x1c>)
 8013e54:	2300      	movs	r3, #0
 8013e56:	4604      	mov	r4, r0
 8013e58:	4608      	mov	r0, r1
 8013e5a:	602b      	str	r3, [r5, #0]
 8013e5c:	f7ee fc2d 	bl	80026ba <_isatty>
 8013e60:	1c43      	adds	r3, r0, #1
 8013e62:	d102      	bne.n	8013e6a <_isatty_r+0x1a>
 8013e64:	682b      	ldr	r3, [r5, #0]
 8013e66:	b103      	cbz	r3, 8013e6a <_isatty_r+0x1a>
 8013e68:	6023      	str	r3, [r4, #0]
 8013e6a:	bd38      	pop	{r3, r4, r5, pc}
 8013e6c:	2000386c 	.word	0x2000386c

08013e70 <__ascii_mbtowc>:
 8013e70:	b082      	sub	sp, #8
 8013e72:	b901      	cbnz	r1, 8013e76 <__ascii_mbtowc+0x6>
 8013e74:	a901      	add	r1, sp, #4
 8013e76:	b142      	cbz	r2, 8013e8a <__ascii_mbtowc+0x1a>
 8013e78:	b14b      	cbz	r3, 8013e8e <__ascii_mbtowc+0x1e>
 8013e7a:	7813      	ldrb	r3, [r2, #0]
 8013e7c:	600b      	str	r3, [r1, #0]
 8013e7e:	7812      	ldrb	r2, [r2, #0]
 8013e80:	1e10      	subs	r0, r2, #0
 8013e82:	bf18      	it	ne
 8013e84:	2001      	movne	r0, #1
 8013e86:	b002      	add	sp, #8
 8013e88:	4770      	bx	lr
 8013e8a:	4610      	mov	r0, r2
 8013e8c:	e7fb      	b.n	8013e86 <__ascii_mbtowc+0x16>
 8013e8e:	f06f 0001 	mvn.w	r0, #1
 8013e92:	e7f8      	b.n	8013e86 <__ascii_mbtowc+0x16>

08013e94 <_malloc_usable_size_r>:
 8013e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e98:	1f18      	subs	r0, r3, #4
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	bfbc      	itt	lt
 8013e9e:	580b      	ldrlt	r3, [r1, r0]
 8013ea0:	18c0      	addlt	r0, r0, r3
 8013ea2:	4770      	bx	lr

08013ea4 <__ascii_wctomb>:
 8013ea4:	b149      	cbz	r1, 8013eba <__ascii_wctomb+0x16>
 8013ea6:	2aff      	cmp	r2, #255	; 0xff
 8013ea8:	bf85      	ittet	hi
 8013eaa:	238a      	movhi	r3, #138	; 0x8a
 8013eac:	6003      	strhi	r3, [r0, #0]
 8013eae:	700a      	strbls	r2, [r1, #0]
 8013eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013eb4:	bf98      	it	ls
 8013eb6:	2001      	movls	r0, #1
 8013eb8:	4770      	bx	lr
 8013eba:	4608      	mov	r0, r1
 8013ebc:	4770      	bx	lr
	...

08013ec0 <_init>:
 8013ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec2:	bf00      	nop
 8013ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ec6:	bc08      	pop	{r3}
 8013ec8:	469e      	mov	lr, r3
 8013eca:	4770      	bx	lr

08013ecc <_fini>:
 8013ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ece:	bf00      	nop
 8013ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ed2:	bc08      	pop	{r3}
 8013ed4:	469e      	mov	lr, r3
 8013ed6:	4770      	bx	lr
