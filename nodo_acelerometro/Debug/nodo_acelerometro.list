
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb8  08013d54  08013d54  00023d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c0c  08015c0c  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08015c0c  08015c0c  00025c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c14  08015c14  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c14  08015c14  00025c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c18  08015c18  00025c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08015c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e78  200000b8  08015cd4  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f30  08015cd4  00034f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003970e  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dfc  00000000  00000000  000697f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fc0  00000000  00000000  000705f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d28  00000000  00000000  000735b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098ec  00000000  00000000  000762e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034a2b  00000000  00000000  0007fbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117daf  00000000  00000000  000b45f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d978  00000000  00000000  001cc3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d3c 	.word	0x08013d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08013d3c 	.word	0x08013d3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void wifiStartTask_func(void *argument);
void temp_sub_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f007 fa56 	bl	8007a90 <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007cc 	.word	0x200007cc
 80005ec:	20000224 	.word	0x20000224

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007cc 	.word	0x200007cc

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 faab 	bl	8002b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8c8 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb24 	bl	8000c60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f928 	bl	800086c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f95e 	bl	80008dc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f99a 	bl	8000958 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa1a 	bl	8000a5c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa8c 	bl	8000b44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faba 	bl	8000ba4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fae8 	bl	8000c04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa50 	bl	8000ad8 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f9b4 	bl	80009a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcce 	bl	8000fdc <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <main+0x114>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <main+0x114>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	4833      	ldr	r0, [pc, #204]	; (8000720 <main+0x118>)
 8000652:	f012 fd47 	bl	80130e4 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f00e fd4d 	bl	800f0f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (2, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a32      	ldr	r2, [pc, #200]	; (8000724 <main+0x11c>)
 800065c:	2104      	movs	r1, #4
 800065e:	2002      	movs	r0, #2
 8000660:	f00e ff0e 	bl	800f480 <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a30      	ldr	r2, [pc, #192]	; (8000728 <main+0x120>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <main+0x124>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00e ff06 	bl	800f480 <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <main+0x128>)
 8000678:	6013      	str	r3, [r2, #0]

  /* creation of publish_queue */
  publish_queueHandle = osMessageQueueNew (5, sizeof(uintptr_t), &publish_queue_attributes);
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <main+0x12c>)
 800067c:	2104      	movs	r1, #4
 800067e:	2005      	movs	r0, #5
 8000680:	f00e fefe 	bl	800f480 <osMessageQueueNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <main+0x130>)
 8000688:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <main+0x134>)
 800068c:	2100      	movs	r1, #0
 800068e:	482c      	ldr	r0, [pc, #176]	; (8000740 <main+0x138>)
 8000690:	f00e fd7a 	bl	800f188 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <main+0x13c>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <main+0x140>)
 800069c:	2100      	movs	r1, #0
 800069e:	482b      	ldr	r0, [pc, #172]	; (800074c <main+0x144>)
 80006a0:	f00e fd72 	bl	800f188 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0x148>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <main+0x14c>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <main+0x150>)
 80006b0:	f00e fd6a 	bl	800f188 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <main+0x154>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006ba:	4a29      	ldr	r2, [pc, #164]	; (8000760 <main+0x158>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4829      	ldr	r0, [pc, #164]	; (8000764 <main+0x15c>)
 80006c0:	f00e fd62 	bl	800f188 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <main+0x160>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ca:	4a28      	ldr	r2, [pc, #160]	; (800076c <main+0x164>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4828      	ldr	r0, [pc, #160]	; (8000770 <main+0x168>)
 80006d0:	f00e fd5a 	bl	800f188 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <main+0x16c>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006da:	4a27      	ldr	r2, [pc, #156]	; (8000778 <main+0x170>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4827      	ldr	r0, [pc, #156]	; (800077c <main+0x174>)
 80006e0:	f00e fd52 	bl	800f188 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <main+0x178>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <main+0x17c>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4826      	ldr	r0, [pc, #152]	; (8000788 <main+0x180>)
 80006f0:	f00e fd4a 	bl	800f188 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <main+0x184>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* creation of temp_sub */
  temp_subHandle = osThreadNew(temp_sub_func, NULL, &temp_sub_attributes);
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <main+0x188>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4825      	ldr	r0, [pc, #148]	; (8000794 <main+0x18c>)
 8000700:	f00e fd42 	bl	800f188 <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <main+0x190>)
 8000708:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800070a:	2201      	movs	r2, #1
 800070c:	4923      	ldr	r1, [pc, #140]	; (800079c <main+0x194>)
 800070e:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0x198>)
 8000710:	f007 fd98 	bl	8008244 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000714:	f00e fd12 	bl	800f13c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x110>
 800071a:	bf00      	nop
 800071c:	200007c4 	.word	0x200007c4
 8000720:	08013e4c 	.word	0x08013e4c
 8000724:	08015758 	.word	0x08015758
 8000728:	200007a0 	.word	0x200007a0
 800072c:	08015770 	.word	0x08015770
 8000730:	200007a4 	.word	0x200007a4
 8000734:	08015788 	.word	0x08015788
 8000738:	200007a8 	.word	0x200007a8
 800073c:	08015638 	.word	0x08015638
 8000740:	08001239 	.word	0x08001239
 8000744:	20000780 	.word	0x20000780
 8000748:	0801565c 	.word	0x0801565c
 800074c:	080018f5 	.word	0x080018f5
 8000750:	20000784 	.word	0x20000784
 8000754:	08015680 	.word	0x08015680
 8000758:	08001aad 	.word	0x08001aad
 800075c:	20000788 	.word	0x20000788
 8000760:	080156a4 	.word	0x080156a4
 8000764:	08001b15 	.word	0x08001b15
 8000768:	2000078c 	.word	0x2000078c
 800076c:	080156c8 	.word	0x080156c8
 8000770:	08001b65 	.word	0x08001b65
 8000774:	20000790 	.word	0x20000790
 8000778:	080156ec 	.word	0x080156ec
 800077c:	08001ba1 	.word	0x08001ba1
 8000780:	20000794 	.word	0x20000794
 8000784:	08015710 	.word	0x08015710
 8000788:	08001cb1 	.word	0x08001cb1
 800078c:	20000798 	.word	0x20000798
 8000790:	08015734 	.word	0x08015734
 8000794:	08001ccd 	.word	0x08001ccd
 8000798:	2000079c 	.word	0x2000079c
 800079c:	200007d0 	.word	0x200007d0
 80007a0:	20000270 	.word	0x20000270

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b096      	sub	sp, #88	; 0x58
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2244      	movs	r2, #68	; 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f012 f885 	bl	80128c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ca:	f003 feb5 	bl	8004538 <HAL_PWREx_ControlVoltageScaling>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d4:	f001 faa4 	bl	8001d20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d8:	f003 fe90 	bl	80044fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xc4>)
 80007de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xc4>)
 80007e4:	f023 0318 	bic.w	r3, r3, #24
 80007e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007ec:	231c      	movs	r3, #28
 80007ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000808:	2301      	movs	r3, #1
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000810:	2328      	movs	r3, #40	; 0x28
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000814:	2307      	movs	r3, #7
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4618      	mov	r0, r3
 8000826:	f003 ffa9 	bl	800477c <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000830:	f001 fa76 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2104      	movs	r1, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fb7d 	bl	8004f4c <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000858:	f001 fa62 	bl	8001d20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800085c:	f005 f898 	bl	8005990 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000860:	bf00      	nop
 8000862:	3758      	adds	r7, #88	; 0x58
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <MX_DFSDM1_Init+0x6c>)
 8000874:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000878:	2201      	movs	r2, #1
 800087a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008c2:	f002 fac1 	bl	8002e48 <HAL_DFSDM_ChannelInit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008cc:	f001 fa28 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	40016020 	.word	0x40016020

080008dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C2_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C2_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C2_Init+0x74>)
 80008e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80008ec:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_I2C2_Init+0x74>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_I2C2_Init+0x74>)
 800091a:	f002 ff07 	bl	800372c <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000924:	f001 f9fc 	bl	8001d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_I2C2_Init+0x74>)
 800092c:	f003 fc06 	bl	800413c <HAL_I2CEx_ConfigAnalogFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000936:	f001 f9f3 	bl	8001d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C2_Init+0x74>)
 800093e:	f003 fc48 	bl	80041d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000948:	f001 f9ea 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000010c 	.word	0x2000010c
 8000954:	40005800 	.word	0x40005800

08000958 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_QUADSPI_Init+0x44>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_QUADSPI_Init+0x48>)
 8000960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000964:	2202      	movs	r2, #2
 8000966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_QUADSPI_Init+0x44>)
 800096a:	2204      	movs	r2, #4
 800096c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000970:	2210      	movs	r2, #16
 8000972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000976:	2217      	movs	r2, #23
 8000978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_QUADSPI_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000988:	f003 fe3c 	bl	8004604 <HAL_QSPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000992:	f001 f9c5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000158 	.word	0x20000158
 80009a0:	a0001000 	.word	0xa0001000

080009a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <MX_RTC_Init+0xb4>)
 80009c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ca:	227f      	movs	r2, #127	; 0x7f
 80009cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ee:	f005 f9b1 	bl	8005d54 <HAL_RTC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009f8:	f001 f992 	bl	8001d20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009fc:	230d      	movs	r3, #13
 80009fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a18:	f005 fa17 	bl	8005e4a <HAL_RTC_SetTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a22:	f001 f97d 	bl	8001d20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a3e:	f005 fafd 	bl	800603c <HAL_RTC_SetDate>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f001 f96a 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000019c 	.word	0x2000019c
 8000a58:	40002800 	.word	0x40002800

08000a5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_SPI3_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_SPI3_Init+0x74>)
 8000abc:	f005 fc64 	bl	8006388 <HAL_SPI_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f001 f92b 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001c0 	.word	0x200001c0
 8000ad4:	40003c00 	.word	0x40003c00

08000ad8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_TIM7_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000afc:	f240 321f 	movw	r2, #799	; 0x31f
 8000b00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b0a:	f006 ff6a 	bl	80079e2 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b14:	f001 f904 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b26:	f007 fa05 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f001 f8f6 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000224 	.word	0x20000224
 8000b40:	40001400 	.word	0x40001400

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART1_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b88:	f007 fa7a 	bl	8008080 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f001 f8c5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000270 	.word	0x20000270
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART3_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be8:	f007 fa4a 	bl	8008080 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f001 f895 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002f4 	.word	0x200002f4
 8000c00:	40004800 	.word	0x40004800

08000c04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	2206      	movs	r2, #6
 8000c14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	f003 fb0f 	bl	800426a <HAL_PCD_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c52:	f001 f865 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000378 	.word	0x20000378

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4bbb      	ldr	r3, [pc, #748]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4aba      	ldr	r2, [pc, #744]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4bb8      	ldr	r3, [pc, #736]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4bb5      	ldr	r3, [pc, #724]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4ab4      	ldr	r2, [pc, #720]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4bb2      	ldr	r3, [pc, #712]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4baf      	ldr	r3, [pc, #700]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4aae      	ldr	r2, [pc, #696]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4bac      	ldr	r3, [pc, #688]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4ba9      	ldr	r3, [pc, #676]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4aa8      	ldr	r2, [pc, #672]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4ba6      	ldr	r3, [pc, #664]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4ba3      	ldr	r3, [pc, #652]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4aa2      	ldr	r2, [pc, #648]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4ba0      	ldr	r3, [pc, #640]	; (8000f64 <MX_GPIO_Init+0x304>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cf4:	489c      	ldr	r0, [pc, #624]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000cf6:	f002 fce9 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f248 1124 	movw	r1, #33060	; 0x8124
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f002 fce2 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d0e:	4897      	ldr	r0, [pc, #604]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000d10:	f002 fcdc 	bl	80036cc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d1a:	4895      	ldr	r0, [pc, #596]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000d1c:	f002 fcd6 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4892      	ldr	r0, [pc, #584]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000d28:	f002 fcd0 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d32:	4890      	ldr	r0, [pc, #576]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000d34:	f002 fcca 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	488a      	ldr	r0, [pc, #552]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d3e:	f002 fcc5 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d42:	f240 1315 	movw	r3, #277	; 0x115
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4883      	ldr	r0, [pc, #524]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d5c:	f002 fa00 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d60:	236a      	movs	r3, #106	; 0x6a
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	487d      	ldr	r0, [pc, #500]	; (8000f68 <MX_GPIO_Init+0x308>)
 8000d74:	f002 f9f4 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d78:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7e:	4b7e      	ldr	r3, [pc, #504]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4879      	ldr	r0, [pc, #484]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000d8e:	f002 f9e7 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d92:	233f      	movs	r3, #63	; 0x3f
 8000d94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d96:	230b      	movs	r3, #11
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4873      	ldr	r0, [pc, #460]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000da6:	f002 f9db 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000daa:	2303      	movs	r3, #3
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f002 f9ca 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000dcc:	f248 1324 	movw	r3, #33060	; 0x8124
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f002 f9ba 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000dec:	2308      	movs	r3, #8
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f002 f9a9 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e12:	230b      	movs	r3, #11
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f002 f99c 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e28:	23c0      	movs	r3, #192	; 0xc0
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f002 f98b 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4843      	ldr	r0, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e5e:	f002 f97f 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	483d      	ldr	r0, [pc, #244]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e76:	f002 f973 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e7a:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e7e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4836      	ldr	r0, [pc, #216]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000e94:	f002 f964 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e98:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e9c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x318>)
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000eae:	f002 f957 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000eb2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4829      	ldr	r0, [pc, #164]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000ecc:	f002 f948 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ed0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x314>)
 8000eea:	f002 f939 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000f0a:	f002 f929 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f0e:	2378      	movs	r3, #120	; 0x78
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_GPIO_Init+0x310>)
 8000f2a:	f002 f919 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f40:	2304      	movs	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x30c>)
 8000f4c:	f002 f908 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2007      	movs	r0, #7
 8000f56:	f001 ff3f 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f001 ff58 	bl	8002e10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	e00b      	b.n	8000f7c <MX_GPIO_Init+0x31c>
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48001000 	.word	0x48001000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48000800 	.word	0x48000800
 8000f78:	10110000 	.word	0x10110000
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2017      	movs	r0, #23
 8000f80:	f001 ff2a 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f84:	2017      	movs	r0, #23
 8000f86:	f001 ff43 	bl	8002e10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f001 ff22 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f001 ff3b 	bl	8002e10 <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop

08000fa4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e009      	b.n	8000fca <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fae0 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf1      	blt.n	8000fb6 <_write+0x12>
	}
	return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fe2:	f008 fd39 	bl	8009a58 <BSP_ACCELERO_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12f      	bne.n	8001050 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000ff0:	210b      	movs	r1, #11
 8000ff2:	20d4      	movs	r0, #212	; 0xd4
 8000ff4:	f008 fcf4 	bl	80099e0 <SENSOR_IO_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001002:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	461a      	mov	r2, r3
 8001008:	210b      	movs	r1, #11
 800100a:	20d4      	movs	r0, #212	; 0xd4
 800100c:	f008 fcce 	bl	80099ac <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001010:	210d      	movs	r1, #13
 8001012:	20d4      	movs	r0, #212	; 0xd4
 8001014:	f008 fce4 	bl	80099e0 <SENSOR_IO_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	210d      	movs	r1, #13
 800102a:	20d4      	movs	r0, #212	; 0xd4
 800102c:	f008 fcbe 	bl	80099ac <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8001030:	211a      	movs	r1, #26
 8001032:	20d4      	movs	r0, #212	; 0xd4
 8001034:	f008 fcd4 	bl	80099e0 <SENSOR_IO_Read>
 8001038:	4603      	mov	r3, r0
 800103a:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001042:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	461a      	mov	r2, r3
 8001048:	211a      	movs	r1, #26
 800104a:	20d4      	movs	r0, #212	; 0xd4
 800104c:	f008 fcae 	bl	80099ac <SENSOR_IO_Write>
	}
	return ret;
 8001050:	79fb      	ldrb	r3, [r7, #7]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_UART_RxCpltCallback+0x3c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d110      	bne.n	800108e <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800106c:	2201      	movs	r2, #1
 800106e:	490b      	ldr	r1, [pc, #44]	; (800109c <HAL_UART_RxCpltCallback+0x40>)
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_UART_RxCpltCallback+0x3c>)
 8001072:	f007 f8e7 	bl	8008244 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_UART_RxCpltCallback+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_UART_RxCpltCallback+0x44>)
 800107e:	f011 ffab 	bl	8012fd8 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_UART_RxCpltCallback+0x48>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2102      	movs	r1, #2
 8001088:	4618      	mov	r0, r3
 800108a:	f00e f90f 	bl	800f2ac <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000270 	.word	0x20000270
 800109c:	200007d0 	.word	0x200007d0
 80010a0:	08013e68 	.word	0x08013e68
 80010a4:	2000078c 	.word	0x2000078c

080010a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	d00e      	beq.n	80010d8 <HAL_GPIO_EXTI_Callback+0x30>
 80010ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010be:	dc18      	bgt.n	80010f2 <HAL_GPIO_EXTI_Callback+0x4a>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_EXTI_Callback+0x44>
 80010c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010c8:	d113      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_GPIO_EXTI_Callback+0x54>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00e f8eb 	bl	800f2ac <osThreadFlagsSet>
			break;
 80010d6:	e00d      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_GPIO_EXTI_Callback+0x58>)
 80010da:	f012 f803 	bl	80130e4 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_GPIO_EXTI_Callback+0x54>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00e f8e1 	bl	800f2ac <osThreadFlagsSet>
			break;
 80010ea:	e003      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010ec:	f00a f920 	bl	800b330 <SPI_WIFI_ISR>
			break;
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010f2:	bf00      	nop
		}
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000784 	.word	0x20000784
 8001100:	08013e78 	.word	0x08013e78

08001104 <wifi_start>:

static int wifi_start(void)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 800110a:	481d      	ldr	r0, [pc, #116]	; (8001180 <wifi_start+0x7c>)
 800110c:	f011 ffea 	bl	80130e4 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001110:	f00a f91e 	bl	800b350 <WIFI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d129      	bne.n	800116e <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 800111a:	481a      	ldr	r0, [pc, #104]	; (8001184 <wifi_start+0x80>)
 800111c:	f011 ffe2 	bl	80130e4 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <wifi_start+0x84>)
 8001122:	f011 ffdf 	bl	80130e4 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4618      	mov	r0, r3
 800112a:	f00a f95f 	bl	800b3ec <WIFI_GetMAC_Address>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d116      	bne.n	8001162 <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <wifi_start+0x88>)
 8001136:	f011 ffd5 	bl	80130e4 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 800113a:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800113c:	4618      	mov	r0, r3
               MAC_Addr[1],
 800113e:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001140:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001142:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001144:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001146:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001148:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 800114a:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800114c:	9102      	str	r1, [sp, #8]
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	462b      	mov	r3, r5
 8001154:	4622      	mov	r2, r4
 8001156:	4601      	mov	r1, r0
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <wifi_start+0x8c>)
 800115a:	f011 ff3d 	bl	8012fd8 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 800115e:	2300      	movs	r3, #0
 8001160:	e00a      	b.n	8001178 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <wifi_start+0x90>)
 8001164:	f011 ffbe 	bl	80130e4 <puts>
      return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e004      	b.n	8001178 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <wifi_start+0x94>)
 8001170:	f011 ffb8 	bl	80130e4 <puts>
    return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	08013e90 	.word	0x08013e90
 8001184:	08013e9c 	.word	0x08013e9c
 8001188:	08013ea8 	.word	0x08013ea8
 800118c:	08013ec0 	.word	0x08013ec0
 8001190:	08013ed0 	.word	0x08013ed0
 8001194:	08013f10 	.word	0x08013f10
 8001198:	08013f34 	.word	0x08013f34

0800119c <wifi_connect>:

int wifi_connect(char* SSID, char* PASSWORD)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

  wifi_start();
 80011a6:	f7ff ffad 	bl	8001104 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4818      	ldr	r0, [pc, #96]	; (8001210 <wifi_connect+0x74>)
 80011ae:	f011 ff13 	bl	8012fd8 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 80011b2:	2203      	movs	r2, #3
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f00a f8f6 	bl	800b3a8 <WIFI_Connect>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11d      	bne.n	80011fe <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <wifi_connect+0x78>)
 80011c4:	f00a f928 	bl	800b418 <WIFI_GetIP_Address>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d111      	bne.n	80011f2 <wifi_connect+0x56>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <wifi_connect+0x78>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011d2:	4619      	mov	r1, r3
               IP_Addr[1],
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <wifi_connect+0x78>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011d8:	461a      	mov	r2, r3
               IP_Addr[2],
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <wifi_connect+0x78>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011de:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <wifi_connect+0x78>)
 80011e2:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4603      	mov	r3, r0
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <wifi_connect+0x7c>)
 80011ea:	f011 fef5 	bl	8012fd8 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e00a      	b.n	8001208 <wifi_connect+0x6c>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <wifi_connect+0x80>)
 80011f4:	f011 ff76 	bl	80130e4 <puts>
      return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	e004      	b.n	8001208 <wifi_connect+0x6c>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <wifi_connect+0x84>)
 8001200:	f011 ff70 	bl	80130e4 <puts>
     return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08013f40 	.word	0x08013f40
 8001214:	200007c8 	.word	0x200007c8
 8001218:	08013f54 	.word	0x08013f54
 800121c:	08013f90 	.word	0x08013f90
 8001220:	08013fc0 	.word	0x08013fc0

08001224 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <SPI3_IRQHandler+0x10>)
 800122a:	f005 fea9 	bl	8006f80 <HAL_SPI_IRQHandler>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000c94 	.word	0x20000c94

08001238 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800123c:	b0b2      	sub	sp, #200	; 0xc8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[20];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <RTC_set_func+0x25c>)
 800124a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <RTC_set_func+0x260>)
 8001250:	67fb      	str	r3, [r7, #124]	; 0x7c
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <RTC_set_func+0x264>)
 8001254:	67bb      	str	r3, [r7, #120]	; 0x78
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001256:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <RTC_set_func+0x268>)
 8001258:	677b      	str	r3, [r7, #116]	; 0x74
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 800125a:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <RTC_set_func+0x26c>)
 800125c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001260:	461d      	mov	r5, r3
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 0003 	ldmia.w	r5, {r0, r1}
 800126a:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 800126e:	4a8e      	ldr	r2, [pc, #568]	; (80014a8 <RTC_set_func+0x270>)
 8001270:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001274:	ca07      	ldmia	r2, {r0, r1, r2}
 8001276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};


	printf("Empieza el bucle\r\n");
 800127a:	488c      	ldr	r0, [pc, #560]	; (80014ac <RTC_set_func+0x274>)
 800127c:	f011 ff32 	bl	80130e4 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <RTC_set_func+0x278>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001288:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128c:	2200      	movs	r2, #0
 800128e:	f00e f96b 	bl	800f568 <osMessageQueuePut>
 8001292:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	int i,j,m = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	for (i=0;i<6;){
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80012a2:	e12a      	b.n	80014fa <RTC_set_func+0x2c2>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 80012a4:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <RTC_set_func+0x278>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80012ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	18d1      	adds	r1, r2, r3
 80012b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b8:	2200      	movs	r2, #0
 80012ba:	f00e f955 	bl	800f568 <osMessageQueuePut>
 80012be:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		printf("Esperando a que ser reciba el dato\r\n");
 80012c2:	487c      	ldr	r0, [pc, #496]	; (80014b4 <RTC_set_func+0x27c>)
 80012c4:	f011 ff0e 	bl	80130e4 <puts>

		for (j=0;j<3;){
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80012ce:	e039      	b.n	8001344 <RTC_set_func+0x10c>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80012d0:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <RTC_set_func+0x280>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012dc:	18d1      	adds	r1, r2, r3
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2200      	movs	r2, #0
 80012e4:	f00e f9a0 	bl	800f628 <osMessageQueueGet>
 80012e8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 80012ec:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4870      	ldr	r0, [pc, #448]	; (80014bc <RTC_set_func+0x284>)
 80012fc:	f011 fe6c 	bl	8012fd8 <iprintf>
			if(recibido[j]==13){
 8001300:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	d103      	bne.n	8001318 <RTC_set_func+0xe0>
				printf("Ha pulsado intro\r\n");
 8001310:	486b      	ldr	r0, [pc, #428]	; (80014c0 <RTC_set_func+0x288>)
 8001312:	f011 fee7 	bl	80130e4 <puts>
				break;
 8001316:	e019      	b.n	800134c <RTC_set_func+0x114>
			}
			if (recibido[j]==127){
 8001318:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800131c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b7f      	cmp	r3, #127	; 0x7f
 8001326:	d108      	bne.n	800133a <RTC_set_func+0x102>
				printf("Ha pulsado borrar\r\n");
 8001328:	4866      	ldr	r0, [pc, #408]	; (80014c4 <RTC_set_func+0x28c>)
 800132a:	f011 fedb 	bl	80130e4 <puts>
				j--;
 800132e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001332:	3b01      	subs	r3, #1
 8001334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001338:	e004      	b.n	8001344 <RTC_set_func+0x10c>
			}else{
				j++;
 800133a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800133e:	3301      	adds	r3, #1
 8001340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0;j<3;){
 8001344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001348:	2b02      	cmp	r3, #2
 800134a:	ddc1      	ble.n	80012d0 <RTC_set_func+0x98>
			}
		}
		printf("%d\r\n",j);
 800134c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001350:	485d      	ldr	r0, [pc, #372]	; (80014c8 <RTC_set_func+0x290>)
 8001352:	f011 fe41 	bl	8012fd8 <iprintf>
		switch(j){
 8001356:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800135a:	2b03      	cmp	r3, #3
 800135c:	d849      	bhi.n	80013f2 <RTC_set_func+0x1ba>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <RTC_set_func+0x12c>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137d 	.word	0x0800137d
 800136c:	0800138b 	.word	0x0800138b
 8001370:	080013af 	.word	0x080013af
		case 0:
			num_usuario=0;
 8001374:	2300      	movs	r3, #0
 8001376:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 800137a:	e03a      	b.n	80013f2 <RTC_set_func+0x1ba>
		case 1:
			num_usuario = recibido[0]-48;
 800137c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b30      	subs	r3, #48	; 0x30
 8001384:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 8001388:	e033      	b.n	80013f2 <RTC_set_func+0x1ba>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 800138a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800138e:	3b30      	subs	r3, #48	; 0x30
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3b30      	subs	r3, #48	; 0x30
 80013a8:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 80013ac:	e021      	b.n	80013f2 <RTC_set_func+0x1ba>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 80013ae:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80013b2:	3b30      	subs	r3, #48	; 0x30
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	0091      	lsls	r1, r2, #2
 80013c0:	461a      	mov	r2, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80013ce:	3b30      	subs	r3, #48	; 0x30
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	0089      	lsls	r1, r1, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3b30      	subs	r3, #48	; 0x30
 80013ec:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 80013f0:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 80013f2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80013f6:	4619      	mov	r1, r3
 80013f8:	4834      	ldr	r0, [pc, #208]	; (80014cc <RTC_set_func+0x294>)
 80013fa:	f011 fded 	bl	8012fd8 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 80013fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	33b8      	adds	r3, #184	; 0xb8
 8001406:	f107 0210 	add.w	r2, r7, #16
 800140a:	4413      	add	r3, r2
 800140c:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001410:	4619      	mov	r1, r3
 8001412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	33b8      	adds	r3, #184	; 0xb8
 800141a:	f107 0210 	add.w	r2, r7, #16
 800141e:	4413      	add	r3, r2
 8001420:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 8001424:	461a      	mov	r2, r3
 8001426:	482a      	ldr	r0, [pc, #168]	; (80014d0 <RTC_set_func+0x298>)
 8001428:	f011 fdd6 	bl	8012fd8 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 800142c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	33b8      	adds	r3, #184	; 0xb8
 8001434:	f107 0210 	add.w	r2, r7, #16
 8001438:	4413      	add	r3, r2
 800143a:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8001444:	429a      	cmp	r2, r3
 8001446:	d30d      	bcc.n	8001464 <RTC_set_func+0x22c>
 8001448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	33b8      	adds	r3, #184	; 0xb8
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	4413      	add	r3, r2
 8001456:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8001460:	429a      	cmp	r2, r3
 8001462:	d93b      	bls.n	80014dc <RTC_set_func+0x2a4>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <RTC_set_func+0x278>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800146c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001470:	2200      	movs	r2, #0
 8001472:	f00e f879 	bl	800f568 <osMessageQueuePut>
 8001476:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			if (estado == osOK)
 800147a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <RTC_set_func+0x252>
				printf("Enviado valor erroneo\r\n");
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <RTC_set_func+0x29c>)
 8001484:	f011 fe2e 	bl	80130e4 <puts>
 8001488:	e037      	b.n	80014fa <RTC_set_func+0x2c2>
			else
				printf("Algo no va bien\r\n");
 800148a:	4813      	ldr	r0, [pc, #76]	; (80014d8 <RTC_set_func+0x2a0>)
 800148c:	f011 fe2a 	bl	80130e4 <puts>
			if (estado == osOK)
 8001490:	e033      	b.n	80014fa <RTC_set_func+0x2c2>
 8001492:	bf00      	nop
 8001494:	08013fe8 	.word	0x08013fe8
 8001498:	08014008 	.word	0x08014008
 800149c:	08014028 	.word	0x08014028
 80014a0:	08014044 	.word	0x08014044
 80014a4:	08014264 	.word	0x08014264
 80014a8:	0801427c 	.word	0x0801427c
 80014ac:	08014094 	.word	0x08014094
 80014b0:	200007a0 	.word	0x200007a0
 80014b4:	080140a8 	.word	0x080140a8
 80014b8:	200007a4 	.word	0x200007a4
 80014bc:	080140cc 	.word	0x080140cc
 80014c0:	080140e0 	.word	0x080140e0
 80014c4:	080140f4 	.word	0x080140f4
 80014c8:	08014108 	.word	0x08014108
 80014cc:	08014110 	.word	0x08014110
 80014d0:	08014120 	.word	0x08014120
 80014d4:	08014130 	.word	0x08014130
 80014d8:	08014148 	.word	0x08014148
		}else{
			to_change[i]=num_usuario;
 80014dc:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
			i++;
 80014f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014f4:	3301      	adds	r3, #1
 80014f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	for (i=0;i<6;){
 80014fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014fe:	2b05      	cmp	r3, #5
 8001500:	f77f aed0 	ble.w	80012a4 <RTC_set_func+0x6c>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001514:	2300      	movs	r3, #0
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38

	sTime.Hours = to_change[0];
 8001518:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800151c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	sTime.Minutes = to_change[1];
 8001520:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001524:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	sTime.Seconds = to_change[2];
 8001528:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800152c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	48b6      	ldr	r0, [pc, #728]	; (8001814 <RTC_set_func+0x5dc>)
 800153a:	f004 fc86 	bl	8005e4a <HAL_RTC_SetTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <RTC_set_func+0x310>
	  {
	    Error_Handler();
 8001544:	f000 fbec 	bl	8001d20 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001548:	4bb3      	ldr	r3, [pc, #716]	; (8001818 <RTC_set_func+0x5e0>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001550:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001554:	2200      	movs	r2, #0
 8001556:	f00e f807 	bl	800f568 <osMessageQueuePut>

	sDate.Date = to_change[3];
 800155a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800155e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Month = to_change[4];
 8001562:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001566:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Year = to_change[5];
 800156a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800156e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	printf("Anio: %d\r\n",to_change[5]);
 8001572:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001576:	4619      	mov	r1, r3
 8001578:	48a8      	ldr	r0, [pc, #672]	; (800181c <RTC_set_func+0x5e4>)
 800157a:	f011 fd2d 	bl	8012fd8 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800157e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	48a3      	ldr	r0, [pc, #652]	; (8001814 <RTC_set_func+0x5dc>)
 8001588:	f004 fd58 	bl	800603c <HAL_RTC_SetDate>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <RTC_set_func+0x35e>
	{
		Error_Handler();
 8001592:	f000 fbc5 	bl	8001d20 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 8001596:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <RTC_set_func+0x5e0>)
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800159e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015a2:	2200      	movs	r2, #0
 80015a4:	f00d ffe0 	bl	800f568 <osMessageQueuePut>

	const char* msg_wifi_conf_init = "\r\nInicio de configuración del WiFi\r\n";
 80015a8:	4b9d      	ldr	r3, [pc, #628]	; (8001820 <RTC_set_func+0x5e8>)
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
	const char* msg_wifi_connect_init = "\r\nConectando al WiFi\r\n";
 80015ac:	4b9d      	ldr	r3, [pc, #628]	; (8001824 <RTC_set_func+0x5ec>)
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
	const char* msg_wifi_connect_error = "No se ha podido conectar, vuelva a introducir los datos\r\n";
 80015b0:	4b9d      	ldr	r3, [pc, #628]	; (8001828 <RTC_set_func+0x5f0>)
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char* msg_wifi_connect_success = "CONECTADO\r\n\r\n";
 80015b4:	4b9d      	ldr	r3, [pc, #628]	; (800182c <RTC_set_func+0x5f4>)
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
	const char* msg_too_many_characters = "\r\nHas introducido demasiados caracteres, prueba de nuevo\r\n";
 80015b8:	4b9d      	ldr	r3, [pc, #628]	; (8001830 <RTC_set_func+0x5f8>)
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
	const char* msg_introduce_ssid = "Introduce el ssid: ";
 80015bc:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <RTC_set_func+0x5fc>)
 80015be:	623b      	str	r3, [r7, #32]
	const char* msg_introduce_psswrd = "\r\nIntroduce la contraseña: ";
 80015c0:	4b9d      	ldr	r3, [pc, #628]	; (8001838 <RTC_set_func+0x600>)
 80015c2:	61fb      	str	r3, [r7, #28]

//	char ssid[MAX_LEN_SSID];
//	char psswrd[MAX_LEN_PSSWRD];


	osMessageQueuePut(print_queueHandle, &msg_wifi_conf_init, 0, pdMS_TO_TICKS(500));
 80015c4:	4b94      	ldr	r3, [pc, #592]	; (8001818 <RTC_set_func+0x5e0>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80015cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d0:	2200      	movs	r2, #0
 80015d2:	f00d ffc9 	bl	800f568 <osMessageQueuePut>

	//bucle de conexión
	while (1){

		//configuracion ssid
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 80015d6:	4b90      	ldr	r3, [pc, #576]	; (8001818 <RTC_set_func+0x5e0>)
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f107 0120 	add.w	r1, r7, #32
 80015de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015e2:	2200      	movs	r2, #0
 80015e4:	f00d ffc0 	bl	800f568 <osMessageQueuePut>
		for (j=0; j<MAX_LEN_SSID ; ){
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80015ee:	e039      	b.n	8001664 <RTC_set_func+0x42c>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <RTC_set_func+0x604>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015fc:	18d1      	adds	r1, r2, r3
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2200      	movs	r2, #0
 8001604:	f00e f810 	bl	800f628 <osMessageQueueGet>
 8001608:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 800160c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4889      	ldr	r0, [pc, #548]	; (8001840 <RTC_set_func+0x608>)
 800161c:	f011 fcdc 	bl	8012fd8 <iprintf>
			if(recibido[j]==13){
 8001620:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b0d      	cmp	r3, #13
 800162e:	d103      	bne.n	8001638 <RTC_set_func+0x400>
				printf("Ha pulsado intro\r\n");
 8001630:	4884      	ldr	r0, [pc, #528]	; (8001844 <RTC_set_func+0x60c>)
 8001632:	f011 fd57 	bl	80130e4 <puts>
				break;
 8001636:	e019      	b.n	800166c <RTC_set_func+0x434>
			}
			if (recibido[j]==127){
 8001638:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800163c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b7f      	cmp	r3, #127	; 0x7f
 8001646:	d108      	bne.n	800165a <RTC_set_func+0x422>
				printf("Ha pulsado borrar\r\n");
 8001648:	487f      	ldr	r0, [pc, #508]	; (8001848 <RTC_set_func+0x610>)
 800164a:	f011 fd4b 	bl	80130e4 <puts>
				j--;
 800164e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001652:	3b01      	subs	r3, #1
 8001654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001658:	e004      	b.n	8001664 <RTC_set_func+0x42c>
			}else{
				j++;
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	3301      	adds	r3, #1
 8001660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0; j<MAX_LEN_SSID ; ){
 8001664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001668:	2b09      	cmp	r3, #9
 800166a:	ddc1      	ble.n	80015f0 <RTC_set_func+0x3b8>
			}
		}
		if (j==MAX_LEN_SSID){
 800166c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001670:	2b0a      	cmp	r3, #10
 8001672:	d109      	bne.n	8001688 <RTC_set_func+0x450>
			osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <RTC_set_func+0x5e0>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800167c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001680:	2200      	movs	r2, #0
 8001682:	f00d ff71 	bl	800f568 <osMessageQueuePut>
 8001686:	e7a6      	b.n	80015d6 <RTC_set_func+0x39e>
		}else{
 8001688:	466b      	mov	r3, sp
 800168a:	461d      	mov	r5, r3
//			printf("Guardamos el ssid\r\n");
			char ssid[j];
 800168c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001690:	1e4b      	subs	r3, r1, #1
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001696:	460a      	mov	r2, r1
 8001698:	2300      	movs	r3, #0
 800169a:	4690      	mov	r8, r2
 800169c:	4699      	mov	r9, r3
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b2:	460a      	mov	r2, r1
 80016b4:	2300      	movs	r3, #0
 80016b6:	4692      	mov	sl, r2
 80016b8:	469b      	mov	fp, r3
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ce:	460b      	mov	r3, r1
 80016d0:	3307      	adds	r3, #7
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	ebad 0d03 	sub.w	sp, sp, r3
 80016da:	466b      	mov	r3, sp
 80016dc:	3300      	adds	r3, #0
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//			printf("j: %d\r\n",j);
			for (m=0 ; m<j ; m++){
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016e8:	e011      	b.n	800170e <RTC_set_func+0x4d6>
//				printf("m: %d\r\n",m);
//				printf("caracter: %c\r\n",recibido[m]);
				ssid[m] = recibido[m];
 80016ea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016f2:	4413      	add	r3, r2
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80016fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
			for (m=0 ; m<j ; m++){
 8001704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001708:	3301      	adds	r3, #1
 800170a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800170e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001716:	429a      	cmp	r2, r3
 8001718:	dbe7      	blt.n	80016ea <RTC_set_func+0x4b2>
//			printf("ssid: %s\r\n",ssid);
//			printf("longitud del ssid: %d\r\n",strlen(ssid));


			//configuracion contraseña
			osMessageQueuePut(print_queueHandle, &msg_introduce_psswrd, 0, pdMS_TO_TICKS(500));
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <RTC_set_func+0x5e0>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	f107 011c 	add.w	r1, r7, #28
 8001722:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001726:	2200      	movs	r2, #0
 8001728:	f00d ff1e 	bl	800f568 <osMessageQueuePut>

			for (j=0; j<MAX_LEN_PSSWRD ; ){
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001732:	e028      	b.n	8001786 <RTC_set_func+0x54e>
				estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <RTC_set_func+0x604>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800173c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001740:	18d1      	adds	r1, r2, r3
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	2200      	movs	r2, #0
 8001748:	f00d ff6e 	bl	800f628 <osMessageQueueGet>
 800174c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
//				printf("De la cola: %c\r\n",recibido[j]);
				if(recibido[j]==13){
 8001750:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b0d      	cmp	r3, #13
 800175e:	d017      	beq.n	8001790 <RTC_set_func+0x558>
//					printf("Ha pulsado intro\r\n");
					break;
				}
				if (recibido[j]==127){
 8001760:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b7f      	cmp	r3, #127	; 0x7f
 800176e:	d105      	bne.n	800177c <RTC_set_func+0x544>
//					printf("Ha pulsado borrar\r\n");
					j--;
 8001770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001774:	3b01      	subs	r3, #1
 8001776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800177a:	e004      	b.n	8001786 <RTC_set_func+0x54e>
				}else{
					j++;
 800177c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (j=0; j<MAX_LEN_PSSWRD ; ){
 8001786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800178a:	2b13      	cmp	r3, #19
 800178c:	ddd2      	ble.n	8001734 <RTC_set_func+0x4fc>
 800178e:	e000      	b.n	8001792 <RTC_set_func+0x55a>
					break;
 8001790:	bf00      	nop
				}
			}
			if (j==MAX_LEN_PSSWRD){
 8001792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001796:	2b14      	cmp	r3, #20
 8001798:	d109      	bne.n	80017ae <RTC_set_func+0x576>
				osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <RTC_set_func+0x5e0>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a6:	2200      	movs	r2, #0
 80017a8:	f00d fede 	bl	800f568 <osMessageQueuePut>
 80017ac:	e096      	b.n	80018dc <RTC_set_func+0x6a4>
			}else{
 80017ae:	466b      	mov	r3, sp
 80017b0:	461c      	mov	r4, r3
//				printf("Guardamos el psswrd\r\n");
				char psswrd[j];
 80017b2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80017b6:	1e4b      	subs	r3, r1, #1
 80017b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017bc:	460a      	mov	r2, r1
 80017be:	2300      	movs	r3, #0
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	00c3      	lsls	r3, r0, #3
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	00c2      	lsls	r2, r0, #3
 80017da:	460a      	mov	r2, r1
 80017dc:	2300      	movs	r3, #0
 80017de:	603a      	str	r2, [r7, #0]
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	00c3      	lsls	r3, r0, #3
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017f4:	6838      	ldr	r0, [r7, #0]
 80017f6:	00c2      	lsls	r2, r0, #3
 80017f8:	460b      	mov	r3, r1
 80017fa:	3307      	adds	r3, #7
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	ebad 0d03 	sub.w	sp, sp, r3
 8001804:	466b      	mov	r3, sp
 8001806:	3300      	adds	r3, #0
 8001808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
//				printf("j: %d\r\n",j);
				for (m=0 ; m<j ; m++){
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001812:	e02d      	b.n	8001870 <RTC_set_func+0x638>
 8001814:	2000019c 	.word	0x2000019c
 8001818:	200007a0 	.word	0x200007a0
 800181c:	0801415c 	.word	0x0801415c
 8001820:	08014168 	.word	0x08014168
 8001824:	08014190 	.word	0x08014190
 8001828:	080141a8 	.word	0x080141a8
 800182c:	080141e4 	.word	0x080141e4
 8001830:	080141f4 	.word	0x080141f4
 8001834:	08014230 	.word	0x08014230
 8001838:	08014244 	.word	0x08014244
 800183c:	200007a4 	.word	0x200007a4
 8001840:	080140cc 	.word	0x080140cc
 8001844:	080140e0 	.word	0x080140e0
 8001848:	080140f4 	.word	0x080140f4
//					printf("m: %d\r\n",m);
//					printf("caracter: %c\r\n",recibido[m]);
					psswrd[m] = recibido[m];
 800184c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001854:	4413      	add	r3, r2
 8001856:	7819      	ldrb	r1, [r3, #0]
 8001858:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800185c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001860:	4413      	add	r3, r2
 8001862:	460a      	mov	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
				for (m=0 ; m<j ; m++){
 8001866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800186a:	3301      	adds	r3, #1
 800186c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001870:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001878:	429a      	cmp	r2, r3
 800187a:	dbe7      	blt.n	800184c <RTC_set_func+0x614>

				//datos_wifi[i] = recibido[0];
//				printf("psswrd: %s\r\n",psswrd);
//				printf("longitud del psswrd: %d\r\n",strlen(psswrd));

				osMessageQueuePut(print_queueHandle, &msg_wifi_connect_init, 0, pdMS_TO_TICKS(500));
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <RTC_set_func+0x6b4>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001888:	2200      	movs	r2, #0
 800188a:	f00d fe6d 	bl	800f568 <osMessageQueuePut>

				if (wifi_connect(ssid,psswrd) != 0){
 800188e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001892:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001896:	f7ff fc81 	bl	800119c <wifi_connect>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00a      	beq.n	80018b6 <RTC_set_func+0x67e>
					osMessageQueuePut(print_queueHandle, &msg_wifi_connect_error, 0, pdMS_TO_TICKS(500));
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <RTC_set_func+0x6b4>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80018a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ac:	2200      	movs	r2, #0
 80018ae:	f00d fe5b 	bl	800f568 <osMessageQueuePut>
 80018b2:	46a5      	mov	sp, r4
 80018b4:	e012      	b.n	80018dc <RTC_set_func+0x6a4>
				}
				else{
					break;
 80018b6:	bf00      	nop
 80018b8:	46a5      	mov	sp, r4
 80018ba:	46ad      	mov	sp, r5
		}


	}

	osMessageQueuePut(print_queueHandle, &msg_wifi_connect_success, 0, pdMS_TO_TICKS(500));
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <RTC_set_func+0x6b4>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c8:	2200      	movs	r2, #0
 80018ca:	f00d fe4d 	bl	800f568 <osMessageQueuePut>


	osThreadFlagsSet(sendMQTTHandle,0x0001U);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <RTC_set_func+0x6b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00d fce9 	bl	800f2ac <osThreadFlagsSet>
 80018da:	e001      	b.n	80018e0 <RTC_set_func+0x6a8>
 80018dc:	46ad      	mov	sp, r5
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 80018de:	e67a      	b.n	80015d6 <RTC_set_func+0x39e>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80018e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e4:	f00d fdb1 	bl	800f44a <osDelay>
 80018e8:	e7fa      	b.n	80018e0 <RTC_set_func+0x6a8>
 80018ea:	bf00      	nop
 80018ec:	200007a0 	.word	0x200007a0
 80018f0:	20000794 	.word	0x20000794

080018f4 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f6:	b0b3      	sub	sp, #204	; 0xcc
 80018f8:	af0a      	add	r7, sp, #40	; 0x28
 80018fa:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8001916:	4858      	ldr	r0, [pc, #352]	; (8001a78 <readAccel_func+0x184>)
 8001918:	f011 fbe4 	bl	80130e4 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0008U, osFlagsWaitAll, osWaitForever);
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	2101      	movs	r1, #1
 8001922:	2008      	movs	r0, #8
 8001924:	f00d fd10 	bl	800f348 <osThreadFlagsWait>
 8001928:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <readAccel_func+0x188>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f00d fcba 	bl	800f2ac <osThreadFlagsSet>


	printf("ReadAccel task se inicia\r\n");
 8001938:	4851      	ldr	r0, [pc, #324]	; (8001a80 <readAccel_func+0x18c>)
 800193a:	f011 fbd3 	bl	80130e4 <puts>


	/* Infinite loop */
	for(;;)
	{
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	2100      	movs	r1, #0
 8001944:	2006      	movs	r0, #6
 8001946:	f00d fcff 	bl	800f348 <osThreadFlagsWait>
 800194a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 800194e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001952:	f113 0f02 	cmn.w	r3, #2
 8001956:	d103      	bne.n	8001960 <readAccel_func+0x6c>
			printf("Ha pasado media hora\r\n");
 8001958:	484a      	ldr	r0, [pc, #296]	; (8001a84 <readAccel_func+0x190>)
 800195a:	f011 fbc3 	bl	80130e4 <puts>
 800195e:	e006      	b.n	800196e <readAccel_func+0x7a>
		}
		else {
			printf("El usuario quiere enviar aceleraciones, modo continuo = %d\r\n",modo_continuo);
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <readAccel_func+0x194>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	4848      	ldr	r0, [pc, #288]	; (8001a8c <readAccel_func+0x198>)
 800196a:	f011 fb35 	bl	8012fd8 <iprintf>
		}

		if (modo_continuo){
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <readAccel_func+0x194>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <readAccel_func+0x8e>
			max_iter = MUESTRAS_CONTINUO;
 8001978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001980:	e002      	b.n	8001988 <readAccel_func+0x94>
			//osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
		}else{
			max_iter = MUESTRAS_NORMAL;
 8001982:	2305      	movs	r3, #5
 8001984:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			//osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
		}

		for (iter=0 ; iter<max_iter ; iter++){
 8001988:	2300      	movs	r3, #0
 800198a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800198e:	e068      	b.n	8001a62 <readAccel_func+0x16e>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001990:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001994:	f008 f89e 	bl	8009ad4 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8001998:	2200      	movs	r2, #0
 800199a:	493d      	ldr	r1, [pc, #244]	; (8001a90 <readAccel_func+0x19c>)
 800199c:	483d      	ldr	r0, [pc, #244]	; (8001a94 <readAccel_func+0x1a0>)
 800199e:	f004 faf1 	bl	8005f84 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <readAccel_func+0x19c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <readAccel_func+0x19c>)
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <readAccel_func+0x19c>)
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80019ba:	2200      	movs	r2, #0
 80019bc:	4936      	ldr	r1, [pc, #216]	; (8001a98 <readAccel_func+0x1a4>)
 80019be:	4835      	ldr	r0, [pc, #212]	; (8001a94 <readAccel_func+0x1a0>)
 80019c0:	f004 fbc3 	bl	800614a <HAL_RTC_GetDate>
			anio = GetDate.Year;
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <readAccel_func+0x1a4>)
 80019c6:	78db      	ldrb	r3, [r3, #3]
 80019c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 80019cc:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <readAccel_func+0x1a4>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <readAccel_func+0x1a4>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			snprintf(mensaje,100,"%d/%d/%d %d:%d:%d %d,%d,%d,%d",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2],max_iter);
 80019dc:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 80019e0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80019e4:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80019e8:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80019ec:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 80019f0:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 80019f4:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 80019f8:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 80019fc:	60bd      	str	r5, [r7, #8]
 80019fe:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001a02:	607d      	str	r5, [r7, #4]
 8001a04:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 8001a08:	603d      	str	r5, [r7, #0]
 8001a0a:	f8b7 509c 	ldrh.w	r5, [r7, #156]	; 0x9c
 8001a0e:	f107 0620 	add.w	r6, r7, #32
 8001a12:	9508      	str	r5, [sp, #32]
 8001a14:	683d      	ldr	r5, [r7, #0]
 8001a16:	9507      	str	r5, [sp, #28]
 8001a18:	687d      	ldr	r5, [r7, #4]
 8001a1a:	9506      	str	r5, [sp, #24]
 8001a1c:	68bd      	ldr	r5, [r7, #8]
 8001a1e:	9505      	str	r5, [sp, #20]
 8001a20:	9404      	str	r4, [sp, #16]
 8001a22:	9003      	str	r0, [sp, #12]
 8001a24:	9102      	str	r1, [sp, #8]
 8001a26:	9201      	str	r2, [sp, #4]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <readAccel_func+0x1a8>)
 8001a2e:	2164      	movs	r1, #100	; 0x64
 8001a30:	4630      	mov	r0, r6
 8001a32:	f011 fbd9 	bl	80131e8 <sniprintf>
//			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			printf("iter: %d\r\n",iter);
 8001a36:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4818      	ldr	r0, [pc, #96]	; (8001aa0 <readAccel_func+0x1ac>)
 8001a3e:	f011 facb 	bl	8012fd8 <iprintf>


			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(publish_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <readAccel_func+0x1b0>)
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f107 011c 	add.w	r1, r7, #28
 8001a4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f00d fd8a 	bl	800f568 <osMessageQueuePut>
 8001a54:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001a58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001a62:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001a66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d390      	bcc.n	8001990 <readAccel_func+0x9c>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <readAccel_func+0x1b4>)
 8001a70:	f011 fb38 	bl	80130e4 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8001a74:	e763      	b.n	800193e <readAccel_func+0x4a>
 8001a76:	bf00      	nop
 8001a78:	08014288 	.word	0x08014288
 8001a7c:	20000790 	.word	0x20000790
 8001a80:	080142a4 	.word	0x080142a4
 8001a84:	080142c0 	.word	0x080142c0
 8001a88:	200007d1 	.word	0x200007d1
 8001a8c:	080142d8 	.word	0x080142d8
 8001a90:	200007b0 	.word	0x200007b0
 8001a94:	2000019c 	.word	0x2000019c
 8001a98:	200007ac 	.word	0x200007ac
 8001a9c:	08014318 	.word	0x08014318
 8001aa0:	08014338 	.word	0x08014338
 8001aa4:	200007a8 	.word	0x200007a8
 8001aa8:	08014344 	.word	0x08014344

08001aac <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <printTask_func+0x58>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	f107 0108 	add.w	r1, r7, #8
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f00d fdb1 	bl	800f628 <osMessageQueueGet>
 8001ac6:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	461c      	mov	r4, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fb7b 	bl	80001d0 <strlen>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	230a      	movs	r3, #10
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <printTask_func+0x5c>)
 8001ae4:	f006 fb1a 	bl	800811c <HAL_UART_Transmit>
 8001ae8:	e7e4      	b.n	8001ab4 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f113 0f02 	cmn.w	r3, #2
 8001af0:	d103      	bne.n	8001afa <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <printTask_func+0x60>)
 8001af4:	f011 faf6 	bl	80130e4 <puts>
 8001af8:	e7dc      	b.n	8001ab4 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <printTask_func+0x64>)
 8001afc:	f011 faf2 	bl	80130e4 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001b00:	e7d8      	b.n	8001ab4 <printTask_func+0x8>
 8001b02:	bf00      	nop
 8001b04:	200007a0 	.word	0x200007a0
 8001b08:	20000270 	.word	0x20000270
 8001b0c:	080143a4 	.word	0x080143a4
 8001b10:	080143b8 	.word	0x080143b8

08001b14 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	2100      	movs	r1, #0
 8001b26:	2002      	movs	r0, #2
 8001b28:	f00d fc0e 	bl	800f348 <osThreadFlagsWait>
 8001b2c:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <tarea_UART_func+0x40>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	23c8      	movs	r3, #200	; 0xc8
 8001b34:	2200      	movs	r2, #0
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <tarea_UART_func+0x44>)
 8001b38:	f00d fd16 	bl	800f568 <osMessageQueuePut>
 8001b3c:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <tarea_UART_func+0x48>)
 8001b46:	f011 facd 	bl	80130e4 <puts>
 8001b4a:	e7e9      	b.n	8001b20 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <tarea_UART_func+0x4c>)
 8001b4e:	f011 fac9 	bl	80130e4 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8001b52:	e7e5      	b.n	8001b20 <tarea_UART_func+0xc>
 8001b54:	200007a4 	.word	0x200007a4
 8001b58:	200007d0 	.word	0x200007d0
 8001b5c:	080143d4 	.word	0x080143d4
 8001b60:	08014148 	.word	0x08014148

08001b64 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	2101      	movs	r1, #1
 8001b72:	2001      	movs	r0, #1
 8001b74:	f00d fbe8 	bl	800f348 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <temporizador_func+0x30>)
 8001b7a:	f011 fab3 	bl	80130e4 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <temporizador_func+0x34>)
 8001b80:	f00d fc63 	bl	800f44a <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <temporizador_func+0x38>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00d fb8e 	bl	800f2ac <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 8001b90:	e7f5      	b.n	8001b7e <temporizador_func+0x1a>
 8001b92:	bf00      	nop
 8001b94:	080143e0 	.word	0x080143e0
 8001b98:	000f4240 	.word	0x000f4240
 8001b9c:	20000784 	.word	0x20000784

08001ba0 <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a2      	sub	sp, #136	; 0x88
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint16_t max_iter;

	char payLoad[16];


	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001bae:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f00d fbc7 	bl	800f348 <osThreadFlagsWait>

	const uint32_t ulMaxPublishCount = 5UL;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	NetworkContext_t xNetworkContext = { 0 };
 8001bc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext, SOCKET );
 8001bca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f8ab 	bl	8001d2c <prvConnectToServer>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	printf("Mitad de la definicion mqtt\r\n");
 8001bdc:	482b      	ldr	r0, [pc, #172]	; (8001c8c <sendMQTT_func+0xec>)
 8001bde:	f011 fa81 	bl	80130e4 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d00a      	beq.n	8001c00 <sendMQTT_func+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	677b      	str	r3, [r7, #116]	; 0x74
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bfc:	bf00      	nop
 8001bfe:	e7fe      	b.n	8001bfe <sendMQTT_func+0x5e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001c00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f8da 	bl	8001dc4 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	491e      	ldr	r1, [pc, #120]	; (8001c90 <sendMQTT_func+0xf0>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f97e 	bl	8001f18 <prvMQTTSubscribeToTopic>
	printf("Contexto mqtt inicializado\r\n");
 8001c1c:	481d      	ldr	r0, [pc, #116]	; (8001c94 <sendMQTT_func+0xf4>)
 8001c1e:	f011 fa61 	bl	80130e4 <puts>

	osThreadFlagsSet(readAccelHandle,0x0008U);
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <sendMQTT_func+0xf8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2108      	movs	r1, #8
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00d fb3f 	bl	800f2ac <osThreadFlagsSet>


  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000));
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <sendMQTT_func+0xfc>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f00d fcf4 	bl	800f628 <osMessageQueueGet>
 8001c40:	67b8      	str	r0, [r7, #120]	; 0x78

	  if (estado == osOK)
 8001c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <sendMQTT_func+0xc8>
	  {
		  //printf("Publicamos: %s",(char*)mensaje);
		  sprintf(payLoad,"%s",mensaje);
 8001c48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c4e:	4914      	ldr	r1, [pc, #80]	; (8001ca0 <sendMQTT_func+0x100>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f011 fafd 	bl	8013250 <siprintf>
		  prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 8001c56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4911      	ldr	r1, [pc, #68]	; (8001ca4 <sendMQTT_func+0x104>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f92b 	bl	8001ebc <prvMQTTPublishToTopic>
 8001c66:	e7e2      	b.n	8001c2e <sendMQTT_func+0x8e>
	  }
	  else if (estado == osErrorTimeout)
 8001c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c6a:	f113 0f02 	cmn.w	r3, #2
 8001c6e:	d108      	bne.n	8001c82 <sendMQTT_func+0xe2>
	  {
		  printf("Procesamos subscripcion\r\n");
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <sendMQTT_func+0x108>)
 8001c72:	f011 fa37 	bl	80130e4 <puts>
		  MQTT_ProcessLoop(&xMQTTContext);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b f9d3 	bl	800d026 <MQTT_ProcessLoop>
 8001c80:	e7d5      	b.n	8001c2e <sendMQTT_func+0x8e>
	  }
	  else
	  {
		  printf("Error en la tarea sendMQTT\r\n");
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <sendMQTT_func+0x10c>)
 8001c84:	f011 fa2e 	bl	80130e4 <puts>
	  estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000));
 8001c88:	e7d1      	b.n	8001c2e <sendMQTT_func+0x8e>
 8001c8a:	bf00      	nop
 8001c8c:	080143f8 	.word	0x080143f8
 8001c90:	08014418 	.word	0x08014418
 8001c94:	08014434 	.word	0x08014434
 8001c98:	20000784 	.word	0x20000784
 8001c9c:	200007a8 	.word	0x200007a8
 8001ca0:	08014450 	.word	0x08014450
 8001ca4:	08014454 	.word	0x08014454
 8001ca8:	0801446c 	.word	0x0801446c
 8001cac:	08014488 	.word	0x08014488

08001cb0 <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f00d fb42 	bl	800f348 <osThreadFlagsWait>


  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f00d fbc0 	bl	800f44a <osDelay>
 8001cca:	e7fb      	b.n	8001cc4 <wifiStartTask_func+0x14>

08001ccc <temp_sub_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_sub_func */
void temp_sub_func(void *argument)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_sub_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f00d fb34 	bl	800f348 <osThreadFlagsWait>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(15000));
 8001ce0:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001ce4:	f00d fbb1 	bl	800f44a <osDelay>
    osThreadFlagsSet(sendMQTTHandle, TIMER_MQTT);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <temp_sub_func+0x2c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2104      	movs	r1, #4
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00d fadc 	bl	800f2ac <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(15000));
 8001cf4:	e7f4      	b.n	8001ce0 <temp_sub_func+0x14>
 8001cf6:	bf00      	nop
 8001cf8:	20000794 	.word	0x20000794

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0e:	f000 ff43 	bl	8002b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40001000 	.word	0x40001000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>
	...

08001d2c <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext, uint8_t socket )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <prvConnectToServer+0x84>)
 8001d3a:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 8001d3c:	f240 725b 	movw	r2, #1883	; 0x75b
 8001d40:	491c      	ldr	r1, [pc, #112]	; (8001db4 <prvConnectToServer+0x88>)
 8001d42:	481d      	ldr	r0, [pc, #116]	; (8001db8 <prvConnectToServer+0x8c>)
 8001d44:	f011 f948 	bl	8012fd8 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8001d48:	78f8      	ldrb	r0, [r7, #3]
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	2200      	movs	r2, #0
 8001d50:	9201      	str	r2, [sp, #4]
 8001d52:	f240 725b 	movw	r2, #1883	; 0x75b
 8001d56:	9200      	str	r2, [sp, #0]
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <prvConnectToServer+0x90>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f009 fb78 	bl	800b450 <WIFI_OpenClientConnection>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <prvConnectToServer+0x52>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8001d6a:	7bbb      	ldrb	r3, [r7, #14]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <prvConnectToServer+0x94>)
 8001d70:	f011 f932 	bl	8012fd8 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001d74:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d78:	f00d fb67 	bl	800f44a <osDelay>
 8001d7c:	e00f      	b.n	8001d9e <prvConnectToServer+0x72>
		} else {
	        pxNetworkContext->socket = socket;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f240 725b 	movw	r2, #1883	; 0x75b
 8001d98:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d1cb      	bne.n	8001d3c <prvConnectToServer+0x10>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	5e5d795b 	.word	0x5e5d795b
 8001db4:	080144bc 	.word	0x080144bc
 8001db8:	080144d0 	.word	0x080144d0
 8001dbc:	080144f4 	.word	0x080144f4
 8001dc0:	080144fc 	.word	0x080144fc

08001dc4 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	; 0x50
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	7818      	ldrb	r0, [r3, #0]
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	f00d f921 	bl	800f020 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001dde:	f107 010c 	add.w	r1, r7, #12
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001de8:	4a30      	ldr	r2, [pc, #192]	; (8001eac <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f00a ff4e 	bl	800cc8c <MQTT_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001e10:	bf00      	nop
 8001e12:	e7fe      	b.n	8001e12 <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <prvCreateMQTTConnectionWithBroker+0xec>)
 8001e16:	f011 f965 	bl	80130e4 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	221c      	movs	r2, #28
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f010 fd4d 	bl	80128c2 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001e32:	230f      	movs	r3, #15
 8001e34:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7fe f9c8 	bl	80001d0 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7fe f9c0 	bl	80001d0 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001e56:	233c      	movs	r3, #60	; 0x3c
 8001e58:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001e5a:	f107 0120 	add.w	r1, r7, #32
 8001e5e:	f107 031f 	add.w	r3, r7, #31
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f00a ff63 	bl	800cd36 <MQTT_Connect>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001e76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001e90:	bf00      	nop
 8001e92:	e7fe      	b.n	8001e92 <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8001e94:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001e96:	f011 f925 	bl	80130e4 <puts>

}
 8001e9a:	bf00      	nop
 8001e9c:	3748      	adds	r7, #72	; 0x48
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	080020e9 	.word	0x080020e9
 8001eac:	080020b9 	.word	0x080020b9
 8001eb0:	08014524 	.word	0x08014524
 8001eb4:	08014538 	.word	0x08014538
 8001eb8:	08014548 	.word	0x08014548

08001ebc <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	2214      	movs	r2, #20
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f010 fcf6 	bl	80128c2 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8001eda:	2300      	movs	r3, #0
 8001edc:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8001ee2:	68b8      	ldr	r0, [r7, #8]
 8001ee4:	f7fe f974 	bl	80001d0 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe f96c 	bl	80001d0 <strlen>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f00a ffc1 	bl	800ce8c <MQTT_Publish>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	220c      	movs	r2, #12
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f010 fcc5 	bl	80128c2 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f00b f894 	bl	800d066 <MQTT_GetPacketId>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <prvMQTTSubscribeToTopic+0xa4>)
 8001f44:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8001f4e:	6838      	ldr	r0, [r7, #0]
 8001f50:	f7fe f93e 	bl	80001d0 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <prvMQTTSubscribeToTopic+0xa4>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f107 0108 	add.w	r1, r7, #8
 8001f62:	2201      	movs	r2, #1
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f00a ff5e 	bl	800ce26 <MQTT_Subscribe>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <prvMQTTSubscribeToTopic+0x6a>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	461a      	mov	r2, r3
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <prvMQTTSubscribeToTopic+0xa8>)
 8001f7c:	f011 f82c 	bl	8012fd8 <iprintf>
 8001f80:	e005      	b.n	8001f8e <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	461a      	mov	r2, r3
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <prvMQTTSubscribeToTopic+0xac>)
 8001f8a:	f011 f825 	bl	8012fd8 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f00b f849 	bl	800d026 <MQTT_ProcessLoop>
 8001f94:	4603      	mov	r3, r0
 8001f96:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <prvMQTTSubscribeToTopic+0xb0>)
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d102      	bne.n	8001faa <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	75bb      	strb	r3, [r7, #22]
            break;
 8001fa8:	e003      	b.n	8001fb2 <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8001faa:	7dbb      	ldrb	r3, [r7, #22]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1d4      	bne.n	8001f5a <prvMQTTSubscribeToTopic+0x42>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000bbc 	.word	0x20000bbc
 8001fc0:	08014564 	.word	0x08014564
 8001fc4:	08014590 	.word	0x08014590
 8001fc8:	20000008 	.word	0x20000008

08001fcc <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0c2      	sub	sp, #264	; 0x108
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fda:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68d9      	ldr	r1, [r3, #12]
 8001fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff6:	bf28      	it	cs
 8001ff8:	237f      	movcs	r3, #127	; 0x7f
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002000:	4618      	mov	r0, r3
 8002002:	f010 fc36 	bl	8012872 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8002006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800200a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002016:	4293      	cmp	r3, r2
 8002018:	bf28      	it	cs
 800201a:	4613      	movcs	r3, r2
 800201c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002020:	443b      	add	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8002028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800202c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	891b      	ldrh	r3, [r3, #8]
 8002040:	2b7f      	cmp	r3, #127	; 0x7f
 8002042:	bf28      	it	cs
 8002044:	237f      	movcs	r3, #127	; 0x7f
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4618      	mov	r0, r3
 8002050:	f010 fc0f 	bl	8012872 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8002054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	891b      	ldrh	r3, [r3, #8]
 8002060:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002064:	4293      	cmp	r3, r2
 8002066:	bf28      	it	cs
 8002068:	4613      	movcs	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002072:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 800207a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	4619      	mov	r1, r3
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <prvMQTTProcessIncomingPublish+0xe4>)
 8002086:	f010 ffa7 	bl	8012fd8 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') modo_continuo = true;
 800208a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800208e:	2b31      	cmp	r3, #49	; 0x31
 8002090:	d102      	bne.n	8002098 <prvMQTTProcessIncomingPublish+0xcc>
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <prvMQTTProcessIncomingPublish+0xe8>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
	if(buffer1[0]=='0') modo_continuo = false;
 8002098:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d102      	bne.n	80020a6 <prvMQTTProcessIncomingPublish+0xda>
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <prvMQTTProcessIncomingPublish+0xe8>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]

}
 80020a6:	bf00      	nop
 80020a8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	080145b8 	.word	0x080145b8
 80020b4:	200007d1 	.word	0x200007d1

080020b8 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 80020c6:	f00e fca9 	bl	8010a1c <xTaskGetTickCount>
 80020ca:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <prvGetTimeMs+0x2c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 80020da:	683b      	ldr	r3, [r7, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000bc0 	.word	0x20000bc0

080020e8 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fc:	2b30      	cmp	r3, #48	; 0x30
 80020fe:	d104      	bne.n	800210a <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff61 	bl	8001fcc <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_MspInit+0x4c>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_MspInit+0x4c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6613      	str	r3, [r2, #96]	; 0x60
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_MspInit+0x4c>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_MspInit+0x4c>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_MspInit+0x4c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_MspInit+0x4c>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	f06f 0001 	mvn.w	r0, #1
 8002152:	f000 fe41 	bl	8002dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0ac      	sub	sp, #176	; 0xb0
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2288      	movs	r2, #136	; 0x88
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f010 fb9c 	bl	80128c2 <memset>
  if(DFSDM1_Init == 0)
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d142      	bne.n	8002218 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002196:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 f90a 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80021ae:	f7ff fdb7 	bl	8001d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021bc:	6613      	str	r3, [r2, #96]	; 0x60
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021d0:	f043 0310 	orr.w	r3, r3, #16
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80021e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80021e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80021fc:	2306      	movs	r3, #6
 80021fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002202:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002206:	4619      	mov	r1, r3
 8002208:	4807      	ldr	r0, [pc, #28]	; (8002228 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800220a:	f000 ffa9 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a02      	ldr	r2, [pc, #8]	; (8002220 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002216:	6013      	str	r3, [r2, #0]
  }

}
 8002218:	bf00      	nop
 800221a:	37b0      	adds	r7, #176	; 0xb0
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000bc4 	.word	0x20000bc4
 8002224:	40021000 	.word	0x40021000
 8002228:	48001000 	.word	0x48001000

0800222c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0ac      	sub	sp, #176	; 0xb0
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2288      	movs	r2, #136	; 0x88
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f010 fb38 	bl	80128c2 <memset>
  if(hi2c->Instance==I2C2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_I2C_MspInit+0xb0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d13b      	bne.n	80022d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002260:	2300      	movs	r3, #0
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4618      	mov	r0, r3
 800226a:	f003 f8a7 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002274:	f7ff fd54 	bl	8001d20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002290:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229e:	2301      	movs	r3, #1
 80022a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022aa:	2304      	movs	r3, #4
 80022ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b4:	4619      	mov	r1, r3
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <HAL_I2C_MspInit+0xb8>)
 80022b8:	f000 ff52 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 80022c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c6:	6593      	str	r3, [r2, #88]	; 0x58
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_I2C_MspInit+0xb4>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022d4:	bf00      	nop
 80022d6:	37b0      	adds	r7, #176	; 0xb0
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40005800 	.word	0x40005800
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000400 	.word	0x48000400

080022e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_I2C_MspDeInit+0x3c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10f      	bne.n	800231a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_I2C_MspDeInit+0x40>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_I2C_MspDeInit+0x40>)
 8002300:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002304:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <HAL_I2C_MspDeInit+0x44>)
 800230c:	f001 f8d2 	bl	80034b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_I2C_MspDeInit+0x44>)
 8002316:	f001 f8cd 	bl	80034b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40005800 	.word	0x40005800
 8002328:	40021000 	.word	0x40021000
 800232c:	48000400 	.word	0x48000400

08002330 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HAL_QSPI_MspInit+0x7c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d128      	bne.n	80023a4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6513      	str	r3, [r2, #80]	; 0x50
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 8002360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_QSPI_MspInit+0x80>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002382:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002386:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002394:	230a      	movs	r3, #10
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <HAL_QSPI_MspInit+0x84>)
 80023a0:	f000 fede 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	a0001000 	.word	0xa0001000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48001000 	.word	0x48001000

080023b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0a4      	sub	sp, #144	; 0x90
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	2288      	movs	r2, #136	; 0x88
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f010 fa7a 	bl	80128c2 <memset>
  if(hrtc->Instance==RTC)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_RTC_MspInit+0x5c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d118      	bne.n	800240a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 ffe6 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80023f6:	f7ff fc93 	bl	8001d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RTC_MspInit+0x60>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <HAL_RTC_MspInit+0x60>)
 8002402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3790      	adds	r7, #144	; 0x90
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40002800 	.word	0x40002800
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_SPI_MspInit+0x8c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d130      	bne.n	80024a0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_SPI_MspInit+0x90>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_SPI_MspInit+0x90>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800246e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002480:	2306      	movs	r3, #6
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	4809      	ldr	r0, [pc, #36]	; (80024b0 <HAL_SPI_MspInit+0x94>)
 800248c:	f000 fe68 	bl	8003160 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	2105      	movs	r1, #5
 8002494:	2033      	movs	r0, #51	; 0x33
 8002496:	f000 fc9f 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800249a:	2033      	movs	r0, #51	; 0x33
 800249c:	f000 fcb8 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40003c00 	.word	0x40003c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	48000800 	.word	0x48000800

080024b4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_SPI_MspDeInit+0x38>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10d      	bne.n	80024e2 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_SPI_MspDeInit+0x3c>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_SPI_MspDeInit+0x3c>)
 80024cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80024d2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80024d6:	4807      	ldr	r0, [pc, #28]	; (80024f4 <HAL_SPI_MspDeInit+0x40>)
 80024d8:	f000 ffec 	bl	80034b4 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80024dc:	2033      	movs	r0, #51	; 0x33
 80024de:	f000 fca5 	bl	8002e2c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40003c00 	.word	0x40003c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000800 	.word	0x48000800

080024f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_TIM_Base_MspInit+0x44>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d113      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_TIM_Base_MspInit+0x48>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <HAL_TIM_Base_MspInit+0x48>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_TIM_Base_MspInit+0x48>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2105      	movs	r1, #5
 8002526:	2037      	movs	r0, #55	; 0x37
 8002528:	f000 fc56 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800252c:	2037      	movs	r0, #55	; 0x37
 800252e:	f000 fc6f 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40001400 	.word	0x40001400
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ae      	sub	sp, #184	; 0xb8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	2288      	movs	r2, #136	; 0x88
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f010 f9ac 	bl	80128c2 <memset>
  if(huart->Instance==USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a46      	ldr	r2, [pc, #280]	; (8002688 <HAL_UART_MspInit+0x144>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d143      	bne.n	80025fc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002574:	2301      	movs	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002578:	2300      	movs	r3, #0
 800257a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4618      	mov	r0, r3
 8002582:	f002 ff1b 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800258c:	f7ff fbc8 	bl	8001d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002590:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_UART_MspInit+0x148>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	4a3d      	ldr	r2, [pc, #244]	; (800268c <HAL_UART_MspInit+0x148>)
 8002596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259a:	6613      	str	r3, [r2, #96]	; 0x60
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_UART_MspInit+0x148>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_UART_MspInit+0x148>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	4a37      	ldr	r2, [pc, #220]	; (800268c <HAL_UART_MspInit+0x148>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_UART_MspInit+0x148>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025e2:	4619      	mov	r1, r3
 80025e4:	482a      	ldr	r0, [pc, #168]	; (8002690 <HAL_UART_MspInit+0x14c>)
 80025e6:	f000 fdbb 	bl	8003160 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2105      	movs	r1, #5
 80025ee:	2025      	movs	r0, #37	; 0x25
 80025f0:	f000 fbf2 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025f4:	2025      	movs	r0, #37	; 0x25
 80025f6:	f000 fc0b 	bl	8002e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025fa:	e040      	b.n	800267e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_UART_MspInit+0x150>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d13b      	bne.n	800267e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002606:	2304      	movs	r3, #4
 8002608:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800260a:	2300      	movs	r3, #0
 800260c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fed2 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800261e:	f7ff fb7f 	bl	8001d20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_UART_MspInit+0x148>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_UART_MspInit+0x148>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_UART_MspInit+0x148>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_UART_MspInit+0x148>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <HAL_UART_MspInit+0x148>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_UART_MspInit+0x148>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800266c:	2307      	movs	r3, #7
 800266e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002676:	4619      	mov	r1, r3
 8002678:	4807      	ldr	r0, [pc, #28]	; (8002698 <HAL_UART_MspInit+0x154>)
 800267a:	f000 fd71 	bl	8003160 <HAL_GPIO_Init>
}
 800267e:	bf00      	nop
 8002680:	37b8      	adds	r7, #184	; 0xb8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40013800 	.word	0x40013800
 800268c:	40021000 	.word	0x40021000
 8002690:	48000400 	.word	0x48000400
 8002694:	40004800 	.word	0x40004800
 8002698:	48000c00 	.word	0x48000c00

0800269c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ac      	sub	sp, #176	; 0xb0
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2288      	movs	r2, #136	; 0x88
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f010 f900 	bl	80128c2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ca:	d17c      	bne.n	80027c6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80026d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80026e2:	2318      	movs	r3, #24
 80026e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80026e6:	2307      	movs	r3, #7
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80026f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fe5d 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002708:	f7ff fb0a 	bl	8001d20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002742:	f000 fd0d 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002746:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800274a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002760:	230a      	movs	r3, #10
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002770:	f000 fcf6 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800277a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d114      	bne.n	80027c2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	; 0x58
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80027b0:	f001 ff18 	bl	80045e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_PCD_MspInit+0x134>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80027c0:	e001      	b.n	80027c6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80027c2:	f001 ff0f 	bl	80045e4 <HAL_PWREx_EnableVddUSB>
}
 80027c6:	bf00      	nop
 80027c8:	37b0      	adds	r7, #176	; 0xb0
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_InitTick+0xe0>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	4a33      	ldr	r2, [pc, #204]	; (80028b4 <HAL_InitTick+0xe0>)
 80027e8:	f043 0310 	orr.w	r3, r3, #16
 80027ec:	6593      	str	r3, [r2, #88]	; 0x58
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_InitTick+0xe0>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027fa:	f107 0210 	add.w	r2, r7, #16
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fd47 	bl	8005298 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002814:	f002 fd14 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8002818:	6378      	str	r0, [r7, #52]	; 0x34
 800281a:	e004      	b.n	8002826 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800281c:	f002 fd10 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8002820:	4603      	mov	r3, r0
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_InitTick+0xe4>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9b      	lsrs	r3, r3, #18
 8002830:	3b01      	subs	r3, #1
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_InitTick+0xe8>)
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_InitTick+0xec>)
 8002838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_InitTick+0xe8>)
 800283c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002840:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_InitTick+0xe8>)
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_InitTick+0xe8>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_InitTick+0xe8>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_InitTick+0xe8>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800285a:	4818      	ldr	r0, [pc, #96]	; (80028bc <HAL_InitTick+0xe8>)
 800285c:	f005 f8c1 	bl	80079e2 <HAL_TIM_Base_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11b      	bne.n	80028a6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800286e:	4813      	ldr	r0, [pc, #76]	; (80028bc <HAL_InitTick+0xe8>)
 8002870:	f005 f90e 	bl	8007a90 <HAL_TIM_Base_Start_IT>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800287a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800287e:	2b00      	cmp	r3, #0
 8002880:	d111      	bne.n	80028a6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002882:	2036      	movs	r0, #54	; 0x36
 8002884:	f000 fac4 	bl	8002e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b0f      	cmp	r3, #15
 800288c:	d808      	bhi.n	80028a0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800288e:	2200      	movs	r2, #0
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	2036      	movs	r0, #54	; 0x36
 8002894:	f000 faa0 	bl	8002dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_InitTick+0xf0>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e002      	b.n	80028a6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3738      	adds	r7, #56	; 0x38
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	431bde83 	.word	0x431bde83
 80028bc:	20000bc8 	.word	0x20000bc8
 80028c0:	40001000 	.word	0x40001000
 80028c4:	20000014 	.word	0x20000014

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <NMI_Handler+0x4>

080028ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <MemManage_Handler+0x4>

080028da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f000 feff 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}

08002902 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002906:	2020      	movs	r0, #32
 8002908:	f000 fef8 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800290c:	2040      	movs	r0, #64	; 0x40
 800290e:	f000 fef5 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002912:	2080      	movs	r0, #128	; 0x80
 8002914:	f000 fef2 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002918:	f44f 7080 	mov.w	r0, #256	; 0x100
 800291c:	f000 feee 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <USART1_IRQHandler+0x10>)
 800292a:	f005 fccf 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000270 	.word	0x20000270

08002938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800293c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002940:	f000 fedc 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002944:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002948:	f000 fed8 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 800294c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002950:	f000 fed4 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002954:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002958:	f000 fed0 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800295c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002960:	f000 fecc 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <TIM6_DAC_IRQHandler+0x10>)
 800296e:	f005 f8ff 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000bc8 	.word	0x20000bc8

0800297c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <TIM7_IRQHandler+0x18>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	4a03      	ldr	r2, [pc, #12]	; (8002994 <TIM7_IRQHandler+0x18>)
 8002988:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <TIM7_IRQHandler+0x1c>)
 800298c:	f005 f8f0 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200007cc 	.word	0x200007cc
 8002998:	20000224 	.word	0x20000224

0800299c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return 1;
 80029a0:	2301      	movs	r3, #1
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_kill>:

int _kill(int pid, int sig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b6:	f00f fe17 	bl	80125e8 <__errno>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2216      	movs	r2, #22
 80029be:	601a      	str	r2, [r3, #0]
  return -1;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_exit>:

void _exit (int status)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ffe7 	bl	80029ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80029de:	e7fe      	b.n	80029de <_exit+0x12>

080029e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e00a      	b.n	8002a08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029f2:	f3af 8000 	nop.w
 80029f6:	4601      	mov	r1, r0
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	60ba      	str	r2, [r7, #8]
 80029fe:	b2ca      	uxtb	r2, r1
 8002a00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dbf0      	blt.n	80029f2 <_read+0x12>
  }

  return len;
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a42:	605a      	str	r2, [r3, #4]
  return 0;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_isatty>:

int _isatty(int file)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_sbrk+0x5c>)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <_sbrk+0x60>)
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_sbrk+0x64>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <_sbrk+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab4:	f00f fd98 	bl	80125e8 <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	220c      	movs	r2, #12
 8002abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e009      	b.n	8002ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <_sbrk+0x64>)
 8002ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20018000 	.word	0x20018000
 8002ae4:	00000400 	.word	0x00000400
 8002ae8:	20000c14 	.word	0x20000c14
 8002aec:	20004f30 	.word	0x20004f30

08002af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <SystemInit+0x20>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <SystemInit+0x20>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b18:	f7ff ffea 	bl	8002af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b1e:	490d      	ldr	r1, [pc, #52]	; (8002b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <LoopForever+0xe>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <LoopForever+0x16>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b42:	f00f fe5f 	bl	8012804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b46:	f7fd fd5f 	bl	8000608 <main>

08002b4a <LoopForever>:

LoopForever:
    b LoopForever
 8002b4a:	e7fe      	b.n	8002b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002b58:	08015c1c 	.word	0x08015c1c
  ldr r2, =_sbss
 8002b5c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002b60:	20004f30 	.word	0x20004f30

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>

08002b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b70:	2003      	movs	r0, #3
 8002b72:	f000 f926 	bl	8002dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b76:	200f      	movs	r0, #15
 8002b78:	f7ff fe2c 	bl	80027d4 <HAL_InitTick>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	71fb      	strb	r3, [r7, #7]
 8002b86:	e001      	b.n	8002b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b88:	f7ff fac4 	bl	8002114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000018 	.word	0x20000018
 8002bbc:	20000c18 	.word	0x20000c18

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000c18 	.word	0x20000c18

08002bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff ffee 	bl	8002bc0 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d005      	beq.n	8002bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_Delay+0x44>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfe:	bf00      	nop
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d8f7      	bhi.n	8002c00 <HAL_Delay+0x28>
  {
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000018 	.word	0x20000018

08002c20 <__NVIC_SetPriorityGrouping>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_DisableIRQ>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db12      	blt.n	8002cf8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	490a      	ldr	r1, [pc, #40]	; (8002d04 <__NVIC_DisableIRQ+0x44>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cec:	f3bf 8f4f 	dsb	sy
}
 8002cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf2:	f3bf 8f6f 	isb	sy
}
 8002cf6:	bf00      	nop
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	; (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff28 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dea:	f7ff ff3d 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	6978      	ldr	r0, [r7, #20]
 8002df6:	f7ff ffb1 	bl	8002d5c <NVIC_EncodePriority>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff80 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff30 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff40 	bl	8002cc0 <__NVIC_DisableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0ac      	b.n	8002fb4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f8b2 	bl	8002fc8 <DFSDM_GetChannelFromInstance>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_DFSDM_ChannelInit+0x174>)
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e09f      	b.n	8002fb4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff f975 	bl	8002164 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002e7a:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8002e82:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002e84:	4b4e      	ldr	r3, [pc, #312]	; (8002fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d125      	bne.n	8002ed8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e8c:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e96:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4948      	ldr	r1, [pc, #288]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	791b      	ldrb	r3, [r3, #4]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d108      	bne.n	8002ecc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002eba:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	493f      	ldr	r1, [pc, #252]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ee6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ef6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002efc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020f 	bic.w	r2, r2, #15
 8002f14:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002f3c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 0207 	and.w	r2, r2, #7
 8002f68:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f94:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f810 	bl	8002fc8 <DFSDM_GetChannelFromInstance>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_DFSDM_ChannelInit+0x174>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000c20 	.word	0x20000c20
 8002fc0:	20000c1c 	.word	0x20000c1c
 8002fc4:	40016000 	.word	0x40016000

08002fc8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <DFSDM_GetChannelFromInstance+0x7c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d102      	bne.n	8002fde <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e02b      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <DFSDM_GetChannelFromInstance+0x80>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d102      	bne.n	8002fec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e024      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a17      	ldr	r2, [pc, #92]	; (800304c <DFSDM_GetChannelFromInstance+0x84>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d102      	bne.n	8002ffa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e01d      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <DFSDM_GetChannelFromInstance+0x88>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d102      	bne.n	8003008 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003002:	2304      	movs	r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e016      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <DFSDM_GetChannelFromInstance+0x8c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003010:	2305      	movs	r3, #5
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e00f      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <DFSDM_GetChannelFromInstance+0x90>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d102      	bne.n	8003024 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800301e:	2306      	movs	r3, #6
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e008      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <DFSDM_GetChannelFromInstance+0x94>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800302c:	2307      	movs	r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e001      	b.n	8003036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003032:	2303      	movs	r3, #3
 8003034:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40016000 	.word	0x40016000
 8003048:	40016020 	.word	0x40016020
 800304c:	40016040 	.word	0x40016040
 8003050:	40016080 	.word	0x40016080
 8003054:	400160a0 	.word	0x400160a0
 8003058:	400160c0 	.word	0x400160c0
 800305c:	400160e0 	.word	0x400160e0

08003060 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d008      	beq.n	800308a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2204      	movs	r2, #4
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e022      	b.n	80030d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020e 	bic.w	r2, r2, #14
 8003098:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 021c 	and.w	r2, r3, #28
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d005      	beq.n	8003100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e029      	b.n	8003154 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 020e 	bic.w	r2, r2, #14
 800310e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f003 021c 	and.w	r2, r3, #28
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
    }
  }
  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	e17f      	b.n	8003470 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8171 	beq.w	800346a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d00b      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d007      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800319c:	2b11      	cmp	r3, #17
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d118      	bne.n	8003248 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x128>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	6939      	ldr	r1, [r7, #16]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80ac 	beq.w	800346a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6613      	str	r3, [r2, #96]	; 0x60
 800331e:	4b5c      	ldr	r3, [pc, #368]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800332a:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <HAL_GPIO_Init+0x334>)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003354:	d025      	beq.n	80033a2 <HAL_GPIO_Init+0x242>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4f      	ldr	r2, [pc, #316]	; (8003498 <HAL_GPIO_Init+0x338>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_GPIO_Init+0x23e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_GPIO_Init+0x33c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x23a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4d      	ldr	r2, [pc, #308]	; (80034a0 <HAL_GPIO_Init+0x340>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x236>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4c      	ldr	r2, [pc, #304]	; (80034a4 <HAL_GPIO_Init+0x344>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x232>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <HAL_GPIO_Init+0x348>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_GPIO_Init+0x34c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x22a>
 8003386:	2306      	movs	r3, #6
 8003388:	e00c      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800338a:	2307      	movs	r3, #7
 800338c:	e00a      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800338e:	2305      	movs	r3, #5
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 8003392:	2304      	movs	r3, #4
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 80033a2:	2300      	movs	r3, #0
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033b4:	4937      	ldr	r1, [pc, #220]	; (8003494 <HAL_GPIO_Init+0x334>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_GPIO_Init+0x350>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e6:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <HAL_GPIO_Init+0x350>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033ec:	4b30      	ldr	r3, [pc, #192]	; (80034b0 <HAL_GPIO_Init+0x350>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <HAL_GPIO_Init+0x350>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f47f ae78 	bne.w	8003170 <HAL_GPIO_Init+0x10>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40010000 	.word	0x40010000
 8003498:	48000400 	.word	0x48000400
 800349c:	48000800 	.word	0x48000800
 80034a0:	48000c00 	.word	0x48000c00
 80034a4:	48001000 	.word	0x48001000
 80034a8:	48001400 	.word	0x48001400
 80034ac:	48001800 	.word	0x48001800
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80034c2:	e0cd      	b.n	8003660 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80034c4:	2201      	movs	r2, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80c0 	beq.w	800365a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80034da:	4a68      	ldr	r2, [pc, #416]	; (800367c <HAL_GPIO_DeInit+0x1c8>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003502:	d025      	beq.n	8003550 <HAL_GPIO_DeInit+0x9c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_GPIO_DeInit+0x1cc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d01f      	beq.n	800354c <HAL_GPIO_DeInit+0x98>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_GPIO_DeInit+0x1d0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d019      	beq.n	8003548 <HAL_GPIO_DeInit+0x94>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_GPIO_DeInit+0x1d4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_GPIO_DeInit+0x90>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a5b      	ldr	r2, [pc, #364]	; (800368c <HAL_GPIO_DeInit+0x1d8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00d      	beq.n	8003540 <HAL_GPIO_DeInit+0x8c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a5a      	ldr	r2, [pc, #360]	; (8003690 <HAL_GPIO_DeInit+0x1dc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <HAL_GPIO_DeInit+0x88>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a59      	ldr	r2, [pc, #356]	; (8003694 <HAL_GPIO_DeInit+0x1e0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_GPIO_DeInit+0x84>
 8003534:	2306      	movs	r3, #6
 8003536:	e00c      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 8003538:	2307      	movs	r3, #7
 800353a:	e00a      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 800353c:	2305      	movs	r3, #5
 800353e:	e008      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 8003540:	2304      	movs	r3, #4
 8003542:	e006      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 8003544:	2303      	movs	r3, #3
 8003546:	e004      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 8003548:	2302      	movs	r3, #2
 800354a:	e002      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_GPIO_DeInit+0x9e>
 8003550:	2300      	movs	r3, #0
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	f002 0203 	and.w	r2, r2, #3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4093      	lsls	r3, r2
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	429a      	cmp	r2, r3
 8003560:	d132      	bne.n	80035c8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	494b      	ldr	r1, [pc, #300]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 800356c:	4013      	ands	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003570:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	4947      	ldr	r1, [pc, #284]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 800357a:	4013      	ands	r3, r2
 800357c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800357e:	4b46      	ldr	r3, [pc, #280]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	4944      	ldr	r1, [pc, #272]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 8003588:	4013      	ands	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	4940      	ldr	r1, [pc, #256]	; (8003698 <HAL_GPIO_DeInit+0x1e4>)
 8003596:	4013      	ands	r3, r2
 8003598:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <HAL_GPIO_DeInit+0x1c8>)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	4830      	ldr	r0, [pc, #192]	; (800367c <HAL_GPIO_DeInit+0x1c8>)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	400a      	ands	r2, r1
 80035c2:	3302      	adds	r3, #2
 80035c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2103      	movs	r1, #3
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	08d2      	lsrs	r2, r2, #3
 80035fc:	4019      	ands	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2103      	movs	r1, #3
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2101      	movs	r1, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	401a      	ands	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2103      	movs	r1, #3
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	401a      	ands	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	2101      	movs	r1, #1
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	401a      	ands	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	f47f af2b 	bne.w	80034c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40010000 	.word	0x40010000
 8003680:	48000400 	.word	0x48000400
 8003684:	48000800 	.word	0x48000800
 8003688:	48000c00 	.word	0x48000c00
 800368c:	48001000 	.word	0x48001000
 8003690:	48001400 	.word	0x48001400
 8003694:	48001800 	.word	0x48001800
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fcc4 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e081      	b.n	8003842 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fd6a 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800377c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	e006      	b.n	80037b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d104      	bne.n	80037c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	ea42 0103 	orr.w	r1, r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e021      	b.n	80038a0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fe fd37 	bl	80022e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	f040 80f9 	bne.w	8003ac2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_I2C_Mem_Write+0x34>
 80038d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0ed      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_I2C_Mem_Write+0x4e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0e6      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038fe:	f7ff f95f 	bl	8002bc0 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2319      	movs	r3, #25
 800390a:	2201      	movs	r2, #1
 800390c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fac3 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d1      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2221      	movs	r2, #33	; 0x21
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003948:	88f8      	ldrh	r0, [r7, #6]
 800394a:	893a      	ldrh	r2, [r7, #8]
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	4603      	mov	r3, r0
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f9d3 	bl	8003d04 <I2C_RequestMemoryWrite>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0a9      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2bff      	cmp	r3, #255	; 0xff
 8003978:	d90e      	bls.n	8003998 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	b2da      	uxtb	r2, r3
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fba5 	bl	80040e0 <I2C_TransferConfig>
 8003996:	e00f      	b.n	80039b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	8979      	ldrh	r1, [r7, #10]
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fb94 	bl	80040e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 faad 	bl	8003f1c <I2C_WaitOnTXISFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e07b      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d034      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x1c8>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d130      	bne.n	8003a70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa3f 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e04d      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2bff      	cmp	r3, #255	; 0xff
 8003a30:	d90e      	bls.n	8003a50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb49 	bl	80040e0 <I2C_TransferConfig>
 8003a4e:	e00f      	b.n	8003a70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	8979      	ldrh	r1, [r7, #10]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb38 	bl	80040e0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d19e      	bne.n	80039b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa8c 	bl	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e01a      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2220      	movs	r2, #32
 8003a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_I2C_Mem_Write+0x224>)
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	fe00e800 	.word	0xfe00e800

08003ad0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	f040 80fd 	bne.w	8003cf2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_I2C_Mem_Read+0x34>
 8003afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0f1      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_I2C_Mem_Read+0x4e>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0ea      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b26:	f7ff f84b 	bl	8002bc0 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2319      	movs	r3, #25
 8003b32:	2201      	movs	r2, #1
 8003b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f9af 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0d5      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2222      	movs	r2, #34	; 0x22
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b70:	88f8      	ldrh	r0, [r7, #6]
 8003b72:	893a      	ldrh	r2, [r7, #8]
 8003b74:	8979      	ldrh	r1, [r7, #10]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	4603      	mov	r3, r0
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f913 	bl	8003dac <I2C_RequestMemoryRead>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0ad      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2bff      	cmp	r3, #255	; 0xff
 8003ba0:	d90e      	bls.n	8003bc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	22ff      	movs	r2, #255	; 0xff
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_I2C_Mem_Read+0x22c>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fa91 	bl	80040e0 <I2C_TransferConfig>
 8003bbe:	e00f      	b.n	8003be0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_I2C_Mem_Read+0x22c>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa80 	bl	80040e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	2200      	movs	r2, #0
 8003be8:	2104      	movs	r1, #4
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f956 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07c      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d034      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x1d0>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d130      	bne.n	8003ca0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2200      	movs	r2, #0
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f927 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e04d      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2bff      	cmp	r3, #255	; 0xff
 8003c60:	d90e      	bls.n	8003c80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa31 	bl	80040e0 <I2C_TransferConfig>
 8003c7e:	e00f      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fa20 	bl	80040e0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d19a      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f974 	bl	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e01a      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_I2C_Mem_Read+0x230>)
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	80002400 	.word	0x80002400
 8003d00:	fe00e800 	.word	0xfe00e800

08003d04 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <I2C_RequestMemoryWrite+0xa4>)
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f9d7 	bl	80040e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	69b9      	ldr	r1, [r7, #24]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8f0 	bl	8003f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e02c      	b.n	8003da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4c:	893b      	ldrh	r3, [r7, #8]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
 8003d56:	e015      	b.n	8003d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	69b9      	ldr	r1, [r7, #24]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8d6 	bl	8003f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e012      	b.n	8003da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f884 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	80002000 	.word	0x80002000

08003dac <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	813b      	strh	r3, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	8979      	ldrh	r1, [r7, #10]
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <I2C_RequestMemoryRead+0xa4>)
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f984 	bl	80040e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f89d 	bl	8003f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e02c      	b.n	8003e46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003dfc:	e015      	b.n	8003e2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dfe:	893b      	ldrh	r3, [r7, #8]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f883 	bl	8003f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e012      	b.n	8003e46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f831 	bl	8003e9c <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	80002000 	.word	0x80002000

08003e54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d103      	bne.n	8003e72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	619a      	str	r2, [r3, #24]
  }
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eac:	e022      	b.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d01e      	beq.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fe fe83 	bl	8002bc0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e00f      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d0cd      	beq.n	8003eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f28:	e02c      	b.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f870 	bl	8004014 <I2C_IsAcknowledgeFailed>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e02a      	b.n	8003f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d01e      	beq.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fe fe3b 	bl	8002bc0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d1cb      	bne.n	8003f2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa8:	e028      	b.n	8003ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f830 	bl	8004014 <I2C_IsAcknowledgeFailed>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e026      	b.n	800400c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe fdff 	bl	8002bc0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e007      	b.n	800400c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b20      	cmp	r3, #32
 8004008:	d1cf      	bne.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b10      	cmp	r3, #16
 800402c:	d151      	bne.n	80040d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402e:	e022      	b.n	8004076 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d01e      	beq.n	8004076 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004038:	f7fe fdc2 	bl	8002bc0 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <I2C_IsAcknowledgeFailed+0x3a>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d113      	bne.n	8004076 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e02e      	b.n	80040d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b20      	cmp	r3, #32
 8004082:	d1d5      	bne.n	8004030 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2210      	movs	r2, #16
 800408a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2220      	movs	r2, #32
 8004092:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fedd 	bl	8003e54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <I2C_IsAcknowledgeFailed+0xc8>)
 80040a6:	400b      	ands	r3, r1
 80040a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f043 0204 	orr.w	r2, r3, #4
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	fe00e800 	.word	0xfe00e800

080040e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	4613      	mov	r3, r2
 80040f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	0d5b      	lsrs	r3, r3, #21
 80040fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <I2C_TransferConfig+0x58>)
 8004102:	430b      	orrs	r3, r1
 8004104:	43db      	mvns	r3, r3
 8004106:	ea02 0103 	and.w	r1, r2, r3
 800410a:	897b      	ldrh	r3, [r7, #10]
 800410c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004110:	7a7b      	ldrb	r3, [r7, #9]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	431a      	orrs	r2, r3
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	03ff63ff 	.word	0x03ff63ff

0800413c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	d138      	bne.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800415c:	2302      	movs	r3, #2
 800415e:	e032      	b.n	80041c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800418e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d139      	bne.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e033      	b.n	800425e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2224      	movs	r2, #36	; 0x24
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800426a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426c:	b08f      	sub	sp, #60	; 0x3c
 800426e:	af0a      	add	r7, sp, #40	; 0x28
 8004270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e116      	b.n	80044aa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fe fa00 	bl	800269c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 f83e 	bl	800933c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	687e      	ldr	r6, [r7, #4]
 80042c8:	466d      	mov	r5, sp
 80042ca:	f106 0410 	add.w	r4, r6, #16
 80042ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042da:	e885 0003 	stmia.w	r5, {r0, r1}
 80042de:	1d33      	adds	r3, r6, #4
 80042e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e2:	6838      	ldr	r0, [r7, #0]
 80042e4:	f004 fffe 	bl	80092e4 <USB_CoreInit>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0d7      	b.n	80044aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f005 f82c 	bl	800935e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e04a      	b.n	80043a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	333d      	adds	r3, #61	; 0x3d
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	333c      	adds	r3, #60	; 0x3c
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	b298      	uxth	r0, r3
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3342      	adds	r3, #66	; 0x42
 8004348:	4602      	mov	r2, r0
 800434a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	333f      	adds	r3, #63	; 0x3f
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3344      	adds	r3, #68	; 0x44
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3348      	adds	r3, #72	; 0x48
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3350      	adds	r3, #80	; 0x50
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	3301      	adds	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3af      	bcc.n	800430c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e044      	b.n	800443c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	3301      	adds	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3b5      	bcc.n	80043b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	687e      	ldr	r6, [r7, #4]
 800444e:	466d      	mov	r5, sp
 8004450:	f106 0410 	add.w	r4, r6, #16
 8004454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800445a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004460:	e885 0003 	stmia.w	r5, {r0, r1}
 8004464:	1d33      	adds	r3, r6, #4
 8004466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	f004 ffa3 	bl	80093b4 <USB_DevInit>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e014      	b.n	80044aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d102      	bne.n	800449e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f80a 	bl	80044b2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 f933 	bl	800970e <USB_DevDisconnect>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	f043 0303 	orr.w	r3, r3, #3
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40007000 	.word	0x40007000

0800451c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <HAL_PWREx_GetVoltageRange+0x18>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40007000 	.word	0x40007000

08004538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d130      	bne.n	80045aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004548:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004554:	d038      	beq.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004564:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2232      	movs	r2, #50	; 0x32
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0c9b      	lsrs	r3, r3, #18
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457c:	e002      	b.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3b01      	subs	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d102      	bne.n	8004598 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f2      	bne.n	800457e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d110      	bne.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b6:	d007      	beq.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045c0:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40007000 	.word	0x40007000
 80045dc:	20000010 	.word	0x20000010
 80045e0:	431bde83 	.word	0x431bde83

080045e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045f2:	6053      	str	r3, [r2, #4]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000

08004604 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800460c:	f7fe fad8 	bl	8002bc0 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e063      	b.n	80046e4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd fe7d 	bl	8002330 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004636:	f241 3188 	movw	r1, #5000	; 0x1388
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f858 	bl	80046f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	3b01      	subs	r3, #1
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	2120      	movs	r1, #32
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f850 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004670:	7afb      	ldrb	r3, [r7, #11]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d131      	bne.n	80046da <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6852      	ldr	r2, [r2, #4]
 8004688:	0611      	lsls	r1, r2, #24
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68d2      	ldr	r2, [r2, #12]
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	430b      	orrs	r3, r1
 8004696:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_QSPI_Init+0xe8>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6912      	ldr	r2, [r2, #16]
 80046a6:	0411      	lsls	r1, r2, #16
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6952      	ldr	r2, [r2, #20]
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6992      	ldr	r2, [r2, #24]
 80046b2:	4311      	orrs	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	ffe0f8fe 	.word	0xffe0f8fe

080046f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800471c:	e01a      	b.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d016      	beq.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fe fa4b 	bl	8002bc0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00e      	b.n	8004772 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	429a      	cmp	r2, r3
 800476e:	d1d6      	bne.n	800471e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e3d8      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478e:	4b97      	ldr	r3, [pc, #604]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004798:	4b94      	ldr	r3, [pc, #592]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80e4 	beq.w	8004978 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_RCC_OscConfig+0x4a>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	f040 808b 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 8087 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c6:	4b89      	ldr	r3, [pc, #548]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e3b0      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	4b82      	ldr	r3, [pc, #520]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_RCC_OscConfig+0x7c>
 80047ee:	4b7f      	ldr	r3, [pc, #508]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	e005      	b.n	8004804 <HAL_RCC_OscConfig+0x88>
 80047f8:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004804:	4293      	cmp	r3, r2
 8004806:	d223      	bcs.n	8004850 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fd75 	bl	80052fc <RCC_SetFlashLatencyFromMSIRange>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e391      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481c:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a72      	ldr	r2, [pc, #456]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b70      	ldr	r3, [pc, #448]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	496d      	ldr	r1, [pc, #436]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483a:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4968      	ldr	r1, [pc, #416]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
 800484e:	e025      	b.n	800489c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004856:	f043 0308 	orr.w	r3, r3, #8
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486e:	4b5f      	ldr	r3, [pc, #380]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	495b      	ldr	r1, [pc, #364]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fd35 	bl	80052fc <RCC_SetFlashLatencyFromMSIRange>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e351      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489c:	f000 fc38 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b52      	ldr	r3, [pc, #328]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4950      	ldr	r1, [pc, #320]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_RCC_OscConfig+0x278>)
 80048ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048bc:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fd ff87 	bl	80027d4 <HAL_InitTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d052      	beq.n	8004976 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	e335      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d032      	beq.n	8004942 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048dc:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a42      	ldr	r2, [pc, #264]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e8:	f7fe f96a 	bl	8002bc0 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f0:	f7fe f966 	bl	8002bc0 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e31e      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004902:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490e:	4b37      	ldr	r3, [pc, #220]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a36      	ldr	r2, [pc, #216]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4931      	ldr	r1, [pc, #196]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	492c      	ldr	r1, [pc, #176]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	e01a      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004942:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494e:	f7fe f937 	bl	8002bc0 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004956:	f7fe f933 	bl	8002bc0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e2eb      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x1da>
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d074      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d005      	beq.n	8004996 <HAL_RCC_OscConfig+0x21a>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d10e      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d10b      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d064      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d160      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e2c8      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x24a>
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e026      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ce:	d115      	bne.n	80049fc <HAL_RCC_OscConfig+0x280>
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a02      	ldr	r2, [pc, #8]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e014      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	080157a0 	.word	0x080157a0
 80049f4:	20000010 	.word	0x20000010
 80049f8:	20000014 	.word	0x20000014
 80049fc:	4ba0      	ldr	r3, [pc, #640]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9f      	ldr	r2, [pc, #636]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b9d      	ldr	r3, [pc, #628]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9c      	ldr	r2, [pc, #624]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fe f8d0 	bl	8002bc0 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fe f8cc 	bl	8002bc0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e284      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe f8bc 	bl	8002bc0 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fe f8b8 	bl	8002bc0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e270      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e24d      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b76      	ldr	r3, [pc, #472]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4973      	ldr	r1, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fe f877 	bl	8002bc0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fe f873 	bl	8002bc0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e22b      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	495f      	ldr	r1, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe f853 	bl	8002bc0 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fe f84f 	bl	8002bc0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e207      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe f82e 	bl	8002bc0 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fe f82a 	bl	8002bc0 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1e2      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fe f811 	bl	8002bc0 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fe f80d 	bl	8002bc0 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1c5      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7fd ffd4 	bl	8002bc0 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fd ffd0 	bl	8002bc0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e188      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	e029      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d115      	bne.n	8004c88 <HAL_RCC_OscConfig+0x50c>
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a03      	ldr	r2, [pc, #12]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
 8004c88:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a90      	ldr	r2, [pc, #576]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c98:	4b8d      	ldr	r3, [pc, #564]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	4a8c      	ldr	r2, [pc, #560]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fd ff86 	bl	8002bc0 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fd ff82 	bl	8002bc0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e138      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x53c>
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fd ff6f 	bl	8002bc0 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd ff6b 	bl	8002bc0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e121      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ed      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a6e      	ldr	r2, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 810c 	beq.w	8004f3e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	f040 80d4 	bne.w	8004ed8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d30:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d130      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d127      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11f      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	2a07      	cmp	r2, #7
 8004d72:	bf14      	ite	ne
 8004d74:	2201      	movne	r2, #1
 8004d76:	2200      	moveq	r2, #0
 8004d78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d06e      	beq.n	8004e84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d069      	beq.n	8004e80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dac:	4b48      	ldr	r3, [pc, #288]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0bb      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd4:	f7fd fef4 	bl	8002bc0 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd fef0 	bl	8002bc0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0a8      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dee:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <HAL_RCC_OscConfig+0x758>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	0112      	lsls	r2, r2, #4
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0552      	lsls	r2, r2, #21
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0652      	lsls	r2, r2, #25
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e34:	0912      	lsrs	r2, r2, #4
 8004e36:	0452      	lsls	r2, r2, #17
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4925      	ldr	r1, [pc, #148]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e40:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e58:	f7fd feb2 	bl	8002bc0 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd feae 	bl	8002bc0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e066      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7e:	e05e      	b.n	8004f3e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e05d      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d156      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0e      	ldr	r2, [pc, #56]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea8:	f7fd fe8a 	bl	8002bc0 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fd fe86 	bl	8002bc0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e03e      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec2:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <HAL_RCC_OscConfig+0x754>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x734>
 8004ece:	e036      	b.n	8004f3e <HAL_RCC_OscConfig+0x7c2>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d02d      	beq.n	8004f3a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004eea:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004efc:	f023 0303 	bic.w	r3, r3, #3
 8004f00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004f08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fd fe55 	bl	8002bc0 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fd fe51 	bl	8002bc0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e009      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_OscConfig+0x7cc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x79e>
 8004f38:	e001      	b.n	8004f3e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000

08004f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0c8      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b66      	ldr	r3, [pc, #408]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d910      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	4961      	ldr	r1, [pc, #388]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0b0      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d04c      	beq.n	8005036 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa4:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d121      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e09e      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fbc:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d115      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e092      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e086      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe4:	4b46      	ldr	r3, [pc, #280]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e07e      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff4:	4b42      	ldr	r3, [pc, #264]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f023 0203 	bic.w	r2, r3, #3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	493f      	ldr	r1, [pc, #252]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005006:	f7fd fddb 	bl	8002bc0 <HAL_GetTick>
 800500a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500c:	e00a      	b.n	8005024 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500e:	f7fd fdd7 	bl	8002bc0 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e066      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005024:	4b36      	ldr	r3, [pc, #216]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 020c 	and.w	r2, r3, #12
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	429a      	cmp	r2, r3
 8005034:	d1eb      	bne.n	800500e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005042:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	492c      	ldr	r1, [pc, #176]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b29      	ldr	r3, [pc, #164]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d210      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 0207 	bic.w	r2, r3, #7
 800506a:	4924      	ldr	r1, [pc, #144]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b22      	ldr	r3, [pc, #136]	; (80050fc <HAL_RCC_ClockConfig+0x1b0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e036      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4918      	ldr	r1, [pc, #96]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4910      	ldr	r1, [pc, #64]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c2:	f000 f825 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_RCC_ClockConfig+0x1b4>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490c      	ldr	r1, [pc, #48]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	fa22 f303 	lsr.w	r3, r2, r3
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fb74 	bl	80027d4 <HAL_InitTick>
 80050ec:	4603      	mov	r3, r0
 80050ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80050f0:	7afb      	ldrb	r3, [r7, #11]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40022000 	.word	0x40022000
 8005100:	40021000 	.word	0x40021000
 8005104:	080157a0 	.word	0x080157a0
 8005108:	20000010 	.word	0x20000010
 800510c:	20000014 	.word	0x20000014

08005110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x34>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d121      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11e      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005144:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e005      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d102      	bne.n	800518e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e004      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d101      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 8005196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d134      	bne.n	8005208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d003      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0xac>
 80051b4:	e005      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b8:	617b      	str	r3, [r7, #20]
      break;
 80051ba:	e005      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 80051be:	617b      	str	r3, [r7, #20]
      break;
 80051c0:	e002      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	617b      	str	r3, [r7, #20]
      break;
 80051c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	3301      	adds	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	fb03 f202 	mul.w	r2, r3, r2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	0e5b      	lsrs	r3, r3, #25
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	3301      	adds	r3, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005208:	69bb      	ldr	r3, [r7, #24]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	080157b8 	.word	0x080157b8
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_GetHCLKFreq+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000010 	.word	0x20000010

08005240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005244:	f7ff fff0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	080157b0 	.word	0x080157b0

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005270:	f7ff ffda 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0adb      	lsrs	r3, r3, #11
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	080157b0 	.word	0x080157b0

08005298 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	220f      	movs	r2, #15
 80052a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0203 	and.w	r2, r3, #3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <HAL_RCC_GetClockConfig+0x60>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0207 	and.w	r2, r3, #7
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40022000 	.word	0x40022000

080052fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005308:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005314:	f7ff f902 	bl	800451c <HAL_PWREx_GetVoltageRange>
 8005318:	6178      	str	r0, [r7, #20]
 800531a:	e014      	b.n	8005346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005326:	6593      	str	r3, [r2, #88]	; 0x58
 8005328:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005334:	f7ff f8f2 	bl	800451c <HAL_PWREx_GetVoltageRange>
 8005338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d10b      	bne.n	8005366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d919      	bls.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2ba0      	cmp	r3, #160	; 0xa0
 8005358:	d902      	bls.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800535a:	2302      	movs	r3, #2
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	e013      	b.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005360:	2301      	movs	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e010      	b.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d902      	bls.n	8005372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800536c:	2303      	movs	r3, #3
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e00a      	b.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d102      	bne.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005378:	2302      	movs	r3, #2
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e004      	b.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b70      	cmp	r3, #112	; 0x70
 8005382:	d101      	bne.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005384:	2301      	movs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 0207 	bic.w	r2, r3, #7
 8005390:	4909      	ldr	r1, [pc, #36]	; (80053b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d001      	beq.n	80053aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40022000 	.word	0x40022000

080053bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c4:	2300      	movs	r3, #0
 80053c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053c8:	2300      	movs	r3, #0
 80053ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d041      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053e0:	d02a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053e6:	d824      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053ec:	d008      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053f2:	d81e      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fc:	d010      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053fe:	e018      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005400:	4b86      	ldr	r3, [pc, #536]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a85      	ldr	r2, [pc, #532]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800540c:	e015      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f000 facb 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800541e:	e00c      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3320      	adds	r3, #32
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fbb6 	bl	8005b98 <RCCEx_PLLSAI2_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005430:	e003      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	74fb      	strb	r3, [r7, #19]
      break;
 8005436:	e000      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005440:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544e:	4973      	ldr	r1, [pc, #460]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005456:	e001      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d041      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005470:	d02a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005476:	d824      	bhi.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547c:	d008      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800547e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005482:	d81e      	bhi.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800548c:	d010      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800548e:	e018      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005490:	4b62      	ldr	r3, [pc, #392]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4a61      	ldr	r2, [pc, #388]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800549c:	e015      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fa83 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ae:	e00c      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3320      	adds	r3, #32
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fb6e 	bl	8005b98 <RCCEx_PLLSAI2_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054c0:	e003      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	74fb      	strb	r3, [r7, #19]
      break;
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054d0:	4b52      	ldr	r3, [pc, #328]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054de:	494f      	ldr	r1, [pc, #316]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054e6:	e001      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a0 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	4a40      	ldr	r2, [pc, #256]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	; 0x58
 8005520:	4b3e      	ldr	r3, [pc, #248]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552c:	2301      	movs	r3, #1
 800552e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553c:	f7fd fb40 	bl	8002bc0 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005542:	e009      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fd fb3c 	bl	8002bc0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d902      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	74fb      	strb	r3, [r7, #19]
        break;
 8005556:	e005      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005558:	4b31      	ldr	r3, [pc, #196]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0ef      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d15c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d019      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	4a20      	ldr	r2, [pc, #128]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fd fafb 	bl	8002bc0 <HAL_GetTick>
 80055ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055cc:	e00b      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ce:	f7fd faf7 	bl	8002bc0 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d902      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	74fb      	strb	r3, [r7, #19]
            break;
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ec      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055f4:	7cfb      	ldrb	r3, [r7, #19]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560a:	4904      	ldr	r1, [pc, #16]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005612:	e009      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	74bb      	strb	r3, [r7, #18]
 8005618:	e006      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005628:	7c7b      	ldrb	r3, [r7, #17]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562e:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	4a9d      	ldr	r2, [pc, #628]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005646:	4b98      	ldr	r3, [pc, #608]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f023 0203 	bic.w	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4994      	ldr	r1, [pc, #592]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005668:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 020c 	bic.w	r2, r3, #12
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	498c      	ldr	r1, [pc, #560]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800568a:	4b87      	ldr	r3, [pc, #540]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	4983      	ldr	r1, [pc, #524]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ac:	4b7e      	ldr	r3, [pc, #504]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	497b      	ldr	r1, [pc, #492]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ce:	4b76      	ldr	r3, [pc, #472]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	4972      	ldr	r1, [pc, #456]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056f0:	4b6d      	ldr	r3, [pc, #436]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fe:	496a      	ldr	r1, [pc, #424]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005712:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005720:	4961      	ldr	r1, [pc, #388]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	4959      	ldr	r1, [pc, #356]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005756:	4b54      	ldr	r3, [pc, #336]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	4950      	ldr	r1, [pc, #320]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005778:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	4948      	ldr	r1, [pc, #288]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800579a:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	493f      	ldr	r1, [pc, #252]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d028      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	4937      	ldr	r1, [pc, #220]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d106      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
 80057e8:	e011      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f2:	d10c      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f8d8 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d028      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800581a:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	491f      	ldr	r1, [pc, #124]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d106      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005844:	60d3      	str	r3, [r2, #12]
 8005846:	e011      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005850:	d10c      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3304      	adds	r3, #4
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f000 f8a9 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02b      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005886:	4908      	ldr	r1, [pc, #32]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005896:	d109      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a02      	ldr	r2, [pc, #8]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a2:	60d3      	str	r3, [r2, #12]
 80058a4:	e014      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f877 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02f      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ea:	4928      	ldr	r1, [pc, #160]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058fa:	d10d      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	2102      	movs	r1, #2
 8005902:	4618      	mov	r0, r3
 8005904:	f000 f854 	bl	80059b0 <RCCEx_PLLSAI1_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800590c:	7cfb      	ldrb	r3, [r7, #19]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d014      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005912:	7cfb      	ldrb	r3, [r7, #19]
 8005914:	74bb      	strb	r3, [r7, #18]
 8005916:	e011      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005920:	d10c      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3320      	adds	r3, #32
 8005926:	2102      	movs	r1, #2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f935 	bl	8005b98 <RCCEx_PLLSAI2_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005932:	7cfb      	ldrb	r3, [r7, #19]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005948:	4b10      	ldr	r3, [pc, #64]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	490d      	ldr	r1, [pc, #52]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005982:	7cbb      	ldrb	r3, [r7, #18]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40021000 	.word	0x40021000

08005990 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000

080059b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059be:	4b75      	ldr	r3, [pc, #468]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d018      	beq.n	80059fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059ca:	4b72      	ldr	r3, [pc, #456]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0203 	and.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d10d      	bne.n	80059f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
       ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
       ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d047      	beq.n	8005a86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
 80059fa:	e044      	b.n	8005a86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d018      	beq.n	8005a36 <RCCEx_PLLSAI1_Config+0x86>
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d825      	bhi.n	8005a54 <RCCEx_PLLSAI1_Config+0xa4>
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d002      	beq.n	8005a12 <RCCEx_PLLSAI1_Config+0x62>
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d009      	beq.n	8005a24 <RCCEx_PLLSAI1_Config+0x74>
 8005a10:	e020      	b.n	8005a54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a12:	4b60      	ldr	r3, [pc, #384]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d11d      	bne.n	8005a5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a22:	e01a      	b.n	8005a5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a24:	4b5b      	ldr	r3, [pc, #364]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d116      	bne.n	8005a5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a34:	e013      	b.n	8005a5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a36:	4b57      	ldr	r3, [pc, #348]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a42:	4b54      	ldr	r3, [pc, #336]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a52:	e006      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      break;
 8005a58:	e004      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a6a:	4b4a      	ldr	r3, [pc, #296]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	4944      	ldr	r1, [pc, #272]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d17d      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a8c:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a40      	ldr	r2, [pc, #256]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a98:	f7fd f892 	bl	8002bc0 <HAL_GetTick>
 8005a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a9e:	e009      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa0:	f7fd f88e 	bl	8002bc0 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d902      	bls.n	8005ab4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ab2:	e005      	b.n	8005ac0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ef      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d160      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d111      	bne.n	8005af0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005acc:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6892      	ldr	r2, [r2, #8]
 8005adc:	0211      	lsls	r1, r2, #8
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68d2      	ldr	r2, [r2, #12]
 8005ae2:	0912      	lsrs	r2, r2, #4
 8005ae4:	0452      	lsls	r2, r2, #17
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	492a      	ldr	r1, [pc, #168]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	610b      	str	r3, [r1, #16]
 8005aee:	e027      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d112      	bne.n	8005b1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005afe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6892      	ldr	r2, [r2, #8]
 8005b06:	0211      	lsls	r1, r2, #8
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6912      	ldr	r2, [r2, #16]
 8005b0c:	0852      	lsrs	r2, r2, #1
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	0552      	lsls	r2, r2, #21
 8005b12:	430a      	orrs	r2, r1
 8005b14:	491f      	ldr	r1, [pc, #124]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]
 8005b1a:	e011      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6892      	ldr	r2, [r2, #8]
 8005b2c:	0211      	lsls	r1, r2, #8
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6952      	ldr	r2, [r2, #20]
 8005b32:	0852      	lsrs	r2, r2, #1
 8005b34:	3a01      	subs	r2, #1
 8005b36:	0652      	lsls	r2, r2, #25
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	4916      	ldr	r1, [pc, #88]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b40:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4c:	f7fd f838 	bl	8002bc0 <HAL_GetTick>
 8005b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b52:	e009      	b.n	8005b68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b54:	f7fd f834 	bl	8002bc0 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d902      	bls.n	8005b68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	73fb      	strb	r3, [r7, #15]
          break;
 8005b66:	e005      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0ef      	beq.n	8005b54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	4904      	ldr	r1, [pc, #16]	; (8005b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000

08005b98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d018      	beq.n	8005be4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0203 	and.w	r2, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d10d      	bne.n	8005bde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bca:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d047      	beq.n	8005c6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e044      	b.n	8005c6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d018      	beq.n	8005c1e <RCCEx_PLLSAI2_Config+0x86>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d825      	bhi.n	8005c3c <RCCEx_PLLSAI2_Config+0xa4>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d002      	beq.n	8005bfa <RCCEx_PLLSAI2_Config+0x62>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d009      	beq.n	8005c0c <RCCEx_PLLSAI2_Config+0x74>
 8005bf8:	e020      	b.n	8005c3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bfa:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11d      	bne.n	8005c42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0a:	e01a      	b.n	8005c42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c0c:	4b50      	ldr	r3, [pc, #320]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d116      	bne.n	8005c46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c1c:	e013      	b.n	8005c46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c2a:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c3a:	e006      	b.n	8005c4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	e004      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c52:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	430b      	orrs	r3, r1
 8005c68:	4939      	ldr	r1, [pc, #228]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d167      	bne.n	8005d44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c74:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a35      	ldr	r2, [pc, #212]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c80:	f7fc ff9e 	bl	8002bc0 <HAL_GetTick>
 8005c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c86:	e009      	b.n	8005c9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c88:	f7fc ff9a 	bl	8002bc0 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d902      	bls.n	8005c9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	73fb      	strb	r3, [r7, #15]
        break;
 8005c9a:	e005      	b.n	8005ca8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c9c:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ef      	bne.n	8005c88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d14a      	bne.n	8005d44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d111      	bne.n	8005cd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6892      	ldr	r2, [r2, #8]
 8005cc4:	0211      	lsls	r1, r2, #8
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68d2      	ldr	r2, [r2, #12]
 8005cca:	0912      	lsrs	r2, r2, #4
 8005ccc:	0452      	lsls	r2, r2, #17
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	491f      	ldr	r1, [pc, #124]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	614b      	str	r3, [r1, #20]
 8005cd6:	e011      	b.n	8005cfc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cd8:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6892      	ldr	r2, [r2, #8]
 8005ce8:	0211      	lsls	r1, r2, #8
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6912      	ldr	r2, [r2, #16]
 8005cee:	0852      	lsrs	r2, r2, #1
 8005cf0:	3a01      	subs	r2, #1
 8005cf2:	0652      	lsls	r2, r2, #25
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	4916      	ldr	r1, [pc, #88]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fc ff5a 	bl	8002bc0 <HAL_GetTick>
 8005d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d0e:	e009      	b.n	8005d24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d10:	f7fc ff56 	bl	8002bc0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d902      	bls.n	8005d24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	73fb      	strb	r3, [r7, #15]
          break;
 8005d22:	e005      	b.n	8005d30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ef      	beq.n	8005d10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4904      	ldr	r1, [pc, #16]	; (8005d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000

08005d54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d06c      	beq.n	8005e40 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fb1c 	bl	80023b8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	22ca      	movs	r2, #202	; 0xca
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2253      	movs	r2, #83	; 0x53
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa49 	bl	8006230 <RTC_EnterInitMode>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d14b      	bne.n	8005e40 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6919      	ldr	r1, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	041a      	lsls	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa4d 	bl	8006298 <RTC_ExitInitMode>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11b      	bne.n	8005e40 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0203 	bic.w	r2, r2, #3
 8005e16:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e4a:	b590      	push	{r4, r7, lr}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_RTC_SetTime+0x1a>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e08b      	b.n	8005f7c <HAL_RTC_SetTime+0x132>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	22ca      	movs	r2, #202	; 0xca
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2253      	movs	r2, #83	; 0x53
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f9d3 	bl	8006230 <RTC_EnterInitMode>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d163      	bne.n	8005f5c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d126      	bne.n	8005ee8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fa2e 	bl	8006314 <RTC_ByteToBcd2>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fa27 	bl	8006314 <RTC_ByteToBcd2>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	789b      	ldrb	r3, [r3, #2]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fa1f 	bl	8006314 <RTC_ByteToBcd2>
 8005ed6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ed8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	78db      	ldrb	r3, [r3, #3]
 8005ee0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e018      	b.n	8005f1a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f08:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f0e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	78db      	ldrb	r3, [r3, #3]
 8005f14:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6899      	ldr	r1, [r3, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f9a0 	bl	8006298 <RTC_ExitInitMode>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	0c1b      	lsrs	r3, r3, #16
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	0d9b      	lsrs	r3, r3, #22
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11a      	bne.n	8006032 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f000 f9a7 	bl	8006354 <RTC_Bcd2ToByte>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f99e 	bl	8006354 <RTC_Bcd2ToByte>
 8006018:	4603      	mov	r3, r0
 800601a:	461a      	mov	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	789b      	ldrb	r3, [r3, #2]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f995 	bl	8006354 <RTC_Bcd2ToByte>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_RTC_SetDate+0x1a>
 8006052:	2302      	movs	r3, #2
 8006054:	e075      	b.n	8006142 <HAL_RTC_SetDate+0x106>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10e      	bne.n	800608a <HAL_RTC_SetDate+0x4e>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	b2db      	uxtb	r3, r3
 8006082:	330a      	adds	r3, #10
 8006084:	b2da      	uxtb	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11c      	bne.n	80060ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	78db      	ldrb	r3, [r3, #3]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f93d 	bl	8006314 <RTC_ByteToBcd2>
 800609a:	4603      	mov	r3, r0
 800609c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f936 	bl	8006314 <RTC_ByteToBcd2>
 80060a8:	4603      	mov	r3, r0
 80060aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80060ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	789b      	ldrb	r3, [r3, #2]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f92e 	bl	8006314 <RTC_ByteToBcd2>
 80060b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e00e      	b.n	80060e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	78db      	ldrb	r3, [r3, #3]
 80060ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22ca      	movs	r2, #202	; 0xca
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2253      	movs	r2, #83	; 0x53
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f899 	bl	8006230 <RTC_EnterInitMode>
 80060fe:	4603      	mov	r3, r0
 8006100:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006102:	7cfb      	ldrb	r3, [r7, #19]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10c      	bne.n	8006122 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006116:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f8bd 	bl	8006298 <RTC_ExitInitMode>
 800611e:	4603      	mov	r3, r0
 8006120:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800612a:	7cfb      	ldrb	r3, [r7, #19]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006140:	7cfb      	ldrb	r3, [r7, #19]
}
 8006142:	4618      	mov	r0, r3
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	bd90      	pop	{r4, r7, pc}

0800614a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006164:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	0b5b      	lsrs	r3, r3, #13
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11a      	bne.n	80061da <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f8d3 	bl	8006354 <RTC_Bcd2ToByte>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f8ca 	bl	8006354 <RTC_Bcd2ToByte>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	789b      	ldrb	r3, [r3, #2]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f8c1 	bl	8006354 <RTC_Bcd2ToByte>
 80061d2:	4603      	mov	r3, r0
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80061fc:	f7fc fce0 	bl	8002bc0 <HAL_GetTick>
 8006200:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006202:	e009      	b.n	8006218 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006204:	f7fc fcdc 	bl	8002bc0 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006212:	d901      	bls.n	8006218 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e007      	b.n	8006228 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0ee      	beq.n	8006204 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d120      	bne.n	800628c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f04f 32ff 	mov.w	r2, #4294967295
 8006252:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006254:	f7fc fcb4 	bl	8002bc0 <HAL_GetTick>
 8006258:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800625a:	e00d      	b.n	8006278 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800625c:	f7fc fcb0 	bl	8002bc0 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626a:	d905      	bls.n	8006278 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2203      	movs	r2, #3
 8006274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <RTC_EnterInitMode+0x5c>
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d1e7      	bne.n	800625c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a19      	ldr	r2, [pc, #100]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062b0:	4b17      	ldr	r3, [pc, #92]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10c      	bne.n	80062d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff91 	bl	80061e4 <HAL_RTC_WaitForSynchro>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01e      	beq.n	8006306 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2203      	movs	r2, #3
 80062cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	73fb      	strb	r3, [r7, #15]
 80062d4:	e017      	b.n	8006306 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062dc:	f023 0320 	bic.w	r3, r3, #32
 80062e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff7e 	bl	80061e4 <HAL_RTC_WaitForSynchro>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2203      	movs	r2, #3
 80062f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <RTC_ExitInitMode+0x78>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4a04      	ldr	r2, [pc, #16]	; (8006310 <RTC_ExitInitMode+0x78>)
 8006300:	f043 0320 	orr.w	r3, r3, #32
 8006304:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40002800 	.word	0x40002800

08006314 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006326:	e005      	b.n	8006334 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800632e:	7afb      	ldrb	r3, [r7, #11]
 8006330:	3b0a      	subs	r3, #10
 8006332:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	2b09      	cmp	r3, #9
 8006338:	d8f6      	bhi.n	8006328 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	b2da      	uxtb	r2, r3
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	4313      	orrs	r3, r2
 8006346:	b2db      	uxtb	r3, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	0092      	lsls	r2, r2, #2
 8006368:	4413      	add	r3, r2
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	b2da      	uxtb	r2, r3
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	4413      	add	r3, r2
 800637a:	b2db      	uxtb	r3, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e095      	b.n	80064c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
 80063b2:	e005      	b.n	80063c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc f81e 	bl	800241c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006400:	d902      	bls.n	8006408 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e002      	b.n	800640e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800640c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006416:	d007      	beq.n	8006428 <HAL_SPI_Init+0xa0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	ea42 0103 	orr.w	r1, r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	f003 0204 	and.w	r2, r3, #4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064a4:	ea42 0103 	orr.w	r1, r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e01a      	b.n	8006516 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb ffdb 	bl	80024b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b088      	sub	sp, #32
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653a:	d112      	bne.n	8006562 <HAL_SPI_Receive+0x44>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10e      	bne.n	8006562 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2204      	movs	r2, #4
 8006548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f910 	bl	800677e <HAL_SPI_TransmitReceive>
 800655e:	4603      	mov	r3, r0
 8006560:	e109      	b.n	8006776 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_SPI_Receive+0x52>
 800656c:	2302      	movs	r3, #2
 800656e:	e102      	b.n	8006776 <HAL_SPI_Receive+0x258>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006578:	f7fc fb22 	bl	8002bc0 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d002      	beq.n	8006590 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800658e:	e0e9      	b.n	8006764 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_SPI_Receive+0x7e>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065a0:	e0e0      	b.n	8006764 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2204      	movs	r2, #4
 80065a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065ec:	d908      	bls.n	8006600 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	e007      	b.n	8006610 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800660e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	d10f      	bne.n	800663a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006638:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d007      	beq.n	8006658 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006656:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006660:	d867      	bhi.n	8006732 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006662:	e030      	b.n	80066c6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d117      	bne.n	80066a2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f103 020c 	add.w	r2, r3, #12
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066a0:	e011      	b.n	80066c6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a2:	f7fc fa8d 	bl	8002bc0 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d803      	bhi.n	80066ba <HAL_SPI_Receive+0x19c>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d102      	bne.n	80066c0 <HAL_SPI_Receive+0x1a2>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066c4:	e04e      	b.n	8006764 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1c8      	bne.n	8006664 <HAL_SPI_Receive+0x146>
 80066d2:	e034      	b.n	800673e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d115      	bne.n	800670e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	b292      	uxth	r2, r2
 80066ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800670c:	e011      	b.n	8006732 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800670e:	f7fc fa57 	bl	8002bc0 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d803      	bhi.n	8006726 <HAL_SPI_Receive+0x208>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d102      	bne.n	800672c <HAL_SPI_Receive+0x20e>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006730:	e018      	b.n	8006764 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1ca      	bne.n	80066d4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fffe 	bl	8007744 <SPI_EndRxTransaction>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
 8006760:	e000      	b.n	8006764 <HAL_SPI_Receive+0x246>
  }

error :
 8006762:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08a      	sub	sp, #40	; 0x28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800678c:	2301      	movs	r3, #1
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x26>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e1fb      	b.n	8006b9c <HAL_SPI_TransmitReceive+0x41e>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ac:	f7fc fa08 	bl	8002bc0 <HAL_GetTick>
 80067b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067c0:	887b      	ldrh	r3, [r7, #2]
 80067c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067c4:	887b      	ldrh	r3, [r7, #2]
 80067c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067c8:	7efb      	ldrb	r3, [r7, #27]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d00e      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x6e>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d4:	d106      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x66>
 80067de:	7efb      	ldrb	r3, [r7, #27]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d003      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067ea:	e1cd      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x80>
 80067f8:	887b      	ldrh	r3, [r7, #2]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006804:	e1c0      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b04      	cmp	r3, #4
 8006810:	d003      	beq.n	800681a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2205      	movs	r2, #5
 8006816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	887a      	ldrh	r2, [r7, #2]
 800682a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	887a      	ldrh	r2, [r7, #2]
 8006832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	887a      	ldrh	r2, [r7, #2]
 8006846:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685c:	d802      	bhi.n	8006864 <HAL_SPI_TransmitReceive+0xe6>
 800685e:	8a3b      	ldrh	r3, [r7, #16]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d908      	bls.n	8006876 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006872:	605a      	str	r2, [r3, #4]
 8006874:	e007      	b.n	8006886 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006884:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	d007      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068ac:	d97c      	bls.n	80069a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x13e>
 80068b6:	8a7b      	ldrh	r3, [r7, #18]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d169      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	881a      	ldrh	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c9a      	adds	r2, r3, #2
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068e0:	e056      	b.n	8006990 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11b      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x1aa>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x1aa>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d113      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	1c9a      	adds	r2, r3, #2
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b01      	cmp	r3, #1
 8006934:	d11c      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x1f2>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	b292      	uxth	r2, r2
 800694e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	1c9a      	adds	r2, r3, #2
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800696c:	2301      	movs	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006970:	f7fc f926 	bl	8002bc0 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697c:	429a      	cmp	r2, r3
 800697e:	d807      	bhi.n	8006990 <HAL_SPI_TransmitReceive+0x212>
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800698e:	e0fb      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1a3      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x164>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d19d      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x164>
 80069a6:	e0df      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x23a>
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	f040 80cb 	bne.w	8006b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d912      	bls.n	80069e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b02      	subs	r3, #2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069e6:	e0b2      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0e:	e09e      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d134      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x30a>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02f      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x30a>
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d12c      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d912      	bls.n	8006a5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b02      	subs	r3, #2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5c:	e012      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d148      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x3aa>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d042      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d923      	bls.n	8006af6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	1c9a      	adds	r2, r3, #2
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b02      	subs	r3, #2
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d81f      	bhi.n	8006b24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	e016      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f103 020c 	add.w	r2, r3, #12
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b28:	f7fc f84a 	bl	8002bc0 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d803      	bhi.n	8006b40 <HAL_SPI_TransmitReceive+0x3c2>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x3c8>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b4c:	e01c      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f af5b 	bne.w	8006a10 <HAL_SPI_TransmitReceive+0x292>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af54 	bne.w	8006a10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fe41 	bl	80077f4 <SPI_EndRxTxTransaction>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	661a      	str	r2, [r3, #96]	; 0x60
 8006b84:	e000      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3728      	adds	r7, #40	; 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_SPI_Transmit_IT+0x20>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e072      	b.n	8006caa <HAL_SPI_Transmit_IT+0x106>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_Transmit_IT+0x34>
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bdc:	e060      	b.n	8006ca0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d002      	beq.n	8006bf0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
 8006bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bee:	e057      	b.n	8006ca0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c34:	d903      	bls.n	8006c3e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a1f      	ldr	r2, [pc, #124]	; (8006cb8 <HAL_SPI_Transmit_IT+0x114>)
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50
 8006c3c:	e002      	b.n	8006c44 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_SPI_Transmit_IT+0x118>)
 8006c42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d10f      	bne.n	8006c6e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006c7c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d008      	beq.n	8006c9e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e000      	b.n	8006ca0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006c9e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	080074cb 	.word	0x080074cb
 8006cbc:	08007485 	.word	0x08007485

08006cc0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d110      	bne.n	8006cfc <HAL_SPI_Receive_IT+0x3c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce2:	d10b      	bne.n	8006cfc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f894 	bl	8006e20 <HAL_SPI_TransmitReceive_IT>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	e089      	b.n	8006e10 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_Receive_IT+0x4a>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e082      	b.n	8006e10 <HAL_SPI_Receive_IT+0x150>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d002      	beq.n	8006d24 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d22:	e070      	b.n	8006e06 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_SPI_Receive_IT+0x70>
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d34:	e067      	b.n	8006e06 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d7a:	d90b      	bls.n	8006d94 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d8a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <HAL_SPI_Receive_IT+0x158>)
 8006d90:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d92:	e00a      	b.n	8006daa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006da2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_SPI_Receive_IT+0x15c>)
 8006da8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db2:	d10f      	bne.n	8006dd4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dd2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006de2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d008      	beq.n	8006e04 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e000      	b.n	8006e06 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006e04:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	08007439 	.word	0x08007439
 8006e1c:	080073e9 	.word	0x080073e9

08006e20 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_SPI_TransmitReceive_IT+0x20>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e091      	b.n	8006f64 <HAL_SPI_TransmitReceive_IT+0x144>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e4e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d00d      	beq.n	8006e78 <HAL_SPI_TransmitReceive_IT+0x58>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e62:	d106      	bne.n	8006e72 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <HAL_SPI_TransmitReceive_IT+0x52>
 8006e6c:	7dbb      	ldrb	r3, [r7, #22]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e76:	e070      	b.n	8006f5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e84:	887b      	ldrh	r3, [r7, #2]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e8e:	e064      	b.n	8006f5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d003      	beq.n	8006ea4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	887a      	ldrh	r2, [r7, #2]
 8006ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	887a      	ldrh	r2, [r7, #2]
 8006ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eda:	d906      	bls.n	8006eea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a24      	ldr	r2, [pc, #144]	; (8006f70 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006ee0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006ee6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ee8:	e005      	b.n	8006ef6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a22      	ldr	r2, [pc, #136]	; (8006f78 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006eee:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a22      	ldr	r2, [pc, #136]	; (8006f7c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efe:	d802      	bhi.n	8006f06 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006f00:	887b      	ldrh	r3, [r7, #2]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d908      	bls.n	8006f18 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	e007      	b.n	8006f28 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f26:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006f36:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d008      	beq.n	8006f58 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e000      	b.n	8006f5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006f58:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	08007323 	.word	0x08007323
 8006f74:	08007389 	.word	0x08007389
 8006f78:	080071d3 	.word	0x080071d3
 8006f7c:	08007291 	.word	0x08007291

08006f80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	099b      	lsrs	r3, r3, #6
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
    return;
 8006fc2:	e0d7      	b.n	8007174 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <HAL_SPI_IRQHandler+0x66>
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	09db      	lsrs	r3, r3, #7
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
    return;
 8006fe4:	e0c6      	b.n	8007174 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10c      	bne.n	800700c <HAL_SPI_IRQHandler+0x8c>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	099b      	lsrs	r3, r3, #6
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80b4 	beq.w	8007174 <HAL_SPI_IRQHandler+0x1f4>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80ad 	beq.w	8007174 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	099b      	lsrs	r3, r3, #6
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d023      	beq.n	800706e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d011      	beq.n	8007056 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007036:	f043 0204 	orr.w	r2, r3, #4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e00b      	b.n	800706e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]
        return;
 800706c:	e082      	b.n	8007174 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d014      	beq.n	80070a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	f043 0208 	orr.w	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04f      	beq.n	8007172 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <HAL_SPI_IRQHandler+0x17e>
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d034      	beq.n	8007168 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0203 	bic.w	r2, r2, #3
 800710c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <HAL_SPI_IRQHandler+0x1fc>)
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	4618      	mov	r0, r3
 8007124:	f7fb ffda 	bl	80030dc <HAL_DMA_Abort_IT>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713e:	2b00      	cmp	r3, #0
 8007140:	d016      	beq.n	8007170 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	4a0d      	ldr	r2, [pc, #52]	; (800717c <HAL_SPI_IRQHandler+0x1fc>)
 8007148:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	4618      	mov	r0, r3
 8007150:	f7fb ffc4 	bl	80030dc <HAL_DMA_Abort_IT>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007166:	e003      	b.n	8007170 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f813 	bl	8007194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800716e:	e000      	b.n	8007172 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007170:	bf00      	nop
    return;
 8007172:	bf00      	nop
  }
}
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	080071a9 	.word	0x080071a9

08007180 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff ffe5 	bl	8007194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d923      	bls.n	800722e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	b292      	uxth	r2, r2
 80071f2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b02      	subs	r3, #2
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d11f      	bne.n	800725c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	e016      	b.n	800725c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f103 020c 	add.w	r2, r3, #12
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10f      	bne.n	8007288 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007276:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fafc 	bl	8007880 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d912      	bls.n	80072c8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	881a      	ldrh	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	1c9a      	adds	r2, r3, #2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b02      	subs	r3, #2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072c6:	e012      	b.n	80072ee <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d110      	bne.n	800731a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007306:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fab3 	bl	8007880 <SPI_CloseRxTx_ISR>
    }
  }
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	b292      	uxth	r2, r2
 8007336:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	1c9a      	adds	r2, r3, #2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10f      	bne.n	8007380 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa80 	bl	8007880 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d110      	bne.n	80073e0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d102      	bne.n	80073e0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa50 	bl	8007880 <SPI_CloseRxTx_ISR>
    }
  }
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f103 020c 	add.w	r2, r3, #12
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa6a 	bl	8007904 <SPI_CloseRx_ISR>
  }
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	b292      	uxth	r2, r2
 800744c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800745e:	b29b      	uxth	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa44 	bl	8007904 <SPI_CloseRx_ISR>
  }
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa51 	bl	8007964 <SPI_CloseTx_ISR>
  }
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	1c9a      	adds	r2, r3, #2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa2f 	bl	8007964 <SPI_CloseTx_ISR>
  }
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007520:	f7fb fb4e 	bl	8002bc0 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	4413      	add	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007530:	f7fb fb46 	bl	8002bc0 <HAL_GetTick>
 8007534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	015b      	lsls	r3, r3, #5
 800753c:	0d1b      	lsrs	r3, r3, #20
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	fb02 f303 	mul.w	r3, r2, r3
 8007544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007546:	e054      	b.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d050      	beq.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007550:	f7fb fb36 	bl	8002bc0 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	429a      	cmp	r2, r3
 800755e:	d902      	bls.n	8007566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d13d      	bne.n	80075e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757e:	d111      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	d004      	beq.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007592:	d107      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ac:	d10f      	bne.n	80075ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e017      	b.n	8007612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4013      	ands	r3, r2
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	bf0c      	ite	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	2300      	movne	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	429a      	cmp	r2, r3
 800760e:	d19b      	bne.n	8007548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000010 	.word	0x20000010

08007620 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800762e:	f7fb fac7 	bl	8002bc0 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	4413      	add	r3, r2
 800763c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800763e:	f7fb fabf 	bl	8002bc0 <HAL_GetTick>
 8007642:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	00da      	lsls	r2, r3, #3
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	0d1b      	lsrs	r3, r3, #20
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800765c:	e062      	b.n	8007724 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007664:	d109      	bne.n	800767a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007678:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d050      	beq.n	8007724 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007682:	f7fb fa9d 	bl	8002bc0 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	429a      	cmp	r2, r3
 8007690:	d902      	bls.n	8007698 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13d      	bne.n	8007714 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b0:	d111      	bne.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ba:	d004      	beq.n	80076c6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c4:	d107      	bne.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076de:	d10f      	bne.n	8007700 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e010      	b.n	8007736 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3b01      	subs	r3, #1
 8007722:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4013      	ands	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d194      	bne.n	800765e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000010 	.word	0x20000010

08007744 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007758:	d111      	bne.n	800777e <SPI_EndRxTransaction+0x3a>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007762:	d004      	beq.n	800776e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776c:	d107      	bne.n	800777e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800777c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff fec1 	bl	8007510 <SPI_WaitFlagStateUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007798:	f043 0220 	orr.w	r2, r3, #32
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e023      	b.n	80077ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ac:	d11d      	bne.n	80077ea <SPI_EndRxTransaction+0xa6>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b6:	d004      	beq.n	80077c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d113      	bne.n	80077ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff ff26 	bl	8007620 <SPI_WaitFifoStateUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077de:	f043 0220 	orr.w	r2, r3, #32
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e000      	b.n	80077ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff ff07 	bl	8007620 <SPI_WaitFifoStateUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e027      	b.n	8007878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fe6c 	bl	8007510 <SPI_WaitFlagStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e014      	b.n	8007878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fee0 	bl	8007620 <SPI_WaitFifoStateUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800786a:	f043 0220 	orr.w	r2, r3, #32
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e000      	b.n	8007878 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007888:	f7fb f99a 	bl	8002bc0 <HAL_GetTick>
 800788c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0220 	bic.w	r2, r2, #32
 800789c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	2164      	movs	r1, #100	; 0x64
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff ffa6 	bl	80077f4 <SPI_EndRxTxTransaction>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b2:	f043 0220 	orr.w	r2, r3, #32
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d115      	bne.n	80078ee <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d107      	bne.n	80078de <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f003 fd02 	bl	800b2e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80078dc:	e00e      	b.n	80078fc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fc4a 	bl	8007180 <HAL_SPI_TxRxCpltCallback>
}
 80078ec:	e006      	b.n	80078fc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fc4c 	bl	8007194 <HAL_SPI_ErrorCallback>
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800791a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800791c:	f7fb f950 	bl	8002bc0 <HAL_GetTick>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	2164      	movs	r1, #100	; 0x64
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ff0c 	bl	8007744 <SPI_EndRxTransaction>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007936:	f043 0220 	orr.w	r2, r3, #32
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f003 fcc6 	bl	800b2e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007954:	e002      	b.n	800795c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fc1c 	bl	8007194 <HAL_SPI_ErrorCallback>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800796c:	f7fb f928 	bl	8002bc0 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007980:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	2164      	movs	r1, #100	; 0x64
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff ff34 	bl	80077f4 <SPI_EndRxTxTransaction>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	60bb      	str	r3, [r7, #8]
 80079ba:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fbe1 	bl	8007194 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80079d2:	e002      	b.n	80079da <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f003 fc97 	bl	800b308 <HAL_SPI_TxCpltCallback>
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e049      	b.n	8007a88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fa fd75 	bl	80024f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 f9ed 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d001      	beq.n	8007aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e04f      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIM_Base_Start_IT+0x76>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d115      	bne.n	8007b32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d015      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0xb4>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b1e:	d011      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	e008      	b.n	8007b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800
 8007b60:	40000c00 	.word	0x40000c00
 8007b64:	40013400 	.word	0x40013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	00010007 	.word	0x00010007

08007b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d122      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d11b      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0202 	mvn.w	r2, #2
 8007b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f905 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8f7 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f908 	bl	8007dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d122      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d11b      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0204 	mvn.w	r2, #4
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8db 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8cd 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8de 	bl	8007dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d122      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d11b      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0208 	mvn.w	r2, #8
 8007c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2204      	movs	r2, #4
 8007c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8b1 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8a3 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8b4 	bl	8007dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d122      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b10      	cmp	r3, #16
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0210 	mvn.w	r2, #16
 8007c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f887 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f879 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f88a 	bl	8007dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0201 	mvn.w	r2, #1
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fa f804 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfe:	2b80      	cmp	r3, #128	; 0x80
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f99c 	bl	8008058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2e:	d10e      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d107      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f98f 	bl	800806c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d10e      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f838 	bl	8007dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d10e      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0220 	mvn.w	r2, #32
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f94f 	bl	8008044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a40      	ldr	r2, [pc, #256]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d00f      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3d      	ldr	r2, [pc, #244]	; (8007f18 <TIM_Base_SetConfig+0x118>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00b      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3c      	ldr	r2, [pc, #240]	; (8007f1c <TIM_Base_SetConfig+0x11c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d007      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3b      	ldr	r2, [pc, #236]	; (8007f20 <TIM_Base_SetConfig+0x120>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3a      	ldr	r2, [pc, #232]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2f      	ldr	r2, [pc, #188]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01f      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e60:	d01b      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <TIM_Base_SetConfig+0x118>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d017      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <TIM_Base_SetConfig+0x11c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <TIM_Base_SetConfig+0x120>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00f      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a29      	ldr	r2, [pc, #164]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00b      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a27      	ldr	r2, [pc, #156]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d003      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d108      	bne.n	8007eac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00f      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00b      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a11      	ldr	r2, [pc, #68]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a10      	ldr	r2, [pc, #64]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a0f      	ldr	r2, [pc, #60]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d103      	bne.n	8007f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	615a      	str	r2, [r3, #20]
}
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40000c00 	.word	0x40000c00
 8007f24:	40013400 	.word	0x40013400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e068      	b.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a2e      	ldr	r2, [pc, #184]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2d      	ldr	r2, [pc, #180]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d108      	bne.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1e      	ldr	r2, [pc, #120]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1a      	ldr	r2, [pc, #104]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a13      	ldr	r2, [pc, #76]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a14      	ldr	r2, [pc, #80]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10c      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40013400 	.word	0x40013400
 8008034:	40000400 	.word	0x40000400
 8008038:	40000800 	.word	0x40000800
 800803c:	40000c00 	.word	0x40000c00
 8008040:	40014000 	.word	0x40014000

08008044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e040      	b.n	8008114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa fa4e 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2224      	movs	r2, #36	; 0x24
 80080ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0201 	bic.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fb26 	bl	8008710 <UART_SetConfig>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e022      	b.n	8008114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fdd4 	bl	8008c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fe5b 	bl	8008dc8 <UART_CheckIdleState>
 8008112:	4603      	mov	r3, r0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008130:	2b20      	cmp	r3, #32
 8008132:	f040 8082 	bne.w	800823a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_UART_Transmit+0x26>
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e07a      	b.n	800823c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UART_Transmit+0x38>
 8008150:	2302      	movs	r3, #2
 8008152:	e073      	b.n	800823c <HAL_UART_Transmit+0x120>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2221      	movs	r2, #33	; 0x21
 8008168:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800816a:	f7fa fd29 	bl	8002bc0 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008188:	d108      	bne.n	800819c <HAL_UART_Transmit+0x80>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	e003      	b.n	80081a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80081ac:	e02d      	b.n	800820a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fe4e 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e039      	b.n	800823c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10b      	bne.n	80081e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	881a      	ldrh	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081da:	b292      	uxth	r2, r2
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	3302      	adds	r3, #2
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	e008      	b.n	80081f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	b292      	uxth	r2, r2
 80081f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3301      	adds	r3, #1
 80081f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1cb      	bne.n	80081ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2200      	movs	r2, #0
 800821e:	2140      	movs	r1, #64	; 0x40
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fe1a 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e005      	b.n	800823c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	e000      	b.n	800823c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800823a:	2302      	movs	r3, #2
  }
}
 800823c:	4618      	mov	r0, r3
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008256:	2b20      	cmp	r3, #32
 8008258:	d131      	bne.n	80082be <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_UART_Receive_IT+0x22>
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e02a      	b.n	80082c0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_UART_Receive_IT+0x34>
 8008274:	2302      	movs	r3, #2
 8008276:	e023      	b.n	80082c0 <HAL_UART_Receive_IT+0x7c>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <HAL_UART_Receive_IT+0x84>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d00e      	beq.n	80082ae <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80082ac:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	461a      	mov	r2, r3
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fe4d 	bl	8008f54 <UART_Start_Receive_IT>
 80082ba:	4603      	mov	r3, r0
 80082bc:	e000      	b.n	80082c0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80082be:	2302      	movs	r3, #2
  }
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40008000 	.word	0x40008000

080082cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80082f2:	4013      	ands	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d113      	bne.n	8008324 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00e      	beq.n	8008324 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 81cf 	beq.w	80086b8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
      }
      return;
 8008322:	e1c9      	b.n	80086b8 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 80e8 	beq.w	80084fc <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4b6e      	ldr	r3, [pc, #440]	; (80084f4 <HAL_UART_IRQHandler+0x228>)
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80dd 	beq.w	80084fc <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <HAL_UART_IRQHandler+0xa2>
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2201      	movs	r2, #1
 800835c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008364:	f043 0201 	orr.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d010      	beq.n	800839a <HAL_UART_IRQHandler+0xce>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2202      	movs	r2, #2
 8008388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008390:	f043 0204 	orr.w	r2, r3, #4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <HAL_UART_IRQHandler+0xfa>
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2204      	movs	r2, #4
 80083b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083bc:	f043 0202 	orr.w	r2, r3, #2
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d015      	beq.n	80083fc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2208      	movs	r2, #8
 80083ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083f2:	f043 0208 	orr.w	r2, r3, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008402:	2b00      	cmp	r3, #0
 8008404:	d011      	beq.n	800842a <HAL_UART_IRQHandler+0x15e>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00c      	beq.n	800842a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008420:	f043 0220 	orr.w	r2, r3, #32
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8143 	beq.w	80086bc <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008460:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d004      	beq.n	800847a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008476:	2b00      	cmp	r3, #0
 8008478:	d031      	beq.n	80084de <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fdf2 	bl	8009064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d123      	bne.n	80084d6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800849c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d013      	beq.n	80084ce <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <HAL_UART_IRQHandler+0x22c>)
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fa fe12 	bl	80030dc <HAL_DMA_Abort_IT>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d017      	beq.n	80084ee <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084cc:	e00f      	b.n	80084ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f908 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e00b      	b.n	80084ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f904 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e007      	b.n	80084ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f900 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80084ec:	e0e6      	b.n	80086bc <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ee:	bf00      	nop
    return;
 80084f0:	e0e4      	b.n	80086bc <HAL_UART_IRQHandler+0x3f0>
 80084f2:	bf00      	nop
 80084f4:	04000120 	.word	0x04000120
 80084f8:	080090c3 	.word	0x080090c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	2b01      	cmp	r3, #1
 8008502:	f040 80a5 	bne.w	8008650 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 809f 	beq.w	8008650 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8099 	beq.w	8008650 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2210      	movs	r2, #16
 8008524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d154      	bne.n	80085de <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800853e:	893b      	ldrh	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 80bd 	beq.w	80086c0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800854c:	893a      	ldrh	r2, [r7, #8]
 800854e:	429a      	cmp	r2, r3
 8008550:	f080 80b6 	bcs.w	80086c0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	893a      	ldrh	r2, [r7, #8]
 8008558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d12a      	bne.n	80085c2 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800857a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0210 	bic.w	r2, r2, #16
 80085b6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fa fd4f 	bl	8003060 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f88e 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085dc:	e070      	b.n	80086c0 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d063      	beq.n	80086c4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80085fc:	897b      	ldrh	r3, [r7, #10]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d060      	beq.n	80086c4 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008610:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0201 	bic.w	r2, r2, #1
 8008620:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0210 	bic.w	r2, r2, #16
 8008642:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008644:	897b      	ldrh	r3, [r7, #10]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f855 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800864e:	e039      	b.n	80086c4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <HAL_UART_IRQHandler+0x3aa>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800866c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fe2e 	bl	80092d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008674:	e029      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00d      	beq.n	800869c <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008686:	2b00      	cmp	r3, #0
 8008688:	d008      	beq.n	800869c <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01a      	beq.n	80086c8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
    }
    return;
 800869a:	e015      	b.n	80086c8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <HAL_UART_IRQHandler+0x3fe>
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00c      	beq.n	80086ca <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fd1c 	bl	80090ee <UART_EndTransmit_IT>
    return;
 80086b6:	e008      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
      return;
 80086b8:	bf00      	nop
 80086ba:	e006      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
    return;
 80086bc:	bf00      	nop
 80086be:	e004      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
      return;
 80086c0:	bf00      	nop
 80086c2:	e002      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
      return;
 80086c4:	bf00      	nop
 80086c6:	e000      	b.n	80086ca <HAL_UART_IRQHandler+0x3fe>
    return;
 80086c8:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008714:	b08a      	sub	sp, #40	; 0x28
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	431a      	orrs	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	431a      	orrs	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	4313      	orrs	r3, r2
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4ba4      	ldr	r3, [pc, #656]	; (80089d0 <UART_SetConfig+0x2c0>)
 8008740:	4013      	ands	r3, r2
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008748:	430b      	orrs	r3, r1
 800874a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a99      	ldr	r2, [pc, #612]	; (80089d4 <UART_SetConfig+0x2c4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d004      	beq.n	800877c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008778:	4313      	orrs	r3, r2
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878c:	430a      	orrs	r2, r1
 800878e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a90      	ldr	r2, [pc, #576]	; (80089d8 <UART_SetConfig+0x2c8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d126      	bne.n	80087e8 <UART_SetConfig+0xd8>
 800879a:	4b90      	ldr	r3, [pc, #576]	; (80089dc <UART_SetConfig+0x2cc>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d81b      	bhi.n	80087e0 <UART_SetConfig+0xd0>
 80087a8:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <UART_SetConfig+0xa0>)
 80087aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	080087d1 	.word	0x080087d1
 80087b8:	080087c9 	.word	0x080087c9
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c6:	e116      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80087c8:	2302      	movs	r3, #2
 80087ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ce:	e112      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d6:	e10e      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087de:	e10a      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e6:	e106      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a7c      	ldr	r2, [pc, #496]	; (80089e0 <UART_SetConfig+0x2d0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d138      	bne.n	8008864 <UART_SetConfig+0x154>
 80087f2:	4b7a      	ldr	r3, [pc, #488]	; (80089dc <UART_SetConfig+0x2cc>)
 80087f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f8:	f003 030c 	and.w	r3, r3, #12
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d82d      	bhi.n	800885c <UART_SetConfig+0x14c>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <UART_SetConfig+0xf8>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800883d 	.word	0x0800883d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	0800885d 	.word	0x0800885d
 8008814:	0800885d 	.word	0x0800885d
 8008818:	0800884d 	.word	0x0800884d
 800881c:	0800885d 	.word	0x0800885d
 8008820:	0800885d 	.word	0x0800885d
 8008824:	0800885d 	.word	0x0800885d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800885d 	.word	0x0800885d
 8008830:	0800885d 	.word	0x0800885d
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008855 	.word	0x08008855
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008842:	e0d8      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e0d4      	b.n	80089f6 <UART_SetConfig+0x2e6>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e0d0      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885a:	e0cc      	b.n	80089f6 <UART_SetConfig+0x2e6>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008862:	e0c8      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a5e      	ldr	r2, [pc, #376]	; (80089e4 <UART_SetConfig+0x2d4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d125      	bne.n	80088ba <UART_SetConfig+0x1aa>
 800886e:	4b5b      	ldr	r3, [pc, #364]	; (80089dc <UART_SetConfig+0x2cc>)
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008874:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d016      	beq.n	80088aa <UART_SetConfig+0x19a>
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d818      	bhi.n	80088b2 <UART_SetConfig+0x1a2>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d00a      	beq.n	800889a <UART_SetConfig+0x18a>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d814      	bhi.n	80088b2 <UART_SetConfig+0x1a2>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <UART_SetConfig+0x182>
 800888c:	2b10      	cmp	r3, #16
 800888e:	d008      	beq.n	80088a2 <UART_SetConfig+0x192>
 8008890:	e00f      	b.n	80088b2 <UART_SetConfig+0x1a2>
 8008892:	2300      	movs	r3, #0
 8008894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008898:	e0ad      	b.n	80089f6 <UART_SetConfig+0x2e6>
 800889a:	2302      	movs	r3, #2
 800889c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a0:	e0a9      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088a2:	2304      	movs	r3, #4
 80088a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a8:	e0a5      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088aa:	2308      	movs	r3, #8
 80088ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b0:	e0a1      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088b2:	2310      	movs	r3, #16
 80088b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b8:	e09d      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a4a      	ldr	r2, [pc, #296]	; (80089e8 <UART_SetConfig+0x2d8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d125      	bne.n	8008910 <UART_SetConfig+0x200>
 80088c4:	4b45      	ldr	r3, [pc, #276]	; (80089dc <UART_SetConfig+0x2cc>)
 80088c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088ce:	2bc0      	cmp	r3, #192	; 0xc0
 80088d0:	d016      	beq.n	8008900 <UART_SetConfig+0x1f0>
 80088d2:	2bc0      	cmp	r3, #192	; 0xc0
 80088d4:	d818      	bhi.n	8008908 <UART_SetConfig+0x1f8>
 80088d6:	2b80      	cmp	r3, #128	; 0x80
 80088d8:	d00a      	beq.n	80088f0 <UART_SetConfig+0x1e0>
 80088da:	2b80      	cmp	r3, #128	; 0x80
 80088dc:	d814      	bhi.n	8008908 <UART_SetConfig+0x1f8>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <UART_SetConfig+0x1d8>
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d008      	beq.n	80088f8 <UART_SetConfig+0x1e8>
 80088e6:	e00f      	b.n	8008908 <UART_SetConfig+0x1f8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ee:	e082      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088f0:	2302      	movs	r3, #2
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e07e      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80088f8:	2304      	movs	r3, #4
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e07a      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e076      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890e:	e072      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a35      	ldr	r2, [pc, #212]	; (80089ec <UART_SetConfig+0x2dc>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d12a      	bne.n	8008970 <UART_SetConfig+0x260>
 800891a:	4b30      	ldr	r3, [pc, #192]	; (80089dc <UART_SetConfig+0x2cc>)
 800891c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008928:	d01a      	beq.n	8008960 <UART_SetConfig+0x250>
 800892a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800892e:	d81b      	bhi.n	8008968 <UART_SetConfig+0x258>
 8008930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008934:	d00c      	beq.n	8008950 <UART_SetConfig+0x240>
 8008936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893a:	d815      	bhi.n	8008968 <UART_SetConfig+0x258>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <UART_SetConfig+0x238>
 8008940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008944:	d008      	beq.n	8008958 <UART_SetConfig+0x248>
 8008946:	e00f      	b.n	8008968 <UART_SetConfig+0x258>
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894e:	e052      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008950:	2302      	movs	r3, #2
 8008952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008956:	e04e      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008958:	2304      	movs	r3, #4
 800895a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800895e:	e04a      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008960:	2308      	movs	r3, #8
 8008962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008966:	e046      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008968:	2310      	movs	r3, #16
 800896a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896e:	e042      	b.n	80089f6 <UART_SetConfig+0x2e6>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <UART_SetConfig+0x2c4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d13a      	bne.n	80089f0 <UART_SetConfig+0x2e0>
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <UART_SetConfig+0x2cc>)
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008988:	d01a      	beq.n	80089c0 <UART_SetConfig+0x2b0>
 800898a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800898e:	d81b      	bhi.n	80089c8 <UART_SetConfig+0x2b8>
 8008990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008994:	d00c      	beq.n	80089b0 <UART_SetConfig+0x2a0>
 8008996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899a:	d815      	bhi.n	80089c8 <UART_SetConfig+0x2b8>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <UART_SetConfig+0x298>
 80089a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a4:	d008      	beq.n	80089b8 <UART_SetConfig+0x2a8>
 80089a6:	e00f      	b.n	80089c8 <UART_SetConfig+0x2b8>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e022      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80089b0:	2302      	movs	r3, #2
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e01e      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80089b8:	2304      	movs	r3, #4
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e01a      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80089c0:	2308      	movs	r3, #8
 80089c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c6:	e016      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80089c8:	2310      	movs	r3, #16
 80089ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ce:	e012      	b.n	80089f6 <UART_SetConfig+0x2e6>
 80089d0:	efff69f3 	.word	0xefff69f3
 80089d4:	40008000 	.word	0x40008000
 80089d8:	40013800 	.word	0x40013800
 80089dc:	40021000 	.word	0x40021000
 80089e0:	40004400 	.word	0x40004400
 80089e4:	40004800 	.word	0x40004800
 80089e8:	40004c00 	.word	0x40004c00
 80089ec:	40005000 	.word	0x40005000
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4aa0      	ldr	r2, [pc, #640]	; (8008c7c <UART_SetConfig+0x56c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d17a      	bne.n	8008af6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d824      	bhi.n	8008a52 <UART_SetConfig+0x342>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <UART_SetConfig+0x300>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a35 	.word	0x08008a35
 8008a14:	08008a53 	.word	0x08008a53
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a53 	.word	0x08008a53
 8008a20:	08008a43 	.word	0x08008a43
 8008a24:	08008a53 	.word	0x08008a53
 8008a28:	08008a53 	.word	0x08008a53
 8008a2c:	08008a53 	.word	0x08008a53
 8008a30:	08008a4b 	.word	0x08008a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a34:	f7fc fc04 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8008a38:	61f8      	str	r0, [r7, #28]
        break;
 8008a3a:	e010      	b.n	8008a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a3c:	4b90      	ldr	r3, [pc, #576]	; (8008c80 <UART_SetConfig+0x570>)
 8008a3e:	61fb      	str	r3, [r7, #28]
        break;
 8008a40:	e00d      	b.n	8008a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a42:	f7fc fb65 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8008a46:	61f8      	str	r0, [r7, #28]
        break;
 8008a48:	e009      	b.n	8008a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a4e:	61fb      	str	r3, [r7, #28]
        break;
 8008a50:	e005      	b.n	8008a5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 80fd 	beq.w	8008c60 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	4413      	add	r3, r2
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d305      	bcc.n	8008a82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d903      	bls.n	8008a8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a88:	e0ea      	b.n	8008c60 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	461c      	mov	r4, r3
 8008a90:	4615      	mov	r5, r2
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	022b      	lsls	r3, r5, #8
 8008a9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008aa0:	0222      	lsls	r2, r4, #8
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	6849      	ldr	r1, [r1, #4]
 8008aa6:	0849      	lsrs	r1, r1, #1
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4688      	mov	r8, r1
 8008aac:	4681      	mov	r9, r0
 8008aae:	eb12 0a08 	adds.w	sl, r2, r8
 8008ab2:	eb43 0b09 	adc.w	fp, r3, r9
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f7 fbda 	bl	8000280 <__aeabi_uldivmod>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ada:	d308      	bcc.n	8008aee <UART_SetConfig+0x3de>
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ae2:	d204      	bcs.n	8008aee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e0b8      	b.n	8008c60 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008af4:	e0b4      	b.n	8008c60 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afe:	d15f      	bne.n	8008bc0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8008b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d828      	bhi.n	8008b5a <UART_SetConfig+0x44a>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x400>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b4b 	.word	0x08008b4b
 8008b24:	08008b5b 	.word	0x08008b5b
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b5b 	.word	0x08008b5b
 8008b30:	08008b53 	.word	0x08008b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b34:	f7fc fb84 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8008b38:	61f8      	str	r0, [r7, #28]
        break;
 8008b3a:	e014      	b.n	8008b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b3c:	f7fc fb96 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8008b40:	61f8      	str	r0, [r7, #28]
        break;
 8008b42:	e010      	b.n	8008b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b44:	4b4e      	ldr	r3, [pc, #312]	; (8008c80 <UART_SetConfig+0x570>)
 8008b46:	61fb      	str	r3, [r7, #28]
        break;
 8008b48:	e00d      	b.n	8008b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b4a:	f7fc fae1 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8008b4e:	61f8      	str	r0, [r7, #28]
        break;
 8008b50:	e009      	b.n	8008b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b56:	61fb      	str	r3, [r7, #28]
        break;
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d079      	beq.n	8008c60 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	005a      	lsls	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	441a      	add	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b0f      	cmp	r3, #15
 8008b88:	d916      	bls.n	8008bb8 <UART_SetConfig+0x4a8>
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b90:	d212      	bcs.n	8008bb8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f023 030f 	bic.w	r3, r3, #15
 8008b9a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	8afb      	ldrh	r3, [r7, #22]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	8afa      	ldrh	r2, [r7, #22]
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	e053      	b.n	8008c60 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bbe:	e04f      	b.n	8008c60 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d828      	bhi.n	8008c1a <UART_SetConfig+0x50a>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x4c0>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	08008c1b 	.word	0x08008c1b
 8008be0:	08008c0b 	.word	0x08008c0b
 8008be4:	08008c1b 	.word	0x08008c1b
 8008be8:	08008c1b 	.word	0x08008c1b
 8008bec:	08008c1b 	.word	0x08008c1b
 8008bf0:	08008c13 	.word	0x08008c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf4:	f7fc fb24 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8008bf8:	61f8      	str	r0, [r7, #28]
        break;
 8008bfa:	e014      	b.n	8008c26 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bfc:	f7fc fb36 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8008c00:	61f8      	str	r0, [r7, #28]
        break;
 8008c02:	e010      	b.n	8008c26 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <UART_SetConfig+0x570>)
 8008c06:	61fb      	str	r3, [r7, #28]
        break;
 8008c08:	e00d      	b.n	8008c26 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c0a:	f7fc fa81 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8008c0e:	61f8      	str	r0, [r7, #28]
        break;
 8008c10:	e009      	b.n	8008c26 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c16:	61fb      	str	r3, [r7, #28]
        break;
 8008c18:	e005      	b.n	8008c26 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c24:	bf00      	nop
    }

    if (pclk != 0U)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d019      	beq.n	8008c60 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	085a      	lsrs	r2, r3, #1
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b0f      	cmp	r3, #15
 8008c46:	d908      	bls.n	8008c5a <UART_SetConfig+0x54a>
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4e:	d204      	bcs.n	8008c5a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	60da      	str	r2, [r3, #12]
 8008c58:	e002      	b.n	8008c60 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3728      	adds	r7, #40	; 0x28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40008000 	.word	0x40008000
 8008c80:	00f42400 	.word	0x00f42400

08008c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d82:	d10a      	bne.n	8008d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd8:	f7f9 fef2 	bl	8002bc0 <HAL_GetTick>
 8008ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10e      	bne.n	8008e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f82d 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e023      	b.n	8008e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d10e      	bne.n	8008e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f817 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e00d      	b.n	8008e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	4613      	mov	r3, r2
 8008e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6a:	e05e      	b.n	8008f2a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d05a      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e74:	f7f9 fea4 	bl	8002bc0 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d302      	bcc.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d11b      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e043      	b.n	8008f4a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d02c      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ede:	d124      	bne.n	8008f2a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ee8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ef8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0201 	bic.w	r2, r2, #1
 8008f08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2220      	movs	r2, #32
 8008f14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e00f      	b.n	8008f4a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	4013      	ands	r3, r2
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	bf0c      	ite	eq
 8008f3a:	2301      	moveq	r3, #1
 8008f3c:	2300      	movne	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d091      	beq.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f86:	d10e      	bne.n	8008fa6 <UART_Start_Receive_IT+0x52>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <UART_Start_Receive_IT+0x48>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f9a:	e02d      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	22ff      	movs	r2, #255	; 0xff
 8008fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fa4:	e028      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10d      	bne.n	8008fca <UART_Start_Receive_IT+0x76>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <UART_Start_Receive_IT+0x6c>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fbe:	e01b      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	227f      	movs	r2, #127	; 0x7f
 8008fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fc8:	e016      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd2:	d10d      	bne.n	8008ff0 <UART_Start_Receive_IT+0x9c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <UART_Start_Receive_IT+0x92>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	227f      	movs	r2, #127	; 0x7f
 8008fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fe4:	e008      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	223f      	movs	r2, #63	; 0x3f
 8008fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fee:	e003      	b.n	8008ff8 <UART_Start_Receive_IT+0xa4>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2222      	movs	r2, #34	; 0x22
 8009004:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0201 	orr.w	r2, r2, #1
 8009014:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d107      	bne.n	8009030 <UART_Start_Receive_IT+0xdc>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4a0c      	ldr	r2, [pc, #48]	; (800905c <UART_Start_Receive_IT+0x108>)
 800902c:	665a      	str	r2, [r3, #100]	; 0x64
 800902e:	e002      	b.n	8009036 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a0b      	ldr	r2, [pc, #44]	; (8009060 <UART_Start_Receive_IT+0x10c>)
 8009034:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800904c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	080091f9 	.word	0x080091f9
 8009060:	08009121 	.word	0x08009121

08009064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800907a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009090:	2b01      	cmp	r3, #1
 8009092:	d107      	bne.n	80090a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0210 	bic.w	r2, r2, #16
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff faff 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009104:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff fadc 	bl	80086d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800912e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009134:	2b22      	cmp	r3, #34	; 0x22
 8009136:	d151      	bne.n	80091dc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800913e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009140:	89bb      	ldrh	r3, [r7, #12]
 8009142:	b2d9      	uxtb	r1, r3
 8009144:	89fb      	ldrh	r3, [r7, #14]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914c:	400a      	ands	r2, r1
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009162:	b29b      	uxth	r3, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d13a      	bne.n	80091f0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009188:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d10f      	bne.n	80091ce <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0210 	bic.w	r2, r2, #16
 80091bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff fa96 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
 80091cc:	e002      	b.n	80091d4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f7 ff44 	bl	800105c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091da:	e009      	b.n	80091f0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	8b1b      	ldrh	r3, [r3, #24]
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0208 	orr.w	r2, r2, #8
 80091ec:	b292      	uxth	r2, r2
 80091ee:	831a      	strh	r2, [r3, #24]
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009206:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920c:	2b22      	cmp	r3, #34	; 0x22
 800920e:	d151      	bne.n	80092b4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009216:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800921e:	89ba      	ldrh	r2, [r7, #12]
 8009220:	89fb      	ldrh	r3, [r7, #14]
 8009222:	4013      	ands	r3, r2
 8009224:	b29a      	uxth	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	1c9a      	adds	r2, r3, #2
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800924c:	b29b      	uxth	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d13a      	bne.n	80092c8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009260:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0201 	bic.w	r2, r2, #1
 8009270:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009282:	2b01      	cmp	r3, #1
 8009284:	d10f      	bne.n	80092a6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0210 	bic.w	r2, r2, #16
 8009294:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fa2a 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
 80092a4:	e002      	b.n	80092ac <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f7 fed8 	bl	800105c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b2:	e009      	b.n	80092c8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	8b1b      	ldrh	r3, [r3, #24]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0208 	orr.w	r2, r2, #8
 80092c4:	b292      	uxth	r2, r2
 80092c6:	831a      	strh	r2, [r3, #24]
}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092e4:	b084      	sub	sp, #16
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	f107 001c 	add.w	r0, r7, #28
 80092f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa24 	bl	8009750 <USB_CoreReset>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800930c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
 800931e:	e005      	b.n	800932c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009338:	b004      	add	sp, #16
 800933a:	4770      	bx	lr

0800933c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f023 0201 	bic.w	r2, r3, #1
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d106      	bne.n	800938a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60da      	str	r2, [r3, #12]
 8009388:	e00b      	b.n	80093a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
 800939c:	e001      	b.n	80093a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e003      	b.n	80093aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80093a2:	2032      	movs	r0, #50	; 0x32
 80093a4:	f7f9 fc18 	bl	8002bd8 <HAL_Delay>

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093b4:	b084      	sub	sp, #16
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80093c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	e009      	b.n	80093e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3340      	adds	r3, #64	; 0x40
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	2200      	movs	r2, #0
 80093e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3301      	adds	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b0e      	cmp	r3, #14
 80093ec:	d9f2      	bls.n	80093d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11c      	bne.n	800942e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009402:	f043 0302 	orr.w	r3, r3, #2
 8009406:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e005      	b.n	800943a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009440:	461a      	mov	r2, r3
 8009442:	2300      	movs	r3, #0
 8009444:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944c:	4619      	mov	r1, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009454:	461a      	mov	r2, r3
 8009456:	680b      	ldr	r3, [r1, #0]
 8009458:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800945a:	2103      	movs	r1, #3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f93d 	bl	80096dc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009462:	2110      	movs	r1, #16
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8f1 	bl	800964c <USB_FlushTxFifo>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f90f 	bl	8009698 <USB_FlushRxFifo>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948a:	461a      	mov	r2, r3
 800948c:	2300      	movs	r3, #0
 800948e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	461a      	mov	r2, r3
 8009498:	2300      	movs	r3, #0
 800949a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	461a      	mov	r2, r3
 80094a4:	2300      	movs	r3, #0
 80094a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	e043      	b.n	8009536 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c4:	d118      	bne.n	80094f8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d8:	461a      	mov	r2, r3
 80094da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	e013      	b.n	800950a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	461a      	mov	r2, r3
 80094f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e008      	b.n	800950a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	461a      	mov	r2, r3
 8009506:	2300      	movs	r3, #0
 8009508:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	461a      	mov	r2, r3
 8009518:	2300      	movs	r3, #0
 800951a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	461a      	mov	r2, r3
 800952a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800952e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3301      	adds	r3, #1
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	429a      	cmp	r2, r3
 800953c:	d3b7      	bcc.n	80094ae <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	e043      	b.n	80095cc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955a:	d118      	bne.n	800958e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956e:	461a      	mov	r2, r3
 8009570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e013      	b.n	80095a0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	461a      	mov	r2, r3
 8009586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	e008      	b.n	80095a0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959a:	461a      	mov	r2, r3
 800959c:	2300      	movs	r3, #0
 800959e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	461a      	mov	r2, r3
 80095c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3301      	adds	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d3b7      	bcc.n	8009544 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80095f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	f043 0210 	orr.w	r2, r3, #16
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <USB_DevInit+0x294>)
 8009608:	4313      	orrs	r3, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	f043 0208 	orr.w	r2, r3, #8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009622:	2b01      	cmp	r3, #1
 8009624:	d107      	bne.n	8009636 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800962e:	f043 0304 	orr.w	r3, r3, #4
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009642:	b004      	add	sp, #16
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	803c3800 	.word	0x803c3800

0800964c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	019b      	lsls	r3, r3, #6
 800965e:	f043 0220 	orr.w	r2, r3, #32
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a09      	ldr	r2, [pc, #36]	; (8009694 <USB_FlushTxFifo+0x48>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d901      	bls.n	8009678 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e006      	b.n	8009686 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b20      	cmp	r3, #32
 8009682:	d0f0      	beq.n	8009666 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	00030d40 	.word	0x00030d40

08009698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2210      	movs	r2, #16
 80096a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <USB_FlushRxFifo+0x40>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d901      	bls.n	80096bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e006      	b.n	80096ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d0f0      	beq.n	80096aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	00030d40 	.word	0x00030d40

080096dc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096fc:	4313      	orrs	r3, r2
 80096fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800973c:	f043 0302 	orr.w	r3, r3, #2
 8009740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <USB_CoreReset+0x64>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d901      	bls.n	800976e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e01b      	b.n	80097a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	daf2      	bge.n	800975c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f043 0201 	orr.w	r2, r3, #1
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3301      	adds	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <USB_CoreReset+0x64>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d901      	bls.n	8009798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e006      	b.n	80097a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d0f0      	beq.n	8009786 <USB_CoreReset+0x36>

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	00030d40 	.word	0x00030d40

080097b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	; 0x28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <I2Cx_MspInit+0xa8>)
 80097c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c4:	4a26      	ldr	r2, [pc, #152]	; (8009860 <I2Cx_MspInit+0xa8>)
 80097c6:	f043 0302 	orr.w	r3, r3, #2
 80097ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <I2Cx_MspInit+0xa8>)
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80097d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80097dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80097de:	2312      	movs	r3, #18
 80097e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80097e2:	2301      	movs	r3, #1
 80097e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097e6:	2303      	movs	r3, #3
 80097e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80097ea:	2304      	movs	r3, #4
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	4619      	mov	r1, r3
 80097f4:	481b      	ldr	r0, [pc, #108]	; (8009864 <I2Cx_MspInit+0xac>)
 80097f6:	f7f9 fcb3 	bl	8003160 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80097fa:	f107 0314 	add.w	r3, r7, #20
 80097fe:	4619      	mov	r1, r3
 8009800:	4818      	ldr	r0, [pc, #96]	; (8009864 <I2Cx_MspInit+0xac>)
 8009802:	f7f9 fcad 	bl	8003160 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009806:	4b16      	ldr	r3, [pc, #88]	; (8009860 <I2Cx_MspInit+0xa8>)
 8009808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980a:	4a15      	ldr	r2, [pc, #84]	; (8009860 <I2Cx_MspInit+0xa8>)
 800980c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009810:	6593      	str	r3, [r2, #88]	; 0x58
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <I2Cx_MspInit+0xa8>)
 8009814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800981e:	4b10      	ldr	r3, [pc, #64]	; (8009860 <I2Cx_MspInit+0xa8>)
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <I2Cx_MspInit+0xa8>)
 8009824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009828:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800982a:	4b0d      	ldr	r3, [pc, #52]	; (8009860 <I2Cx_MspInit+0xa8>)
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	4a0c      	ldr	r2, [pc, #48]	; (8009860 <I2Cx_MspInit+0xa8>)
 8009830:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009834:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009836:	2200      	movs	r2, #0
 8009838:	210f      	movs	r1, #15
 800983a:	2021      	movs	r0, #33	; 0x21
 800983c:	f7f9 facc 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009840:	2021      	movs	r0, #33	; 0x21
 8009842:	f7f9 fae5 	bl	8002e10 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009846:	2200      	movs	r2, #0
 8009848:	210f      	movs	r1, #15
 800984a:	2022      	movs	r0, #34	; 0x22
 800984c:	f7f9 fac4 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009850:	2022      	movs	r0, #34	; 0x22
 8009852:	f7f9 fadd 	bl	8002e10 <HAL_NVIC_EnableIRQ>
}
 8009856:	bf00      	nop
 8009858:	3728      	adds	r7, #40	; 0x28
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	40021000 	.word	0x40021000
 8009864:	48000400 	.word	0x48000400

08009868 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a12      	ldr	r2, [pc, #72]	; (80098bc <I2Cx_Init+0x54>)
 8009874:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <I2Cx_Init+0x58>)
 800987a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ff89 	bl	80097b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7f9 ff40 	bl	800372c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80098ac:	2100      	movs	r1, #0
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fa fc44 	bl	800413c <HAL_I2CEx_ConfigAnalogFilter>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40005800 	.word	0x40005800
 80098c0:	00702681 	.word	0x00702681

080098c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af04      	add	r7, sp, #16
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	4608      	mov	r0, r1
 80098ce:	4611      	mov	r1, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	72fb      	strb	r3, [r7, #11]
 80098d6:	460b      	mov	r3, r1
 80098d8:	813b      	strh	r3, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	b299      	uxth	r1, r3
 80098e6:	88f8      	ldrh	r0, [r7, #6]
 80098e8:	893a      	ldrh	r2, [r7, #8]
 80098ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098ee:	9302      	str	r3, [sp, #8]
 80098f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4603      	mov	r3, r0
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7fa f8e8 	bl	8003ad0 <HAL_I2C_Mem_Read>
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	4619      	mov	r1, r3
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f832 	bl	8009978 <I2Cx_Error>
  }
  return status;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b08a      	sub	sp, #40	; 0x28
 8009922:	af04      	add	r7, sp, #16
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	4608      	mov	r0, r1
 8009928:	4611      	mov	r1, r2
 800992a:	461a      	mov	r2, r3
 800992c:	4603      	mov	r3, r0
 800992e:	72fb      	strb	r3, [r7, #11]
 8009930:	460b      	mov	r3, r1
 8009932:	813b      	strh	r3, [r7, #8]
 8009934:	4613      	mov	r3, r2
 8009936:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	b299      	uxth	r1, r3
 8009940:	88f8      	ldrh	r0, [r7, #6]
 8009942:	893a      	ldrh	r2, [r7, #8]
 8009944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4603      	mov	r3, r0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7f9 ffa7 	bl	80038a8 <HAL_I2C_Mem_Write>
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	4619      	mov	r1, r3
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f805 	bl	8009978 <I2Cx_Error>
  }
  return status;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7f9 ff60 	bl	800384a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff ff6c 	bl	8009868 <I2Cx_Init>
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800999c:	4802      	ldr	r0, [pc, #8]	; (80099a8 <SENSOR_IO_Init+0x10>)
 800999e:	f7ff ff63 	bl	8009868 <I2Cx_Init>
}
 80099a2:	bf00      	nop
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000c40 	.word	0x20000c40

080099ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
 80099b6:	460b      	mov	r3, r1
 80099b8:	71bb      	strb	r3, [r7, #6]
 80099ba:	4613      	mov	r3, r2
 80099bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80099be:	79bb      	ldrb	r3, [r7, #6]
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	79f9      	ldrb	r1, [r7, #7]
 80099c4:	2301      	movs	r3, #1
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	1d7b      	adds	r3, r7, #5
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2301      	movs	r3, #1
 80099ce:	4803      	ldr	r0, [pc, #12]	; (80099dc <SENSOR_IO_Write+0x30>)
 80099d0:	f7ff ffa5 	bl	800991e <I2Cx_WriteMultiple>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000c40 	.word	0x20000c40

080099e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	4603      	mov	r3, r0
 80099e8:	460a      	mov	r2, r1
 80099ea:	71fb      	strb	r3, [r7, #7]
 80099ec:	4613      	mov	r3, r2
 80099ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80099f4:	79bb      	ldrb	r3, [r7, #6]
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	79f9      	ldrb	r1, [r7, #7]
 80099fa:	2301      	movs	r3, #1
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	f107 030f 	add.w	r3, r7, #15
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2301      	movs	r3, #1
 8009a06:	4804      	ldr	r0, [pc, #16]	; (8009a18 <SENSOR_IO_Read+0x38>)
 8009a08:	f7ff ff5c 	bl	80098c4 <I2Cx_ReadMultiple>

  return read_value;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000c40 	.word	0x20000c40

08009a1c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	603a      	str	r2, [r7, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	71bb      	strb	r3, [r7, #6]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009a32:	79bb      	ldrb	r3, [r7, #6]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	79f9      	ldrb	r1, [r7, #7]
 8009a38:	88bb      	ldrh	r3, [r7, #4]
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2301      	movs	r3, #1
 8009a42:	4804      	ldr	r0, [pc, #16]	; (8009a54 <SENSOR_IO_ReadMultiple+0x38>)
 8009a44:	f7ff ff3e 	bl	80098c4 <I2Cx_ReadMultiple>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	b29b      	uxth	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000c40 	.word	0x20000c40

08009a58 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009a62:	2300      	movs	r3, #0
 8009a64:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009a66:	4b19      	ldr	r3, [pc, #100]	; (8009acc <BSP_ACCELERO_Init+0x74>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b6a      	cmp	r3, #106	; 0x6a
 8009a70:	d002      	beq.n	8009a78 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
 8009a76:	e024      	b.n	8009ac2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009a78:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <BSP_ACCELERO_Init+0x78>)
 8009a7a:	4a14      	ldr	r2, [pc, #80]	; (8009acc <BSP_ACCELERO_Init+0x74>)
 8009a7c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009a7e:	2330      	movs	r3, #48	; 0x30
 8009a80:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009a86:	2300      	movs	r3, #0
 8009a88:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009a96:	797a      	ldrb	r2, [r7, #5]
 8009a98:	7abb      	ldrb	r3, [r7, #10]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009aa0:	7a3b      	ldrb	r3, [r7, #8]
 8009aa2:	f043 0304 	orr.w	r3, r3, #4
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	b21a      	sxth	r2, r3
 8009aac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b21b      	sxth	r3, r3
 8009ab4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <BSP_ACCELERO_Init+0x78>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	89ba      	ldrh	r2, [r7, #12]
 8009abe:	4610      	mov	r0, r2
 8009ac0:	4798      	blx	r3
  }  

  return ret;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	2000001c 	.word	0x2000001c
 8009ad0:	20000c8c 	.word	0x20000c8c

08009ad4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009adc:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d004      	beq.n	8009af8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
    }
  }
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000c8c 	.word	0x20000c8c

08009b04 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009b12:	2110      	movs	r1, #16
 8009b14:	20d4      	movs	r0, #212	; 0xd4
 8009b16:	f7ff ff63 	bl	80099e0 <SENSOR_IO_Read>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009b1e:	88fb      	ldrh	r3, [r7, #6]
 8009b20:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	f003 0303 	and.w	r3, r3, #3
 8009b28:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009b2a:	7bba      	ldrb	r2, [r7, #14]
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	461a      	mov	r2, r3
 8009b36:	2110      	movs	r1, #16
 8009b38:	20d4      	movs	r0, #212	; 0xd4
 8009b3a:	f7ff ff37 	bl	80099ac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009b3e:	2112      	movs	r1, #18
 8009b40:	20d4      	movs	r0, #212	; 0xd4
 8009b42:	f7ff ff4d 	bl	80099e0 <SENSOR_IO_Read>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	0a1b      	lsrs	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009b58:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009b5a:	7bba      	ldrb	r2, [r7, #14]
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	461a      	mov	r2, r3
 8009b66:	2112      	movs	r1, #18
 8009b68:	20d4      	movs	r0, #212	; 0xd4
 8009b6a:	f7ff ff1f 	bl	80099ac <SENSOR_IO_Write>
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009b80:	2110      	movs	r1, #16
 8009b82:	20d4      	movs	r0, #212	; 0xd4
 8009b84:	f7ff ff2c 	bl	80099e0 <SENSOR_IO_Read>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	461a      	mov	r2, r3
 8009b98:	2110      	movs	r1, #16
 8009b9a:	20d4      	movs	r0, #212	; 0xd4
 8009b9c:	f7ff ff06 	bl	80099ac <SENSOR_IO_Write>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009bac:	f7ff fef4 	bl	8009998 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009bb0:	210f      	movs	r1, #15
 8009bb2:	20d4      	movs	r0, #212	; 0xd4
 8009bb4:	f7ff ff14 	bl	80099e0 <SENSOR_IO_Read>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009bcc:	2115      	movs	r1, #21
 8009bce:	20d4      	movs	r0, #212	; 0xd4
 8009bd0:	f7ff ff06 	bl	80099e0 <SENSOR_IO_Read>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	f023 0310 	bic.w	r3, r3, #16
 8009bde:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	f043 0310 	orr.w	r3, r3, #16
 8009bec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2115      	movs	r1, #21
 8009bf4:	20d4      	movs	r0, #212	; 0xd4
 8009bf6:	f7ff fed9 	bl	80099ac <SENSOR_IO_Write>
}
 8009bfa:	bf00      	nop
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009c1a:	2110      	movs	r1, #16
 8009c1c:	20d4      	movs	r0, #212	; 0xd4
 8009c1e:	f7ff fedf 	bl	80099e0 <SENSOR_IO_Read>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009c26:	f107 0208 	add.w	r2, r7, #8
 8009c2a:	2306      	movs	r3, #6
 8009c2c:	2128      	movs	r1, #40	; 0x28
 8009c2e:	20d4      	movs	r0, #212	; 0xd4
 8009c30:	f7ff fef4 	bl	8009a1c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009c34:	2300      	movs	r3, #0
 8009c36:	77fb      	strb	r3, [r7, #31]
 8009c38:	e01c      	b.n	8009c74 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009c3a:	7ffb      	ldrb	r3, [r7, #31]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	3301      	adds	r3, #1
 8009c40:	3320      	adds	r3, #32
 8009c42:	443b      	add	r3, r7
 8009c44:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	7ffb      	ldrb	r3, [r7, #31]
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	3320      	adds	r3, #32
 8009c54:	443b      	add	r3, r7
 8009c56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	7ffb      	ldrb	r3, [r7, #31]
 8009c62:	b212      	sxth	r2, r2
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	3320      	adds	r3, #32
 8009c68:	443b      	add	r3, r7
 8009c6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	3301      	adds	r3, #1
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	7ffb      	ldrb	r3, [r7, #31]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d9df      	bls.n	8009c3a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	f003 030c 	and.w	r3, r3, #12
 8009c80:	2b0c      	cmp	r3, #12
 8009c82:	d829      	bhi.n	8009cd8 <LSM6DSL_AccReadXYZ+0xd4>
 8009c84:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <LSM6DSL_AccReadXYZ+0x88>)
 8009c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8a:	bf00      	nop
 8009c8c:	08009cc1 	.word	0x08009cc1
 8009c90:	08009cd9 	.word	0x08009cd9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009cd9 	.word	0x08009cd9
 8009c9c:	08009cd3 	.word	0x08009cd3
 8009ca0:	08009cd9 	.word	0x08009cd9
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009cd9 	.word	0x08009cd9
 8009cac:	08009cc7 	.word	0x08009cc7
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ccd 	.word	0x08009ccd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009cc0:	4b18      	ldr	r3, [pc, #96]	; (8009d24 <LSM6DSL_AccReadXYZ+0x120>)
 8009cc2:	61bb      	str	r3, [r7, #24]
    break;
 8009cc4:	e008      	b.n	8009cd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009cc6:	4b18      	ldr	r3, [pc, #96]	; (8009d28 <LSM6DSL_AccReadXYZ+0x124>)
 8009cc8:	61bb      	str	r3, [r7, #24]
    break;
 8009cca:	e005      	b.n	8009cd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009ccc:	4b17      	ldr	r3, [pc, #92]	; (8009d2c <LSM6DSL_AccReadXYZ+0x128>)
 8009cce:	61bb      	str	r3, [r7, #24]
    break;
 8009cd0:	e002      	b.n	8009cd8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8009cd2:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <LSM6DSL_AccReadXYZ+0x12c>)
 8009cd4:	61bb      	str	r3, [r7, #24]
    break;    
 8009cd6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	77fb      	strb	r3, [r7, #31]
 8009cdc:	e01a      	b.n	8009d14 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	3320      	adds	r3, #32
 8009ce4:	443b      	add	r3, r7
 8009ce6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	4413      	add	r3, r2
 8009d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d06:	ee17 2a90 	vmov	r2, s15
 8009d0a:	b212      	sxth	r2, r2
 8009d0c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009d0e:	7ffb      	ldrb	r3, [r7, #31]
 8009d10:	3301      	adds	r3, #1
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	7ffb      	ldrb	r3, [r7, #31]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d9e1      	bls.n	8009cde <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	3d79db23 	.word	0x3d79db23
 8009d28:	3df9db23 	.word	0x3df9db23
 8009d2c:	3e79db23 	.word	0x3e79db23
 8009d30:	3ef9db23 	.word	0x3ef9db23

08009d34 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	2b2f      	cmp	r3, #47	; 0x2f
 8009d42:	d906      	bls.n	8009d52 <Hex2Num+0x1e>
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	2b39      	cmp	r3, #57	; 0x39
 8009d48:	d803      	bhi.n	8009d52 <Hex2Num+0x1e>
        return a - '0';
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	3b30      	subs	r3, #48	; 0x30
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	e014      	b.n	8009d7c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	2b60      	cmp	r3, #96	; 0x60
 8009d56:	d906      	bls.n	8009d66 <Hex2Num+0x32>
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	2b66      	cmp	r3, #102	; 0x66
 8009d5c:	d803      	bhi.n	8009d66 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	3b57      	subs	r3, #87	; 0x57
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	e00a      	b.n	8009d7c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	2b40      	cmp	r3, #64	; 0x40
 8009d6a:	d906      	bls.n	8009d7a <Hex2Num+0x46>
 8009d6c:	79fb      	ldrb	r3, [r7, #7]
 8009d6e:	2b46      	cmp	r3, #70	; 0x46
 8009d70:	d803      	bhi.n	8009d7a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	3b37      	subs	r3, #55	; 0x37
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	e000      	b.n	8009d7c <Hex2Num+0x48>
    }

    return 0;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009d9a:	e012      	b.n	8009dc2 <ParseHexNumber+0x3a>
        sum <<= 4;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff ffc4 	bl	8009d34 <Hex2Num>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3301      	adds	r3, #1
 8009dba:	607b      	str	r3, [r7, #4]
        i++;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b2f      	cmp	r3, #47	; 0x2f
 8009dc8:	d903      	bls.n	8009dd2 <ParseHexNumber+0x4a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b39      	cmp	r3, #57	; 0x39
 8009dd0:	d9e4      	bls.n	8009d9c <ParseHexNumber+0x14>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b60      	cmp	r3, #96	; 0x60
 8009dd8:	d903      	bls.n	8009de2 <ParseHexNumber+0x5a>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b66      	cmp	r3, #102	; 0x66
 8009de0:	d9dc      	bls.n	8009d9c <ParseHexNumber+0x14>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b40      	cmp	r3, #64	; 0x40
 8009de8:	d903      	bls.n	8009df2 <ParseHexNumber+0x6a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b46      	cmp	r3, #70	; 0x46
 8009df0:	d9d4      	bls.n	8009d9c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <ParseHexNumber+0x76>
        *cnt = i;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	7afa      	ldrb	r2, [r7, #11]
 8009dfc:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
 8009e16:	2300      	movs	r3, #0
 8009e18:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b2d      	cmp	r3, #45	; 0x2d
 8009e24:	d119      	bne.n	8009e5a <ParseNumber+0x52>
        minus = 1;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	607b      	str	r3, [r7, #4]
        i++;
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	3301      	adds	r3, #1
 8009e34:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009e36:	e010      	b.n	8009e5a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	3b30      	subs	r3, #48	; 0x30
 8009e4a:	4413      	add	r3, r2
 8009e4c:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3301      	adds	r3, #1
 8009e52:	607b      	str	r3, [r7, #4]
        i++;
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	3301      	adds	r3, #1
 8009e58:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e60:	d903      	bls.n	8009e6a <ParseNumber+0x62>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b39      	cmp	r3, #57	; 0x39
 8009e68:	d9e6      	bls.n	8009e38 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <ParseNumber+0x6e>
        *cnt = i;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	7bba      	ldrb	r2, [r7, #14]
 8009e74:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <ParseNumber+0x7a>
        return 0 - sum;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	425b      	negs	r3, r3
 8009e80:	e000      	b.n	8009e84 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009e82:	68bb      	ldr	r3, [r7, #8]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009e9e:	e019      	b.n	8009ed4 <ParseMAC+0x44>
    hexcnt = 1;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b3a      	cmp	r3, #58	; 0x3a
 8009eaa:	d00e      	beq.n	8009eca <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009eac:	f107 030e 	add.w	r3, r7, #14
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff68 	bl	8009d88 <ParseHexNumber>
 8009eb8:	4601      	mov	r1, r0
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	73fa      	strb	r2, [r7, #15]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	b2ca      	uxtb	r2, r1
 8009ec8:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e1      	bne.n	8009ea0 <ParseMAC+0x10>
  }
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009ef4:	e019      	b.n	8009f2a <ParseIP+0x44>
    hexcnt = 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b2e      	cmp	r3, #46	; 0x2e
 8009f00:	d00e      	beq.n	8009f20 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009f02:	f107 030e 	add.w	r3, r7, #14
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff ff7d 	bl	8009e08 <ParseNumber>
 8009f0e:	4601      	mov	r1, r0
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	73fa      	strb	r2, [r7, #15]
 8009f16:	461a      	mov	r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	b2ca      	uxtb	r2, r1
 8009f1e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	461a      	mov	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e1      	bne.n	8009ef6 <ParseIP+0x10>
  }
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	3302      	adds	r3, #2
 8009f4e:	4934      	ldr	r1, [pc, #208]	; (800a020 <AT_ParseInfo+0xe4>)
 8009f50:	4618      	mov	r0, r3
 8009f52:	f009 fa09 	bl	8013368 <strtok>
 8009f56:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009f58:	e05a      	b.n	800a010 <AT_ParseInfo+0xd4>
    switch (num++) {
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	72fa      	strb	r2, [r7, #11]
 8009f60:	2b06      	cmp	r3, #6
 8009f62:	d84f      	bhi.n	800a004 <AT_ParseInfo+0xc8>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <AT_ParseInfo+0x30>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	08009f97 	.word	0x08009f97
 8009f74:	08009fa7 	.word	0x08009fa7
 8009f78:	08009fb7 	.word	0x08009fb7
 8009f7c:	08009fc7 	.word	0x08009fc7
 8009f80:	08009fd7 	.word	0x08009fd7
 8009f84:	08009feb 	.word	0x08009feb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f009 f9c1 	bl	8013316 <strncpy>
      break;
 8009f94:	e037      	b.n	800a006 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3320      	adds	r3, #32
 8009f9a:	2218      	movs	r2, #24
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f009 f9b9 	bl	8013316 <strncpy>
      break;
 8009fa4:	e02f      	b.n	800a006 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3338      	adds	r3, #56	; 0x38
 8009faa:	2210      	movs	r2, #16
 8009fac:	68f9      	ldr	r1, [r7, #12]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f009 f9b1 	bl	8013316 <strncpy>
      break;
 8009fb4:	e027      	b.n	800a006 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3348      	adds	r3, #72	; 0x48
 8009fba:	2210      	movs	r2, #16
 8009fbc:	68f9      	ldr	r1, [r7, #12]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f009 f9a9 	bl	8013316 <strncpy>
      break;
 8009fc4:	e01f      	b.n	800a006 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3358      	adds	r3, #88	; 0x58
 8009fca:	2210      	movs	r2, #16
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f009 f9a1 	bl	8013316 <strncpy>
      break;
 8009fd4:	e017      	b.n	800a006 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff15 	bl	8009e08 <ParseNumber>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009fe8:	e00d      	b.n	800a006 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009fea:	490e      	ldr	r1, [pc, #56]	; (800a024 <AT_ParseInfo+0xe8>)
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f009 f9bb 	bl	8013368 <strtok>
 8009ff2:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3368      	adds	r3, #104	; 0x68
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f009 f98a 	bl	8013316 <strncpy>
      break;
 800a002:	e000      	b.n	800a006 <AT_ParseInfo+0xca>

    default: break;
 800a004:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800a006:	4906      	ldr	r1, [pc, #24]	; (800a020 <AT_ParseInfo+0xe4>)
 800a008:	2000      	movs	r0, #0
 800a00a:	f009 f9ad 	bl	8013368 <strtok>
 800a00e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1a1      	bne.n	8009f5a <AT_ParseInfo+0x1e>
  }
}
 800a016:	bf00      	nop
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	080146c0 	.word	0x080146c0
 800a024:	080146c4 	.word	0x080146c4

0800a028 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3302      	adds	r3, #2
 800a03a:	4952      	ldr	r1, [pc, #328]	; (800a184 <AT_ParseConnSettings+0x15c>)
 800a03c:	4618      	mov	r0, r3
 800a03e:	f009 f993 	bl	8013368 <strtok>
 800a042:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800a044:	e095      	b.n	800a172 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	73fa      	strb	r2, [r7, #15]
 800a04c:	2b0b      	cmp	r3, #11
 800a04e:	d87f      	bhi.n	800a150 <AT_ParseConnSettings+0x128>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <AT_ParseConnSettings+0x30>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a089 	.word	0x0800a089
 800a05c:	0800a097 	.word	0x0800a097
 800a060:	0800a0a7 	.word	0x0800a0a7
 800a064:	0800a0bb 	.word	0x0800a0bb
 800a068:	0800a0cf 	.word	0x0800a0cf
 800a06c:	0800a0e3 	.word	0x0800a0e3
 800a070:	0800a0f1 	.word	0x0800a0f1
 800a074:	0800a0ff 	.word	0x0800a0ff
 800a078:	0800a10d 	.word	0x0800a10d
 800a07c:	0800a11b 	.word	0x0800a11b
 800a080:	0800a129 	.word	0x0800a129
 800a084:	0800a13d 	.word	0x0800a13d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2221      	movs	r2, #33	; 0x21
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f009 f941 	bl	8013316 <strncpy>
      break;
 800a094:	e05d      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	3321      	adds	r3, #33	; 0x21
 800a09a:	2221      	movs	r2, #33	; 0x21
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f009 f939 	bl	8013316 <strncpy>
      break;
 800a0a4:	e055      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	68b8      	ldr	r0, [r7, #8]
 800a0aa:	f7ff fead 	bl	8009e08 <ParseNumber>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800a0b8:	e04b      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	68b8      	ldr	r0, [r7, #8]
 800a0be:	f7ff fea3 	bl	8009e08 <ParseNumber>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800a0cc:	e041      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	68b8      	ldr	r0, [r7, #8]
 800a0d2:	f7ff fe99 	bl	8009e08 <ParseNumber>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800a0e0:	e037      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	3348      	adds	r3, #72	; 0x48
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68b8      	ldr	r0, [r7, #8]
 800a0ea:	f7ff fefc 	bl	8009ee6 <ParseIP>
      break;
 800a0ee:	e030      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	334c      	adds	r3, #76	; 0x4c
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f7ff fef5 	bl	8009ee6 <ParseIP>
      break;
 800a0fc:	e029      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3350      	adds	r3, #80	; 0x50
 800a102:	4619      	mov	r1, r3
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f7ff feee 	bl	8009ee6 <ParseIP>
      break;
 800a10a:	e022      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	3354      	adds	r3, #84	; 0x54
 800a110:	4619      	mov	r1, r3
 800a112:	68b8      	ldr	r0, [r7, #8]
 800a114:	f7ff fee7 	bl	8009ee6 <ParseIP>
      break;
 800a118:	e01b      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	3358      	adds	r3, #88	; 0x58
 800a11e:	4619      	mov	r1, r3
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f7ff fee0 	bl	8009ee6 <ParseIP>
      break;
 800a126:	e014      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800a128:	2100      	movs	r1, #0
 800a12a:	68b8      	ldr	r0, [r7, #8]
 800a12c:	f7ff fe6c 	bl	8009e08 <ParseNumber>
 800a130:	4603      	mov	r3, r0
 800a132:	b2da      	uxtb	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800a13a:	e00a      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800a13c:	2100      	movs	r1, #0
 800a13e:	68b8      	ldr	r0, [r7, #8]
 800a140:	f7ff fe62 	bl	8009e08 <ParseNumber>
 800a144:	4603      	mov	r3, r0
 800a146:	b2da      	uxtb	r2, r3
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800a14e:	e000      	b.n	800a152 <AT_ParseConnSettings+0x12a>

    default:
      break;
 800a150:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800a152:	490c      	ldr	r1, [pc, #48]	; (800a184 <AT_ParseConnSettings+0x15c>)
 800a154:	2000      	movs	r0, #0
 800a156:	f009 f907 	bl	8013368 <strtok>
 800a15a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <AT_ParseConnSettings+0x14a>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3b01      	subs	r3, #1
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b2c      	cmp	r3, #44	; 0x2c
 800a16a:	d102      	bne.n	800a172 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	3301      	adds	r3, #1
 800a170:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f af66 	bne.w	800a046 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	080146c0 	.word	0x080146c0

0800a188 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3302      	adds	r3, #2
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b31      	cmp	r3, #49	; 0x31
 800a19a:	bf0c      	ite	eq
 800a19c:	2301      	moveq	r3, #1
 800a19e:	2300      	movne	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	701a      	strb	r2, [r3, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800a1b4:	b590      	push	{r4, r7, lr}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a1ce:	68b8      	ldr	r0, [r7, #8]
 800a1d0:	f7f5 fffe 	bl	80001d0 <strlen>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	b299      	uxth	r1, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a1de:	461a      	mov	r2, r3
 800a1e0:	68b8      	ldr	r0, [r7, #8]
 800a1e2:	47a0      	blx	r4
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dd3e      	ble.n	800a26c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a1fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
 800a202:	4603      	mov	r3, r0
 800a204:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800a206:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	dd27      	ble.n	800a25e <AT_ExecuteCommand+0xaa>
 800a20e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a212:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a216:	dc22      	bgt.n	800a25e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800a218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a21c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a220:	d105      	bne.n	800a22e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800a222:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a226:	b29b      	uxth	r3, r3
 800a228:	3b01      	subs	r3, #1
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800a22e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800a23a:	490f      	ldr	r1, [pc, #60]	; (800a278 <AT_ExecuteCommand+0xc4>)
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f009 f87d 	bl	801333c <strstr>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	e010      	b.n	800a26e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a24c:	490b      	ldr	r1, [pc, #44]	; (800a27c <AT_ExecuteCommand+0xc8>)
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f009 f874 	bl	801333c <strstr>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a25a:	2305      	movs	r3, #5
 800a25c:	e007      	b.n	800a26e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a25e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a262:	f113 0f04 	cmn.w	r3, #4
 800a266:	d101      	bne.n	800a26c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800a268:	2306      	movs	r3, #6
 800a26a:	e000      	b.n	800a26e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a26c:	2304      	movs	r3, #4
}
 800a26e:	4618      	mov	r0, r3
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	bd90      	pop	{r4, r7, pc}
 800a276:	bf00      	nop
 800a278:	080146d4 	.word	0x080146d4
 800a27c:	080146e0 	.word	0x080146e0

0800a280 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800a29a:	68b8      	ldr	r0, [r7, #8]
 800a29c:	f7f5 ff98 	bl	80001d0 <strlen>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800a2a4:	8a7b      	ldrh	r3, [r7, #18]
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <AT_RequestSendData+0x32>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e053      	b.n	800a35a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a2be:	8a79      	ldrh	r1, [r7, #18]
 800a2c0:	68b8      	ldr	r0, [r7, #8]
 800a2c2:	4798      	blx	r3
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800a2c8:	8a3a      	ldrh	r2, [r7, #16]
 800a2ca:	8a7b      	ldrh	r3, [r7, #18]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d143      	bne.n	800a358 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a2dc:	8879      	ldrh	r1, [r7, #2]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800a2e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d131      	bne.n	800a354 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	6a38      	ldr	r0, [r7, #32]
 800a300:	4798      	blx	r3
 800a302:	4603      	mov	r3, r0
 800a304:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800a306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dd19      	ble.n	800a342 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800a30e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a312:	6a3a      	ldr	r2, [r7, #32]
 800a314:	4413      	add	r3, r2
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800a31a:	4912      	ldr	r1, [pc, #72]	; (800a364 <AT_RequestSendData+0xe4>)
 800a31c:	6a38      	ldr	r0, [r7, #32]
 800a31e:	f009 f80d 	bl	801333c <strstr>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	e016      	b.n	800a35a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a32c:	490e      	ldr	r1, [pc, #56]	; (800a368 <AT_RequestSendData+0xe8>)
 800a32e:	6a38      	ldr	r0, [r7, #32]
 800a330:	f009 f804 	bl	801333c <strstr>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a33a:	2305      	movs	r3, #5
 800a33c:	e00d      	b.n	800a35a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800a33e:	2302      	movs	r3, #2
 800a340:	e00b      	b.n	800a35a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a342:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a346:	f113 0f04 	cmn.w	r3, #4
 800a34a:	d101      	bne.n	800a350 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800a34c:	2306      	movs	r3, #6
 800a34e:	e004      	b.n	800a35a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800a350:	2302      	movs	r3, #2
 800a352:	e002      	b.n	800a35a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800a354:	2302      	movs	r3, #2
 800a356:	e000      	b.n	800a35a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800a358:	2304      	movs	r3, #4
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	080146d4 	.word	0x080146d4
 800a368:	080146e0 	.word	0x080146e0

0800a36c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a380:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a388:	68b8      	ldr	r0, [r7, #8]
 800a38a:	f7f5 ff21 	bl	80001d0 <strlen>
 800a38e:	4603      	mov	r3, r0
 800a390:	b299      	uxth	r1, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a398:	461a      	mov	r2, r3
 800a39a:	68b8      	ldr	r0, [r7, #8]
 800a39c:	47a0      	blx	r4
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dd6f      	ble.n	800a484 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	4798      	blx	r3
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b0d      	cmp	r3, #13
 800a3c0:	d104      	bne.n	800a3cc <AT_RequestReceiveData+0x60>
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b0a      	cmp	r3, #10
 800a3ca:	d001      	beq.n	800a3d0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	e05a      	b.n	800a486 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	3b02      	subs	r3, #2
 800a3d4:	617b      	str	r3, [r7, #20]
    p+=2;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	d94a      	bls.n	800a478 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a3e2:	e002      	b.n	800a3ea <AT_RequestReceiveData+0x7e>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d006      	beq.n	800a3fe <AT_RequestReceiveData+0x92>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b15      	cmp	r3, #21
 800a3fc:	d0f2      	beq.n	800a3e4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4413      	add	r3, r2
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	3b08      	subs	r3, #8
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	491f      	ldr	r1, [pc, #124]	; (800a490 <AT_RequestReceiveData+0x124>)
 800a412:	4618      	mov	r0, r3
 800a414:	f008 ff92 	bl	801333c <strstr>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d016      	beq.n	800a44c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b08      	subs	r3, #8
 800a424:	b29a      	uxth	r2, r3
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	429a      	cmp	r2, r3
 800a432:	d202      	bcs.n	800a43a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	887a      	ldrh	r2, [r7, #2]
 800a438:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	6939      	ldr	r1, [r7, #16]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f008 fa15 	bl	8012872 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	e01c      	b.n	800a486 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	3b04      	subs	r3, #4
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	2204      	movs	r2, #4
 800a456:	490f      	ldr	r1, [pc, #60]	; (800a494 <AT_RequestReceiveData+0x128>)
 800a458:	4618      	mov	r0, r3
 800a45a:	f008 f9fa 	bl	8012852 <memcmp>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	2200      	movs	r2, #0
 800a468:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a46a:	2305      	movs	r3, #5
 800a46c:	e00b      	b.n	800a486 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2200      	movs	r2, #0
 800a472:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a474:	2305      	movs	r3, #5
 800a476:	e006      	b.n	800a486 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f113 0f04 	cmn.w	r3, #4
 800a47e:	d101      	bne.n	800a484 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a480:	2306      	movs	r3, #6
 800a482:	e000      	b.n	800a486 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a484:	2304      	movs	r3, #4
}
 800a486:	4618      	mov	r0, r3
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd90      	pop	{r4, r7, pc}
 800a48e:	bf00      	nop
 800a490:	080146d4 	.word	0x080146d4
 800a494:	080146e8 	.word	0x080146e8

0800a498 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f247 5230 	movw	r2, #30000	; 0x7530
 800a4aa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	4798      	blx	r3
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d113      	bne.n	800a4e6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	490a      	ldr	r1, [pc, #40]	; (800a4f0 <ES_WIFI_Init+0x58>)
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff fe73 	bl	800a1b4 <AT_ExecuteCommand>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fd2b 	bl	8009f3c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	080146f0 	.word	0x080146f0

0800a4f4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <ES_WIFI_RegisterBusIO+0x2c>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d008      	beq.n	800a520 <ES_WIFI_RegisterBusIO+0x2c>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <ES_WIFI_RegisterBusIO+0x2c>
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <ES_WIFI_RegisterBusIO+0x2c>
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a520:	2302      	movs	r3, #2
 800a522:	e014      	b.n	800a54e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	4932      	ldr	r1, [pc, #200]	; (800a63c <ES_WIFI_Connect+0xe0>)
 800a574:	4618      	mov	r0, r3
 800a576:	f008 fe6b 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a586:	461a      	mov	r2, r3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fe13 	bl	800a1b4 <AT_ExecuteCommand>
 800a58e:	4603      	mov	r3, r0
 800a590:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d14b      	bne.n	800a630 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	4927      	ldr	r1, [pc, #156]	; (800a640 <ES_WIFI_Connect+0xe4>)
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f008 fe54 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff fdfc 	bl	800a1b4 <AT_ExecuteCommand>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d134      	bne.n	800a630 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	78fa      	ldrb	r2, [r7, #3]
 800a5ca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	491b      	ldr	r1, [pc, #108]	; (800a644 <ES_WIFI_Connect+0xe8>)
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f008 fe39 	bl	8013250 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f7ff fde1 	bl	800a1b4 <AT_ExecuteCommand>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d119      	bne.n	800a630 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a602:	4911      	ldr	r1, [pc, #68]	; (800a648 <ES_WIFI_Connect+0xec>)
 800a604:	4618      	mov	r0, r3
 800a606:	f008 fe23 	bl	8013250 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a616:	461a      	mov	r2, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff fdcb 	bl	800a1b4 <AT_ExecuteCommand>
 800a61e:	4603      	mov	r3, r0
 800a620:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	08014708 	.word	0x08014708
 800a640:	08014710 	.word	0x08014710
 800a644:	08014718 	.word	0x08014718
 800a648:	08014720 	.word	0x08014720

0800a64c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a65a:	4911      	ldr	r1, [pc, #68]	; (800a6a0 <ES_WIFI_IsConnected+0x54>)
 800a65c:	4618      	mov	r0, r3
 800a65e:	f008 fdf7 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a66e:	461a      	mov	r2, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff fd9f 	bl	800a1b4 <AT_ExecuteCommand>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d108      	bne.n	800a692 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	33d2      	adds	r3, #210	; 0xd2
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7ff fd7b 	bl	800a188 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	08014724 	.word	0x08014724

0800a6a4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6b2:	4910      	ldr	r1, [pc, #64]	; (800a6f4 <ES_WIFI_GetNetworkSettings+0x50>)
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f008 fdcb 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fd73 	bl	800a1b4 <AT_ExecuteCommand>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d108      	bne.n	800a6ea <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	338d      	adds	r3, #141	; 0x8d
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7ff fc9f 	bl	800a028 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	0801472c 	.word	0x0801472c

0800a6f8 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a708:	4912      	ldr	r1, [pc, #72]	; (800a754 <ES_WIFI_GetMACAddress+0x5c>)
 800a70a:	4618      	mov	r0, r3
 800a70c:	f008 fda0 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a71c:	461a      	mov	r2, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fd48 	bl	800a1b4 <AT_ExecuteCommand>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10c      	bne.n	800a748 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a734:	3302      	adds	r3, #2
 800a736:	4908      	ldr	r1, [pc, #32]	; (800a758 <ES_WIFI_GetMACAddress+0x60>)
 800a738:	4618      	mov	r0, r3
 800a73a:	f008 fe15 	bl	8013368 <strtok>
 800a73e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	68b8      	ldr	r0, [r7, #8]
 800a744:	f7ff fba4 	bl	8009e90 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	0801477c 	.word	0x0801477c
 800a758:	08014780 	.word	0x08014780

0800a75c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a75c:	b590      	push	{r4, r7, lr}
 800a75e:	b087      	sub	sp, #28
 800a760:	af02      	add	r7, sp, #8
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <ES_WIFI_StartClientConnection+0x1e>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b03      	cmp	r3, #3
 800a778:	d105      	bne.n	800a786 <ES_WIFI_StartClientConnection+0x2a>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <ES_WIFI_StartClientConnection+0x2a>
 800a782:	2302      	movs	r3, #2
 800a784:	e0c1      	b.n	800a90a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	461a      	mov	r2, r3
 800a792:	4960      	ldr	r1, [pc, #384]	; (800a914 <ES_WIFI_StartClientConnection+0x1b8>)
 800a794:	f008 fd5c 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fd04 	bl	800a1b4 <AT_ExecuteCommand>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d114      	bne.n	800a7e0 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4955      	ldr	r1, [pc, #340]	; (800a918 <ES_WIFI_StartClientConnection+0x1bc>)
 800a7c4:	f008 fd44 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff fcec 	bl	800a1b4 <AT_ExecuteCommand>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d114      	bne.n	800a810 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	889b      	ldrh	r3, [r3, #4]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	494a      	ldr	r1, [pc, #296]	; (800a91c <ES_WIFI_StartClientConnection+0x1c0>)
 800a7f4:	f008 fd2c 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a804:	461a      	mov	r2, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff fcd4 	bl	800a1b4 <AT_ExecuteCommand>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d11c      	bne.n	800a850 <ES_WIFI_StartClientConnection+0xf4>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <ES_WIFI_StartClientConnection+0xca>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b03      	cmp	r3, #3
 800a824:	d114      	bne.n	800a850 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	885b      	ldrh	r3, [r3, #2]
 800a830:	461a      	mov	r2, r3
 800a832:	493b      	ldr	r1, [pc, #236]	; (800a920 <ES_WIFI_StartClientConnection+0x1c4>)
 800a834:	f008 fd0c 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a844:	461a      	mov	r2, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fcb4 	bl	800a1b4 <AT_ExecuteCommand>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d128      	bne.n	800a8a8 <ES_WIFI_StartClientConnection+0x14c>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <ES_WIFI_StartClientConnection+0x10a>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b03      	cmp	r3, #3
 800a864:	d120      	bne.n	800a8a8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	799b      	ldrb	r3, [r3, #6]
 800a870:	4619      	mov	r1, r3
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	79db      	ldrb	r3, [r3, #7]
 800a876:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a87c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	9200      	str	r2, [sp, #0]
 800a886:	4623      	mov	r3, r4
 800a888:	460a      	mov	r2, r1
 800a88a:	4926      	ldr	r1, [pc, #152]	; (800a924 <ES_WIFI_StartClientConnection+0x1c8>)
 800a88c:	f008 fce0 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a89c:	461a      	mov	r2, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fc88 	bl	800a1b4 <AT_ExecuteCommand>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d116      	bne.n	800a8dc <ES_WIFI_StartClientConnection+0x180>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d112      	bne.n	800a8dc <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8bc:	491a      	ldr	r1, [pc, #104]	; (800a928 <ES_WIFI_StartClientConnection+0x1cc>)
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f008 fcc6 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff fc6e 	bl	800a1b4 <AT_ExecuteCommand>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d112      	bne.n	800a908 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8e8:	4910      	ldr	r1, [pc, #64]	; (800a92c <ES_WIFI_StartClientConnection+0x1d0>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f008 fcb0 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff fc58 	bl	800a1b4 <AT_ExecuteCommand>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd90      	pop	{r4, r7, pc}
 800a912:	bf00      	nop
 800a914:	080147e4 	.word	0x080147e4
 800a918:	080147ec 	.word	0x080147ec
 800a91c:	080147f4 	.word	0x080147f4
 800a920:	080147fc 	.word	0x080147fc
 800a924:	08014804 	.word	0x08014804
 800a928:	08014814 	.word	0x08014814
 800a92c:	0801481c 	.word	0x0801481c

0800a930 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af02      	add	r7, sp, #8
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	607a      	str	r2, [r7, #4]
 800a93a:	461a      	mov	r2, r3
 800a93c:	460b      	mov	r3, r1
 800a93e:	72fb      	strb	r3, [r7, #11]
 800a940:	4613      	mov	r3, r2
 800a942:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a944:	2302      	movs	r3, #2
 800a946:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d102      	bne.n	800a954 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	e001      	b.n	800a958 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a958:	893b      	ldrh	r3, [r7, #8]
 800a95a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a95e:	d302      	bcc.n	800a966 <ES_WIFI_SendData+0x36>
 800a960:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a964:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	893a      	ldrh	r2, [r7, #8]
 800a96a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a972:	7afa      	ldrb	r2, [r7, #11]
 800a974:	4942      	ldr	r1, [pc, #264]	; (800aa80 <ES_WIFI_SendData+0x150>)
 800a976:	4618      	mov	r0, r3
 800a978:	f008 fc6a 	bl	8013250 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a988:	461a      	mov	r2, r3
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f7ff fc12 	bl	800a1b4 <AT_ExecuteCommand>
 800a990:	4603      	mov	r3, r0
 800a992:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a994:	7cfb      	ldrb	r3, [r7, #19]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d15e      	bne.n	800aa58 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4938      	ldr	r1, [pc, #224]	; (800aa84 <ES_WIFI_SendData+0x154>)
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f008 fc53 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fbfb 	bl	800a1b4 <AT_ExecuteCommand>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a9c2:	7cfb      	ldrb	r3, [r7, #19]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d13d      	bne.n	800aa44 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9ce:	893a      	ldrh	r2, [r7, #8]
 800a9d0:	492d      	ldr	r1, [pc, #180]	; (800aa88 <ES_WIFI_SendData+0x158>)
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f008 fc3c 	bl	8013250 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9e4:	893a      	ldrh	r2, [r7, #8]
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff fc47 	bl	800a280 <AT_RequestSendData>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a9f6:	7cfb      	ldrb	r3, [r7, #19]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d119      	bne.n	800aa30 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa02:	4922      	ldr	r1, [pc, #136]	; (800aa8c <ES_WIFI_SendData+0x15c>)
 800aa04:	4618      	mov	r0, r3
 800aa06:	f008 fc99 	bl	801333c <strstr>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d02c      	beq.n	800aa6a <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800aa10:	f640 0267 	movw	r2, #2151	; 0x867
 800aa14:	491e      	ldr	r1, [pc, #120]	; (800aa90 <ES_WIFI_SendData+0x160>)
 800aa16:	481f      	ldr	r0, [pc, #124]	; (800aa94 <ES_WIFI_SendData+0x164>)
 800aa18:	f008 fade 	bl	8012fd8 <iprintf>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa22:	4619      	mov	r1, r3
 800aa24:	481c      	ldr	r0, [pc, #112]	; (800aa98 <ES_WIFI_SendData+0x168>)
 800aa26:	f008 fad7 	bl	8012fd8 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	74fb      	strb	r3, [r7, #19]
 800aa2e:	e01c      	b.n	800aa6a <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800aa30:	f640 026d 	movw	r2, #2157	; 0x86d
 800aa34:	4916      	ldr	r1, [pc, #88]	; (800aa90 <ES_WIFI_SendData+0x160>)
 800aa36:	4817      	ldr	r0, [pc, #92]	; (800aa94 <ES_WIFI_SendData+0x164>)
 800aa38:	f008 face 	bl	8012fd8 <iprintf>
 800aa3c:	4817      	ldr	r0, [pc, #92]	; (800aa9c <ES_WIFI_SendData+0x16c>)
 800aa3e:	f008 fb51 	bl	80130e4 <puts>
 800aa42:	e012      	b.n	800aa6a <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800aa44:	f640 0272 	movw	r2, #2162	; 0x872
 800aa48:	4911      	ldr	r1, [pc, #68]	; (800aa90 <ES_WIFI_SendData+0x160>)
 800aa4a:	4812      	ldr	r0, [pc, #72]	; (800aa94 <ES_WIFI_SendData+0x164>)
 800aa4c:	f008 fac4 	bl	8012fd8 <iprintf>
 800aa50:	4813      	ldr	r0, [pc, #76]	; (800aaa0 <ES_WIFI_SendData+0x170>)
 800aa52:	f008 fb47 	bl	80130e4 <puts>
 800aa56:	e008      	b.n	800aa6a <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800aa58:	f640 0277 	movw	r2, #2167	; 0x877
 800aa5c:	490c      	ldr	r1, [pc, #48]	; (800aa90 <ES_WIFI_SendData+0x160>)
 800aa5e:	480d      	ldr	r0, [pc, #52]	; (800aa94 <ES_WIFI_SendData+0x164>)
 800aa60:	f008 faba 	bl	8012fd8 <iprintf>
 800aa64:	480f      	ldr	r0, [pc, #60]	; (800aaa4 <ES_WIFI_SendData+0x174>)
 800aa66:	f008 fb3d 	bl	80130e4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800aa6a:	7cfb      	ldrb	r3, [r7, #19]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d102      	bne.n	800aa76 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	2200      	movs	r2, #0
 800aa74:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800aa76:	7cfb      	ldrb	r3, [r7, #19]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	080147e4 	.word	0x080147e4
 800aa84:	080149a8 	.word	0x080149a8
 800aa88:	080149b0 	.word	0x080149b0
 800aa8c:	080149bc 	.word	0x080149bc
 800aa90:	08014874 	.word	0x08014874
 800aa94:	0801489c 	.word	0x0801489c
 800aa98:	080149c4 	.word	0x080149c4
 800aa9c:	080149e0 	.word	0x080149e0
 800aaa0:	080149fc 	.word	0x080149fc
 800aaa4:	08014a10 	.word	0x08014a10

0800aaa8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	461a      	mov	r2, r3
 800aab4:	460b      	mov	r3, r1
 800aab6:	72fb      	strb	r3, [r7, #11]
 800aab8:	4613      	mov	r3, r2
 800aaba:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800aabc:	2302      	movs	r3, #2
 800aabe:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800aac6:	2301      	movs	r3, #1
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	e001      	b.n	800aad0 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800aad0:	893b      	ldrh	r3, [r7, #8]
 800aad2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800aad6:	f200 808b 	bhi.w	800abf0 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aae0:	7afa      	ldrb	r2, [r7, #11]
 800aae2:	4946      	ldr	r1, [pc, #280]	; (800abfc <ES_WIFI_ReceiveData+0x154>)
 800aae4:	4618      	mov	r0, r3
 800aae6:	f008 fbb3 	bl	8013250 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff fb5b 	bl	800a1b4 <AT_ExecuteCommand>
 800aafe:	4603      	mov	r3, r0
 800ab00:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800ab02:	7cfb      	ldrb	r3, [r7, #19]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d165      	bne.n	800abd4 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab0e:	893a      	ldrh	r2, [r7, #8]
 800ab10:	493b      	ldr	r1, [pc, #236]	; (800ac00 <ES_WIFI_ReceiveData+0x158>)
 800ab12:	4618      	mov	r0, r3
 800ab14:	f008 fb9c 	bl	8013250 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab24:	461a      	mov	r2, r3
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff fb44 	bl	800a1b4 <AT_ExecuteCommand>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800ab30:	7cfb      	ldrb	r3, [r7, #19]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d141      	bne.n	800abba <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4931      	ldr	r1, [pc, #196]	; (800ac04 <ES_WIFI_ReceiveData+0x15c>)
 800ab40:	4618      	mov	r0, r3
 800ab42:	f008 fb85 	bl	8013250 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab52:	461a      	mov	r2, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff fb2d 	bl	800a1b4 <AT_ExecuteCommand>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800ab5e:	7cfb      	ldrb	r3, [r7, #19]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d120      	bne.n	800aba6 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab6a:	4927      	ldr	r1, [pc, #156]	; (800ac08 <ES_WIFI_ReceiveData+0x160>)
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f008 fb6f 	bl	8013250 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ab78:	893a      	ldrh	r2, [r7, #8]
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fbf2 	bl	800a36c <AT_RequestReceiveData>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800ab8c:	7cfb      	ldrb	r3, [r7, #19]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d02e      	beq.n	800abf0 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800ab92:	f640 1208 	movw	r2, #2312	; 0x908
 800ab96:	491d      	ldr	r1, [pc, #116]	; (800ac0c <ES_WIFI_ReceiveData+0x164>)
 800ab98:	481d      	ldr	r0, [pc, #116]	; (800ac10 <ES_WIFI_ReceiveData+0x168>)
 800ab9a:	f008 fa1d 	bl	8012fd8 <iprintf>
 800ab9e:	481d      	ldr	r0, [pc, #116]	; (800ac14 <ES_WIFI_ReceiveData+0x16c>)
 800aba0:	f008 faa0 	bl	80130e4 <puts>
 800aba4:	e024      	b.n	800abf0 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800aba6:	f640 120d 	movw	r2, #2317	; 0x90d
 800abaa:	4918      	ldr	r1, [pc, #96]	; (800ac0c <ES_WIFI_ReceiveData+0x164>)
 800abac:	4818      	ldr	r0, [pc, #96]	; (800ac10 <ES_WIFI_ReceiveData+0x168>)
 800abae:	f008 fa13 	bl	8012fd8 <iprintf>
 800abb2:	4819      	ldr	r0, [pc, #100]	; (800ac18 <ES_WIFI_ReceiveData+0x170>)
 800abb4:	f008 fa96 	bl	80130e4 <puts>
 800abb8:	e01a      	b.n	800abf0 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800abba:	f640 1212 	movw	r2, #2322	; 0x912
 800abbe:	4913      	ldr	r1, [pc, #76]	; (800ac0c <ES_WIFI_ReceiveData+0x164>)
 800abc0:	4813      	ldr	r0, [pc, #76]	; (800ac10 <ES_WIFI_ReceiveData+0x168>)
 800abc2:	f008 fa09 	bl	8012fd8 <iprintf>
 800abc6:	4815      	ldr	r0, [pc, #84]	; (800ac1c <ES_WIFI_ReceiveData+0x174>)
 800abc8:	f008 fa8c 	bl	80130e4 <puts>
        *Receivedlen = 0;
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	2200      	movs	r2, #0
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	e00d      	b.n	800abf0 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800abd4:	f640 1218 	movw	r2, #2328	; 0x918
 800abd8:	490c      	ldr	r1, [pc, #48]	; (800ac0c <ES_WIFI_ReceiveData+0x164>)
 800abda:	480d      	ldr	r0, [pc, #52]	; (800ac10 <ES_WIFI_ReceiveData+0x168>)
 800abdc:	f008 f9fc 	bl	8012fd8 <iprintf>
 800abe0:	480f      	ldr	r0, [pc, #60]	; (800ac20 <ES_WIFI_ReceiveData+0x178>)
 800abe2:	f008 fa7f 	bl	80130e4 <puts>
      issue15++;
 800abe6:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <ES_WIFI_ReceiveData+0x17c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3301      	adds	r3, #1
 800abec:	4a0d      	ldr	r2, [pc, #52]	; (800ac24 <ES_WIFI_ReceiveData+0x17c>)
 800abee:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800abf0:	7cfb      	ldrb	r3, [r7, #19]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	080147e4 	.word	0x080147e4
 800ac00:	08014a34 	.word	0x08014a34
 800ac04:	08014a3c 	.word	0x08014a3c
 800ac08:	08014a44 	.word	0x08014a44
 800ac0c:	08014874 	.word	0x08014874
 800ac10:	0801489c 	.word	0x0801489c
 800ac14:	08014a48 	.word	0x08014a48
 800ac18:	08014a68 	.word	0x08014a68
 800ac1c:	08014a80 	.word	0x08014a80
 800ac20:	08014aa0 	.word	0x08014aa0
 800ac24:	20000c90 	.word	0x20000c90

0800ac28 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08c      	sub	sp, #48	; 0x30
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800ac30:	4b56      	ldr	r3, [pc, #344]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac34:	4a55      	ldr	r2, [pc, #340]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac3a:	6593      	str	r3, [r2, #88]	; 0x58
 800ac3c:	4b53      	ldr	r3, [pc, #332]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac44:	61bb      	str	r3, [r7, #24]
 800ac46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac48:	4b50      	ldr	r3, [pc, #320]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac4c:	4a4f      	ldr	r2, [pc, #316]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac4e:	f043 0302 	orr.w	r3, r3, #2
 800ac52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac54:	4b4d      	ldr	r3, [pc, #308]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	617b      	str	r3, [r7, #20]
 800ac5e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac60:	4b4a      	ldr	r3, [pc, #296]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac64:	4a49      	ldr	r2, [pc, #292]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac66:	f043 0304 	orr.w	r3, r3, #4
 800ac6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac6c:	4b47      	ldr	r3, [pc, #284]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ac78:	4b44      	ldr	r3, [pc, #272]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7c:	4a43      	ldr	r2, [pc, #268]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac7e:	f043 0310 	orr.w	r3, r3, #16
 800ac82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac84:	4b41      	ldr	r3, [pc, #260]	; (800ad8c <SPI_WIFI_MspInit+0x164>)
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	f003 0310 	and.w	r3, r3, #16
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800ac90:	2200      	movs	r2, #0
 800ac92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac96:	483e      	ldr	r0, [pc, #248]	; (800ad90 <SPI_WIFI_MspInit+0x168>)
 800ac98:	f7f8 fd18 	bl	80036cc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800ac9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aca0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800aca2:	2301      	movs	r3, #1
 800aca4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800acaa:	2300      	movs	r3, #0
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800acae:	f107 031c 	add.w	r3, r7, #28
 800acb2:	4619      	mov	r1, r3
 800acb4:	4836      	ldr	r0, [pc, #216]	; (800ad90 <SPI_WIFI_MspInit+0x168>)
 800acb6:	f7f8 fa53 	bl	8003160 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800acba:	2302      	movs	r3, #2
 800acbc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800acbe:	4b35      	ldr	r3, [pc, #212]	; (800ad94 <SPI_WIFI_MspInit+0x16c>)
 800acc0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800acc6:	2300      	movs	r3, #0
 800acc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800acca:	f107 031c 	add.w	r3, r7, #28
 800acce:	4619      	mov	r1, r3
 800acd0:	4831      	ldr	r0, [pc, #196]	; (800ad98 <SPI_WIFI_MspInit+0x170>)
 800acd2:	f7f8 fa45 	bl	8003160 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800acd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acda:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800acdc:	2301      	movs	r3, #1
 800acde:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800ace4:	2300      	movs	r3, #0
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800acec:	f107 031c 	add.w	r3, r7, #28
 800acf0:	4619      	mov	r1, r3
 800acf2:	4829      	ldr	r0, [pc, #164]	; (800ad98 <SPI_WIFI_MspInit+0x170>)
 800acf4:	f7f8 fa34 	bl	8003160 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800acf8:	2201      	movs	r2, #1
 800acfa:	2101      	movs	r1, #1
 800acfc:	4826      	ldr	r0, [pc, #152]	; (800ad98 <SPI_WIFI_MspInit+0x170>)
 800acfe:	f7f8 fce5 	bl	80036cc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800ad02:	2301      	movs	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800ad06:	2301      	movs	r3, #1
 800ad08:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800ad12:	f107 031c 	add.w	r3, r7, #28
 800ad16:	4619      	mov	r1, r3
 800ad18:	481f      	ldr	r0, [pc, #124]	; (800ad98 <SPI_WIFI_MspInit+0x170>)
 800ad1a:	f7f8 fa21 	bl	8003160 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800ad1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad22:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800ad24:	2302      	movs	r3, #2
 800ad26:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800ad30:	2306      	movs	r3, #6
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800ad34:	f107 031c 	add.w	r3, r7, #28
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4818      	ldr	r0, [pc, #96]	; (800ad9c <SPI_WIFI_MspInit+0x174>)
 800ad3c:	f7f8 fa10 	bl	8003160 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800ad40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad44:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800ad46:	2302      	movs	r3, #2
 800ad48:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800ad52:	2306      	movs	r3, #6
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800ad56:	f107 031c 	add.w	r3, r7, #28
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	480f      	ldr	r0, [pc, #60]	; (800ad9c <SPI_WIFI_MspInit+0x174>)
 800ad5e:	f7f8 f9ff 	bl	8003160 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800ad62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad66:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ad70:	2301      	movs	r3, #1
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800ad74:	2306      	movs	r3, #6
 800ad76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800ad78:	f107 031c 	add.w	r3, r7, #28
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4807      	ldr	r0, [pc, #28]	; (800ad9c <SPI_WIFI_MspInit+0x174>)
 800ad80:	f7f8 f9ee 	bl	8003160 <HAL_GPIO_Init>
}
 800ad84:	bf00      	nop
 800ad86:	3730      	adds	r7, #48	; 0x30
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	48000400 	.word	0x48000400
 800ad94:	10110000 	.word	0x10110000
 800ad98:	48001000 	.word	0x48001000
 800ad9c:	48000800 	.word	0x48000800

0800ada0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800adae:	88fb      	ldrh	r3, [r7, #6]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d145      	bne.n	800ae40 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800adb4:	4b27      	ldr	r3, [pc, #156]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adb6:	4a28      	ldr	r2, [pc, #160]	; (800ae58 <SPI_WIFI_Init+0xb8>)
 800adb8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800adba:	4826      	ldr	r0, [pc, #152]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adbc:	f7ff ff34 	bl	800ac28 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800adc0:	4b24      	ldr	r3, [pc, #144]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adc2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800adc6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800adc8:	4b22      	ldr	r3, [pc, #136]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adca:	2200      	movs	r2, #0
 800adcc:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800adce:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800add0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800add4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800add8:	2200      	movs	r2, #0
 800adda:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800addc:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adde:	2200      	movs	r2, #0
 800ade0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800ade2:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800ade4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800adea:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adec:	2210      	movs	r2, #16
 800adee:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800adf0:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800adf6:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800adfc:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800ae02:	4b14      	ldr	r3, [pc, #80]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800ae08:	4812      	ldr	r0, [pc, #72]	; (800ae54 <SPI_WIFI_Init+0xb4>)
 800ae0a:	f7fb fabd 	bl	8006388 <HAL_SPI_Init>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	e018      	b.n	800ae4c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	2007      	movs	r0, #7
 800ae20:	f7f7 ffda 	bl	8002dd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800ae24:	2007      	movs	r0, #7
 800ae26:	f7f7 fff3 	bl	8002e10 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	2033      	movs	r0, #51	; 0x33
 800ae30:	f7f7 ffd2 	bl	8002dd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800ae34:	2033      	movs	r0, #51	; 0x33
 800ae36:	f7f7 ffeb 	bl	8002e10 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800ae3a:	200a      	movs	r0, #10
 800ae3c:	f000 f9fe 	bl	800b23c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800ae40:	f000 f80c 	bl	800ae5c <SPI_WIFI_ResetModule>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

  return rc;
 800ae48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000c94 	.word	0x20000c94
 800ae58:	40003c00 	.word	0x40003c00

0800ae5c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800ae62:	f7f7 fead 	bl	8002bc0 <HAL_GetTick>
 800ae66:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae72:	4830      	ldr	r0, [pc, #192]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800ae74:	f7f8 fc2a 	bl	80036cc <HAL_GPIO_WritePin>
 800ae78:	200a      	movs	r0, #10
 800ae7a:	f7f7 fead 	bl	8002bd8 <HAL_Delay>
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae84:	482b      	ldr	r0, [pc, #172]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800ae86:	f7f8 fc21 	bl	80036cc <HAL_GPIO_WritePin>
 800ae8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ae8e:	f7f7 fea3 	bl	8002bd8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800ae92:	2200      	movs	r2, #0
 800ae94:	2101      	movs	r1, #1
 800ae96:	4827      	ldr	r0, [pc, #156]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800ae98:	f7f8 fc18 	bl	80036cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ae9c:	200f      	movs	r0, #15
 800ae9e:	f000 f9cd 	bl	800b23c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800aea2:	e020      	b.n	800aee6 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	463a      	mov	r2, r7
 800aea8:	18d1      	adds	r1, r2, r3
 800aeaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4821      	ldr	r0, [pc, #132]	; (800af38 <SPI_WIFI_ResetModule+0xdc>)
 800aeb2:	f7fb fb34 	bl	800651e <HAL_SPI_Receive>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	3302      	adds	r3, #2
 800aebe:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800aec0:	f7f7 fe7e 	bl	8002bc0 <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aece:	d202      	bcs.n	800aed6 <SPI_WIFI_ResetModule+0x7a>
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d007      	beq.n	800aee6 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800aed6:	2201      	movs	r2, #1
 800aed8:	2101      	movs	r1, #1
 800aeda:	4816      	ldr	r0, [pc, #88]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800aedc:	f7f8 fbf6 	bl	80036cc <HAL_GPIO_WritePin>
      return -1;
 800aee0:	f04f 33ff 	mov.w	r3, #4294967295
 800aee4:	e021      	b.n	800af2a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800aee6:	2102      	movs	r1, #2
 800aee8:	4812      	ldr	r0, [pc, #72]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800aeea:	f7f8 fbd7 	bl	800369c <HAL_GPIO_ReadPin>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d0d7      	beq.n	800aea4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800aef4:	2201      	movs	r2, #1
 800aef6:	2101      	movs	r1, #1
 800aef8:	480e      	ldr	r0, [pc, #56]	; (800af34 <SPI_WIFI_ResetModule+0xd8>)
 800aefa:	f7f8 fbe7 	bl	80036cc <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800aefe:	783b      	ldrb	r3, [r7, #0]
 800af00:	2b15      	cmp	r3, #21
 800af02:	d10e      	bne.n	800af22 <SPI_WIFI_ResetModule+0xc6>
 800af04:	787b      	ldrb	r3, [r7, #1]
 800af06:	2b15      	cmp	r3, #21
 800af08:	d10b      	bne.n	800af22 <SPI_WIFI_ResetModule+0xc6>
 800af0a:	78bb      	ldrb	r3, [r7, #2]
 800af0c:	2b0d      	cmp	r3, #13
 800af0e:	d108      	bne.n	800af22 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800af10:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800af12:	2b0a      	cmp	r3, #10
 800af14:	d105      	bne.n	800af22 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800af16:	793b      	ldrb	r3, [r7, #4]
 800af18:	2b3e      	cmp	r3, #62	; 0x3e
 800af1a:	d102      	bne.n	800af22 <SPI_WIFI_ResetModule+0xc6>
 800af1c:	797b      	ldrb	r3, [r7, #5]
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d002      	beq.n	800af28 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	e000      	b.n	800af2a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	48001000 	.word	0x48001000
 800af38:	20000c94 	.word	0x20000c94

0800af3c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <SPI_WIFI_DeInit+0x10>)
 800af42:	f7fb fac4 	bl	80064ce <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20000c94 	.word	0x20000c94

0800af50 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800af58:	f7f7 fe32 	bl	8002bc0 <HAL_GetTick>
 800af5c:	4603      	mov	r3, r0
 800af5e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800af60:	e00a      	b.n	800af78 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800af62:	f7f7 fe2d 	bl	8002bc0 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d902      	bls.n	800af78 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800af72:	f04f 33ff 	mov.w	r3, #4294967295
 800af76:	e007      	b.n	800af88 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800af78:	2102      	movs	r1, #2
 800af7a:	4805      	ldr	r0, [pc, #20]	; (800af90 <wait_cmddata_rdy_high+0x40>)
 800af7c:	f7f8 fb8e 	bl	800369c <HAL_GPIO_ReadPin>
 800af80:	4603      	mov	r3, r0
 800af82:	2b01      	cmp	r3, #1
 800af84:	d1ed      	bne.n	800af62 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	48001000 	.word	0x48001000

0800af94 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800af9c:	f7f7 fe10 	bl	8002bc0 <HAL_GetTick>
 800afa0:	4603      	mov	r3, r0
 800afa2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800afa4:	e00a      	b.n	800afbc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800afa6:	f7f7 fe0b 	bl	8002bc0 <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d902      	bls.n	800afbc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	e004      	b.n	800afc6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <wait_cmddata_rdy_rising_event+0x3c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d0f0      	beq.n	800afa6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800afc4:	2300      	movs	r3, #0
#endif
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000d00 	.word	0x20000d00

0800afd4 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800afdc:	f7f7 fdf0 	bl	8002bc0 <HAL_GetTick>
 800afe0:	4603      	mov	r3, r0
 800afe2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800afe4:	e00a      	b.n	800affc <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800afe6:	f7f7 fdeb 	bl	8002bc0 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d902      	bls.n	800affc <wait_spi_rx_event+0x28>
    {
      return -1;
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
 800affa:	e004      	b.n	800b006 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <wait_spi_rx_event+0x3c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d0f0      	beq.n	800afe6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800b004:	2300      	movs	r3, #0
#endif
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20000cf8 	.word	0x20000cf8

0800b014 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b01c:	f7f7 fdd0 	bl	8002bc0 <HAL_GetTick>
 800b020:	4603      	mov	r3, r0
 800b022:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800b024:	e00a      	b.n	800b03c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b026:	f7f7 fdcb 	bl	8002bc0 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	429a      	cmp	r2, r3
 800b034:	d902      	bls.n	800b03c <wait_spi_tx_event+0x28>
    {
      return -1;
 800b036:	f04f 33ff 	mov.w	r3, #4294967295
 800b03a:	e004      	b.n	800b046 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800b03c:	4b04      	ldr	r3, [pc, #16]	; (800b050 <wait_spi_tx_event+0x3c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d0f0      	beq.n	800b026 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800b044:	2300      	movs	r3, #0
#endif
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000cfc 	.word	0x20000cfc

0800b054 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	460b      	mov	r3, r1
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800b066:	2201      	movs	r2, #1
 800b068:	2101      	movs	r1, #1
 800b06a:	4834      	ldr	r0, [pc, #208]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b06c:	f7f8 fb2e 	bl	80036cc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800b070:	2003      	movs	r0, #3
 800b072:	f000 f8e3 	bl	800b23c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff ff8b 	bl	800af94 <wait_cmddata_rdy_rising_event>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	da02      	bge.n	800b08a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800b084:	f06f 0302 	mvn.w	r3, #2
 800b088:	e054      	b.n	800b134 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b08a:	2200      	movs	r2, #0
 800b08c:	2101      	movs	r1, #1
 800b08e:	482b      	ldr	r0, [pc, #172]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b090:	f7f8 fb1c 	bl	80036cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b094:	200f      	movs	r0, #15
 800b096:	f000 f8d1 	bl	800b23c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800b09a:	e03d      	b.n	800b118 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800b09c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b0a0:	897b      	ldrh	r3, [r7, #10]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	db02      	blt.n	800b0ac <SPI_WIFI_ReceiveData+0x58>
 800b0a6:	897b      	ldrh	r3, [r7, #10]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d13c      	bne.n	800b126 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800b0ac:	4b24      	ldr	r3, [pc, #144]	; (800b140 <SPI_WIFI_ReceiveData+0xec>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800b0b2:	f107 0314 	add.w	r3, r7, #20
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4822      	ldr	r0, [pc, #136]	; (800b144 <SPI_WIFI_ReceiveData+0xf0>)
 800b0bc:	f7fb fe00 	bl	8006cc0 <HAL_SPI_Receive_IT>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	481c      	ldr	r0, [pc, #112]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b0cc:	f7f8 fafe 	bl	80036cc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d4:	e02e      	b.n	800b134 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff ff7b 	bl	800afd4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800b0de:	7d3a      	ldrb	r2, [r7, #20]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	7d7a      	ldrb	r2, [r7, #21]
 800b0ea:	701a      	strb	r2, [r3, #0]
      length += 2;
 800b0ec:	8afb      	ldrh	r3, [r7, #22]
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800b0fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b0fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b102:	db09      	blt.n	800b118 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800b104:	2201      	movs	r2, #1
 800b106:	2101      	movs	r1, #1
 800b108:	480c      	ldr	r0, [pc, #48]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b10a:	f7f8 fadf 	bl	80036cc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800b10e:	f7ff fea5 	bl	800ae5c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800b112:	f06f 0303 	mvn.w	r3, #3
 800b116:	e00d      	b.n	800b134 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800b118:	2102      	movs	r1, #2
 800b11a:	4808      	ldr	r0, [pc, #32]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b11c:	f7f8 fabe 	bl	800369c <HAL_GPIO_ReadPin>
 800b120:	4603      	mov	r3, r0
 800b122:	2b01      	cmp	r3, #1
 800b124:	d0ba      	beq.n	800b09c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800b126:	2201      	movs	r2, #1
 800b128:	2101      	movs	r1, #1
 800b12a:	4804      	ldr	r0, [pc, #16]	; (800b13c <SPI_WIFI_ReceiveData+0xe8>)
 800b12c:	f7f8 face 	bl	80036cc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800b130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	48001000 	.word	0x48001000
 800b140:	20000cf8 	.word	0x20000cf8
 800b144:	20000c94 	.word	0x20000c94

0800b148 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	460b      	mov	r3, r1
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fef9 	bl	800af50 <wait_cmddata_rdy_high>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	da02      	bge.n	800b16a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800b164:	f04f 33ff 	mov.w	r3, #4294967295
 800b168:	e04f      	b.n	800b20a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <SPI_WIFI_SendData+0xcc>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b170:	2200      	movs	r2, #0
 800b172:	2101      	movs	r1, #1
 800b174:	4828      	ldr	r0, [pc, #160]	; (800b218 <SPI_WIFI_SendData+0xd0>)
 800b176:	f7f8 faa9 	bl	80036cc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b17a:	200f      	movs	r0, #15
 800b17c:	f000 f85e 	bl	800b23c <SPI_WIFI_DelayUs>
  if (len > 1)
 800b180:	897b      	ldrh	r3, [r7, #10]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d919      	bls.n	800b1ba <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800b186:	4b25      	ldr	r3, [pc, #148]	; (800b21c <SPI_WIFI_SendData+0xd4>)
 800b188:	2201      	movs	r2, #1
 800b18a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800b18c:	897b      	ldrh	r3, [r7, #10]
 800b18e:	085b      	lsrs	r3, r3, #1
 800b190:	b29b      	uxth	r3, r3
 800b192:	461a      	mov	r2, r3
 800b194:	68f9      	ldr	r1, [r7, #12]
 800b196:	4822      	ldr	r0, [pc, #136]	; (800b220 <SPI_WIFI_SendData+0xd8>)
 800b198:	f7fb fd04 	bl	8006ba4 <HAL_SPI_Transmit_IT>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d007      	beq.n	800b1b2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	481c      	ldr	r0, [pc, #112]	; (800b218 <SPI_WIFI_SendData+0xd0>)
 800b1a8:	f7f8 fa90 	bl	80036cc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b0:	e02b      	b.n	800b20a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ff2d 	bl	800b014 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d020      	beq.n	800b206 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800b1c4:	897b      	ldrh	r3, [r7, #10]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800b1d0:	230a      	movs	r3, #10
 800b1d2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800b1d4:	4b11      	ldr	r3, [pc, #68]	; (800b21c <SPI_WIFI_SendData+0xd4>)
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800b1da:	f107 0314 	add.w	r3, r7, #20
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	480f      	ldr	r0, [pc, #60]	; (800b220 <SPI_WIFI_SendData+0xd8>)
 800b1e4:	f7fb fcde 	bl	8006ba4 <HAL_SPI_Transmit_IT>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d007      	beq.n	800b1fe <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	4809      	ldr	r0, [pc, #36]	; (800b218 <SPI_WIFI_SendData+0xd0>)
 800b1f4:	f7f8 fa6a 	bl	80036cc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	e005      	b.n	800b20a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff ff07 	bl	800b014 <wait_spi_tx_event>
    
  }
  return len;
 800b206:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000d00 	.word	0x20000d00
 800b218:	48001000 	.word	0x48001000
 800b21c:	20000cfc 	.word	0x20000cfc
 800b220:	20000c94 	.word	0x20000c94

0800b224 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f7 fcd3 	bl	8002bd8 <HAL_Delay>
}
 800b232:	bf00      	nop
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800b24c:	4b20      	ldr	r3, [pc, #128]	; (800b2d0 <SPI_WIFI_DelayUs+0x94>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d122      	bne.n	800b29a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800b254:	4b1f      	ldr	r3, [pc, #124]	; (800b2d4 <SPI_WIFI_DelayUs+0x98>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a1f      	ldr	r2, [pc, #124]	; (800b2d8 <SPI_WIFI_DelayUs+0x9c>)
 800b25a:	fba2 2303 	umull	r2, r3, r2, r3
 800b25e:	099b      	lsrs	r3, r3, #6
 800b260:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800b26a:	f7f7 fca9 	bl	8002bc0 <HAL_GetTick>
 800b26e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800b270:	e002      	b.n	800b278 <SPI_WIFI_DelayUs+0x3c>
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3b01      	subs	r3, #1
 800b276:	60bb      	str	r3, [r7, #8]
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1f9      	bne.n	800b272 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800b27e:	f7f7 fc9f 	bl	8002bc0 <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	4a11      	ldr	r2, [pc, #68]	; (800b2d0 <SPI_WIFI_DelayUs+0x94>)
 800b28a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800b28c:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <SPI_WIFI_DelayUs+0x94>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <SPI_WIFI_DelayUs+0x5e>
 800b294:	4b0e      	ldr	r3, [pc, #56]	; (800b2d0 <SPI_WIFI_DelayUs+0x94>)
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800b29a:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <SPI_WIFI_DelayUs+0x98>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a0f      	ldr	r2, [pc, #60]	; (800b2dc <SPI_WIFI_DelayUs+0xa0>)
 800b2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a4:	0c9a      	lsrs	r2, r3, #18
 800b2a6:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <SPI_WIFI_DelayUs+0x94>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ae:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	fb02 f303 	mul.w	r3, r2, r3
 800b2b8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800b2ba:	e002      	b.n	800b2c2 <SPI_WIFI_DelayUs+0x86>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1f9      	bne.n	800b2bc <SPI_WIFI_DelayUs+0x80>
  return;
 800b2c8:	bf00      	nop
}
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000d04 	.word	0x20000d04
 800b2d4:	20000010 	.word	0x20000010
 800b2d8:	10624dd3 	.word	0x10624dd3
 800b2dc:	431bde83 	.word	0x431bde83

0800b2e0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <HAL_SPI_RxCpltCallback+0x24>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800b2f0:	4b04      	ldr	r3, [pc, #16]	; (800b304 <HAL_SPI_RxCpltCallback+0x24>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20000cf8 	.word	0x20000cf8

0800b308 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800b310:	4b06      	ldr	r3, [pc, #24]	; (800b32c <HAL_SPI_TxCpltCallback+0x24>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800b318:	4b04      	ldr	r3, [pc, #16]	; (800b32c <HAL_SPI_TxCpltCallback+0x24>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]
  }
}
 800b31e:	bf00      	nop
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	20000cfc 	.word	0x20000cfc

0800b330 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <SPI_WIFI_ISR+0x1c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d102      	bne.n	800b342 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <SPI_WIFI_ISR+0x1c>)
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
   }
}
 800b342:	bf00      	nop
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	20000d00 	.word	0x20000d00

0800b350 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800b35a:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <WIFI_Init+0x40>)
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <WIFI_Init+0x44>)
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <WIFI_Init+0x48>)
 800b364:	4a0d      	ldr	r2, [pc, #52]	; (800b39c <WIFI_Init+0x4c>)
 800b366:	490e      	ldr	r1, [pc, #56]	; (800b3a0 <WIFI_Init+0x50>)
 800b368:	480e      	ldr	r0, [pc, #56]	; (800b3a4 <WIFI_Init+0x54>)
 800b36a:	f7ff f8c3 	bl	800a4f4 <ES_WIFI_RegisterBusIO>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d107      	bne.n	800b384 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b374:	480b      	ldr	r0, [pc, #44]	; (800b3a4 <WIFI_Init+0x54>)
 800b376:	f7ff f88f 	bl	800a498 <ES_WIFI_Init>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b384:	79fb      	ldrb	r3, [r7, #7]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800b055 	.word	0x0800b055
 800b394:	0800b149 	.word	0x0800b149
 800b398:	0800b225 	.word	0x0800b225
 800b39c:	0800af3d 	.word	0x0800af3d
 800b3a0:	0800ada1 	.word	0x0800ada1
 800b3a4:	20000d08 	.word	0x20000d08

0800b3a8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	68f9      	ldr	r1, [r7, #12]
 800b3c0:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <WIFI_Connect+0x40>)
 800b3c2:	f7ff f8cb 	bl	800a55c <ES_WIFI_Connect>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d107      	bne.n	800b3dc <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b3cc:	4806      	ldr	r0, [pc, #24]	; (800b3e8 <WIFI_Connect+0x40>)
 800b3ce:	f7ff f969 	bl	800a6a4 <ES_WIFI_GetNetworkSettings>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000d08 	.word	0x20000d08

0800b3ec <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4806      	ldr	r0, [pc, #24]	; (800b414 <WIFI_GetMAC_Address+0x28>)
 800b3fc:	f7ff f97c 	bl	800a6f8 <ES_WIFI_GetMACAddress>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20000d08 	.word	0x20000d08

0800b418 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b424:	4809      	ldr	r0, [pc, #36]	; (800b44c <WIFI_GetIP_Address+0x34>)
 800b426:	f7ff f911 	bl	800a64c <ES_WIFI_IsConnected>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d107      	bne.n	800b440 <WIFI_GetIP_Address+0x28>
 800b430:	4b06      	ldr	r3, [pc, #24]	; (800b44c <WIFI_GetIP_Address+0x34>)
 800b432:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b436:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000d08 	.word	0x20000d08

0800b450 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	; 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	460b      	mov	r3, r1
 800b45e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b46c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b46e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b470:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b472:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bf14      	ite	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	2300      	moveq	r3, #0
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	785b      	ldrb	r3, [r3, #1]
 800b48c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	789b      	ldrb	r3, [r3, #2]
 800b492:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	78db      	ldrb	r3, [r3, #3]
 800b498:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b49a:	f107 0310 	add.w	r3, r7, #16
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4807      	ldr	r0, [pc, #28]	; (800b4c0 <WIFI_OpenClientConnection+0x70>)
 800b4a2:	f7ff f95b 	bl	800a75c <ES_WIFI_StartClientConnection>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b4b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3728      	adds	r7, #40	; 0x28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20000d08 	.word	0x20000d08

0800b4c4 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	; 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <sendMessageVector+0x2c>
 800b4e2:	4b64      	ldr	r3, [pc, #400]	; (800b674 <sendMessageVector+0x1b0>)
 800b4e4:	4a64      	ldr	r2, [pc, #400]	; (800b678 <sendMessageVector+0x1b4>)
 800b4e6:	f240 21f2 	movw	r1, #754	; 0x2f2
 800b4ea:	4864      	ldr	r0, [pc, #400]	; (800b67c <sendMessageVector+0x1b8>)
 800b4ec:	f007 f85e 	bl	80125ac <__assert_func>
    assert( pIoVec != NULL );
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <sendMessageVector+0x40>
 800b4f6:	4b62      	ldr	r3, [pc, #392]	; (800b680 <sendMessageVector+0x1bc>)
 800b4f8:	4a5f      	ldr	r2, [pc, #380]	; (800b678 <sendMessageVector+0x1b4>)
 800b4fa:	f240 21f3 	movw	r1, #755	; 0x2f3
 800b4fe:	485f      	ldr	r0, [pc, #380]	; (800b67c <sendMessageVector+0x1b8>)
 800b500:	f007 f854 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d106      	bne.n	800b51a <sendMessageVector+0x56>
 800b50c:	4b5d      	ldr	r3, [pc, #372]	; (800b684 <sendMessageVector+0x1c0>)
 800b50e:	4a5a      	ldr	r2, [pc, #360]	; (800b678 <sendMessageVector+0x1b4>)
 800b510:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800b514:	4859      	ldr	r0, [pc, #356]	; (800b67c <sendMessageVector+0x1b8>)
 800b516:	f007 f849 	bl	80125ac <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <sendMessageVector+0x6c>
 800b522:	4b59      	ldr	r3, [pc, #356]	; (800b688 <sendMessageVector+0x1c4>)
 800b524:	4a54      	ldr	r2, [pc, #336]	; (800b678 <sendMessageVector+0x1b4>)
 800b526:	f240 21f6 	movw	r1, #758	; 0x2f6
 800b52a:	4854      	ldr	r0, [pc, #336]	; (800b67c <sendMessageVector+0x1b8>)
 800b52c:	f007 f83e 	bl	80125ac <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	623b      	str	r3, [r7, #32]
 800b534:	e007      	b.n	800b546 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4413      	add	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	3308      	adds	r3, #8
 800b544:	623b      	str	r3, [r7, #32]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b54c:	3b01      	subs	r3, #1
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	4413      	add	r3, r2
 800b554:	6a3a      	ldr	r2, [r7, #32]
 800b556:	429a      	cmp	r2, r3
 800b558:	d9ed      	bls.n	800b536 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	4798      	blx	r3
 800b564:	4603      	mov	r3, r0
 800b566:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b56a:	3320      	adds	r3, #32
 800b56c:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b56e:	e073      	b.n	800b658 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d008      	beq.n	800b58a <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	69d0      	ldr	r0, [r2, #28]
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	6a39      	ldr	r1, [r7, #32]
 800b584:	4798      	blx	r3
 800b586:	6278      	str	r0, [r7, #36]	; 0x24
 800b588:	e009      	b.n	800b59e <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	69d0      	ldr	r0, [r2, #28]
 800b592:	6a3a      	ldr	r2, [r7, #32]
 800b594:	6811      	ldr	r1, [r2, #0]
 800b596:	6a3a      	ldr	r2, [r7, #32]
 800b598:	6852      	ldr	r2, [r2, #4]
 800b59a:	4798      	blx	r3
 800b59c:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dd17      	ble.n	800b5d4 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	dd06      	ble.n	800b5be <sendMessageVector+0xfa>
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <sendMessageVector+0x1c8>)
 800b5b2:	4a31      	ldr	r2, [pc, #196]	; (800b678 <sendMessageVector+0x1b4>)
 800b5b4:	f240 3117 	movw	r1, #791	; 0x317
 800b5b8:	4830      	ldr	r0, [pc, #192]	; (800b67c <sendMessageVector+0x1b8>)
 800b5ba:	f006 fff7 	bl	80125ac <__assert_func>

            bytesSentOrError += sendResult;
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	4413      	add	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ca:	4798      	blx	r3
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	635a      	str	r2, [r3, #52]	; 0x34
 800b5d2:	e004      	b.n	800b5de <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	da01      	bge.n	800b5de <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e2:	4798      	blx	r3
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d93d      	bls.n	800b668 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b5ec:	e00b      	b.n	800b606 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	3b01      	subs	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b60c:	3b01      	subs	r3, #1
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	4413      	add	r3, r2
 800b614:	6a3a      	ldr	r2, [r7, #32]
 800b616:	429a      	cmp	r2, r3
 800b618:	d805      	bhi.n	800b626 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	4293      	cmp	r3, r2
 800b624:	dae3      	bge.n	800b5ee <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dd15      	ble.n	800b658 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b632:	3b01      	subs	r3, #1
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b63a:	6a3a      	ldr	r2, [r7, #32]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d80b      	bhi.n	800b658 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	441a      	add	r2, r3
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	1ad2      	subs	r2, r2, r3
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	da04      	bge.n	800b66a <sendMessageVector+0x1a6>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	da84      	bge.n	800b570 <sendMessageVector+0xac>
 800b666:	e000      	b.n	800b66a <sendMessageVector+0x1a6>
            break;
 800b668:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b66a:	697b      	ldr	r3, [r7, #20]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3728      	adds	r7, #40	; 0x28
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	08014c48 	.word	0x08014c48
 800b678:	080157e8 	.word	0x080157e8
 800b67c:	08014b6c 	.word	0x08014b6c
 800b680:	08014c5c 	.word	0x08014c5c
 800b684:	08014c6c 	.word	0x08014c6c
 800b688:	08014c88 	.word	0x08014c88
 800b68c:	08014cb4 	.word	0x08014cb4

0800b690 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <sendBuffer+0x28>
 800b6aa:	4b39      	ldr	r3, [pc, #228]	; (800b790 <sendBuffer+0x100>)
 800b6ac:	4a39      	ldr	r2, [pc, #228]	; (800b794 <sendBuffer+0x104>)
 800b6ae:	f240 3153 	movw	r1, #851	; 0x353
 800b6b2:	4839      	ldr	r0, [pc, #228]	; (800b798 <sendBuffer+0x108>)
 800b6b4:	f006 ff7a 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <sendBuffer+0x3e>
 800b6c0:	4b36      	ldr	r3, [pc, #216]	; (800b79c <sendBuffer+0x10c>)
 800b6c2:	4a34      	ldr	r2, [pc, #208]	; (800b794 <sendBuffer+0x104>)
 800b6c4:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b6c8:	4833      	ldr	r0, [pc, #204]	; (800b798 <sendBuffer+0x108>)
 800b6ca:	f006 ff6f 	bl	80125ac <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <sendBuffer+0x54>
 800b6d6:	4b32      	ldr	r3, [pc, #200]	; (800b7a0 <sendBuffer+0x110>)
 800b6d8:	4a2e      	ldr	r2, [pc, #184]	; (800b794 <sendBuffer+0x104>)
 800b6da:	f240 3155 	movw	r1, #853	; 0x355
 800b6de:	482e      	ldr	r0, [pc, #184]	; (800b798 <sendBuffer+0x108>)
 800b6e0:	f006 ff64 	bl	80125ac <__assert_func>
    assert( pIndex != NULL );
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <sendBuffer+0x68>
 800b6ea:	4b2e      	ldr	r3, [pc, #184]	; (800b7a4 <sendBuffer+0x114>)
 800b6ec:	4a29      	ldr	r2, [pc, #164]	; (800b794 <sendBuffer+0x104>)
 800b6ee:	f240 3156 	movw	r1, #854	; 0x356
 800b6f2:	4829      	ldr	r0, [pc, #164]	; (800b798 <sendBuffer+0x108>)
 800b6f4:	f006 ff5a 	bl	80125ac <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	4798      	blx	r3
 800b6fe:	4603      	mov	r3, r0
 800b700:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b704:	3320      	adds	r3, #32
 800b706:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b708:	e034      	b.n	800b774 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b712:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	1a8a      	subs	r2, r1, r2
 800b718:	69b9      	ldr	r1, [r7, #24]
 800b71a:	4798      	blx	r3
 800b71c:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dd1b      	ble.n	800b75c <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	dd06      	ble.n	800b73e <sendBuffer+0xae>
 800b730:	4b1d      	ldr	r3, [pc, #116]	; (800b7a8 <sendBuffer+0x118>)
 800b732:	4a18      	ldr	r2, [pc, #96]	; (800b794 <sendBuffer+0x104>)
 800b734:	f240 3165 	movw	r1, #869	; 0x365
 800b738:	4817      	ldr	r0, [pc, #92]	; (800b798 <sendBuffer+0x108>)
 800b73a:	f006 ff37 	bl	80125ac <__assert_func>

            bytesSentOrError += sendResult;
 800b73e:	69fa      	ldr	r2, [r7, #28]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	4413      	add	r3, r2
 800b744:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	4413      	add	r3, r2
 800b74c:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b752:	4798      	blx	r3
 800b754:	4602      	mov	r2, r0
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	635a      	str	r2, [r3, #52]	; 0x34
 800b75a:	e004      	b.n	800b766 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	da01      	bge.n	800b766 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76a:	4798      	blx	r3
 800b76c:	4602      	mov	r2, r0
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4293      	cmp	r3, r2
 800b772:	d907      	bls.n	800b784 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	429a      	cmp	r2, r3
 800b77a:	da04      	bge.n	800b786 <sendBuffer+0xf6>
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dac3      	bge.n	800b70a <sendBuffer+0x7a>
 800b782:	e000      	b.n	800b786 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b784:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	08014c48 	.word	0x08014c48
 800b794:	080157fc 	.word	0x080157fc
 800b798:	08014b6c 	.word	0x08014b6c
 800b79c:	08014c6c 	.word	0x08014c6c
 800b7a0:	08014c88 	.word	0x08014c88
 800b7a4:	08014cf4 	.word	0x08014cf4
 800b7a8:	08014cb4 	.word	0x08014cb4

0800b7ac <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
    return later - start;
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	1ad3      	subs	r3, r2, r3
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	2b62      	cmp	r3, #98	; 0x62
 800b7da:	d00c      	beq.n	800b7f6 <getAckFromPacketType+0x2e>
 800b7dc:	2b62      	cmp	r3, #98	; 0x62
 800b7de:	dc0d      	bgt.n	800b7fc <getAckFromPacketType+0x34>
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d002      	beq.n	800b7ea <getAckFromPacketType+0x22>
 800b7e4:	2b50      	cmp	r3, #80	; 0x50
 800b7e6:	d003      	beq.n	800b7f0 <getAckFromPacketType+0x28>
 800b7e8:	e008      	b.n	800b7fc <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
            break;
 800b7ee:	e012      	b.n	800b816 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	73fb      	strb	r3, [r7, #15]
            break;
 800b7f4:	e00f      	b.n	800b816 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	73fb      	strb	r3, [r7, #15]
            break;
 800b7fa:	e00c      	b.n	800b816 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	2b70      	cmp	r3, #112	; 0x70
 800b800:	d006      	beq.n	800b810 <getAckFromPacketType+0x48>
 800b802:	4b07      	ldr	r3, [pc, #28]	; (800b820 <getAckFromPacketType+0x58>)
 800b804:	4a07      	ldr	r2, [pc, #28]	; (800b824 <getAckFromPacketType+0x5c>)
 800b806:	f240 31a7 	movw	r1, #935	; 0x3a7
 800b80a:	4807      	ldr	r0, [pc, #28]	; (800b828 <getAckFromPacketType+0x60>)
 800b80c:	f006 fece 	bl	80125ac <__assert_func>
            ackType = MQTTPubcomp;
 800b810:	2303      	movs	r3, #3
 800b812:	73fb      	strb	r3, [r7, #15]
            break;
 800b814:	bf00      	nop
    }

    return ackType;
 800b816:	7bfb      	ldrb	r3, [r7, #15]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	08014d04 	.word	0x08014d04
 800b824:	08015808 	.word	0x08015808
 800b828:	08014b6c 	.word	0x08014b6c

0800b82c <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08c      	sub	sp, #48	; 0x30
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b83e:	2300      	movs	r3, #0
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	623b      	str	r3, [r7, #32]
 800b846:	2300      	movs	r3, #0
 800b848:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b852:	2300      	movs	r3, #0
 800b854:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <recvExact+0x3e>
 800b85c:	4b44      	ldr	r3, [pc, #272]	; (800b970 <recvExact+0x144>)
 800b85e:	4a45      	ldr	r2, [pc, #276]	; (800b974 <recvExact+0x148>)
 800b860:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b864:	4844      	ldr	r0, [pc, #272]	; (800b978 <recvExact+0x14c>)
 800b866:	f006 fea1 	bl	80125ac <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d906      	bls.n	800b882 <recvExact+0x56>
 800b874:	4b41      	ldr	r3, [pc, #260]	; (800b97c <recvExact+0x150>)
 800b876:	4a3f      	ldr	r2, [pc, #252]	; (800b974 <recvExact+0x148>)
 800b878:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b87c:	483e      	ldr	r0, [pc, #248]	; (800b978 <recvExact+0x14c>)
 800b87e:	f006 fe95 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <recvExact+0x6c>
 800b88a:	4b3d      	ldr	r3, [pc, #244]	; (800b980 <recvExact+0x154>)
 800b88c:	4a39      	ldr	r2, [pc, #228]	; (800b974 <recvExact+0x148>)
 800b88e:	f240 31be 	movw	r1, #958	; 0x3be
 800b892:	4839      	ldr	r0, [pc, #228]	; (800b978 <recvExact+0x14c>)
 800b894:	f006 fe8a 	bl	80125ac <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <recvExact+0x82>
 800b8a0:	4b38      	ldr	r3, [pc, #224]	; (800b984 <recvExact+0x158>)
 800b8a2:	4a34      	ldr	r2, [pc, #208]	; (800b974 <recvExact+0x148>)
 800b8a4:	f240 31bf 	movw	r1, #959	; 0x3bf
 800b8a8:	4833      	ldr	r0, [pc, #204]	; (800b978 <recvExact+0x14c>)
 800b8aa:	f006 fe7f 	bl	80125ac <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <recvExact+0x98>
 800b8b6:	4b34      	ldr	r3, [pc, #208]	; (800b988 <recvExact+0x15c>)
 800b8b8:	4a2e      	ldr	r2, [pc, #184]	; (800b974 <recvExact+0x148>)
 800b8ba:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800b8be:	482e      	ldr	r0, [pc, #184]	; (800b978 <recvExact+0x14c>)
 800b8c0:	f006 fe74 	bl	80125ac <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a1b      	ldr	r3, [r3, #32]
 800b8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	4798      	blx	r3
 800b8da:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b8dc:	e039      	b.n	800b952 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	69d8      	ldr	r0, [r3, #28]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e8:	4798      	blx	r3
 800b8ea:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	da04      	bge.n	800b8fc <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	77fb      	strb	r3, [r7, #31]
 800b8fa:	e02a      	b.n	800b952 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd1a      	ble.n	800b938 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	4798      	blx	r3
 800b906:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d206      	bcs.n	800b91e <recvExact+0xf2>
 800b910:	4b1e      	ldr	r3, [pc, #120]	; (800b98c <recvExact+0x160>)
 800b912:	4a18      	ldr	r2, [pc, #96]	; (800b974 <recvExact+0x148>)
 800b914:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800b918:	4817      	ldr	r0, [pc, #92]	; (800b978 <recvExact+0x14c>)
 800b91a:	f006 fe47 	bl	80125ac <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4413      	add	r3, r2
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b932:	4413      	add	r3, r2
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b936:	e00c      	b.n	800b952 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	4798      	blx	r3
 800b93c:	4603      	mov	r3, r0
 800b93e:	6a39      	ldr	r1, [r7, #32]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff ff33 	bl	800b7ac <calculateElapsedTime>
 800b946:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b09      	cmp	r3, #9
 800b94c:	d901      	bls.n	800b952 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b94e:	2301      	movs	r3, #1
 800b950:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <recvExact+0x138>
 800b958:	7ffb      	ldrb	r3, [r7, #31]
 800b95a:	f083 0301 	eor.w	r3, r3, #1
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1bc      	bne.n	800b8de <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b966:	4618      	mov	r0, r3
 800b968:	3730      	adds	r7, #48	; 0x30
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	08014c48 	.word	0x08014c48
 800b974:	08015820 	.word	0x08015820
 800b978:	08014b6c 	.word	0x08014b6c
 800b97c:	08014d2c 	.word	0x08014d2c
 800b980:	08014c6c 	.word	0x08014c6c
 800b984:	08014d58 	.word	0x08014d58
 800b988:	08014d84 	.word	0x08014d84
 800b98c:	08014dac 	.word	0x08014dac

0800b990 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b08c      	sub	sp, #48	; 0x30
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b99c:	2304      	movs	r3, #4
 800b99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <discardPacket+0x44>
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <discardPacket+0xf4>)
 800b9c8:	4a2f      	ldr	r2, [pc, #188]	; (800ba88 <discardPacket+0xf8>)
 800b9ca:	f240 410b 	movw	r1, #1035	; 0x40b
 800b9ce:	482f      	ldr	r0, [pc, #188]	; (800ba8c <discardPacket+0xfc>)
 800b9d0:	f006 fdec 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <discardPacket+0x5a>
 800b9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ba90 <discardPacket+0x100>)
 800b9de:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <discardPacket+0xf8>)
 800b9e0:	f240 410c 	movw	r1, #1036	; 0x40c
 800b9e4:	4829      	ldr	r0, [pc, #164]	; (800ba8c <discardPacket+0xfc>)
 800b9e6:	f006 fde1 	bl	80125ac <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	4798      	blx	r3
 800b9fa:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b9fc:	e029      	b.n	800ba52 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d903      	bls.n	800ba12 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800ba12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f7ff ff09 	bl	800b82c <recvExact>
 800ba1a:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	69fa      	ldr	r2, [r7, #28]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d003      	beq.n	800ba2c <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba2a:	e012      	b.n	800ba52 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba30:	4413      	add	r3, r2
 800ba32:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	4798      	blx	r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	69b9      	ldr	r1, [r7, #24]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff feb5 	bl	800b7ac <calculateElapsedTime>
 800ba42:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800ba52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d206      	bcs.n	800ba68 <discardPacket+0xd8>
 800ba5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba5e:	f083 0301 	eor.w	r3, r3, #1
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1ca      	bne.n	800b9fe <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800ba68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d102      	bne.n	800ba76 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800ba70:	2307      	movs	r3, #7
 800ba72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800ba76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3730      	adds	r7, #48	; 0x30
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	08014c48 	.word	0x08014c48
 800ba88:	0801582c 	.word	0x0801582c
 800ba8c:	08014b6c 	.word	0x08014b6c
 800ba90:	08014c6c 	.word	0x08014c6c

0800ba94 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	; 0x28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800ba9e:	2304      	movs	r3, #4
 800baa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800baa8:	2300      	movs	r3, #0
 800baaa:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800bab0:	2300      	movs	r3, #0
 800bab2:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <discardStoredPacket+0x38>
 800babe:	4b34      	ldr	r3, [pc, #208]	; (800bb90 <discardStoredPacket+0xfc>)
 800bac0:	4a34      	ldr	r2, [pc, #208]	; (800bb94 <discardStoredPacket+0x100>)
 800bac2:	f240 414b 	movw	r1, #1099	; 0x44b
 800bac6:	4834      	ldr	r0, [pc, #208]	; (800bb98 <discardStoredPacket+0x104>)
 800bac8:	f006 fd70 	bl	80125ac <__assert_func>
    assert( pPacketInfo != NULL );
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d106      	bne.n	800bae0 <discardStoredPacket+0x4c>
 800bad2:	4b32      	ldr	r3, [pc, #200]	; (800bb9c <discardStoredPacket+0x108>)
 800bad4:	4a2f      	ldr	r2, [pc, #188]	; (800bb94 <discardStoredPacket+0x100>)
 800bad6:	f240 414c 	movw	r1, #1100	; 0x44c
 800bada:	482f      	ldr	r0, [pc, #188]	; (800bb98 <discardStoredPacket+0x104>)
 800badc:	f006 fd66 	bl	80125ac <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d806      	bhi.n	800bb04 <discardStoredPacket+0x70>
 800baf6:	4b2a      	ldr	r3, [pc, #168]	; (800bba0 <discardStoredPacket+0x10c>)
 800baf8:	4a26      	ldr	r2, [pc, #152]	; (800bb94 <discardStoredPacket+0x100>)
 800bafa:	f240 4152 	movw	r1, #1106	; 0x452
 800bafe:	4826      	ldr	r0, [pc, #152]	; (800bb98 <discardStoredPacket+0x104>)
 800bb00:	f006 fd54 	bl	80125ac <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800bb14:	e019      	b.n	800bb4a <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	6a3a      	ldr	r2, [r7, #32]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d903      	bls.n	800bb2a <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800bb2a:	6a39      	ldr	r1, [r7, #32]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff fe7d 	bl	800b82c <recvExact>
 800bb32:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d002      	beq.n	800bb42 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	76fb      	strb	r3, [r7, #27]
 800bb40:	e003      	b.n	800bb4a <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d205      	bcs.n	800bb5e <discardStoredPacket+0xca>
 800bb52:	7efb      	ldrb	r3, [r7, #27]
 800bb54:	f083 0301 	eor.w	r3, r3, #1
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1db      	bne.n	800bb16 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d102      	bne.n	800bb6c <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800bb66:	2307      	movs	r3, #7
 800bb68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a18      	ldr	r0, [r3, #32]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	461a      	mov	r2, r3
 800bb76:	2100      	movs	r1, #0
 800bb78:	f006 fea3 	bl	80128c2 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800bb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3728      	adds	r7, #40	; 0x28
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	08014c48 	.word	0x08014c48
 800bb94:	0801583c 	.word	0x0801583c
 800bb98:	08014b6c 	.word	0x08014b6c
 800bb9c:	08014dd4 	.word	0x08014dd4
 800bba0:	08014de8 	.word	0x08014de8

0800bba4 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800bba4:	b084      	sub	sp, #16
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bbb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <receivePacket+0x32>
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <receivePacket+0x90>)
 800bbca:	4a1b      	ldr	r2, [pc, #108]	; (800bc38 <receivePacket+0x94>)
 800bbcc:	f240 418e 	movw	r1, #1166	; 0x48e
 800bbd0:	481a      	ldr	r0, [pc, #104]	; (800bc3c <receivePacket+0x98>)
 800bbd2:	f006 fceb 	bl	80125ac <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <receivePacket+0x48>
 800bbde:	4b18      	ldr	r3, [pc, #96]	; (800bc40 <receivePacket+0x9c>)
 800bbe0:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <receivePacket+0x94>)
 800bbe2:	f240 418f 	movw	r1, #1167	; 0x48f
 800bbe6:	4815      	ldr	r0, [pc, #84]	; (800bc3c <receivePacket+0x98>)
 800bbe8:	f006 fce0 	bl	80125ac <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800bbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d908      	bls.n	800bc08 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff fec7 	bl	800b990 <discardPacket>
 800bc02:	4603      	mov	r3, r0
 800bc04:	75fb      	strb	r3, [r7, #23]
 800bc06:	e00c      	b.n	800bc22 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800bc0c:	68f9      	ldr	r1, [r7, #12]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fe0c 	bl	800b82c <recvExact>
 800bc14:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d001      	beq.n	800bc22 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800bc1e:	2304      	movs	r3, #4
 800bc20:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800bc22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc2e:	b004      	add	sp, #16
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	08014c48 	.word	0x08014c48
 800bc38:	08015850 	.word	0x08015850
 800bc3c:	08014b6c 	.word	0x08014b6c
 800bc40:	08014d84 	.word	0x08014d84

0800bc44 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	3b02      	subs	r3, #2
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d816      	bhi.n	800bc88 <getAckTypeToSend+0x44>
 800bc5a:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <getAckTypeToSend+0x1c>)
 800bc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc60:	0800bc71 	.word	0x0800bc71
 800bc64:	0800bc77 	.word	0x0800bc77
 800bc68:	0800bc7d 	.word	0x0800bc7d
 800bc6c:	0800bc83 	.word	0x0800bc83
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800bc70:	2340      	movs	r3, #64	; 0x40
 800bc72:	73fb      	strb	r3, [r7, #15]
            break;
 800bc74:	e009      	b.n	800bc8a <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800bc76:	2350      	movs	r3, #80	; 0x50
 800bc78:	73fb      	strb	r3, [r7, #15]
            break;
 800bc7a:	e006      	b.n	800bc8a <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800bc7c:	2362      	movs	r3, #98	; 0x62
 800bc7e:	73fb      	strb	r3, [r7, #15]
            break;
 800bc80:	e003      	b.n	800bc8a <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800bc82:	2370      	movs	r3, #112	; 0x70
 800bc84:	73fb      	strb	r3, [r7, #15]
            break;
 800bc86:	e000      	b.n	800bc8a <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800bc88:	bf00      	nop
    }

    return packetTypeByte;
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08a      	sub	sp, #40	; 0x28
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	807b      	strh	r3, [r7, #2]
 800bca4:	4613      	mov	r3, r2
 800bca6:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800bcac:	2300      	movs	r3, #0
 800bcae:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800bcb8:	f107 0308 	add.w	r3, r7, #8
 800bcbc:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <sendPublishAcks+0x3e>
 800bcc8:	4b21      	ldr	r3, [pc, #132]	; (800bd50 <sendPublishAcks+0xb8>)
 800bcca:	4a22      	ldr	r2, [pc, #136]	; (800bd54 <sendPublishAcks+0xbc>)
 800bccc:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800bcd0:	4821      	ldr	r0, [pc, #132]	; (800bd58 <sendPublishAcks+0xc0>)
 800bcd2:	f006 fc6b 	bl	80125ac <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800bcd6:	787b      	ldrb	r3, [r7, #1]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff ffb3 	bl	800bc44 <getAckTypeToSend>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d02d      	beq.n	800bd44 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fd6c 	bl	800b7c8 <getAckFromPacketType>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800bcf4:	887a      	ldrh	r2, [r7, #2]
 800bcf6:	7df9      	ldrb	r1, [r7, #23]
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 f8f1 	bl	800dee4 <MQTT_SerializeAck>
 800bd02:	4603      	mov	r3, r0
 800bd04:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800bd06:	7ffb      	ldrb	r3, [r7, #31]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800bd0c:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800bd0e:	2204      	movs	r2, #4
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff fcbc 	bl	800b690 <sendBuffer>
 800bd18:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d10f      	bne.n	800bd40 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800bd28:	7dba      	ldrb	r2, [r7, #22]
 800bd2a:	8879      	ldrh	r1, [r7, #2]
 800bd2c:	f107 0315 	add.w	r3, r7, #21
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	2300      	movs	r3, #0
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f002 ffa1 	bl	800ec7c <MQTT_UpdateStateAck>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	77fb      	strb	r3, [r7, #31]
 800bd3e:	e001      	b.n	800bd44 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800bd40:	2303      	movs	r3, #3
 800bd42:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800bd44:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	08014c48 	.word	0x08014c48
 800bd54:	08015860 	.word	0x08015860
 800bd58:	08014b6c 	.word	0x08014b6c

0800bd5c <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800bd64:	2300      	movs	r3, #0
 800bd66:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <handleKeepAlive+0x28>
 800bd76:	4b33      	ldr	r3, [pc, #204]	; (800be44 <handleKeepAlive+0xe8>)
 800bd78:	4a33      	ldr	r2, [pc, #204]	; (800be48 <handleKeepAlive+0xec>)
 800bd7a:	f240 512e 	movw	r1, #1326	; 0x52e
 800bd7e:	4833      	ldr	r0, [pc, #204]	; (800be4c <handleKeepAlive+0xf0>)
 800bd80:	f006 fc14 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <handleKeepAlive+0x3e>
 800bd8c:	4b30      	ldr	r3, [pc, #192]	; (800be50 <handleKeepAlive+0xf4>)
 800bd8e:	4a2e      	ldr	r2, [pc, #184]	; (800be48 <handleKeepAlive+0xec>)
 800bd90:	f240 512f 	movw	r1, #1327	; 0x52f
 800bd94:	482d      	ldr	r0, [pc, #180]	; (800be4c <handleKeepAlive+0xf0>)
 800bd96:	f006 fc09 	bl	80125ac <__assert_func>

    now = pContext->getTime();
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	4798      	blx	r3
 800bda0:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bda8:	461a      	mov	r2, r3
 800bdaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdae:	fb02 f303 	mul.w	r3, r2, r3
 800bdb2:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f247 5230 	movw	r2, #30000	; 0x7530
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d902      	bls.n	800bdc4 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800bdbe:	f247 5330 	movw	r3, #30000	; 0x7530
 800bdc2:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00d      	beq.n	800bdea <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f7ff fce9 	bl	800b7ac <calculateElapsedTime>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d929      	bls.n	800be38 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800bde4:	230a      	movs	r3, #10
 800bde6:	75fb      	strb	r3, [r7, #23]
 800bde8:	e026      	b.n	800be38 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00f      	beq.n	800be10 <handleKeepAlive+0xb4>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff fcd8 	bl	800b7ac <calculateElapsedTime>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	4293      	cmp	r3, r2
 800be02:	d805      	bhi.n	800be10 <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 f8c7 	bl	800cf98 <MQTT_Ping>
 800be0a:	4603      	mov	r3, r0
 800be0c:	75fb      	strb	r3, [r7, #23]
 800be0e:	e013      	b.n	800be38 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be14:	4619      	mov	r1, r3
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fcc8 	bl	800b7ac <calculateElapsedTime>
 800be1c:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d009      	beq.n	800be38 <handleKeepAlive+0xdc>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f247 522f 	movw	r2, #29999	; 0x752f
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d904      	bls.n	800be38 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 f8b2 	bl	800cf98 <MQTT_Ping>
 800be34:	4603      	mov	r3, r0
 800be36:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800be38:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08014c48 	.word	0x08014c48
 800be48:	08015870 	.word	0x08015870
 800be4c:	08014b6c 	.word	0x08014b6c
 800be50:	08014c6c 	.word	0x08014c6c

0800be54 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08e      	sub	sp, #56	; 0x38
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800be64:	2300      	movs	r3, #0
 800be66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800be6e:	2300      	movs	r3, #0
 800be70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <handleIncomingPublish+0x34>
 800be7a:	4b43      	ldr	r3, [pc, #268]	; (800bf88 <handleIncomingPublish+0x134>)
 800be7c:	4a43      	ldr	r2, [pc, #268]	; (800bf8c <handleIncomingPublish+0x138>)
 800be7e:	f240 5164 	movw	r1, #1380	; 0x564
 800be82:	4843      	ldr	r0, [pc, #268]	; (800bf90 <handleIncomingPublish+0x13c>)
 800be84:	f006 fb92 	bl	80125ac <__assert_func>
    assert( pIncomingPacket != NULL );
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <handleIncomingPublish+0x48>
 800be8e:	4b41      	ldr	r3, [pc, #260]	; (800bf94 <handleIncomingPublish+0x140>)
 800be90:	4a3e      	ldr	r2, [pc, #248]	; (800bf8c <handleIncomingPublish+0x138>)
 800be92:	f240 5165 	movw	r1, #1381	; 0x565
 800be96:	483e      	ldr	r0, [pc, #248]	; (800bf90 <handleIncomingPublish+0x13c>)
 800be98:	f006 fb88 	bl	80125ac <__assert_func>
    assert( pContext->appCallback != NULL );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <handleIncomingPublish+0x5e>
 800bea4:	4b3c      	ldr	r3, [pc, #240]	; (800bf98 <handleIncomingPublish+0x144>)
 800bea6:	4a39      	ldr	r2, [pc, #228]	; (800bf8c <handleIncomingPublish+0x138>)
 800bea8:	f240 5166 	movw	r1, #1382	; 0x566
 800beac:	4838      	ldr	r0, [pc, #224]	; (800bf90 <handleIncomingPublish+0x13c>)
 800beae:	f006 fb7d 	bl	80125ac <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800beb2:	f107 0214 	add.w	r2, r7, #20
 800beb6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800beba:	4619      	mov	r1, r3
 800bebc:	6838      	ldr	r0, [r7, #0]
 800bebe:	f002 f8a8 	bl	800e012 <MQTT_DeserializePublish>
 800bec2:	4603      	mov	r3, r0
 800bec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800bec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800becc:	2b00      	cmp	r3, #0
 800bece:	d109      	bne.n	800bee4 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d105      	bne.n	800bee4 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800bed8:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800bede:	2304      	movs	r3, #4
 800bee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800bee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d122      	bne.n	800bf32 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800beec:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800beee:	7d3a      	ldrb	r2, [r7, #20]
 800bef0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	4613      	mov	r3, r2
 800bef8:	2201      	movs	r2, #1
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f002 fe4b 	bl	800eb96 <MQTT_UpdateStatePublish>
 800bf00:	4603      	mov	r3, r0
 800bf02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800bf06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d011      	beq.n	800bf32 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800bf0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf12:	2b09      	cmp	r3, #9
 800bf14:	d10d      	bne.n	800bf32 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800bf16:	2300      	movs	r3, #0
 800bf18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800bf22:	7d3b      	ldrb	r3, [r7, #20]
 800bf24:	4619      	mov	r1, r3
 800bf26:	2001      	movs	r0, #1
 800bf28:	f002 fe06 	bl	800eb38 <MQTT_CalculateStatePublish>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d11f      	bne.n	800bf7a <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bf3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf3c:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800bf3e:	f107 0314 	add.w	r3, r7, #20
 800bf42:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800bf44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf48:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800bf4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bf4e:	f083 0301 	eor.w	r3, r3, #1
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d006      	beq.n	800bf66 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5c:	f107 0208 	add.w	r2, r7, #8
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800bf66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf68:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff fe92 	bl	800bc98 <sendPublishAcks>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bf7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3730      	adds	r7, #48	; 0x30
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	08014c48 	.word	0x08014c48
 800bf8c:	08015880 	.word	0x08015880
 800bf90:	08014b6c 	.word	0x08014b6c
 800bf94:	08014e18 	.word	0x08014e18
 800bf98:	08014e30 	.word	0x08014e30

0800bf9c <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b08a      	sub	sp, #40	; 0x28
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800bfa6:	2305      	movs	r3, #5
 800bfa8:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <handlePublishAcks+0x26>
 800bfb4:	4b2c      	ldr	r3, [pc, #176]	; (800c068 <handlePublishAcks+0xcc>)
 800bfb6:	4a2d      	ldr	r2, [pc, #180]	; (800c06c <handlePublishAcks+0xd0>)
 800bfb8:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800bfbc:	482c      	ldr	r0, [pc, #176]	; (800c070 <handlePublishAcks+0xd4>)
 800bfbe:	f006 faf5 	bl	80125ac <__assert_func>
    assert( pIncomingPacket != NULL );
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <handlePublishAcks+0x3a>
 800bfc8:	4b2a      	ldr	r3, [pc, #168]	; (800c074 <handlePublishAcks+0xd8>)
 800bfca:	4a28      	ldr	r2, [pc, #160]	; (800c06c <handlePublishAcks+0xd0>)
 800bfcc:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800bfd0:	4827      	ldr	r0, [pc, #156]	; (800c070 <handlePublishAcks+0xd4>)
 800bfd2:	f006 faeb 	bl	80125ac <__assert_func>
    assert( pContext->appCallback != NULL );
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d106      	bne.n	800bfec <handlePublishAcks+0x50>
 800bfde:	4b26      	ldr	r3, [pc, #152]	; (800c078 <handlePublishAcks+0xdc>)
 800bfe0:	4a22      	ldr	r2, [pc, #136]	; (800c06c <handlePublishAcks+0xd0>)
 800bfe2:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800bfe6:	4822      	ldr	r0, [pc, #136]	; (800c070 <handlePublishAcks+0xd4>)
 800bfe8:	f006 fae0 	bl	80125ac <__assert_func>

    appCallback = pContext->appCallback;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff0:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff fbe6 	bl	800b7c8 <getAckFromPacketType>
 800bffc:	4603      	mov	r3, r0
 800bffe:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800c000:	f107 0314 	add.w	r3, r7, #20
 800c004:	2200      	movs	r2, #0
 800c006:	4619      	mov	r1, r3
 800c008:	6838      	ldr	r0, [r7, #0]
 800c00a:	f002 f832 	bl	800e072 <MQTT_DeserializeAck>
 800c00e:	4603      	mov	r3, r0
 800c010:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800c012:	7ffb      	ldrb	r3, [r7, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800c018:	8ab9      	ldrh	r1, [r7, #20]
 800c01a:	7dfa      	ldrb	r2, [r7, #23]
 800c01c:	f107 0316 	add.w	r3, r7, #22
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	2301      	movs	r3, #1
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f002 fe29 	bl	800ec7c <MQTT_UpdateStateAck>
 800c02a:	4603      	mov	r3, r0
 800c02c:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d113      	bne.n	800c05c <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800c034:	8abb      	ldrh	r3, [r7, #20]
 800c036:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800c038:	7ffb      	ldrb	r3, [r7, #31]
 800c03a:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800c040:	f107 0208 	add.w	r2, r7, #8
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800c04c:	8abb      	ldrh	r3, [r7, #20]
 800c04e:	7dba      	ldrb	r2, [r7, #22]
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff fe20 	bl	800bc98 <sendPublishAcks>
 800c058:	4603      	mov	r3, r0
 800c05a:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800c05c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3720      	adds	r7, #32
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	08014c48 	.word	0x08014c48
 800c06c:	08015898 	.word	0x08015898
 800c070:	08014b6c 	.word	0x08014b6c
 800c074:	08014e18 	.word	0x08014e18
 800c078:	08014e30 	.word	0x08014e30

0800c07c <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08a      	sub	sp, #40	; 0x28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	4613      	mov	r3, r2
 800c088:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800c08a:	2305      	movs	r3, #5
 800c08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800c090:	2300      	movs	r3, #0
 800c092:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800c094:	2300      	movs	r3, #0
 800c096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <handleIncomingAck+0x36>
 800c0a4:	4b54      	ldr	r3, [pc, #336]	; (800c1f8 <handleIncomingAck+0x17c>)
 800c0a6:	4a55      	ldr	r2, [pc, #340]	; (800c1fc <handleIncomingAck+0x180>)
 800c0a8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800c0ac:	4854      	ldr	r0, [pc, #336]	; (800c200 <handleIncomingAck+0x184>)
 800c0ae:	f006 fa7d 	bl	80125ac <__assert_func>
    assert( pIncomingPacket != NULL );
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <handleIncomingAck+0x4a>
 800c0b8:	4b52      	ldr	r3, [pc, #328]	; (800c204 <handleIncomingAck+0x188>)
 800c0ba:	4a50      	ldr	r2, [pc, #320]	; (800c1fc <handleIncomingAck+0x180>)
 800c0bc:	f240 6131 	movw	r1, #1585	; 0x631
 800c0c0:	484f      	ldr	r0, [pc, #316]	; (800c200 <handleIncomingAck+0x184>)
 800c0c2:	f006 fa73 	bl	80125ac <__assert_func>
    assert( pContext->appCallback != NULL );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <handleIncomingAck+0x60>
 800c0ce:	4b4e      	ldr	r3, [pc, #312]	; (800c208 <handleIncomingAck+0x18c>)
 800c0d0:	4a4a      	ldr	r2, [pc, #296]	; (800c1fc <handleIncomingAck+0x180>)
 800c0d2:	f240 6132 	movw	r1, #1586	; 0x632
 800c0d6:	484a      	ldr	r0, [pc, #296]	; (800c200 <handleIncomingAck+0x184>)
 800c0d8:	f006 fa68 	bl	80125ac <__assert_func>

    appCallback = pContext->appCallback;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e0:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	2bd0      	cmp	r3, #208	; 0xd0
 800c0e8:	d01d      	beq.n	800c126 <handleIncomingAck+0xaa>
 800c0ea:	2bd0      	cmp	r3, #208	; 0xd0
 800c0ec:	dc64      	bgt.n	800c1b8 <handleIncomingAck+0x13c>
 800c0ee:	2bb0      	cmp	r3, #176	; 0xb0
 800c0f0:	d044      	beq.n	800c17c <handleIncomingAck+0x100>
 800c0f2:	2bb0      	cmp	r3, #176	; 0xb0
 800c0f4:	dc60      	bgt.n	800c1b8 <handleIncomingAck+0x13c>
 800c0f6:	2b90      	cmp	r3, #144	; 0x90
 800c0f8:	d040      	beq.n	800c17c <handleIncomingAck+0x100>
 800c0fa:	2b90      	cmp	r3, #144	; 0x90
 800c0fc:	dc5c      	bgt.n	800c1b8 <handleIncomingAck+0x13c>
 800c0fe:	2b70      	cmp	r3, #112	; 0x70
 800c100:	d009      	beq.n	800c116 <handleIncomingAck+0x9a>
 800c102:	2b70      	cmp	r3, #112	; 0x70
 800c104:	dc58      	bgt.n	800c1b8 <handleIncomingAck+0x13c>
 800c106:	2b62      	cmp	r3, #98	; 0x62
 800c108:	d005      	beq.n	800c116 <handleIncomingAck+0x9a>
 800c10a:	2b62      	cmp	r3, #98	; 0x62
 800c10c:	dc54      	bgt.n	800c1b8 <handleIncomingAck+0x13c>
 800c10e:	2b40      	cmp	r3, #64	; 0x40
 800c110:	d001      	beq.n	800c116 <handleIncomingAck+0x9a>
 800c112:	2b50      	cmp	r3, #80	; 0x50
 800c114:	d150      	bne.n	800c1b8 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff ff3f 	bl	800bf9c <handlePublishAcks>
 800c11e:	4603      	mov	r3, r0
 800c120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800c124:	e04d      	b.n	800c1c2 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800c126:	f107 031e 	add.w	r3, r7, #30
 800c12a:	2200      	movs	r2, #0
 800c12c:	4619      	mov	r1, r3
 800c12e:	68b8      	ldr	r0, [r7, #8]
 800c130:	f001 ff9f 	bl	800e072 <MQTT_DeserializeAck>
 800c134:	4603      	mov	r3, r0
 800c136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800c13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d107      	bne.n	800c152 <handleIncomingAck+0xd6>
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	f083 0301 	eor.w	r3, r3, #1
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <handleIncomingAck+0xd6>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <handleIncomingAck+0xd8>
 800c152:	2300      	movs	r3, #0
 800c154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d129      	bne.n	800c1c0 <handleIncomingAck+0x144>
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d026      	beq.n	800c1c0 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800c17a:	e021      	b.n	800c1c0 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800c17c:	f107 031e 	add.w	r3, r7, #30
 800c180:	2200      	movs	r2, #0
 800c182:	4619      	mov	r1, r3
 800c184:	68b8      	ldr	r0, [r7, #8]
 800c186:	f001 ff74 	bl	800e072 <MQTT_DeserializeAck>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800c190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c194:	2b00      	cmp	r3, #0
 800c196:	d003      	beq.n	800c1a0 <handleIncomingAck+0x124>
 800c198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c19c:	2b06      	cmp	r3, #6
 800c19e:	d101      	bne.n	800c1a4 <handleIncomingAck+0x128>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <handleIncomingAck+0x12a>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800c1b6:	e004      	b.n	800c1c2 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800c1b8:	2305      	movs	r3, #5
 800c1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c1be:	e000      	b.n	800c1c2 <handleIncomingAck+0x146>
            break;
 800c1c0:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800c1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00f      	beq.n	800c1ea <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800c1ca:	8bfb      	ldrh	r3, [r7, #30]
 800c1cc:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800c1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d2:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800c1d8:	f107 0210 	add.w	r2, r7, #16
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3728      	adds	r7, #40	; 0x28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	08014c48 	.word	0x08014c48
 800c1fc:	080158ac 	.word	0x080158ac
 800c200:	08014b6c 	.word	0x08014b6c
 800c204:	08014e18 	.word	0x08014e18
 800c208:	08014e30 	.word	0x08014e30

0800c20c <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b08b      	sub	sp, #44	; 0x2c
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c218:	2300      	movs	r3, #0
 800c21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	605a      	str	r2, [r3, #4]
 800c228:	609a      	str	r2, [r3, #8]
 800c22a:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <receiveSingleIteration+0x38>
 800c236:	4b67      	ldr	r3, [pc, #412]	; (800c3d4 <receiveSingleIteration+0x1c8>)
 800c238:	4a67      	ldr	r2, [pc, #412]	; (800c3d8 <receiveSingleIteration+0x1cc>)
 800c23a:	f240 6176 	movw	r1, #1654	; 0x676
 800c23e:	4867      	ldr	r0, [pc, #412]	; (800c3dc <receiveSingleIteration+0x1d0>)
 800c240:	f006 f9b4 	bl	80125ac <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d106      	bne.n	800c25a <receiveSingleIteration+0x4e>
 800c24c:	4b64      	ldr	r3, [pc, #400]	; (800c3e0 <receiveSingleIteration+0x1d4>)
 800c24e:	4a62      	ldr	r2, [pc, #392]	; (800c3d8 <receiveSingleIteration+0x1cc>)
 800c250:	f240 6177 	movw	r1, #1655	; 0x677
 800c254:	4861      	ldr	r0, [pc, #388]	; (800c3dc <receiveSingleIteration+0x1d0>)
 800c256:	f006 f9a9 	bl	80125ac <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6a11      	ldr	r1, [r2, #32]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c26a:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800c274:	1a8a      	subs	r2, r1, r2
 800c276:	4621      	mov	r1, r4
 800c278:	4798      	blx	r3
 800c27a:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da03      	bge.n	800c28a <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800c282:	2304      	movs	r3, #4
 800c284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c288:	e020      	b.n	800c2cc <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d107      	bne.n	800c2a0 <receiveSingleIteration+0x94>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d103      	bne.n	800c2a0 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800c298:	2307      	movs	r3, #7
 800c29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c29e:	e015      	b.n	800c2cc <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	441a      	add	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800c2b4:	f107 0208 	add.w	r2, r7, #8
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f001 ff93 	bl	800e1e4 <MQTT_ProcessIncomingPacketTypeAndLength>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d112      	bne.n	800c2f8 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800c2d2:	78fb      	ldrb	r3, [r7, #3]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00f      	beq.n	800c2f8 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800c2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2dc:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fd3c 	bl	800bd5c <handleKeepAlive>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800c2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800c2f2:	7efb      	ldrb	r3, [r7, #27]
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2fc:	2b0b      	cmp	r3, #11
 800c2fe:	d01e      	beq.n	800c33e <receiveSingleIteration+0x132>
 800c300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c304:	2b07      	cmp	r3, #7
 800c306:	d01a      	beq.n	800c33e <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800c308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d116      	bne.n	800c33e <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	6a3a      	ldr	r2, [r7, #32]
 800c316:	429a      	cmp	r2, r3
 800c318:	d909      	bls.n	800c32e <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff fbb7 	bl	800ba94 <discardStoredPacket>
 800c326:	4603      	mov	r3, r0
 800c328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c32c:	e007      	b.n	800c33e <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c332:	6a3a      	ldr	r2, [r7, #32]
 800c334:	429a      	cmp	r2, r3
 800c336:	d902      	bls.n	800c33e <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800c338:	230b      	movs	r3, #11
 800c33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800c33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c342:	2b00      	cmp	r3, #0
 800c344:	d138      	bne.n	800c3b8 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1a      	ldr	r2, [r3, #32]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	4413      	add	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800c350:	7a3b      	ldrb	r3, [r7, #8]
 800c352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c356:	2b30      	cmp	r3, #48	; 0x30
 800c358:	d109      	bne.n	800c36e <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800c35a:	f107 0308 	add.w	r3, r7, #8
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff fd77 	bl	800be54 <handleIncomingPublish>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c36c:	e009      	b.n	800c382 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	f107 0308 	add.w	r3, r7, #8
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fe80 	bl	800c07c <handleIncomingAck>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	1ad2      	subs	r2, r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1a      	ldr	r2, [r3, #32]
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f006 fa75 	bl	801288e <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800c3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d105      	bne.n	800c3b8 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	4798      	blx	r3
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800c3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d102      	bne.n	800c3c6 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	372c      	adds	r7, #44	; 0x2c
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd90      	pop	{r4, r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	08014c48 	.word	0x08014c48
 800c3d8:	080158c0 	.word	0x080158c0
 800c3dc:	08014b6c 	.word	0x08014b6c
 800c3e0:	08014d84 	.word	0x08014d84

0800c3e4 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <validateSubscribeUnsubscribeParams+0x1e>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800c402:	2301      	movs	r3, #1
 800c404:	75fb      	strb	r3, [r7, #23]
 800c406:	e020      	b.n	800c44a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800c40e:	2301      	movs	r3, #1
 800c410:	75fb      	strb	r3, [r7, #23]
 800c412:	e01a      	b.n	800c44a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800c414:	887b      	ldrh	r3, [r7, #2]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d102      	bne.n	800c420 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800c41a:	2301      	movs	r3, #1
 800c41c:	75fb      	strb	r3, [r7, #23]
 800c41e:	e014      	b.n	800c44a <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d110      	bne.n	800c44a <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c428:	2300      	movs	r3, #0
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	e009      	b.n	800c442 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800c436:	2301      	movs	r3, #1
 800c438:	75fb      	strb	r3, [r7, #23]
                    break;
 800c43a:	e006      	b.n	800c44a <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	3301      	adds	r3, #1
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d3f1      	bcc.n	800c42e <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	371c      	adds	r7, #28
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	4613      	mov	r3, r2
 800c466:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800c468:	2300      	movs	r3, #0
 800c46a:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800c46c:	2302      	movs	r3, #2
 800c46e:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bf0c      	ite	eq
 800c47e:	2301      	moveq	r3, #1
 800c480:	2300      	movne	r3, #0
 800c482:	b2da      	uxtb	r2, r3
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bf14      	ite	ne
 800c48a:	2301      	movne	r3, #1
 800c48c:	2300      	moveq	r3, #0
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	4053      	eors	r3, r2
 800c492:	b2db      	uxtb	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <addEncodedStringToVector+0x4e>
 800c498:	4b1e      	ldr	r3, [pc, #120]	; (800c514 <addEncodedStringToVector+0xbc>)
 800c49a:	4a1f      	ldr	r2, [pc, #124]	; (800c518 <addEncodedStringToVector+0xc0>)
 800c49c:	f240 7139 	movw	r1, #1849	; 0x739
 800c4a0:	481e      	ldr	r0, [pc, #120]	; (800c51c <addEncodedStringToVector+0xc4>)
 800c4a2:	f006 f883 	bl	80125ac <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800c4a6:	88fb      	ldrh	r3, [r7, #6]
 800c4a8:	0a1b      	lsrs	r3, r3, #8
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	88fa      	ldrh	r2, [r7, #6]
 800c4b8:	b2d2      	uxtb	r2, r2
 800c4ba:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d011      	beq.n	800c4fc <addEncodedStringToVector+0xa4>
 800c4d8:	88fb      	ldrh	r3, [r7, #6]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00e      	beq.n	800c4fc <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	88fa      	ldrh	r2, [r7, #6]
 800c4ec:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800c4f4:	88fb      	ldrh	r3, [r7, #6]
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	441a      	add	r2, r3
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800c508:	69bb      	ldr	r3, [r7, #24]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	08014e50 	.word	0x08014e50
 800c518:	080158d8 	.word	0x080158d8
 800c51c:	08014b6c 	.word	0x08014b6c

0800c520 <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b09c      	sub	sp, #112	; 0x70
 800c524:	af02      	add	r7, sp, #8
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c52e:	2300      	movs	r3, #0
 800c530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800c540:	2303      	movs	r3, #3
 800c542:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800c544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c546:	2b04      	cmp	r3, #4
 800c548:	d906      	bls.n	800c558 <sendSubscribeWithoutCopy+0x38>
 800c54a:	4b4f      	ldr	r3, [pc, #316]	; (800c688 <sendSubscribeWithoutCopy+0x168>)
 800c54c:	4a4f      	ldr	r2, [pc, #316]	; (800c68c <sendSubscribeWithoutCopy+0x16c>)
 800c54e:	f240 716c 	movw	r1, #1900	; 0x76c
 800c552:	484f      	ldr	r0, [pc, #316]	; (800c690 <sendSubscribeWithoutCopy+0x170>)
 800c554:	f006 f82a 	bl	80125ac <__assert_func>

    pIndex = subscribeheader;
 800c558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c55c:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800c55e:	f107 0320 	add.w	r3, r7, #32
 800c562:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800c564:	887b      	ldrh	r3, [r7, #2]
 800c566:	461a      	mov	r2, r3
 800c568:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c56a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c56c:	f001 fc62 	bl	800de34 <MQTT_SerializeSubscribeHeader>
 800c570:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800c572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c574:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c578:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800c57a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c57e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	461a      	mov	r2, r3
 800c584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c586:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800c588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	4413      	add	r3, r2
 800c590:	617b      	str	r3, [r7, #20]
    pIterator++;
 800c592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c594:	3308      	adds	r3, #8
 800c596:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800c598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c59a:	3301      	adds	r3, #1
 800c59c:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c59e:	e065      	b.n	800c66c <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c5a4:	e043      	b.n	800c62e <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c5a6:	f107 0218 	add.w	r2, r7, #24
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800c5b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c5c0:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800c5c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c5d2:	891a      	ldrh	r2, [r3, #8]
 800c5d4:	f107 0314 	add.w	r3, r7, #20
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5dc:	f7ff ff3c 	bl	800c458 <addEncodedStringToVector>
 800c5e0:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5e8:	4413      	add	r3, r2
 800c5ea:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800c5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c600:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800c602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c604:	2201      	movs	r2, #1
 800c606:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800c608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	4413      	add	r3, r2
 800c610:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800c612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c614:	3308      	adds	r3, #8
 800c616:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800c618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c61a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c61c:	4413      	add	r3, r2
 800c61e:	3301      	adds	r3, #1
 800c620:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800c622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c624:	3301      	adds	r3, #1
 800c626:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800c628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c62a:	3301      	adds	r3, #1
 800c62c:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c630:	f1c3 0304 	rsb	r3, r3, #4
 800c634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c636:	429a      	cmp	r2, r3
 800c638:	d803      	bhi.n	800c642 <sendSubscribeWithoutCopy+0x122>
 800c63a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d3b1      	bcc.n	800c5a6 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800c642:	f107 0320 	add.w	r3, r7, #32
 800c646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c648:	4619      	mov	r1, r3
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7fe ff3a 	bl	800b4c4 <sendMessageVector>
 800c650:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800c652:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800c654:	4293      	cmp	r3, r2
 800c656:	d002      	beq.n	800c65e <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800c658:	2303      	movs	r3, #3
 800c65a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800c65e:	f107 0320 	add.w	r3, r7, #32
 800c662:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c66c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <sendSubscribeWithoutCopy+0x15c>
 800c674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d391      	bcc.n	800c5a0 <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800c67c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c680:	4618      	mov	r0, r3
 800c682:	3768      	adds	r7, #104	; 0x68
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	08014e78 	.word	0x08014e78
 800c68c:	080158f4 	.word	0x080158f4
 800c690:	08014b6c 	.word	0x08014b6c

0800c694 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b092      	sub	sp, #72	; 0x48
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	891b      	ldrh	r3, [r3, #8]
 800c6c2:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	891b      	ldrh	r3, [r3, #8]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6cc:	4413      	add	r3, r2
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d021      	beq.n	800c720 <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800c6dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c6e0:	0a1b      	lsrs	r3, r3, #8
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800c6ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800c6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	3348      	adds	r3, #72	; 0x48
 800c6fa:	443b      	add	r3, r7
 800c6fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c700:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800c704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	3348      	adds	r3, #72	; 0x48
 800c70a:	443b      	add	r3, r7
 800c70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70e:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c714:	3301      	adds	r3, #1
 800c716:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800c718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	4413      	add	r3, r2
 800c71e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d017      	beq.n	800c758 <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	3348      	adds	r3, #72	; 0x48
 800c732:	443b      	add	r3, r7
 800c734:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691a      	ldr	r2, [r3, #16]
 800c73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	3348      	adds	r3, #72	; 0x48
 800c742:	443b      	add	r3, r7
 800c744:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c74a:	3301      	adds	r3, #1
 800c74c:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c754:	4413      	add	r3, r2
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800c758:	f107 0314 	add.w	r3, r7, #20
 800c75c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c75e:	4619      	mov	r1, r3
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7fe feaf 	bl	800b4c4 <sendMessageVector>
 800c766:	4602      	mov	r2, r0
 800c768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d002      	beq.n	800c774 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800c76e:	2303      	movs	r3, #3
 800c770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800c774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3748      	adds	r7, #72	; 0x48
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b0ac      	sub	sp, #176	; 0xb0
 800c784:	af02      	add	r7, sp, #8
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c78e:	2300      	movs	r3, #0
 800c790:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800c7a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c7a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800c7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d007      	beq.n	800c7c6 <sendConnectWithoutCopy+0x46>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d103      	bne.n	800c7c6 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800c7c4:	e0ec      	b.n	800c9a0 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c7d0:	f001 fa22 	bl	800dc18 <MQTT_SerializeConnectFixedHeader>
 800c7d4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800c7d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c7dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	2b0f      	cmp	r3, #15
 800c7e4:	dd06      	ble.n	800c7f4 <sendConnectWithoutCopy+0x74>
 800c7e6:	4b71      	ldr	r3, [pc, #452]	; (800c9ac <sendConnectWithoutCopy+0x22c>)
 800c7e8:	4a71      	ldr	r2, [pc, #452]	; (800c9b0 <sendConnectWithoutCopy+0x230>)
 800c7ea:	f640 0172 	movw	r1, #2162	; 0x872
 800c7ee:	4871      	ldr	r0, [pc, #452]	; (800c9b4 <sendConnectWithoutCopy+0x234>)
 800c7f0:	f005 fedc 	bl	80125ac <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800c7f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7f8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800c7fc:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800c7fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c802:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c80e:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800c810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c81a:	4413      	add	r3, r2
 800c81c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800c820:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c824:	3308      	adds	r3, #8
 800c826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800c82a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c82e:	3301      	adds	r3, #1
 800c830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	6859      	ldr	r1, [r3, #4]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	891a      	ldrh	r2, [r3, #8]
 800c83c:	f107 0020 	add.w	r0, r7, #32
 800c840:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c84a:	f7ff fe05 	bl	800c458 <addEncodedStringToVector>
 800c84e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800c852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c85c:	4413      	add	r3, r2
 800c85e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800c862:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c86a:	4413      	add	r3, r2
 800c86c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d03c      	beq.n	800c8f0 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6859      	ldr	r1, [r3, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	891a      	ldrh	r2, [r3, #8]
 800c87e:	f107 001c 	add.w	r0, r7, #28
 800c882:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c88c:	f7ff fde4 	bl	800c458 <addEncodedStringToVector>
 800c890:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c89e:	4413      	add	r3, r2
 800c8a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c8a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c8a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	f107 0018 	add.w	r0, r7, #24
 800c8c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8ca:	f7ff fdc5 	bl	800c458 <addEncodedStringToVector>
 800c8ce:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c8d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c8dc:	4413      	add	r3, r2
 800c8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c8e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c8e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d01d      	beq.n	800c934 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	68d9      	ldr	r1, [r3, #12]
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	8a1a      	ldrh	r2, [r3, #16]
 800c900:	f107 0014 	add.w	r0, r7, #20
 800c904:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c90e:	f7ff fda3 	bl	800c458 <addEncodedStringToVector>
 800c912:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c920:	4413      	add	r3, r2
 800c922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c926:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c92a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c92e:	4413      	add	r3, r2
 800c930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01d      	beq.n	800c978 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	6959      	ldr	r1, [r3, #20]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	8b1a      	ldrh	r2, [r3, #24]
 800c944:	f107 0010 	add.w	r0, r7, #16
 800c948:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c952:	f7ff fd81 	bl	800c458 <addEncodedStringToVector>
 800c956:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c95a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c964:	4413      	add	r3, r2
 800c966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c96a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c96e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c972:	4413      	add	r3, r2
 800c974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800c978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c97c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c980:	4619      	mov	r1, r3
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7fe fd9e 	bl	800b4c4 <sendMessageVector>
 800c988:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800c98c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c990:	461a      	mov	r2, r3
 800c992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c996:	4293      	cmp	r3, r2
 800c998:	d002      	beq.n	800c9a0 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800c99a:	2303      	movs	r3, #3
 800c99c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800c9a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	37a8      	adds	r7, #168	; 0xa8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	08014ef0 	.word	0x08014ef0
 800c9b0:	08015910 	.word	0x08015910
 800c9b4:	08014b6c 	.word	0x08014b6c

0800c9b8 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08c      	sub	sp, #48	; 0x30
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	603b      	str	r3, [r7, #0]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	623b      	str	r3, [r7, #32]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <receiveConnack+0x42>
 800c9ec:	4b4e      	ldr	r3, [pc, #312]	; (800cb28 <receiveConnack+0x170>)
 800c9ee:	4a4f      	ldr	r2, [pc, #316]	; (800cb2c <receiveConnack+0x174>)
 800c9f0:	f640 01da 	movw	r1, #2266	; 0x8da
 800c9f4:	484e      	ldr	r0, [pc, #312]	; (800cb30 <receiveConnack+0x178>)
 800c9f6:	f005 fdd9 	bl	80125ac <__assert_func>
    assert( pIncomingPacket != NULL );
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d106      	bne.n	800ca0e <receiveConnack+0x56>
 800ca00:	4b4c      	ldr	r3, [pc, #304]	; (800cb34 <receiveConnack+0x17c>)
 800ca02:	4a4a      	ldr	r2, [pc, #296]	; (800cb2c <receiveConnack+0x174>)
 800ca04:	f640 01db 	movw	r1, #2267	; 0x8db
 800ca08:	4849      	ldr	r0, [pc, #292]	; (800cb30 <receiveConnack+0x178>)
 800ca0a:	f005 fdcf 	bl	80125ac <__assert_func>
    assert( pContext->getTime != NULL );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <receiveConnack+0x6c>
 800ca16:	4b48      	ldr	r3, [pc, #288]	; (800cb38 <receiveConnack+0x180>)
 800ca18:	4a44      	ldr	r2, [pc, #272]	; (800cb2c <receiveConnack+0x174>)
 800ca1a:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800ca1e:	4844      	ldr	r0, [pc, #272]	; (800cb30 <receiveConnack+0x178>)
 800ca20:	f005 fdc4 	bl	80125ac <__assert_func>

    getTimeStamp = pContext->getTime;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	4798      	blx	r3
 800ca2e:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6918      	ldr	r0, [r3, #16]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	69db      	ldr	r3, [r3, #28]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f001 fb8c 	bl	800e158 <MQTT_GetIncomingPacketTypeAndLength>
 800ca40:	4603      	mov	r3, r0
 800ca42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00e      	beq.n	800ca6a <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	4798      	blx	r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	6979      	ldr	r1, [r7, #20]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fe fea9 	bl	800b7ac <calculateElapsedTime>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	bf94      	ite	ls
 800ca62:	2301      	movls	r3, #1
 800ca64:	2300      	movhi	r3, #0
 800ca66:	77fb      	strb	r3, [r7, #31]
 800ca68:	e008      	b.n	800ca7c <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800ca6a:	8bbb      	ldrh	r3, [r7, #28]
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	bf8c      	ite	hi
 800ca70:	2301      	movhi	r3, #1
 800ca72:	2300      	movls	r3, #0
 800ca74:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800ca76:	8bbb      	ldrh	r3, [r7, #28]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800ca7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca80:	2b07      	cmp	r3, #7
 800ca82:	d105      	bne.n	800ca90 <receiveConnack+0xd8>
 800ca84:	7ffb      	ldrb	r3, [r7, #31]
 800ca86:	f083 0301 	eor.w	r3, r3, #1
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1cf      	bne.n	800ca30 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d123      	bne.n	800cae0 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	4798      	blx	r3
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	6979      	ldr	r1, [r7, #20]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fe83 	bl	800b7ac <calculateElapsedTime>
 800caa6:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	d203      	bcs.n	800cab8 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	d10c      	bne.n	800cada <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6a3a      	ldr	r2, [r7, #32]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	68da      	ldr	r2, [r3, #12]
 800cac8:	9200      	str	r2, [sp, #0]
 800caca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f7ff f869 	bl	800bba4 <receivePacket>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cad8:	e002      	b.n	800cae0 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800cada:	2305      	movs	r3, #5
 800cadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800cae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10b      	bne.n	800cb00 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6a1a      	ldr	r2, [r3, #32]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800caf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf2:	2100      	movs	r1, #0
 800caf4:	6838      	ldr	r0, [r7, #0]
 800caf6:	f001 fabc 	bl	800e072 <MQTT_DeserializeAck>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800cb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d109      	bne.n	800cb1c <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d006      	beq.n	800cb1c <receiveConnack+0x164>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800cb16:	2305      	movs	r3, #5
 800cb18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3728      	adds	r7, #40	; 0x28
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	08014c48 	.word	0x08014c48
 800cb2c:	08015928 	.word	0x08015928
 800cb30:	08014b6c 	.word	0x08014b6c
 800cb34:	08014e18 	.word	0x08014e18
 800cb38:	08014c6c 	.word	0x08014c6c

0800cb3c <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800cb50:	2300      	movs	r3, #0
 800cb52:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <handleSessionResumption+0x30>
 800cb5e:	4b2c      	ldr	r3, [pc, #176]	; (800cc10 <handleSessionResumption+0xd4>)
 800cb60:	4a2c      	ldr	r2, [pc, #176]	; (800cc14 <handleSessionResumption+0xd8>)
 800cb62:	f640 1152 	movw	r1, #2386	; 0x952
 800cb66:	482c      	ldr	r0, [pc, #176]	; (800cc18 <handleSessionResumption+0xdc>)
 800cb68:	f005 fd20 	bl	80125ac <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a18      	ldr	r0, [r3, #32]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	f005 fea0 	bl	80128c2 <memset>

    if( sessionPresent == true )
 800cb82:	78fb      	ldrb	r3, [r7, #3]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d023      	beq.n	800cbd0 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800cb88:	f107 020f 	add.w	r2, r7, #15
 800cb8c:	f107 0310 	add.w	r3, r7, #16
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f002 f8ed 	bl	800ed72 <MQTT_PubrelToResend>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800cb9c:	e011      	b.n	800cbc2 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800cb9e:	7bfa      	ldrb	r2, [r7, #15]
 800cba0:	8abb      	ldrh	r3, [r7, #20]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff f877 	bl	800bc98 <sendPublishAcks>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800cbae:	f107 020f 	add.w	r2, r7, #15
 800cbb2:	f107 0310 	add.w	r3, r7, #16
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f002 f8da 	bl	800ed72 <MQTT_PubrelToResend>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800cbc2:	8abb      	ldrh	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01d      	beq.n	800cc04 <handleSessionResumption+0xc8>
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0e7      	beq.n	800cb9e <handleSessionResumption+0x62>
 800cbce:	e019      	b.n	800cc04 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d008      	beq.n	800cbea <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	f005 fe6c 	bl	80128c2 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d008      	beq.n	800cc04 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	2100      	movs	r1, #0
 800cc00:	f005 fe5f 	bl	80128c2 <memset>
        }
    }

    return status;
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	08014c48 	.word	0x08014c48
 800cc14:	08015938 	.word	0x08015938
 800cc18:	08014b6c 	.word	0x08014b6c

0800cc1c <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <validatePublishParams+0x1e>
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d102      	bne.n	800cc40 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	75fb      	strb	r3, [r7, #23]
 800cc3e:	e01e      	b.n	800cc7e <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d005      	beq.n	800cc54 <validatePublishParams+0x38>
 800cc48:	88fb      	ldrh	r3, [r7, #6]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	75fb      	strb	r3, [r7, #23]
 800cc52:	e014      	b.n	800cc7e <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <validatePublishParams+0x4e>
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800cc64:	2301      	movs	r3, #1
 800cc66:	75fb      	strb	r3, [r7, #23]
 800cc68:	e009      	b.n	800cc7e <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <validatePublishParams+0x62>
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d001      	beq.n	800cc7e <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	371c      	adds	r7, #28
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <MQTT_Init+0x24>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <MQTT_Init+0x24>
 800ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]
 800ccb4:	e03a      	b.n	800cd2c <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	75fb      	strb	r3, [r7, #23]
 800ccc0:	e034      	b.n	800cd2c <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	75fb      	strb	r3, [r7, #23]
 800cccc:	e02e      	b.n	800cd2c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	75fb      	strb	r3, [r7, #23]
 800ccda:	e027      	b.n	800cd2c <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800cce4:	2301      	movs	r3, #1
 800cce6:	75fb      	strb	r3, [r7, #23]
 800cce8:	e020      	b.n	800cd2c <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800ccea:	2250      	movs	r2, #80	; 0x50
 800ccec:	2100      	movs	r1, #0
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f005 fde7 	bl	80128c2 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	f103 0410 	add.w	r4, r3, #16
 800cd04:	4613      	mov	r3, r2
 800cd06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd1c:	3320      	adds	r3, #32
 800cd1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd22:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd90      	pop	{r4, r7, pc}

0800cd36 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b08e      	sub	sp, #56	; 0x38
 800cd3a:	af02      	add	r7, sp, #8
 800cd3c:	60f8      	str	r0, [r7, #12]
 800cd3e:	60b9      	str	r1, [r7, #8]
 800cd40:	607a      	str	r2, [r7, #4]
 800cd42:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800cd44:	2300      	movs	r3, #0
 800cd46:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd48:	2300      	movs	r3, #0
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800cd52:	f107 0314 	add.w	r3, r7, #20
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	605a      	str	r2, [r3, #4]
 800cd5c:	609a      	str	r2, [r3, #8]
 800cd5e:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <MQTT_Connect+0x40>
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <MQTT_Connect+0x40>
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800cd76:	2301      	movs	r3, #1
 800cd78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800cd7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10a      	bne.n	800cd9a <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800cd84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	68b8      	ldr	r0, [r7, #8]
 800cd90:	f000 ffba 	bl	800dd08 <MQTT_GetConnectPacketSize>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800cd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d108      	bne.n	800cdb4 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7ff fce9 	bl	800c780 <sendConnectWithoutCopy>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800cdb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10d      	bne.n	800cdd8 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	781a      	ldrb	r2, [r3, #0]
 800cdc0:	f107 0114 	add.w	r1, r7, #20
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7ff fdf3 	bl	800c9b8 <receiveConnack>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800cdd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d108      	bne.n	800cdf2 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	4619      	mov	r1, r3
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fea8 	bl	800cb3c <handleSessionResumption>
 800cdec:	4603      	mov	r3, r0
 800cdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800cdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10f      	bne.n	800ce1a <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	885a      	ldrh	r2, [r3, #2]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800ce1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3730      	adds	r7, #48	; 0x30
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b08a      	sub	sp, #40	; 0x28
 800ce2a:	af02      	add	r7, sp, #8
 800ce2c:	60f8      	str	r0, [r7, #12]
 800ce2e:	60b9      	str	r1, [r7, #8]
 800ce30:	607a      	str	r2, [r7, #4]
 800ce32:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800ce3c:	887b      	ldrh	r3, [r7, #2]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7ff face 	bl	800c3e4 <validateSubscribeUnsubscribeParams>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800ce4c:	7ffb      	ldrb	r3, [r7, #31]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800ce52:	f107 0314 	add.w	r3, r7, #20
 800ce56:	f107 0218 	add.w	r2, r7, #24
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	68b8      	ldr	r0, [r7, #8]
 800ce5e:	f000 ffbf 	bl	800dde0 <MQTT_GetSubscribePacketSize>
 800ce62:	4603      	mov	r3, r0
 800ce64:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800ce66:	7ffb      	ldrb	r3, [r7, #31]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	887a      	ldrh	r2, [r7, #2]
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4613      	mov	r3, r2
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f7ff fb51 	bl	800c520 <sendSubscribeWithoutCopy>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800ce82:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3720      	adds	r7, #32
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	; 0x30
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800ceb0:	88fb      	ldrh	r3, [r7, #6]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	68b9      	ldr	r1, [r7, #8]
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff feb0 	bl	800cc1c <validatePublishParams>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800cec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800ceca:	f107 0218 	add.w	r2, r7, #24
 800cece:	f107 031c 	add.w	r3, r7, #28
 800ced2:	4619      	mov	r1, r3
 800ced4:	68b8      	ldr	r0, [r7, #8]
 800ced6:	f000 ffd4 	bl	800de82 <MQTT_GetPublishPacketSize>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800cee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800cee8:	69f9      	ldr	r1, [r7, #28]
 800ceea:	f107 0320 	add.w	r3, r7, #32
 800ceee:	f107 0210 	add.w	r2, r7, #16
 800cef2:	68b8      	ldr	r0, [r7, #8]
 800cef4:	f000 f9ec 	bl	800d2d0 <MQTT_SerializePublishHeaderWithoutTopic>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d11b      	bne.n	800cf3e <MQTT_Publish+0xb2>
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d017      	beq.n	800cf3e <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	781a      	ldrb	r2, [r3, #0]
 800cf18:	88fb      	ldrh	r3, [r7, #6]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f001 fde1 	bl	800eae4 <MQTT_ReserveState>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800cf28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf2c:	2b09      	cmp	r3, #9
 800cf2e:	d106      	bne.n	800cf3e <MQTT_Publish+0xb2>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	789b      	ldrb	r3, [r3, #2]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800cf3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10c      	bne.n	800cf60 <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800cf46:	6a39      	ldr	r1, [r7, #32]
 800cf48:	f107 0210 	add.w	r2, r7, #16
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	460b      	mov	r3, r1
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f7ff fb9d 	bl	800c694 <sendPublishWithoutCopy>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800cf60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d111      	bne.n	800cf8c <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00d      	beq.n	800cf8c <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	781a      	ldrb	r2, [r3, #0]
 800cf74:	88f9      	ldrh	r1, [r7, #6]
 800cf76:	f107 0317 	add.w	r3, r7, #23
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	2200      	movs	r2, #0
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f001 fe08 	bl	800eb96 <MQTT_UpdateStatePublish>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cf8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3728      	adds	r7, #40	; 0x28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800cfac:	f107 0310 	add.w	r3, r7, #16
 800cfb0:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cfc0:	7ffb      	ldrb	r3, [r7, #31]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800cfc6:	f107 0314 	add.w	r3, r7, #20
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 ffdd 	bl	800df8a <MQTT_GetPingreqPacketSize>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800cfd4:	7ffb      	ldrb	r3, [r7, #31]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d106      	bne.n	800cfe8 <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 ffe9 	bl	800dfb6 <MQTT_SerializePingreq>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cfe8:	7ffb      	ldrb	r3, [r7, #31]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d116      	bne.n	800d01c <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800cfee:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800cff0:	2202      	movs	r2, #2
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7fe fb4b 	bl	800b690 <sendBuffer>
 800cffa:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	461a      	mov	r2, r3
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	4293      	cmp	r3, r2
 800d004:	da02      	bge.n	800d00c <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800d006:	2303      	movs	r3, #3
 800d008:	77fb      	strb	r3, [r7, #31]
 800d00a:	e007      	b.n	800d01c <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800d01c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3720      	adds	r7, #32
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800d02e:	2301      	movs	r3, #1
 800d030:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d011      	beq.n	800d05c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00d      	beq.n	800d05c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a1b      	ldr	r3, [r3, #32]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d009      	beq.n	800d05c <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800d050:	2101      	movs	r1, #1
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff f8da 	bl	800c20c <receiveSingleIteration>
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d012      	beq.n	800d09e <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d07c:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d086:	4293      	cmp	r3, r2
 800d088:	d103      	bne.n	800d092 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d090:	e005      	b.n	800d09e <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d096:	3301      	adds	r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800d09e:	89fb      	ldrh	r3, [r7, #14]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d0b8:	d802      	bhi.n	800d0c0 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]
 800d0be:	e00f      	b.n	800d0e0 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0c6:	d202      	bcs.n	800d0ce <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e008      	b.n	800d0e0 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0d4:	d202      	bcs.n	800d0dc <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	60fb      	str	r3, [r7, #12]
 800d0da:	e001      	b.n	800d0e0 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800d0dc:	2304      	movs	r3, #4
 800d0de:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d106      	bne.n	800d116 <encodeRemainingLength+0x26>
 800d108:	4b12      	ldr	r3, [pc, #72]	; (800d154 <encodeRemainingLength+0x64>)
 800d10a:	4a13      	ldr	r2, [pc, #76]	; (800d158 <encodeRemainingLength+0x68>)
 800d10c:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d110:	4812      	ldr	r0, [pc, #72]	; (800d15c <encodeRemainingLength+0x6c>)
 800d112:	f005 fa4b 	bl	80125ac <__assert_func>

    pLengthEnd = pDestination;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d122:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	09db      	lsrs	r3, r3, #7
 800d128:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d136:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	7dfa      	ldrb	r2, [r7, #23]
 800d13c:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3301      	adds	r3, #1
 800d142:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1e7      	bne.n	800d11a <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800d14a:	693b      	ldr	r3, [r7, #16]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	080150f0 	.word	0x080150f0
 800d158:	08015950 	.word	0x08015950
 800d15c:	08015108 	.word	0x08015108

0800d160 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800d16e:	2300      	movs	r3, #0
 800d170:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <encodeString+0x2a>
 800d17c:	4b15      	ldr	r3, [pc, #84]	; (800d1d4 <encodeString+0x74>)
 800d17e:	4a16      	ldr	r2, [pc, #88]	; (800d1d8 <encodeString+0x78>)
 800d180:	f240 2115 	movw	r1, #533	; 0x215
 800d184:	4815      	ldr	r0, [pc, #84]	; (800d1dc <encodeString+0x7c>)
 800d186:	f005 fa11 	bl	80125ac <__assert_func>

    pBuffer = pDestination;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	0a1b      	lsrs	r3, r3, #8
 800d192:	b29b      	uxth	r3, r3
 800d194:	b2da      	uxtb	r2, r3
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	3301      	adds	r3, #1
 800d19e:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800d1a0:	88fb      	ldrh	r3, [r7, #6]
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d005      	beq.n	800d1c0 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800d1b4:	88fb      	ldrh	r3, [r7, #6]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	6939      	ldr	r1, [r7, #16]
 800d1ba:	6978      	ldr	r0, [r7, #20]
 800d1bc:	f005 fb59 	bl	8012872 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800d1c8:	697b      	ldr	r3, [r7, #20]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	080150f0 	.word	0x080150f0
 800d1d8:	08015968 	.word	0x08015968
 800d1dc:	08015108 	.word	0x08015108

0800d1e0 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
    bool status = true;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <calculatePublishPacketSize+0x2c>
 800d1fe:	4b2e      	ldr	r3, [pc, #184]	; (800d2b8 <calculatePublishPacketSize+0xd8>)
 800d200:	4a2e      	ldr	r2, [pc, #184]	; (800d2bc <calculatePublishPacketSize+0xdc>)
 800d202:	f240 2136 	movw	r1, #566	; 0x236
 800d206:	482e      	ldr	r0, [pc, #184]	; (800d2c0 <calculatePublishPacketSize+0xe0>)
 800d208:	f005 f9d0 	bl	80125ac <__assert_func>
    assert( pRemainingLength != NULL );
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <calculatePublishPacketSize+0x40>
 800d212:	4b2c      	ldr	r3, [pc, #176]	; (800d2c4 <calculatePublishPacketSize+0xe4>)
 800d214:	4a29      	ldr	r2, [pc, #164]	; (800d2bc <calculatePublishPacketSize+0xdc>)
 800d216:	f240 2137 	movw	r1, #567	; 0x237
 800d21a:	4829      	ldr	r0, [pc, #164]	; (800d2c0 <calculatePublishPacketSize+0xe0>)
 800d21c:	f005 f9c6 	bl	80125ac <__assert_func>
    assert( pPacketSize != NULL );
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <calculatePublishPacketSize+0x54>
 800d226:	4b28      	ldr	r3, [pc, #160]	; (800d2c8 <calculatePublishPacketSize+0xe8>)
 800d228:	4a24      	ldr	r2, [pc, #144]	; (800d2bc <calculatePublishPacketSize+0xdc>)
 800d22a:	f44f 710e 	mov.w	r1, #568	; 0x238
 800d22e:	4824      	ldr	r0, [pc, #144]	; (800d2c0 <calculatePublishPacketSize+0xe0>)
 800d230:	f005 f9bc 	bl	80125ac <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	891b      	ldrh	r3, [r3, #8]
 800d238:	461a      	mov	r2, r3
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	4413      	add	r3, r2
 800d23e:	3302      	adds	r3, #2
 800d240:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	3302      	adds	r3, #2
 800d24e:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	4b1e      	ldr	r3, [pc, #120]	; (800d2cc <calculatePublishPacketSize+0xec>)
 800d254:	1a9b      	subs	r3, r3, r2
 800d256:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d202      	bcs.n	800d268 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800d262:	2300      	movs	r3, #0
 800d264:	77fb      	strb	r3, [r7, #31]
 800d266:	e021      	b.n	800d2ac <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	69ba      	ldr	r2, [r7, #24]
 800d26e:	4413      	add	r3, r2
 800d270:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800d272:	69b8      	ldr	r0, [r7, #24]
 800d274:	f7ff ff1a 	bl	800d0ac <remainingLengthEncodedSize>
 800d278:	4602      	mov	r2, r0
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	1a9b      	subs	r3, r3, r2
 800d27e:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	429a      	cmp	r2, r3
 800d288:	d202      	bcs.n	800d290 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800d28a:	2300      	movs	r3, #0
 800d28c:	77fb      	strb	r3, [r7, #31]
 800d28e:	e00d      	b.n	800d2ac <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	69ba      	ldr	r2, [r7, #24]
 800d294:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d296:	69b8      	ldr	r0, [r7, #24]
 800d298:	f7ff ff08 	bl	800d0ac <remainingLengthEncodedSize>
 800d29c:	4603      	mov	r3, r0
 800d29e:	3301      	adds	r3, #1
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	69ba      	ldr	r2, [r7, #24]
 800d2aa:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800d2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3720      	adds	r7, #32
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	0801513c 	.word	0x0801513c
 800d2bc:	08015978 	.word	0x08015978
 800d2c0:	08015108 	.word	0x08015108
 800d2c4:	08015154 	.word	0x08015154
 800d2c8:	08015170 	.word	0x08015170
 800d2cc:	0ffffffe 	.word	0x0ffffffe

0800d2d0 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800d2e2:	2330      	movs	r3, #48	; 0x30
 800d2e4:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800d2ea:	68b8      	ldr	r0, [r7, #8]
 800d2ec:	f7ff fede 	bl	800d0ac <remainingLengthEncodedSize>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	3303      	adds	r3, #3
 800d2f4:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d104      	bne.n	800d308 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800d2fe:	7ffb      	ldrb	r3, [r7, #31]
 800d300:	f043 0302 	orr.w	r3, r3, #2
 800d304:	77fb      	strb	r3, [r7, #31]
 800d306:	e007      	b.n	800d318 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d103      	bne.n	800d318 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800d310:	7ffb      	ldrb	r3, [r7, #31]
 800d312:	f043 0304 	orr.w	r3, r3, #4
 800d316:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d320:	7ffb      	ldrb	r3, [r7, #31]
 800d322:	f043 0301 	orr.w	r3, r3, #1
 800d326:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	789b      	ldrb	r3, [r3, #2]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d330:	7ffb      	ldrb	r3, [r7, #31]
 800d332:	f043 0308 	orr.w	r3, r3, #8
 800d336:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	7ffa      	ldrb	r2, [r7, #31]
 800d33c:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	3301      	adds	r3, #1
 800d342:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800d344:	68b9      	ldr	r1, [r7, #8]
 800d346:	69b8      	ldr	r0, [r7, #24]
 800d348:	f7ff fed2 	bl	800d0f0 <encodeRemainingLength>
 800d34c:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	891b      	ldrh	r3, [r3, #8]
 800d352:	0a1b      	lsrs	r3, r3, #8
 800d354:	b29b      	uxth	r3, r3
 800d356:	b2da      	uxtb	r2, r3
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	3301      	adds	r3, #1
 800d360:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	891b      	ldrh	r3, [r3, #8]
 800d366:	b2da      	uxtb	r2, r3
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	3301      	adds	r3, #1
 800d370:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	601a      	str	r2, [r3, #0]

    return status;
 800d378:	7fbb      	ldrb	r3, [r7, #30]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3720      	adds	r7, #32
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b088      	sub	sp, #32
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	61fb      	str	r3, [r7, #28]
 800d390:	2301      	movs	r3, #1
 800d392:	61bb      	str	r3, [r7, #24]
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]
 800d398:	2300      	movs	r3, #0
 800d39a:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3aa:	d903      	bls.n	800d3b4 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d3ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	e01c      	b.n	800d3ee <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800d3b4:	f107 010b 	add.w	r1, r7, #11
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	6838      	ldr	r0, [r7, #0]
 800d3be:	4798      	blx	r3
 800d3c0:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d10f      	bne.n	800d3e8 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	fb02 f303 	mul.w	r3, r2, r3
 800d3d4:	69fa      	ldr	r2, [r7, #28]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	01db      	lsls	r3, r3, #7
 800d3de:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	e002      	b.n	800d3ee <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d3e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3ec:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3f4:	d004      	beq.n	800d400 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d3f6:	7afb      	ldrb	r3, [r7, #11]
 800d3f8:	b25b      	sxtb	r3, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dbd2      	blt.n	800d3a4 <getRemainingLength+0x22>
 800d3fe:	e000      	b.n	800d402 <getRemainingLength+0x80>
            break;
 800d400:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d408:	d00a      	beq.n	800d420 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d40a:	69f8      	ldr	r0, [r7, #28]
 800d40c:	f7ff fe4e 	bl	800d0ac <remainingLengthEncodedSize>
 800d410:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	429a      	cmp	r2, r3
 800d418:	d002      	beq.n	800d420 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d41a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d41e:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800d420:	69fb      	ldr	r3, [r7, #28]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3720      	adds	r7, #32
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b08a      	sub	sp, #40	; 0x28
 800d42e:	af00      	add	r7, sp, #0
 800d430:	60f8      	str	r0, [r7, #12]
 800d432:	60b9      	str	r1, [r7, #8]
 800d434:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800d43a:	2301      	movs	r3, #1
 800d43c:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800d44a:	2300      	movs	r3, #0
 800d44c:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d454:	d905      	bls.n	800d462 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800d45c:	2305      	movs	r3, #5
 800d45e:	76bb      	strb	r3, [r7, #26]
 800d460:	e01d      	b.n	800d49e <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	3301      	adds	r3, #1
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d915      	bls.n	800d49a <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	3301      	adds	r3, #1
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	4413      	add	r3, r2
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d47a:	7efb      	ldrb	r3, [r7, #27]
 800d47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d480:	6a3a      	ldr	r2, [r7, #32]
 800d482:	fb02 f303 	mul.w	r3, r2, r3
 800d486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d488:	4413      	add	r3, r2
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	01db      	lsls	r3, r3, #7
 800d490:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	3301      	adds	r3, #1
 800d496:	61fb      	str	r3, [r7, #28]
 800d498:	e001      	b.n	800d49e <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800d49a:	230b      	movs	r3, #11
 800d49c:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4a4:	d006      	beq.n	800d4b4 <processRemainingLength+0x8a>
 800d4a6:	7ebb      	ldrb	r3, [r7, #26]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d4ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dbcc      	blt.n	800d44e <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800d4b4:	7ebb      	ldrb	r3, [r7, #26]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d111      	bne.n	800d4de <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d4ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4bc:	f7ff fdf6 	bl	800d0ac <remainingLengthEncodedSize>
 800d4c0:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d002      	beq.n	800d4d0 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800d4ca:	2305      	movs	r3, #5
 800d4cc:	76bb      	strb	r3, [r7, #26]
 800d4ce:	e006      	b.n	800d4de <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d4:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800d4de:	7ebb      	ldrb	r3, [r7, #26]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3728      	adds	r7, #40	; 0x28
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4fc:	2bd0      	cmp	r3, #208	; 0xd0
 800d4fe:	d01d      	beq.n	800d53c <incomingPacketValid+0x54>
 800d500:	2bd0      	cmp	r3, #208	; 0xd0
 800d502:	d826      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d504:	2bb0      	cmp	r3, #176	; 0xb0
 800d506:	d019      	beq.n	800d53c <incomingPacketValid+0x54>
 800d508:	2bb0      	cmp	r3, #176	; 0xb0
 800d50a:	d822      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d50c:	2b90      	cmp	r3, #144	; 0x90
 800d50e:	d015      	beq.n	800d53c <incomingPacketValid+0x54>
 800d510:	2b90      	cmp	r3, #144	; 0x90
 800d512:	d81e      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d514:	2b70      	cmp	r3, #112	; 0x70
 800d516:	d011      	beq.n	800d53c <incomingPacketValid+0x54>
 800d518:	2b70      	cmp	r3, #112	; 0x70
 800d51a:	d81a      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d51c:	2b60      	cmp	r3, #96	; 0x60
 800d51e:	d010      	beq.n	800d542 <incomingPacketValid+0x5a>
 800d520:	2b60      	cmp	r3, #96	; 0x60
 800d522:	d816      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d524:	2b50      	cmp	r3, #80	; 0x50
 800d526:	d009      	beq.n	800d53c <incomingPacketValid+0x54>
 800d528:	2b50      	cmp	r3, #80	; 0x50
 800d52a:	d812      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d52c:	2b40      	cmp	r3, #64	; 0x40
 800d52e:	d005      	beq.n	800d53c <incomingPacketValid+0x54>
 800d530:	2b40      	cmp	r3, #64	; 0x40
 800d532:	d80e      	bhi.n	800d552 <incomingPacketValid+0x6a>
 800d534:	2b20      	cmp	r3, #32
 800d536:	d001      	beq.n	800d53c <incomingPacketValid+0x54>
 800d538:	2b30      	cmp	r3, #48	; 0x30
 800d53a:	d10a      	bne.n	800d552 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800d53c:	2301      	movs	r3, #1
 800d53e:	73fb      	strb	r3, [r7, #15]
            break;
 800d540:	e00a      	b.n	800d558 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <incomingPacketValid+0x6e>
            {
                status = true;
 800d54c:	2301      	movs	r3, #1
 800d54e:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800d550:	e001      	b.n	800d556 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800d552:	bf00      	nop
 800d554:	e000      	b.n	800d558 <incomingPacketValid+0x70>
            break;
 800d556:	bf00      	nop
    }

    return status;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800d566:	b480      	push	{r7}
 800d568:	b087      	sub	sp, #28
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	460b      	mov	r3, r1
 800d570:	607a      	str	r2, [r7, #4]
 800d572:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800d574:	2300      	movs	r3, #0
 800d576:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800d578:	7afb      	ldrb	r3, [r7, #11]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	429a      	cmp	r2, r3
 800d584:	d209      	bcs.n	800d59a <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800d586:	2305      	movs	r3, #5
 800d588:	75fb      	strb	r3, [r7, #23]
 800d58a:	e006      	b.n	800d59a <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3302      	adds	r3, #2
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	429a      	cmp	r2, r3
 800d594:	d201      	bcs.n	800d59a <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800d596:	2305      	movs	r3, #5
 800d598:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	371c      	adds	r7, #28
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <processPublishFlags+0x24>
 800d5be:	4b20      	ldr	r3, [pc, #128]	; (800d640 <processPublishFlags+0x98>)
 800d5c0:	4a20      	ldr	r2, [pc, #128]	; (800d644 <processPublishFlags+0x9c>)
 800d5c2:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800d5c6:	4820      	ldr	r0, [pc, #128]	; (800d648 <processPublishFlags+0xa0>)
 800d5c8:	f004 fff0 	bl	80125ac <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	f003 0304 	and.w	r3, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00b      	beq.n	800d5ee <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800d5e0:	2305      	movs	r3, #5
 800d5e2:	73fb      	strb	r3, [r7, #15]
 800d5e4:	e00f      	b.n	800d606 <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	701a      	strb	r2, [r3, #0]
 800d5ec:	e00b      	b.n	800d606 <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	f003 0302 	and.w	r3, r3, #2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2200      	movs	r2, #0
 800d604:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800d606:	7bfb      	ldrb	r3, [r7, #15]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d113      	bne.n	800d634 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b00      	cmp	r3, #0
 800d614:	bf14      	ite	ne
 800d616:	2301      	movne	r3, #1
 800d618:	2300      	moveq	r3, #0
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	f003 0308 	and.w	r3, r3, #8
 800d626:	2b00      	cmp	r3, #0
 800d628:	bf14      	ite	ne
 800d62a:	2301      	movne	r3, #1
 800d62c:	2300      	moveq	r3, #0
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800d634:	7bfb      	ldrb	r3, [r7, #15]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	0801513c 	.word	0x0801513c
 800d644:	08015994 	.word	0x08015994
 800d648:	08015108 	.word	0x08015108

0800d64c <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800d64c:	b5b0      	push	{r4, r5, r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af00      	add	r7, sp, #0
 800d652:	4603      	mov	r3, r0
 800d654:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800d656:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <logConnackResponse+0x3c>)
 800d658:	f107 0408 	add.w	r4, r7, #8
 800d65c:	461d      	mov	r5, r3
 800d65e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d662:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d666:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	2b05      	cmp	r3, #5
 800d66e:	d906      	bls.n	800d67e <logConnackResponse+0x32>
 800d670:	4b06      	ldr	r3, [pc, #24]	; (800d68c <logConnackResponse+0x40>)
 800d672:	4a07      	ldr	r2, [pc, #28]	; (800d690 <logConnackResponse+0x44>)
 800d674:	f240 412f 	movw	r1, #1071	; 0x42f
 800d678:	4806      	ldr	r0, [pc, #24]	; (800d694 <logConnackResponse+0x48>)
 800d67a:	f004 ff97 	bl	80125ac <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800d67e:	bf00      	nop
 800d680:	3720      	adds	r7, #32
 800d682:	46bd      	mov	sp, r7
 800d684:	bdb0      	pop	{r4, r5, r7, pc}
 800d686:	bf00      	nop
 800d688:	0801529c 	.word	0x0801529c
 800d68c:	08015288 	.word	0x08015288
 800d690:	080159a8 	.word	0x080159a8
 800d694:	08015108 	.word	0x08015108

0800d698 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d106      	bne.n	800d6be <deserializeConnack+0x26>
 800d6b0:	4b2a      	ldr	r3, [pc, #168]	; (800d75c <deserializeConnack+0xc4>)
 800d6b2:	4a2b      	ldr	r2, [pc, #172]	; (800d760 <deserializeConnack+0xc8>)
 800d6b4:	f240 4145 	movw	r1, #1093	; 0x445
 800d6b8:	482a      	ldr	r0, [pc, #168]	; (800d764 <deserializeConnack+0xcc>)
 800d6ba:	f004 ff77 	bl	80125ac <__assert_func>
    assert( pSessionPresent != NULL );
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d106      	bne.n	800d6d2 <deserializeConnack+0x3a>
 800d6c4:	4b28      	ldr	r3, [pc, #160]	; (800d768 <deserializeConnack+0xd0>)
 800d6c6:	4a26      	ldr	r2, [pc, #152]	; (800d760 <deserializeConnack+0xc8>)
 800d6c8:	f240 4146 	movw	r1, #1094	; 0x446
 800d6cc:	4825      	ldr	r0, [pc, #148]	; (800d764 <deserializeConnack+0xcc>)
 800d6ce:	f004 ff6d 	bl	80125ac <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d002      	beq.n	800d6e6 <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d6e0:	2305      	movs	r3, #5
 800d6e2:	73fb      	strb	r3, [r7, #15]
 800d6e4:	e01d      	b.n	800d722 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	f043 0301 	orr.w	r3, r3, #1
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d002      	beq.n	800d6fa <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800d6f4:	2305      	movs	r3, #5
 800d6f6:	73fb      	strb	r3, [r7, #15]
 800d6f8:	e013      	b.n	800d722 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2201      	movs	r2, #1
 800d70a:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	3301      	adds	r3, #1
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d005      	beq.n	800d722 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800d716:	2305      	movs	r3, #5
 800d718:	73fb      	strb	r3, [r7, #15]
 800d71a:	e002      	b.n	800d722 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2200      	movs	r2, #0
 800d720:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d114      	bne.n	800d752 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3301      	adds	r3, #1
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b05      	cmp	r3, #5
 800d730:	d902      	bls.n	800d738 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800d732:	2305      	movs	r3, #5
 800d734:	73fb      	strb	r3, [r7, #15]
 800d736:	e00c      	b.n	800d752 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	3301      	adds	r3, #1
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7ff ff84 	bl	800d64c <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	3301      	adds	r3, #1
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800d74e:	2306      	movs	r3, #6
 800d750:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800d752:	7bfb      	ldrb	r3, [r7, #15]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	080152b4 	.word	0x080152b4
 800d760:	080159bc 	.word	0x080159bc
 800d764:	08015108 	.word	0x08015108
 800d768:	080152c8 	.word	0x080152c8

0800d76c <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d77a:	2300      	movs	r3, #0
 800d77c:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	61bb      	str	r3, [r7, #24]
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d106      	bne.n	800d79a <calculateSubscriptionPacketSize+0x2e>
 800d78c:	4b3d      	ldr	r3, [pc, #244]	; (800d884 <calculateSubscriptionPacketSize+0x118>)
 800d78e:	4a3e      	ldr	r2, [pc, #248]	; (800d888 <calculateSubscriptionPacketSize+0x11c>)
 800d790:	f240 419b 	movw	r1, #1179	; 0x49b
 800d794:	483d      	ldr	r0, [pc, #244]	; (800d88c <calculateSubscriptionPacketSize+0x120>)
 800d796:	f004 ff09 	bl	80125ac <__assert_func>
    assert( subscriptionCount != 0U );
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d106      	bne.n	800d7ae <calculateSubscriptionPacketSize+0x42>
 800d7a0:	4b3b      	ldr	r3, [pc, #236]	; (800d890 <calculateSubscriptionPacketSize+0x124>)
 800d7a2:	4a39      	ldr	r2, [pc, #228]	; (800d888 <calculateSubscriptionPacketSize+0x11c>)
 800d7a4:	f240 419c 	movw	r1, #1180	; 0x49c
 800d7a8:	4838      	ldr	r0, [pc, #224]	; (800d88c <calculateSubscriptionPacketSize+0x120>)
 800d7aa:	f004 feff 	bl	80125ac <__assert_func>
    assert( pRemainingLength != NULL );
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d106      	bne.n	800d7c2 <calculateSubscriptionPacketSize+0x56>
 800d7b4:	4b37      	ldr	r3, [pc, #220]	; (800d894 <calculateSubscriptionPacketSize+0x128>)
 800d7b6:	4a34      	ldr	r2, [pc, #208]	; (800d888 <calculateSubscriptionPacketSize+0x11c>)
 800d7b8:	f240 419d 	movw	r1, #1181	; 0x49d
 800d7bc:	4833      	ldr	r0, [pc, #204]	; (800d88c <calculateSubscriptionPacketSize+0x120>)
 800d7be:	f004 fef5 	bl	80125ac <__assert_func>
    assert( pPacketSize != NULL );
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <calculateSubscriptionPacketSize+0x6a>
 800d7c8:	4b33      	ldr	r3, [pc, #204]	; (800d898 <calculateSubscriptionPacketSize+0x12c>)
 800d7ca:	4a2f      	ldr	r2, [pc, #188]	; (800d888 <calculateSubscriptionPacketSize+0x11c>)
 800d7cc:	f240 419e 	movw	r1, #1182	; 0x49e
 800d7d0:	482e      	ldr	r0, [pc, #184]	; (800d88c <calculateSubscriptionPacketSize+0x120>)
 800d7d2:	f004 feeb 	bl	80125ac <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	3302      	adds	r3, #2
 800d7da:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61bb      	str	r3, [r7, #24]
 800d7e0:	e02f      	b.n	800d842 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800d7e2:	69ba      	ldr	r2, [r7, #24]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	891b      	ldrh	r3, [r3, #8]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	3302      	adds	r3, #2
 800d7fc:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800d7fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d102      	bne.n	800d80c <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	3301      	adds	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d80c:	69ba      	ldr	r2, [r7, #24]
 800d80e:	4613      	mov	r3, r2
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4413      	add	r3, r2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	461a      	mov	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4413      	add	r3, r2
 800d81c:	891b      	ldrh	r3, [r3, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00a      	beq.n	800d838 <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800d822:	69ba      	ldr	r2, [r7, #24]
 800d824:	4613      	mov	r3, r2
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	461a      	mov	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800d838:	2301      	movs	r3, #1
 800d83a:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	3301      	adds	r3, #1
 800d840:	61bb      	str	r3, [r7, #24]
 800d842:	69ba      	ldr	r2, [r7, #24]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	429a      	cmp	r2, r3
 800d848:	d3cb      	bcc.n	800d7e2 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d850:	d301      	bcc.n	800d856 <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800d852:	2301      	movs	r3, #1
 800d854:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d856:	7ffb      	ldrb	r3, [r7, #31]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10d      	bne.n	800d878 <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d862:	6978      	ldr	r0, [r7, #20]
 800d864:	f7ff fc22 	bl	800d0ac <remainingLengthEncodedSize>
 800d868:	4603      	mov	r3, r0
 800d86a:	3301      	adds	r3, #1
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4413      	add	r3, r2
 800d870:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800d878:	7ffb      	ldrb	r3, [r7, #31]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	080152e0 	.word	0x080152e0
 800d888:	080159d0 	.word	0x080159d0
 800d88c:	08015108 	.word	0x08015108
 800d890:	080152fc 	.word	0x080152fc
 800d894:	08015154 	.word	0x08015154
 800d898:	08015170 	.word	0x08015170

0800d89c <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d106      	bne.n	800d8c6 <readSubackStatus+0x2a>
 800d8b8:	4b17      	ldr	r3, [pc, #92]	; (800d918 <readSubackStatus+0x7c>)
 800d8ba:	4a18      	ldr	r2, [pc, #96]	; (800d91c <readSubackStatus+0x80>)
 800d8bc:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800d8c0:	4817      	ldr	r0, [pc, #92]	; (800d920 <readSubackStatus+0x84>)
 800d8c2:	f004 fe73 	bl	80125ac <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]
 800d8ca:	e019      	b.n	800d900 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	dc02      	bgt.n	800d8e2 <readSubackStatus+0x46>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	da08      	bge.n	800d8f2 <readSubackStatus+0x56>
 800d8e0:	e004      	b.n	800d8ec <readSubackStatus+0x50>
 800d8e2:	2b80      	cmp	r3, #128	; 0x80
 800d8e4:	d102      	bne.n	800d8ec <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800d8e6:	2306      	movs	r3, #6
 800d8e8:	75fb      	strb	r3, [r7, #23]

                break;
 800d8ea:	e003      	b.n	800d8f4 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800d8ec:	2305      	movs	r3, #5
 800d8ee:	75fb      	strb	r3, [r7, #23]

                break;
 800d8f0:	e000      	b.n	800d8f4 <readSubackStatus+0x58>
                break;
 800d8f2:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800d8f4:	7dfb      	ldrb	r3, [r7, #23]
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d007      	beq.n	800d90a <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	429a      	cmp	r2, r3
 800d906:	d3e1      	bcc.n	800d8cc <readSubackStatus+0x30>
 800d908:	e000      	b.n	800d90c <readSubackStatus+0x70>
        {
            break;
 800d90a:	bf00      	nop
        }
    }

    return status;
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	08015314 	.word	0x08015314
 800d91c:	080159f0 	.word	0x080159f0
 800d920:	08015108 	.word	0x08015108

0800d924 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d92e:	2300      	movs	r3, #0
 800d930:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800d932:	2300      	movs	r3, #0
 800d934:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <deserializeSuback+0x26>
 800d93c:	4b1f      	ldr	r3, [pc, #124]	; (800d9bc <deserializeSuback+0x98>)
 800d93e:	4a20      	ldr	r2, [pc, #128]	; (800d9c0 <deserializeSuback+0x9c>)
 800d940:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800d944:	481f      	ldr	r0, [pc, #124]	; (800d9c4 <deserializeSuback+0xa0>)
 800d946:	f004 fe31 	bl	80125ac <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <deserializeSuback+0x3a>
 800d950:	4b1d      	ldr	r3, [pc, #116]	; (800d9c8 <deserializeSuback+0xa4>)
 800d952:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <deserializeSuback+0x9c>)
 800d954:	f240 5121 	movw	r1, #1313	; 0x521
 800d958:	481a      	ldr	r0, [pc, #104]	; (800d9c4 <deserializeSuback+0xa0>)
 800d95a:	f004 fe27 	bl	80125ac <__assert_func>

    remainingLength = pSuback->remainingLength;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d802      	bhi.n	800d976 <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800d970:	2305      	movs	r3, #5
 800d972:	75fb      	strb	r3, [r7, #23]
 800d974:	e01d      	b.n	800d9b2 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	021b      	lsls	r3, r3, #8
 800d97c:	b21a      	sxth	r2, r3
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3301      	adds	r3, #1
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	b21b      	sxth	r3, r3
 800d986:	4313      	orrs	r3, r2
 800d988:	b21b      	sxth	r3, r3
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d102      	bne.n	800d99e <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800d998:	2305      	movs	r3, #5
 800d99a:	75fb      	strb	r3, [r7, #23]
 800d99c:	e009      	b.n	800d9b2 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1e9a      	subs	r2, r3, #2
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	3302      	adds	r3, #2
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	f7ff ff77 	bl	800d89c <readSubackStatus>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800d9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	0801532c 	.word	0x0801532c
 800d9c0:	08015a04 	.word	0x08015a04
 800d9c4:	08015108 	.word	0x08015108
 800d9c8:	0801533c 	.word	0x0801533c

0800d9cc <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d106      	bne.n	800d9f4 <deserializePublish+0x28>
 800d9e6:	4b53      	ldr	r3, [pc, #332]	; (800db34 <deserializePublish+0x168>)
 800d9e8:	4a53      	ldr	r2, [pc, #332]	; (800db38 <deserializePublish+0x16c>)
 800d9ea:	f240 5185 	movw	r1, #1413	; 0x585
 800d9ee:	4853      	ldr	r0, [pc, #332]	; (800db3c <deserializePublish+0x170>)
 800d9f0:	f004 fddc 	bl	80125ac <__assert_func>
    assert( pPacketId != NULL );
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <deserializePublish+0x3c>
 800d9fa:	4b51      	ldr	r3, [pc, #324]	; (800db40 <deserializePublish+0x174>)
 800d9fc:	4a4e      	ldr	r2, [pc, #312]	; (800db38 <deserializePublish+0x16c>)
 800d9fe:	f240 5186 	movw	r1, #1414	; 0x586
 800da02:	484e      	ldr	r0, [pc, #312]	; (800db3c <deserializePublish+0x170>)
 800da04:	f004 fdd2 	bl	80125ac <__assert_func>
    assert( pPublishInfo != NULL );
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <deserializePublish+0x50>
 800da0e:	4b4d      	ldr	r3, [pc, #308]	; (800db44 <deserializePublish+0x178>)
 800da10:	4a49      	ldr	r2, [pc, #292]	; (800db38 <deserializePublish+0x16c>)
 800da12:	f240 5187 	movw	r1, #1415	; 0x587
 800da16:	4849      	ldr	r0, [pc, #292]	; (800db3c <deserializePublish+0x170>)
 800da18:	f004 fdc8 	bl	80125ac <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <deserializePublish+0x66>
 800da24:	4b48      	ldr	r3, [pc, #288]	; (800db48 <deserializePublish+0x17c>)
 800da26:	4a44      	ldr	r2, [pc, #272]	; (800db38 <deserializePublish+0x16c>)
 800da28:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800da2c:	4843      	ldr	r0, [pc, #268]	; (800db3c <deserializePublish+0x170>)
 800da2e:	f004 fdbd 	bl	80125ac <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f003 030f 	and.w	r3, r3, #15
 800da40:	b2db      	uxtb	r3, r3
 800da42:	6879      	ldr	r1, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fdaf 	bl	800d5a8 <processPublishFlags>
 800da4a:	4603      	mov	r3, r0
 800da4c:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800da4e:	7ffb      	ldrb	r3, [r7, #31]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6898      	ldr	r0, [r3, #8]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2203      	movs	r2, #3
 800da5e:	4619      	mov	r1, r3
 800da60:	f7ff fd81 	bl	800d566 <checkPublishRemainingLength>
 800da64:	4603      	mov	r3, r0
 800da66:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800da68:	7ffb      	ldrb	r3, [r7, #31]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d118      	bne.n	800daa0 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	021b      	lsls	r3, r3, #8
 800da74:	b21a      	sxth	r2, r3
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	3301      	adds	r3, #1
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	b21b      	sxth	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b21b      	sxth	r3, r3
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6898      	ldr	r0, [r3, #8]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800da94:	3302      	adds	r3, #2
 800da96:	461a      	mov	r2, r3
 800da98:	f7ff fd65 	bl	800d566 <checkPublishRemainingLength>
 800da9c:	4603      	mov	r3, r0
 800da9e:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800daa0:	7ffb      	ldrb	r3, [r7, #31]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d123      	bne.n	800daee <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	1c9a      	adds	r2, r3, #2
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	8912      	ldrh	r2, [r2, #8]
 800dab6:	4413      	add	r3, r2
 800dab8:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d015      	beq.n	800daee <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	021b      	lsls	r3, r3, #8
 800dac8:	b21a      	sxth	r2, r3
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	3301      	adds	r3, #1
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	b21b      	sxth	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b21b      	sxth	r3, r3
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	3302      	adds	r3, #2
 800dae0:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800daea:	2305      	movs	r3, #5
 800daec:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800daee:	7ffb      	ldrb	r3, [r7, #31]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d119      	bne.n	800db28 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	8912      	ldrh	r2, [r2, #8]
 800dafc:	1a9b      	subs	r3, r3, r2
 800dafe:	1e9a      	subs	r2, r3, #2
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	1e9a      	subs	r2, r3, #2
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <deserializePublish+0x156>
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	e000      	b.n	800db24 <deserializePublish+0x158>
 800db22:	2300      	movs	r3, #0
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800db28:	7ffb      	ldrb	r3, [r7, #31]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	08015358 	.word	0x08015358
 800db38:	08015a18 	.word	0x08015a18
 800db3c:	08015108 	.word	0x08015108
 800db40:	08015370 	.word	0x08015370
 800db44:	0801513c 	.word	0x0801513c
 800db48:	08015384 	.word	0x08015384

0800db4c <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800db56:	2300      	movs	r3, #0
 800db58:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <deserializeSimpleAck+0x22>
 800db60:	4b18      	ldr	r3, [pc, #96]	; (800dbc4 <deserializeSimpleAck+0x78>)
 800db62:	4a19      	ldr	r2, [pc, #100]	; (800dbc8 <deserializeSimpleAck+0x7c>)
 800db64:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800db68:	4818      	ldr	r0, [pc, #96]	; (800dbcc <deserializeSimpleAck+0x80>)
 800db6a:	f004 fd1f 	bl	80125ac <__assert_func>
    assert( pPacketIdentifier != NULL );
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <deserializeSimpleAck+0x36>
 800db74:	4b16      	ldr	r3, [pc, #88]	; (800dbd0 <deserializeSimpleAck+0x84>)
 800db76:	4a14      	ldr	r2, [pc, #80]	; (800dbc8 <deserializeSimpleAck+0x7c>)
 800db78:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800db7c:	4813      	ldr	r0, [pc, #76]	; (800dbcc <deserializeSimpleAck+0x80>)
 800db7e:	f004 fd15 	bl	80125ac <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	2b02      	cmp	r3, #2
 800db88:	d002      	beq.n	800db90 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800db8a:	2305      	movs	r3, #5
 800db8c:	73fb      	strb	r3, [r7, #15]
 800db8e:	e014      	b.n	800dbba <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	021b      	lsls	r3, r3, #8
 800db98:	b21a      	sxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	3301      	adds	r3, #1
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	b21b      	sxth	r3, r3
 800dba4:	4313      	orrs	r3, r2
 800dba6:	b21b      	sxth	r3, r3
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800dbb6:	2305      	movs	r3, #5
 800dbb8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	080153ac 	.word	0x080153ac
 800dbc8:	08015a2c 	.word	0x08015a2c
 800dbcc:	08015108 	.word	0x08015108
 800dbd0:	0801533c 	.word	0x0801533c

0800dbd4 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d106      	bne.n	800dbf4 <deserializePingresp+0x20>
 800dbe6:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <deserializePingresp+0x38>)
 800dbe8:	4a09      	ldr	r2, [pc, #36]	; (800dc10 <deserializePingresp+0x3c>)
 800dbea:	f240 6105 	movw	r1, #1541	; 0x605
 800dbee:	4809      	ldr	r0, [pc, #36]	; (800dc14 <deserializePingresp+0x40>)
 800dbf0:	f004 fcdc 	bl	80125ac <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800dbfc:	2305      	movs	r3, #5
 800dbfe:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	080153bc 	.word	0x080153bc
 800dc10:	08015a44 	.word	0x08015a44
 800dc14:	08015108 	.word	0x08015108

0800dc18 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
 800dc24:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	2210      	movs	r2, #16
 800dc32:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	3301      	adds	r3, #1
 800dc38:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	6938      	ldr	r0, [r7, #16]
 800dc3e:	f7ff fa57 	bl	800d0f0 <encodeRemainingLength>
 800dc42:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800dc44:	2204      	movs	r2, #4
 800dc46:	492f      	ldr	r1, [pc, #188]	; (800dd04 <MQTT_SerializeConnectFixedHeader+0xec>)
 800dc48:	6938      	ldr	r0, [r7, #16]
 800dc4a:	f7ff fa89 	bl	800d160 <encodeString>
 800dc4e:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2204      	movs	r2, #4
 800dc54:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d003      	beq.n	800dc6c <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	f043 0302 	orr.w	r3, r3, #2
 800dc6a:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d003      	beq.n	800dc7c <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
 800dc76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc7a:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc8a:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d01c      	beq.n	800dccc <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	f043 0304 	orr.w	r3, r3, #4
 800dc98:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d104      	bne.n	800dcac <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
 800dca4:	f043 0308 	orr.w	r3, r3, #8
 800dca8:	75fb      	strb	r3, [r7, #23]
 800dcaa:	e007      	b.n	800dcbc <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d103      	bne.n	800dcbc <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	f043 0310 	orr.w	r3, r3, #16
 800dcba:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d003      	beq.n	800dccc <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
 800dcc6:	f043 0320 	orr.w	r3, r3, #32
 800dcca:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	7dfa      	ldrb	r2, [r7, #23]
 800dcd0:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	885b      	ldrh	r3, [r3, #2]
 800dcdc:	0a1b      	lsrs	r3, r3, #8
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	885a      	ldrh	r2, [r3, #2]
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3301      	adds	r3, #1
 800dcee:	b2d2      	uxtb	r2, r2
 800dcf0:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	3302      	adds	r3, #2
 800dcf6:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800dcf8:	693b      	ldr	r3, [r7, #16]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	080153d0 	.word	0x080153d0

0800dd08 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b088      	sub	sp, #32
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dd16:	2300      	movs	r3, #0
 800dd18:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800dd1a:	230a      	movs	r3, #10
 800dd1c:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d005      	beq.n	800dd30 <MQTT_GetConnectPacketSize+0x28>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <MQTT_GetConnectPacketSize+0x28>
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800dd30:	2301      	movs	r3, #1
 800dd32:	77fb      	strb	r3, [r7, #31]
 800dd34:	e04f      	b.n	800ddd6 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	891b      	ldrh	r3, [r3, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <MQTT_GetConnectPacketSize+0x3e>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d102      	bne.n	800dd4c <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800dd46:	2301      	movs	r3, #1
 800dd48:	77fb      	strb	r3, [r7, #31]
 800dd4a:	e044      	b.n	800ddd6 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d007      	beq.n	800dd62 <MQTT_GetConnectPacketSize+0x5a>
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd5a:	d302      	bcc.n	800dd62 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	77fb      	strb	r3, [r7, #31]
 800dd60:	e039      	b.n	800ddd6 <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	891b      	ldrh	r3, [r3, #8]
 800dd66:	461a      	mov	r2, r3
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	3302      	adds	r3, #2
 800dd6e:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d009      	beq.n	800dd8a <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	891b      	ldrh	r3, [r3, #8]
 800dd7a:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800dd80:	441a      	add	r2, r3
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	4413      	add	r3, r2
 800dd86:	3304      	adds	r3, #4
 800dd88:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d006      	beq.n	800dda0 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8a1b      	ldrh	r3, [r3, #16]
 800dd96:	461a      	mov	r2, r3
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	3302      	adds	r3, #2
 800dd9e:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d006      	beq.n	800ddb6 <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8b1b      	ldrh	r3, [r3, #24]
 800ddac:	461a      	mov	r2, r3
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	3302      	adds	r3, #2
 800ddb4:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800ddba:	69b8      	ldr	r0, [r7, #24]
 800ddbc:	f7ff f976 	bl	800d0ac <remainingLengthEncodedSize>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	69ba      	ldr	r2, [r7, #24]
 800ddd4:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800ddd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3720      	adds	r7, #32
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af02      	add	r7, sp, #8
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <MQTT_GetSubscribePacketSize+0x24>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <MQTT_GetSubscribePacketSize+0x24>
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800de04:	2301      	movs	r3, #1
 800de06:	75fb      	strb	r3, [r7, #23]
 800de08:	e00f      	b.n	800de2a <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d102      	bne.n	800de16 <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800de10:	2301      	movs	r3, #1
 800de12:	75fb      	strb	r3, [r7, #23]
 800de14:	e009      	b.n	800de2a <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800de16:	2300      	movs	r3, #0
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	68b9      	ldr	r1, [r7, #8]
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fca3 	bl	800d76c <calculateSubscriptionPacketSize>
 800de26:	4603      	mov	r3, r0
 800de28:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2282      	movs	r2, #130	; 0x82
 800de4a:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	3301      	adds	r3, #1
 800de50:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	6978      	ldr	r0, [r7, #20]
 800de56:	f7ff f94b 	bl	800d0f0 <encodeRemainingLength>
 800de5a:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800de5c:	88fb      	ldrh	r3, [r7, #6]
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	b29b      	uxth	r3, r3
 800de62:	b2da      	uxtb	r2, r3
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	3301      	adds	r3, #1
 800de6c:	88fa      	ldrh	r2, [r7, #6]
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	3302      	adds	r3, #2
 800de76:	617b      	str	r3, [r7, #20]

    return pIterator;
 800de78:	697b      	ldr	r3, [r7, #20]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b086      	sub	sp, #24
 800de86:	af00      	add	r7, sp, #0
 800de88:	60f8      	str	r0, [r7, #12]
 800de8a:	60b9      	str	r1, [r7, #8]
 800de8c:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de8e:	2300      	movs	r3, #0
 800de90:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <MQTT_GetPublishPacketSize+0x22>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <MQTT_GetPublishPacketSize+0x22>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800dea4:	2301      	movs	r3, #1
 800dea6:	75fb      	strb	r3, [r7, #23]
 800dea8:	e017      	b.n	800deda <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d003      	beq.n	800deba <MQTT_GetPublishPacketSize+0x38>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	891b      	ldrh	r3, [r3, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d102      	bne.n	800dec0 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800deba:	2301      	movs	r3, #1
 800debc:	75fb      	strb	r3, [r7, #23]
 800debe:	e00c      	b.n	800deda <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff f98b 	bl	800d1e0 <calculatePublishPacketSize>
 800deca:	4603      	mov	r3, r0
 800decc:	f083 0301 	eor.w	r3, r3, #1
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800ded6:	2301      	movs	r3, #1
 800ded8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800deda:	7dfb      	ldrb	r3, [r7, #23]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
 800def0:	4613      	mov	r3, r2
 800def2:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d102      	bne.n	800df04 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800defe:	2301      	movs	r3, #1
 800df00:	73fb      	strb	r3, [r7, #15]
 800df02:	e03b      	b.n	800df7c <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800df0c:	2301      	movs	r3, #1
 800df0e:	73fb      	strb	r3, [r7, #15]
 800df10:	e034      	b.n	800df7c <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	2b03      	cmp	r3, #3
 800df18:	d802      	bhi.n	800df20 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800df1a:	2302      	movs	r3, #2
 800df1c:	73fb      	strb	r3, [r7, #15]
 800df1e:	e02d      	b.n	800df7c <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800df20:	883b      	ldrh	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800df26:	2301      	movs	r3, #1
 800df28:	73fb      	strb	r3, [r7, #15]
 800df2a:	e027      	b.n	800df7c <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800df2c:	78fb      	ldrb	r3, [r7, #3]
 800df2e:	2b70      	cmp	r3, #112	; 0x70
 800df30:	d009      	beq.n	800df46 <MQTT_SerializeAck+0x62>
 800df32:	2b70      	cmp	r3, #112	; 0x70
 800df34:	dc1f      	bgt.n	800df76 <MQTT_SerializeAck+0x92>
 800df36:	2b62      	cmp	r3, #98	; 0x62
 800df38:	d005      	beq.n	800df46 <MQTT_SerializeAck+0x62>
 800df3a:	2b62      	cmp	r3, #98	; 0x62
 800df3c:	dc1b      	bgt.n	800df76 <MQTT_SerializeAck+0x92>
 800df3e:	2b40      	cmp	r3, #64	; 0x40
 800df40:	d001      	beq.n	800df46 <MQTT_SerializeAck+0x62>
 800df42:	2b50      	cmp	r3, #80	; 0x50
 800df44:	d117      	bne.n	800df76 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	78fa      	ldrb	r2, [r7, #3]
 800df4c:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	2202      	movs	r2, #2
 800df56:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800df58:	883b      	ldrh	r3, [r7, #0]
 800df5a:	0a1b      	lsrs	r3, r3, #8
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3302      	adds	r3, #2
 800df64:	b2d2      	uxtb	r2, r2
 800df66:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3303      	adds	r3, #3
 800df6e:	883a      	ldrh	r2, [r7, #0]
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
                break;
 800df74:	e002      	b.n	800df7c <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800df76:	2301      	movs	r3, #1
 800df78:	73fb      	strb	r3, [r7, #15]
                break;
 800df7a:	bf00      	nop
        }
    }

    return status;
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800df9c:	2301      	movs	r3, #1
 800df9e:	73fb      	strb	r3, [r7, #15]
 800dfa0:	e002      	b.n	800dfa8 <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	601a      	str	r2, [r3, #0]
    }

    return status;
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d102      	bne.n	800dfce <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	73fb      	strb	r3, [r7, #15]
 800dfcc:	e005      	b.n	800dfda <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d105      	bne.n	800dfec <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d801      	bhi.n	800dfec <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800dfe8:	2302      	movs	r3, #2
 800dfea:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800dfec:	7bfb      	ldrb	r3, [r7, #15]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d108      	bne.n	800e004 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	22c0      	movs	r2, #192	; 0xc0
 800dff8:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3301      	adds	r3, #1
 800e000:	2200      	movs	r2, #0
 800e002:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800e004:	7bfb      	ldrb	r3, [r7, #15]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b086      	sub	sp, #24
 800e016:	af00      	add	r7, sp, #0
 800e018:	60f8      	str	r0, [r7, #12]
 800e01a:	60b9      	str	r1, [r7, #8]
 800e01c:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e01e:	2300      	movs	r3, #0
 800e020:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <MQTT_DeserializePublish+0x22>
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <MQTT_DeserializePublish+0x22>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800e034:	2301      	movs	r3, #1
 800e036:	75fb      	strb	r3, [r7, #23]
 800e038:	e016      	b.n	800e068 <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e042:	2b30      	cmp	r3, #48	; 0x30
 800e044:	d002      	beq.n	800e04c <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800e046:	2301      	movs	r3, #1
 800e048:	75fb      	strb	r3, [r7, #23]
 800e04a:	e00d      	b.n	800e068 <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800e054:	2301      	movs	r3, #1
 800e056:	75fb      	strb	r3, [r7, #23]
 800e058:	e006      	b.n	800e068 <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f7ff fcb4 	bl	800d9cc <deserializePublish>
 800e064:	4603      	mov	r3, r0
 800e066:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800e068:	7dfb      	ldrb	r3, [r7, #23]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b086      	sub	sp, #24
 800e076:	af00      	add	r7, sp, #0
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e07e:	2300      	movs	r3, #0
 800e080:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d102      	bne.n	800e08e <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800e088:	2301      	movs	r3, #1
 800e08a:	75fb      	strb	r3, [r7, #23]
 800e08c:	e05f      	b.n	800e14e <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10a      	bne.n	800e0aa <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800e098:	2b20      	cmp	r3, #32
 800e09a:	d006      	beq.n	800e0aa <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800e0a0:	2bd0      	cmp	r3, #208	; 0xd0
 800e0a2:	d002      	beq.n	800e0aa <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	75fb      	strb	r3, [r7, #23]
 800e0a8:	e051      	b.n	800e14e <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800e0b4:	2b20      	cmp	r3, #32
 800e0b6:	d102      	bne.n	800e0be <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	75fb      	strb	r3, [r7, #23]
 800e0bc:	e047      	b.n	800e14e <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d106      	bne.n	800e0d4 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800e0ca:	2bd0      	cmp	r3, #208	; 0xd0
 800e0cc:	d002      	beq.n	800e0d4 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	75fb      	strb	r3, [r7, #23]
 800e0d2:	e03c      	b.n	800e14e <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2bd0      	cmp	r3, #208	; 0xd0
 800e0da:	d028      	beq.n	800e12e <MQTT_DeserializeAck+0xbc>
 800e0dc:	2bd0      	cmp	r3, #208	; 0xd0
 800e0de:	dc33      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e0e0:	2bb0      	cmp	r3, #176	; 0xb0
 800e0e2:	d02a      	beq.n	800e13a <MQTT_DeserializeAck+0xc8>
 800e0e4:	2bb0      	cmp	r3, #176	; 0xb0
 800e0e6:	dc2f      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e0e8:	2b90      	cmp	r3, #144	; 0x90
 800e0ea:	d019      	beq.n	800e120 <MQTT_DeserializeAck+0xae>
 800e0ec:	2b90      	cmp	r3, #144	; 0x90
 800e0ee:	dc2b      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e0f0:	2b70      	cmp	r3, #112	; 0x70
 800e0f2:	d022      	beq.n	800e13a <MQTT_DeserializeAck+0xc8>
 800e0f4:	2b70      	cmp	r3, #112	; 0x70
 800e0f6:	dc27      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e0f8:	2b62      	cmp	r3, #98	; 0x62
 800e0fa:	d01e      	beq.n	800e13a <MQTT_DeserializeAck+0xc8>
 800e0fc:	2b62      	cmp	r3, #98	; 0x62
 800e0fe:	dc23      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e100:	2b50      	cmp	r3, #80	; 0x50
 800e102:	d01a      	beq.n	800e13a <MQTT_DeserializeAck+0xc8>
 800e104:	2b50      	cmp	r3, #80	; 0x50
 800e106:	dc1f      	bgt.n	800e148 <MQTT_DeserializeAck+0xd6>
 800e108:	2b20      	cmp	r3, #32
 800e10a:	d002      	beq.n	800e112 <MQTT_DeserializeAck+0xa0>
 800e10c:	2b40      	cmp	r3, #64	; 0x40
 800e10e:	d014      	beq.n	800e13a <MQTT_DeserializeAck+0xc8>
 800e110:	e01a      	b.n	800e148 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f7ff fabf 	bl	800d698 <deserializeConnack>
 800e11a:	4603      	mov	r3, r0
 800e11c:	75fb      	strb	r3, [r7, #23]
                break;
 800e11e:	e016      	b.n	800e14e <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800e120:	68b9      	ldr	r1, [r7, #8]
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f7ff fbfe 	bl	800d924 <deserializeSuback>
 800e128:	4603      	mov	r3, r0
 800e12a:	75fb      	strb	r3, [r7, #23]
                break;
 800e12c:	e00f      	b.n	800e14e <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f7ff fd50 	bl	800dbd4 <deserializePingresp>
 800e134:	4603      	mov	r3, r0
 800e136:	75fb      	strb	r3, [r7, #23]
                break;
 800e138:	e009      	b.n	800e14e <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff fd05 	bl	800db4c <deserializeSimpleAck>
 800e142:	4603      	mov	r3, r0
 800e144:	75fb      	strb	r3, [r7, #23]
                break;
 800e146:	e002      	b.n	800e14e <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800e148:	2305      	movs	r3, #5
 800e14a:	75fb      	strb	r3, [r7, #23]
                break;
 800e14c:	bf00      	nop
        }
    }

    return status;
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3718      	adds	r7, #24
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e164:	2300      	movs	r3, #0
 800e166:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800e172:	2301      	movs	r3, #1
 800e174:	75fb      	strb	r3, [r7, #23]
 800e176:	e005      	b.n	800e184 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800e178:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2201      	movs	r2, #1
 800e17e:	68b8      	ldr	r0, [r7, #8]
 800e180:	4798      	blx	r3
 800e182:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d119      	bne.n	800e1be <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	4618      	mov	r0, r3
 800e190:	f7ff f9aa 	bl	800d4e8 <incomingPacketValid>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00e      	beq.n	800e1b8 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800e19a:	68b9      	ldr	r1, [r7, #8]
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff f8f0 	bl	800d382 <getRemainingLength>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1b0:	d113      	bne.n	800e1da <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800e1b2:	2305      	movs	r3, #5
 800e1b4:	75fb      	strb	r3, [r7, #23]
 800e1b6:	e010      	b.n	800e1da <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800e1b8:	2305      	movs	r3, #5
 800e1ba:	75fb      	strb	r3, [r7, #23]
 800e1bc:	e00d      	b.n	800e1da <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d005      	beq.n	800e1d0 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d102      	bne.n	800e1d0 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800e1ca:	2307      	movs	r3, #7
 800e1cc:	75fb      	strb	r3, [r7, #23]
 800e1ce:	e004      	b.n	800e1da <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d001      	beq.n	800e1da <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800e1d6:	2304      	movs	r3, #4
 800e1d8:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d102      	bne.n	800e200 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	75fb      	strb	r3, [r7, #23]
 800e1fe:	e016      	b.n	800e22e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d102      	bne.n	800e20c <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800e206:	2301      	movs	r3, #1
 800e208:	75fb      	strb	r3, [r7, #23]
 800e20a:	e010      	b.n	800e22e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d102      	bne.n	800e218 <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800e212:	2301      	movs	r3, #1
 800e214:	75fb      	strb	r3, [r7, #23]
 800e216:	e00a      	b.n	800e22e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800e220:	2307      	movs	r3, #7
 800e222:	75fb      	strb	r3, [r7, #23]
 800e224:	e003      	b.n	800e22e <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d111      	bne.n	800e258 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff f955 	bl	800d4e8 <incomingPacketValid>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d007      	beq.n	800e254 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	68b9      	ldr	r1, [r7, #8]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7ff f8ee 	bl	800d42a <processRemainingLength>
 800e24e:	4603      	mov	r3, r0
 800e250:	75fb      	strb	r3, [r7, #23]
 800e252:	e001      	b.n	800e258 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800e254:	2305      	movs	r3, #5
 800e256:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800e258:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
	...

0800e264 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800e264:	b490      	push	{r4, r7}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	461a      	mov	r2, r3
 800e272:	4623      	mov	r3, r4
 800e274:	71fb      	strb	r3, [r7, #7]
 800e276:	4603      	mov	r3, r0
 800e278:	71bb      	strb	r3, [r7, #6]
 800e27a:	460b      	mov	r3, r1
 800e27c:	717b      	strb	r3, [r7, #5]
 800e27e:	4613      	mov	r3, r2
 800e280:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	2b07      	cmp	r3, #7
 800e28a:	d848      	bhi.n	800e31e <validateTransitionPublish+0xba>
 800e28c:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <validateTransitionPublish+0x30>)
 800e28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e292:	bf00      	nop
 800e294:	0800e2b5 	.word	0x0800e2b5
 800e298:	0800e2d9 	.word	0x0800e2d9
 800e29c:	0800e31f 	.word	0x0800e31f
 800e2a0:	0800e31f 	.word	0x0800e31f
 800e2a4:	0800e31f 	.word	0x0800e31f
 800e2a8:	0800e31f 	.word	0x0800e31f
 800e2ac:	0800e303 	.word	0x0800e303
 800e2b0:	0800e311 	.word	0x0800e311
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800e2b4:	797b      	ldrb	r3, [r7, #5]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d133      	bne.n	800e322 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800e2ba:	79bb      	ldrb	r3, [r7, #6]
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	d002      	beq.n	800e2c6 <validateTransitionPublish+0x62>
 800e2c0:	79bb      	ldrb	r3, [r7, #6]
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d101      	bne.n	800e2ca <validateTransitionPublish+0x66>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <validateTransitionPublish+0x68>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	73fb      	strb	r3, [r7, #15]
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800e2d6:	e024      	b.n	800e322 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800e2d8:	793b      	ldrb	r3, [r7, #4]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d002      	beq.n	800e2e4 <validateTransitionPublish+0x80>
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	d007      	beq.n	800e2f2 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800e2e2:	e00d      	b.n	800e300 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800e2e4:	79bb      	ldrb	r3, [r7, #6]
 800e2e6:	2b06      	cmp	r3, #6
 800e2e8:	bf0c      	ite	eq
 800e2ea:	2301      	moveq	r3, #1
 800e2ec:	2300      	movne	r3, #0
 800e2ee:	73fb      	strb	r3, [r7, #15]
                    break;
 800e2f0:	e006      	b.n	800e300 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800e2f2:	79bb      	ldrb	r3, [r7, #6]
 800e2f4:	2b07      	cmp	r3, #7
 800e2f6:	bf0c      	ite	eq
 800e2f8:	2301      	moveq	r3, #1
 800e2fa:	2300      	movne	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
                    break;
 800e2fe:	bf00      	nop
            }

            break;
 800e300:	e010      	b.n	800e324 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800e302:	79bb      	ldrb	r3, [r7, #6]
 800e304:	2b06      	cmp	r3, #6
 800e306:	bf0c      	ite	eq
 800e308:	2301      	moveq	r3, #1
 800e30a:	2300      	movne	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]

            break;
 800e30e:	e009      	b.n	800e324 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800e310:	79bb      	ldrb	r3, [r7, #6]
 800e312:	2b07      	cmp	r3, #7
 800e314:	bf0c      	ite	eq
 800e316:	2301      	moveq	r3, #1
 800e318:	2300      	movne	r3, #0
 800e31a:	73fb      	strb	r3, [r7, #15]

            break;
 800e31c:	e002      	b.n	800e324 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800e31e:	bf00      	nop
 800e320:	e000      	b.n	800e324 <validateTransitionPublish+0xc0>
            break;
 800e322:	bf00      	nop
    }

    return isValid;
 800e324:	7bfb      	ldrb	r3, [r7, #15]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bc90      	pop	{r4, r7}
 800e32e:	4770      	bx	lr

0800e330 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	460a      	mov	r2, r1
 800e33a:	71fb      	strb	r3, [r7, #7]
 800e33c:	4613      	mov	r3, r2
 800e33e:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	3b02      	subs	r3, #2
 800e348:	2b07      	cmp	r3, #7
 800e34a:	d85c      	bhi.n	800e406 <validateTransitionAck+0xd6>
 800e34c:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <validateTransitionAck+0x24>)
 800e34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e352:	bf00      	nop
 800e354:	0800e375 	.word	0x0800e375
 800e358:	0800e383 	.word	0x0800e383
 800e35c:	0800e3db 	.word	0x0800e3db
 800e360:	0800e3af 	.word	0x0800e3af
 800e364:	0800e375 	.word	0x0800e375
 800e368:	0800e3cd 	.word	0x0800e3cd
 800e36c:	0800e391 	.word	0x0800e391
 800e370:	0800e3e9 	.word	0x0800e3e9
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800e374:	79bb      	ldrb	r3, [r7, #6]
 800e376:	2b0a      	cmp	r3, #10
 800e378:	bf0c      	ite	eq
 800e37a:	2301      	moveq	r3, #1
 800e37c:	2300      	movne	r3, #0
 800e37e:	73fb      	strb	r3, [r7, #15]
            break;
 800e380:	e042      	b.n	800e408 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800e382:	79bb      	ldrb	r3, [r7, #6]
 800e384:	2b08      	cmp	r3, #8
 800e386:	bf0c      	ite	eq
 800e388:	2301      	moveq	r3, #1
 800e38a:	2300      	movne	r3, #0
 800e38c:	73fb      	strb	r3, [r7, #15]
            break;
 800e38e:	e03b      	b.n	800e408 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800e390:	79bb      	ldrb	r3, [r7, #6]
 800e392:	2b05      	cmp	r3, #5
 800e394:	d002      	beq.n	800e39c <validateTransitionAck+0x6c>
 800e396:	79bb      	ldrb	r3, [r7, #6]
 800e398:	2b08      	cmp	r3, #8
 800e39a:	d101      	bne.n	800e3a0 <validateTransitionAck+0x70>
 800e39c:	2301      	movs	r3, #1
 800e39e:	e000      	b.n	800e3a2 <validateTransitionAck+0x72>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73fb      	strb	r3, [r7, #15]
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800e3ac:	e02c      	b.n	800e408 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e3ae:	79bb      	ldrb	r3, [r7, #6]
 800e3b0:	2b0a      	cmp	r3, #10
 800e3b2:	d002      	beq.n	800e3ba <validateTransitionAck+0x8a>
 800e3b4:	79bb      	ldrb	r3, [r7, #6]
 800e3b6:	2b05      	cmp	r3, #5
 800e3b8:	d101      	bne.n	800e3be <validateTransitionAck+0x8e>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e000      	b.n	800e3c0 <validateTransitionAck+0x90>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800e3ca:	e01d      	b.n	800e408 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800e3cc:	79bb      	ldrb	r3, [r7, #6]
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	bf0c      	ite	eq
 800e3d2:	2301      	moveq	r3, #1
 800e3d4:	2300      	movne	r3, #0
 800e3d6:	73fb      	strb	r3, [r7, #15]
            break;
 800e3d8:	e016      	b.n	800e408 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800e3da:	79bb      	ldrb	r3, [r7, #6]
 800e3dc:	2b09      	cmp	r3, #9
 800e3de:	bf0c      	ite	eq
 800e3e0:	2301      	moveq	r3, #1
 800e3e2:	2300      	movne	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]
            break;
 800e3e6:	e00f      	b.n	800e408 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e3e8:	79bb      	ldrb	r3, [r7, #6]
 800e3ea:	2b0a      	cmp	r3, #10
 800e3ec:	d002      	beq.n	800e3f4 <validateTransitionAck+0xc4>
 800e3ee:	79bb      	ldrb	r3, [r7, #6]
 800e3f0:	2b09      	cmp	r3, #9
 800e3f2:	d101      	bne.n	800e3f8 <validateTransitionAck+0xc8>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e000      	b.n	800e3fa <validateTransitionAck+0xca>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	73fb      	strb	r3, [r7, #15]
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800e404:	e000      	b.n	800e408 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800e406:	bf00      	nop
    }

    return isValid;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop

0800e418 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	4603      	mov	r3, r0
 800e420:	460a      	mov	r2, r1
 800e422:	71fb      	strb	r3, [r7, #7]
 800e424:	4613      	mov	r3, r2
 800e426:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800e428:	2300      	movs	r3, #0
 800e42a:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d009      	beq.n	800e446 <isPublishOutgoing+0x2e>
 800e432:	2b03      	cmp	r3, #3
 800e434:	dc15      	bgt.n	800e462 <isPublishOutgoing+0x4a>
 800e436:	2b01      	cmp	r3, #1
 800e438:	dc02      	bgt.n	800e440 <isPublishOutgoing+0x28>
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	da03      	bge.n	800e446 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800e43e:	e010      	b.n	800e462 <isPublishOutgoing+0x4a>
    switch( packetType )
 800e440:	2b02      	cmp	r3, #2
 800e442:	d007      	beq.n	800e454 <isPublishOutgoing+0x3c>
            break;
 800e444:	e00d      	b.n	800e462 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800e446:	79bb      	ldrb	r3, [r7, #6]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	bf0c      	ite	eq
 800e44c:	2301      	moveq	r3, #1
 800e44e:	2300      	movne	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]
            break;
 800e452:	e007      	b.n	800e464 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800e454:	79bb      	ldrb	r3, [r7, #6]
 800e456:	2b00      	cmp	r3, #0
 800e458:	bf0c      	ite	eq
 800e45a:	2301      	moveq	r3, #1
 800e45c:	2300      	movne	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]
            break;
 800e460:	e000      	b.n	800e464 <isPublishOutgoing+0x4c>
            break;
 800e462:	bf00      	nop
    }

    return isOutgoing;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
	...

0800e474 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	603b      	str	r3, [r7, #0]
 800e480:	4613      	mov	r3, r2
 800e482:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e488:	88fb      	ldrh	r3, [r7, #6]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <findInRecord+0x28>
 800e48e:	4b1b      	ldr	r3, [pc, #108]	; (800e4fc <findInRecord+0x88>)
 800e490:	4a1b      	ldr	r2, [pc, #108]	; (800e500 <findInRecord+0x8c>)
 800e492:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800e496:	481b      	ldr	r0, [pc, #108]	; (800e504 <findInRecord+0x90>)
 800e498:	f004 f888 	bl	80125ac <__assert_func>

    *pCurrentState = MQTTStateNull;
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	e019      	b.n	800e4dc <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	88fa      	ldrh	r2, [r7, #6]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d10e      	bne.n	800e4d6 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	4413      	add	r3, r2
 800e4c0:	789a      	ldrb	r2, [r3, #2]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	78da      	ldrb	r2, [r3, #3]
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	701a      	strb	r2, [r3, #0]
            break;
 800e4d4:	e006      	b.n	800e4e4 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	617b      	str	r3, [r7, #20]
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d3e1      	bcc.n	800e4a8 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d102      	bne.n	800e4f2 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	43db      	mvns	r3, r3
 800e4f0:	617b      	str	r3, [r7, #20]
    }

    return index;
 800e4f2:	697b      	ldr	r3, [r7, #20]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	080153f0 	.word	0x080153f0
 800e500:	08015a58 	.word	0x08015a58
 800e504:	08015414 	.word	0x08015414

0800e508 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800e516:	2300      	movs	r3, #0
 800e518:	43db      	mvns	r3, r3
 800e51a:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d150      	bne.n	800e5c4 <compactRecords+0xbc>
 800e522:	4b2d      	ldr	r3, [pc, #180]	; (800e5d8 <compactRecords+0xd0>)
 800e524:	4a2d      	ldr	r2, [pc, #180]	; (800e5dc <compactRecords+0xd4>)
 800e526:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800e52a:	482d      	ldr	r0, [pc, #180]	; (800e5e0 <compactRecords+0xd8>)
 800e52c:	f004 f83e 	bl	80125ac <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	4413      	add	r3, r2
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d107      	bne.n	800e54e <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800e53e:	2300      	movs	r3, #0
 800e540:	43db      	mvns	r3, r3
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	429a      	cmp	r2, r3
 800e546:	d13a      	bne.n	800e5be <compactRecords+0xb6>
            {
                emptyIndex = index;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	60bb      	str	r3, [r7, #8]
 800e54c:	e037      	b.n	800e5be <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800e54e:	2300      	movs	r3, #0
 800e550:	43db      	mvns	r3, r3
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	429a      	cmp	r2, r3
 800e556:	d032      	beq.n	800e5be <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	441a      	add	r2, r3
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	440b      	add	r3, r1
 800e568:	8812      	ldrh	r2, [r2, #0]
 800e56a:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	441a      	add	r2, r3
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	440b      	add	r3, r1
 800e57c:	7892      	ldrb	r2, [r2, #2]
 800e57e:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	441a      	add	r2, r3
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	6879      	ldr	r1, [r7, #4]
 800e58e:	440b      	add	r3, r1
 800e590:	78d2      	ldrb	r2, [r2, #3]
 800e592:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	4413      	add	r3, r2
 800e59c:	2200      	movs	r2, #0
 800e59e:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	60fb      	str	r3, [r7, #12]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d3b1      	bcc.n	800e530 <compactRecords+0x28>
            }
        }
    }
}
 800e5cc:	bf00      	nop
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	08015444 	.word	0x08015444
 800e5dc:	08015a68 	.word	0x08015a68
 800e5e0:	08015414 	.word	0x08015414

0800e5e4 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	80fb      	strh	r3, [r7, #6]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800e606:	2300      	movs	r3, #0
 800e608:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e60a:	88fb      	ldrh	r3, [r7, #6]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d106      	bne.n	800e61e <addRecord+0x3a>
 800e610:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <addRecord+0xf8>)
 800e612:	4a33      	ldr	r2, [pc, #204]	; (800e6e0 <addRecord+0xfc>)
 800e614:	f240 2115 	movw	r1, #533	; 0x215
 800e618:	4832      	ldr	r0, [pc, #200]	; (800e6e4 <addRecord+0x100>)
 800e61a:	f003 ffc7 	bl	80125ac <__assert_func>
    assert( qos != MQTTQoS0 );
 800e61e:	797b      	ldrb	r3, [r7, #5]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d106      	bne.n	800e632 <addRecord+0x4e>
 800e624:	4b30      	ldr	r3, [pc, #192]	; (800e6e8 <addRecord+0x104>)
 800e626:	4a2e      	ldr	r2, [pc, #184]	; (800e6e0 <addRecord+0xfc>)
 800e628:	f240 2116 	movw	r1, #534	; 0x216
 800e62c:	482d      	ldr	r0, [pc, #180]	; (800e6e4 <addRecord+0x100>)
 800e62e:	f003 ffbd 	bl	80125ac <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e638:	3b01      	subs	r3, #1
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800e646:	68b9      	ldr	r1, [r7, #8]
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7ff ff5d 	bl	800e508 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	3b01      	subs	r3, #1
 800e652:	61bb      	str	r3, [r7, #24]
 800e654:	e021      	b.n	800e69a <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	4413      	add	r3, r2
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d108      	bne.n	800e676 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800e664:	7cfb      	ldrb	r3, [r7, #19]
 800e666:	f083 0301 	eor.w	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d011      	beq.n	800e694 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	e00e      	b.n	800e694 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800e676:	2301      	movs	r3, #1
 800e678:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	4413      	add	r3, r2
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	88fa      	ldrh	r2, [r7, #6]
 800e686:	429a      	cmp	r2, r3
 800e688:	d104      	bne.n	800e694 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800e68a:	2309      	movs	r3, #9
 800e68c:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	617b      	str	r3, [r7, #20]
                break;
 800e692:	e005      	b.n	800e6a0 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	3b01      	subs	r3, #1
 800e698:	61bb      	str	r3, [r7, #24]
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dada      	bge.n	800e656 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d214      	bcs.n	800e6d2 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	88fa      	ldrh	r2, [r7, #6]
 800e6b2:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	797a      	ldrb	r2, [r7, #5]
 800e6be:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e6cc:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800e6d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3720      	adds	r7, #32
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	080153f0 	.word	0x080153f0
 800e6e0:	08015a78 	.word	0x08015a78
 800e6e4:	08015414 	.word	0x08015414
 800e6e8:	08015454 	.word	0x08015454

0800e6ec <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	71fb      	strb	r3, [r7, #7]
 800e6fe:	4613      	mov	r3, r2
 800e700:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <updateRecord+0x2a>
 800e708:	4b13      	ldr	r3, [pc, #76]	; (800e758 <updateRecord+0x6c>)
 800e70a:	4a14      	ldr	r2, [pc, #80]	; (800e75c <updateRecord+0x70>)
 800e70c:	f240 2152 	movw	r1, #594	; 0x252
 800e710:	4813      	ldr	r0, [pc, #76]	; (800e760 <updateRecord+0x74>)
 800e712:	f003 ff4b 	bl	80125ac <__assert_func>

    if( shouldDelete == true )
 800e716:	79bb      	ldrb	r3, [r7, #6]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d012      	beq.n	800e742 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	4413      	add	r3, r2
 800e724:	2200      	movs	r2, #0
 800e726:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	2200      	movs	r2, #0
 800e732:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	4413      	add	r3, r2
 800e73c:	2200      	movs	r2, #0
 800e73e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800e740:	e005      	b.n	800e74e <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4413      	add	r3, r2
 800e74a:	79fa      	ldrb	r2, [r7, #7]
 800e74c:	70da      	strb	r2, [r3, #3]
}
 800e74e:	bf00      	nop
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	08015444 	.word	0x08015444
 800e75c:	08015a84 	.word	0x08015a84
 800e760:	08015414 	.word	0x08015414

0800e764 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	460b      	mov	r3, r1
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e772:	2300      	movs	r3, #0
 800e774:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800e776:	2300      	movs	r3, #0
 800e778:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800e77e:	2300      	movs	r3, #0
 800e780:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d106      	bne.n	800e796 <stateSelect+0x32>
 800e788:	4b43      	ldr	r3, [pc, #268]	; (800e898 <stateSelect+0x134>)
 800e78a:	4a44      	ldr	r2, [pc, #272]	; (800e89c <stateSelect+0x138>)
 800e78c:	f240 216d 	movw	r1, #621	; 0x26d
 800e790:	4843      	ldr	r0, [pc, #268]	; (800e8a0 <stateSelect+0x13c>)
 800e792:	f003 ff0b 	bl	80125ac <__assert_func>
    assert( searchStates != 0U );
 800e796:	897b      	ldrh	r3, [r7, #10]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d106      	bne.n	800e7aa <stateSelect+0x46>
 800e79c:	4b41      	ldr	r3, [pc, #260]	; (800e8a4 <stateSelect+0x140>)
 800e79e:	4a3f      	ldr	r2, [pc, #252]	; (800e89c <stateSelect+0x138>)
 800e7a0:	f240 216e 	movw	r1, #622	; 0x26e
 800e7a4:	483e      	ldr	r0, [pc, #248]	; (800e8a0 <stateSelect+0x13c>)
 800e7a6:	f003 ff01 	bl	80125ac <__assert_func>
    assert( pCursor != NULL );
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d106      	bne.n	800e7be <stateSelect+0x5a>
 800e7b0:	4b3d      	ldr	r3, [pc, #244]	; (800e8a8 <stateSelect+0x144>)
 800e7b2:	4a3a      	ldr	r2, [pc, #232]	; (800e89c <stateSelect+0x138>)
 800e7b4:	f240 216f 	movw	r1, #623	; 0x26f
 800e7b8:	4839      	ldr	r0, [pc, #228]	; (800e8a0 <stateSelect+0x13c>)
 800e7ba:	f003 fef7 	bl	80125ac <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800e7be:	8bbb      	ldrh	r3, [r7, #28]
 800e7c0:	f043 0302 	orr.w	r3, r3, #2
 800e7c4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800e7c6:	8bbb      	ldrh	r3, [r7, #28]
 800e7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7cc:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800e7ce:	8bbb      	ldrh	r3, [r7, #28]
 800e7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800e7d6:	8bbb      	ldrh	r3, [r7, #28]
 800e7d8:	f043 0310 	orr.w	r3, r3, #16
 800e7dc:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800e7de:	8bbb      	ldrh	r3, [r7, #28]
 800e7e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7e4:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800e7e6:	8bba      	ldrh	r2, [r7, #28]
 800e7e8:	897b      	ldrh	r3, [r7, #10]
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d106      	bne.n	800e800 <stateSelect+0x9c>
 800e7f2:	4b2e      	ldr	r3, [pc, #184]	; (800e8ac <stateSelect+0x148>)
 800e7f4:	4a29      	ldr	r2, [pc, #164]	; (800e89c <stateSelect+0x138>)
 800e7f6:	f240 2179 	movw	r1, #633	; 0x279
 800e7fa:	4829      	ldr	r0, [pc, #164]	; (800e8a0 <stateSelect+0x13c>)
 800e7fc:	f003 fed6 	bl	80125ac <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800e800:	8bbb      	ldrh	r3, [r7, #28]
 800e802:	43da      	mvns	r2, r3
 800e804:	897b      	ldrh	r3, [r7, #10]
 800e806:	4013      	ands	r3, r2
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d006      	beq.n	800e81a <stateSelect+0xb6>
 800e80c:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <stateSelect+0x14c>)
 800e80e:	4a23      	ldr	r2, [pc, #140]	; (800e89c <stateSelect+0x138>)
 800e810:	f240 217a 	movw	r1, #634	; 0x27a
 800e814:	4822      	ldr	r0, [pc, #136]	; (800e8a0 <stateSelect+0x13c>)
 800e816:	f003 fec9 	bl	80125ac <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800e826:	e02d      	b.n	800e884 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800e828:	897a      	ldrh	r2, [r7, #10]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	69b9      	ldr	r1, [r7, #24]
 800e832:	440b      	add	r3, r1
 800e834:	78db      	ldrb	r3, [r3, #3]
 800e836:	4619      	mov	r1, r3
 800e838:	2301      	movs	r3, #1
 800e83a:	408b      	lsls	r3, r1
 800e83c:	401a      	ands	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	69b9      	ldr	r1, [r7, #24]
 800e846:	440b      	add	r3, r1
 800e848:	78db      	ldrb	r3, [r3, #3]
 800e84a:	4619      	mov	r1, r3
 800e84c:	2301      	movs	r3, #1
 800e84e:	408b      	lsls	r3, r1
 800e850:	429a      	cmp	r2, r3
 800e852:	bf0c      	ite	eq
 800e854:	2301      	moveq	r3, #1
 800e856:	2300      	movne	r3, #0
 800e858:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00c      	beq.n	800e87a <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	4413      	add	r3, r2
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	601a      	str	r2, [r3, #0]
            break;
 800e878:	e009      	b.n	800e88e <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d8cc      	bhi.n	800e828 <stateSelect+0xc4>
    }

    return packetId;
 800e88e:	8bfb      	ldrh	r3, [r7, #30]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3720      	adds	r7, #32
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	08015464 	.word	0x08015464
 800e89c:	08015a94 	.word	0x08015a94
 800e8a0:	08015414 	.word	0x08015414
 800e8a4:	0801547c 	.word	0x0801547c
 800e8a8:	08015490 	.word	0x08015490
 800e8ac:	080154a0 	.word	0x080154a0
 800e8b0:	080154c8 	.word	0x080154c8

0800e8b4 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	71fb      	strb	r3, [r7, #7]
 800e8be:	460b      	mov	r3, r1
 800e8c0:	71bb      	strb	r3, [r7, #6]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800e8ca:	797b      	ldrb	r3, [r7, #5]
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	bf0c      	ite	eq
 800e8d0:	2301      	moveq	r3, #1
 800e8d2:	2300      	movne	r3, #0
 800e8d4:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d827      	bhi.n	800e92c <MQTT_CalculateStateAck+0x78>
 800e8dc:	a201      	add	r2, pc, #4	; (adr r2, 800e8e4 <MQTT_CalculateStateAck+0x30>)
 800e8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e2:	bf00      	nop
 800e8e4:	0800e8f5 	.word	0x0800e8f5
 800e8e8:	0800e907 	.word	0x0800e907
 800e8ec:	0800e917 	.word	0x0800e917
 800e8f0:	0800e927 	.word	0x0800e927
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800e8f4:	797b      	ldrb	r3, [r7, #5]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	bf0c      	ite	eq
 800e8fa:	2301      	moveq	r3, #1
 800e8fc:	2300      	movne	r3, #0
 800e8fe:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800e900:	230a      	movs	r3, #10
 800e902:	73fb      	strb	r3, [r7, #15]
            break;
 800e904:	e013      	b.n	800e92e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800e906:	79bb      	ldrb	r3, [r7, #6]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d101      	bne.n	800e910 <MQTT_CalculateStateAck+0x5c>
 800e90c:	2308      	movs	r3, #8
 800e90e:	e000      	b.n	800e912 <MQTT_CalculateStateAck+0x5e>
 800e910:	2304      	movs	r3, #4
 800e912:	73fb      	strb	r3, [r7, #15]
            break;
 800e914:	e00b      	b.n	800e92e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800e916:	79bb      	ldrb	r3, [r7, #6]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d101      	bne.n	800e920 <MQTT_CalculateStateAck+0x6c>
 800e91c:	2309      	movs	r3, #9
 800e91e:	e000      	b.n	800e922 <MQTT_CalculateStateAck+0x6e>
 800e920:	2305      	movs	r3, #5
 800e922:	73fb      	strb	r3, [r7, #15]
            break;
 800e924:	e003      	b.n	800e92e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800e926:	230a      	movs	r3, #10
 800e928:	73fb      	strb	r3, [r7, #15]
            break;
 800e92a:	e000      	b.n	800e92e <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800e92c:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800e92e:	7bbb      	ldrb	r3, [r7, #14]
 800e930:	f083 0301 	eor.w	r3, r3, #1
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d001      	beq.n	800e93e <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800e93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	af02      	add	r7, sp, #8
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800e95a:	2308      	movs	r3, #8
 800e95c:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800e95e:	2300      	movs	r3, #0
 800e960:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800e962:	2300      	movs	r3, #0
 800e964:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d106      	bne.n	800e97a <updateStateAck+0x2e>
 800e96c:	4b22      	ldr	r3, [pc, #136]	; (800e9f8 <updateStateAck+0xac>)
 800e96e:	4a23      	ldr	r2, [pc, #140]	; (800e9fc <updateStateAck+0xb0>)
 800e970:	f240 21cf 	movw	r1, #719	; 0x2cf
 800e974:	4822      	ldr	r0, [pc, #136]	; (800ea00 <updateStateAck+0xb4>)
 800e976:	f003 fe19 	bl	80125ac <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800e97a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e97e:	2b0a      	cmp	r3, #10
 800e980:	d003      	beq.n	800e98a <updateStateAck+0x3e>
 800e982:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e986:	2b04      	cmp	r3, #4
 800e988:	d101      	bne.n	800e98e <updateStateAck+0x42>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e000      	b.n	800e990 <updateStateAck+0x44>
 800e98e:	2300      	movs	r3, #0
 800e990:	75bb      	strb	r3, [r7, #22]
 800e992:	7dbb      	ldrb	r3, [r7, #22]
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800e99a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e99e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7ff fcc3 	bl	800e330 <validateTransitionAck>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800e9ae:	7d7b      	ldrb	r3, [r7, #21]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01c      	beq.n	800e9ee <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800e9b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e9bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d014      	beq.n	800e9ee <updateStateAck+0xa2>
        {
            updateRecord( records,
 800e9c4:	7dbb      	ldrb	r3, [r7, #22]
 800e9c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff fe8d 	bl	800e6ec <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800e9d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9d6:	2b04      	cmp	r3, #4
 800e9d8:	d109      	bne.n	800e9ee <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800e9da:	887a      	ldrh	r2, [r7, #2]
 800e9dc:	2304      	movs	r3, #4
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7ff fdfd 	bl	800e5e4 <addRecord>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	08015444 	.word	0x08015444
 800e9fc:	08015aa0 	.word	0x08015aa0
 800ea00:	08015414 	.word	0x08015414

0800ea04 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800ea04:	b590      	push	{r4, r7, lr}
 800ea06:	b089      	sub	sp, #36	; 0x24
 800ea08:	af02      	add	r7, sp, #8
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4611      	mov	r1, r2
 800ea10:	461a      	mov	r2, r3
 800ea12:	460b      	mov	r3, r1
 800ea14:	80fb      	strh	r3, [r7, #6]
 800ea16:	4613      	mov	r3, r2
 800ea18:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d106      	bne.n	800ea36 <updateStatePublish+0x32>
 800ea28:	4b29      	ldr	r3, [pc, #164]	; (800ead0 <updateStatePublish+0xcc>)
 800ea2a:	4a2a      	ldr	r2, [pc, #168]	; (800ead4 <updateStatePublish+0xd0>)
 800ea2c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800ea30:	4829      	ldr	r0, [pc, #164]	; (800ead8 <updateStatePublish+0xd4>)
 800ea32:	f003 fdbb 	bl	80125ac <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800ea36:	88fb      	ldrh	r3, [r7, #6]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <updateStatePublish+0x46>
 800ea3c:	4b27      	ldr	r3, [pc, #156]	; (800eadc <updateStatePublish+0xd8>)
 800ea3e:	4a25      	ldr	r2, [pc, #148]	; (800ead4 <updateStatePublish+0xd0>)
 800ea40:	f240 310d 	movw	r1, #781	; 0x30d
 800ea44:	4824      	ldr	r0, [pc, #144]	; (800ead8 <updateStatePublish+0xd4>)
 800ea46:	f003 fdb1 	bl	80125ac <__assert_func>
    assert( qos != MQTTQoS0 );
 800ea4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <updateStatePublish+0x5c>
 800ea52:	4b23      	ldr	r3, [pc, #140]	; (800eae0 <updateStatePublish+0xdc>)
 800ea54:	4a1f      	ldr	r2, [pc, #124]	; (800ead4 <updateStatePublish+0xd0>)
 800ea56:	f240 310e 	movw	r1, #782	; 0x30e
 800ea5a:	481f      	ldr	r0, [pc, #124]	; (800ead8 <updateStatePublish+0xd4>)
 800ea5c:	f003 fda6 	bl	80125ac <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800ea60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea64:	797a      	ldrb	r2, [r7, #5]
 800ea66:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800ea6a:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800ea6e:	f7ff fbf9 	bl	800e264 <validateTransitionPublish>
 800ea72:	4603      	mov	r3, r0
 800ea74:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800ea76:	7dbb      	ldrb	r3, [r7, #22]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d021      	beq.n	800eac0 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800ea7c:	797b      	ldrb	r3, [r7, #5]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d10f      	bne.n	800eaa2 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6858      	ldr	r0, [r3, #4]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	68d9      	ldr	r1, [r3, #12]
 800ea8a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800ea8e:	88fa      	ldrh	r2, [r7, #6]
 800ea90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	4623      	mov	r3, r4
 800ea98:	f7ff fda4 	bl	800e5e4 <addRecord>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	75fb      	strb	r3, [r7, #23]
 800eaa0:	e010      	b.n	800eac4 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800eaa2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eaa6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d00a      	beq.n	800eac4 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6818      	ldr	r0, [r3, #0]
 800eab2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800eab6:	2300      	movs	r3, #0
 800eab8:	68b9      	ldr	r1, [r7, #8]
 800eaba:	f7ff fe17 	bl	800e6ec <updateRecord>
 800eabe:	e001      	b.n	800eac4 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800eac0:	2308      	movs	r3, #8
 800eac2:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd90      	pop	{r4, r7, pc}
 800eace:	bf00      	nop
 800ead0:	08015464 	.word	0x08015464
 800ead4:	08015ab0 	.word	0x08015ab0
 800ead8:	08015414 	.word	0x08015414
 800eadc:	080153f0 	.word	0x080153f0
 800eae0:	08015454 	.word	0x08015454

0800eae4 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af02      	add	r7, sp, #8
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	807b      	strh	r3, [r7, #2]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800eaf8:	787b      	ldrb	r3, [r7, #1]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800eafe:	2300      	movs	r3, #0
 800eb00:	73fb      	strb	r3, [r7, #15]
 800eb02:	e014      	b.n	800eb2e <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800eb04:	887b      	ldrh	r3, [r7, #2]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <MQTT_ReserveState+0x2c>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800eb10:	2301      	movs	r3, #1
 800eb12:	73fb      	strb	r3, [r7, #15]
 800eb14:	e00b      	b.n	800eb2e <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6899      	ldr	r1, [r3, #8]
 800eb1e:	787b      	ldrb	r3, [r7, #1]
 800eb20:	887a      	ldrh	r2, [r7, #2]
 800eb22:	2401      	movs	r4, #1
 800eb24:	9400      	str	r4, [sp, #0]
 800eb26:	f7ff fd5d 	bl	800e5e4 <addRecord>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd90      	pop	{r4, r7, pc}

0800eb38 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	460a      	mov	r2, r1
 800eb42:	71fb      	strb	r3, [r7, #7]
 800eb44:	4613      	mov	r3, r2
 800eb46:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800eb4c:	79bb      	ldrb	r3, [r7, #6]
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d011      	beq.n	800eb76 <MQTT_CalculateStatePublish+0x3e>
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	dc17      	bgt.n	800eb86 <MQTT_CalculateStatePublish+0x4e>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <MQTT_CalculateStatePublish+0x28>
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d003      	beq.n	800eb66 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800eb5e:	e012      	b.n	800eb86 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800eb60:	230a      	movs	r3, #10
 800eb62:	73fb      	strb	r3, [r7, #15]
            break;
 800eb64:	e010      	b.n	800eb88 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800eb66:	79fb      	ldrb	r3, [r7, #7]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <MQTT_CalculateStatePublish+0x38>
 800eb6c:	2306      	movs	r3, #6
 800eb6e:	e000      	b.n	800eb72 <MQTT_CalculateStatePublish+0x3a>
 800eb70:	2302      	movs	r3, #2
 800eb72:	73fb      	strb	r3, [r7, #15]
            break;
 800eb74:	e008      	b.n	800eb88 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800eb76:	79fb      	ldrb	r3, [r7, #7]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <MQTT_CalculateStatePublish+0x48>
 800eb7c:	2307      	movs	r3, #7
 800eb7e:	e000      	b.n	800eb82 <MQTT_CalculateStatePublish+0x4a>
 800eb80:	2303      	movs	r3, #3
 800eb82:	73fb      	strb	r3, [r7, #15]
            break;
 800eb84:	e000      	b.n	800eb88 <MQTT_CalculateStatePublish+0x50>
            break;
 800eb86:	bf00      	nop
    }

    return calculatedState;
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800eb96:	b590      	push	{r4, r7, lr}
 800eb98:	b08b      	sub	sp, #44	; 0x2c
 800eb9a:	af04      	add	r7, sp, #16
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	4608      	mov	r0, r1
 800eba0:	4611      	mov	r1, r2
 800eba2:	461a      	mov	r2, r3
 800eba4:	4603      	mov	r3, r0
 800eba6:	807b      	strh	r3, [r7, #2]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	707b      	strb	r3, [r7, #1]
 800ebac:	4613      	mov	r3, r2
 800ebae:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	43db      	mvns	r3, r3
 800ebc0:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d002      	beq.n	800ebd2 <MQTT_UpdateStatePublish+0x3c>
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d102      	bne.n	800ebd8 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	75fb      	strb	r3, [r7, #23]
 800ebd6:	e028      	b.n	800ec2a <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800ebd8:	783b      	ldrb	r3, [r7, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d103      	bne.n	800ebe6 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	220a      	movs	r2, #10
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	e021      	b.n	800ec2a <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800ebe6:	887b      	ldrh	r3, [r7, #2]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d102      	bne.n	800ebf2 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800ebec:	2301      	movs	r3, #1
 800ebee:	75fb      	strb	r3, [r7, #23]
 800ebf0:	e01b      	b.n	800ec2a <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800ebf2:	787b      	ldrb	r3, [r7, #1]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d118      	bne.n	800ec2a <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6818      	ldr	r0, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6899      	ldr	r1, [r3, #8]
 800ec00:	f107 040d 	add.w	r4, r7, #13
 800ec04:	887a      	ldrh	r2, [r7, #2]
 800ec06:	f107 030e 	add.w	r3, r7, #14
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4623      	mov	r3, r4
 800ec0e:	f7ff fc31 	bl	800e474 <findInRecord>
 800ec12:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800ec14:	2300      	movs	r3, #0
 800ec16:	43db      	mvns	r3, r3
 800ec18:	693a      	ldr	r2, [r7, #16]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d003      	beq.n	800ec26 <MQTT_UpdateStatePublish+0x90>
 800ec1e:	7b7b      	ldrb	r3, [r7, #13]
 800ec20:	783a      	ldrb	r2, [r7, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d001      	beq.n	800ec2a <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800ec26:	2301      	movs	r3, #1
 800ec28:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800ec2a:	783b      	ldrb	r3, [r7, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d020      	beq.n	800ec72 <MQTT_UpdateStatePublish+0xdc>
 800ec30:	7dfb      	ldrb	r3, [r7, #23]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d11d      	bne.n	800ec72 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800ec36:	783a      	ldrb	r2, [r7, #0]
 800ec38:	787b      	ldrb	r3, [r7, #1]
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff ff7b 	bl	800eb38 <MQTT_CalculateStatePublish>
 800ec42:	4603      	mov	r3, r0
 800ec44:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800ec46:	7bbb      	ldrb	r3, [r7, #14]
 800ec48:	7878      	ldrb	r0, [r7, #1]
 800ec4a:	8879      	ldrh	r1, [r7, #2]
 800ec4c:	7bfa      	ldrb	r2, [r7, #15]
 800ec4e:	9202      	str	r2, [sp, #8]
 800ec50:	9301      	str	r3, [sp, #4]
 800ec52:	783b      	ldrb	r3, [r7, #0]
 800ec54:	9300      	str	r3, [sp, #0]
 800ec56:	4603      	mov	r3, r0
 800ec58:	460a      	mov	r2, r1
 800ec5a:	6939      	ldr	r1, [r7, #16]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fed1 	bl	800ea04 <updateStatePublish>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800ec66:	7dfb      	ldrb	r3, [r7, #23]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d102      	bne.n	800ec72 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	7bfa      	ldrb	r2, [r7, #15]
 800ec70:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	371c      	adds	r7, #28
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd90      	pop	{r4, r7, pc}

0800ec7c <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af02      	add	r7, sp, #8
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	4608      	mov	r0, r1
 800ec86:	4611      	mov	r1, r2
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	807b      	strh	r3, [r7, #2]
 800ec8e:	460b      	mov	r3, r1
 800ec90:	707b      	strb	r3, [r7, #1]
 800ec92:	4613      	mov	r3, r2
 800ec94:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800ec96:	2300      	movs	r3, #0
 800ec98:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800ec9e:	783a      	ldrb	r2, [r7, #0]
 800eca0:	787b      	ldrb	r3, [r7, #1]
 800eca2:	4611      	mov	r1, r2
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff fbb7 	bl	800e418 <isPublishOutgoing>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	43db      	mvns	r3, r3
 800ecb6:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	43db      	mvns	r3, r3
 800ecbc:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800ecc2:	2305      	movs	r3, #5
 800ecc4:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <MQTT_UpdateStateAck+0x56>
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d102      	bne.n	800ecd8 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	74fb      	strb	r3, [r7, #19]
 800ecd6:	e027      	b.n	800ed28 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800ecd8:	887b      	ldrh	r3, [r7, #2]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800ecde:	2301      	movs	r3, #1
 800ece0:	74fb      	strb	r3, [r7, #19]
 800ece2:	e021      	b.n	800ed28 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800ece4:	787b      	ldrb	r3, [r7, #1]
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d902      	bls.n	800ecf0 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800ecea:	2301      	movs	r3, #1
 800ecec:	74fb      	strb	r3, [r7, #19]
 800ecee:	e01b      	b.n	800ed28 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800ecf0:	7c7b      	ldrb	r3, [r7, #17]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d006      	beq.n	800ed04 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	61fb      	str	r3, [r7, #28]
 800ed02:	e005      	b.n	800ed10 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800ed10:	f107 010f 	add.w	r1, r7, #15
 800ed14:	887a      	ldrh	r2, [r7, #2]
 800ed16:	f107 0310 	add.w	r3, r7, #16
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	69f9      	ldr	r1, [r7, #28]
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	f7ff fba7 	bl	800e474 <findInRecord>
 800ed26:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800ed28:	2300      	movs	r3, #0
 800ed2a:	43db      	mvns	r3, r3
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d01a      	beq.n	800ed68 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800ed32:	7bfa      	ldrb	r2, [r7, #15]
 800ed34:	7839      	ldrb	r1, [r7, #0]
 800ed36:	787b      	ldrb	r3, [r7, #1]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff fdbb 	bl	800e8b4 <MQTT_CalculateStateAck>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800ed42:	7c3b      	ldrb	r3, [r7, #16]
 800ed44:	8879      	ldrh	r1, [r7, #2]
 800ed46:	7cba      	ldrb	r2, [r7, #18]
 800ed48:	9201      	str	r2, [sp, #4]
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	69ba      	ldr	r2, [r7, #24]
 800ed50:	69f9      	ldr	r1, [r7, #28]
 800ed52:	6978      	ldr	r0, [r7, #20]
 800ed54:	f7ff fdfa 	bl	800e94c <updateStateAck>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800ed5c:	7cfb      	ldrb	r3, [r7, #19]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d102      	bne.n	800ed68 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	7cba      	ldrb	r2, [r7, #18]
 800ed66:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800ed68:	7cfb      	ldrb	r3, [r7, #19]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3720      	adds	r7, #32
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b086      	sub	sp, #24
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	60f8      	str	r0, [r7, #12]
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800ed82:	2300      	movs	r3, #0
 800ed84:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d01b      	beq.n	800edc4 <MQTT_PubrelToResend+0x52>
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d018      	beq.n	800edc4 <MQTT_PubrelToResend+0x52>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d015      	beq.n	800edc4 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800ed98:	8abb      	ldrh	r3, [r7, #20]
 800ed9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed9e:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800eda0:	8abb      	ldrh	r3, [r7, #20]
 800eda2:	f043 0310 	orr.w	r3, r3, #16
 800eda6:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800eda8:	8abb      	ldrh	r3, [r7, #20]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4619      	mov	r1, r3
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f7ff fcd8 	bl	800e764 <stateSelect>
 800edb4:	4603      	mov	r3, r0
 800edb6:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800edb8:	8afb      	ldrh	r3, [r7, #22]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d002      	beq.n	800edc4 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2204      	movs	r2, #4
 800edc2:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800edc4:	8afb      	ldrh	r3, [r7, #22]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800edd6:	af02      	add	r7, sp, #8
 800edd8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eddc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ede0:	6018      	str	r0, [r3, #0]
 800ede2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ede6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800edea:	6019      	str	r1, [r3, #0]
 800edec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800edf0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800edf4:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800edfc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee00:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	781a      	ldrb	r2, [r3, #0]
 800ee08:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee0c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee10:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800ee12:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee16:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	88da      	ldrh	r2, [r3, #6]
 800ee1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee22:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee26:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800ee28:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee2c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee30:	2200      	movs	r2, #0
 800ee32:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ee34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee38:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ee40:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee44:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	789a      	ldrb	r2, [r3, #2]
 800ee4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee50:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee54:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ee56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee5a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	78da      	ldrb	r2, [r3, #3]
 800ee62:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee66:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee6a:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ee6c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee70:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	791a      	ldrb	r2, [r3, #4]
 800ee78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee7c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee80:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ee82:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee86:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	795a      	ldrb	r2, [r3, #5]
 800ee8e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee92:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ee96:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800ee98:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ee9c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	785b      	ldrb	r3, [r3, #1]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d115      	bne.n	800eed4 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800eea8:	f107 0314 	add.w	r3, r7, #20
 800eeac:	4619      	mov	r1, r3
 800eeae:	482a      	ldr	r0, [pc, #168]	; (800ef58 <transport_recv+0x188>)
 800eeb0:	f7fb fc54 	bl	800a75c <ES_WIFI_StartClientConnection>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800eeba:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <transport_recv+0xf6>
			return 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	e042      	b.n	800ef4c <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800eec6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eeca:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2201      	movs	r2, #1
 800eed2:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800eed4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eed8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	7819      	ldrb	r1, [r3, #0]
 800eee0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eee4:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	b298      	uxth	r0, r3
 800eeec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eef0:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800eef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	4603      	mov	r3, r0
 800ef02:	6812      	ldr	r2, [r2, #0]
 800ef04:	4814      	ldr	r0, [pc, #80]	; (800ef58 <transport_recv+0x188>)
 800ef06:	f7fb fdcf 	bl	800aaa8 <ES_WIFI_ReceiveData>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800ef10:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00a      	beq.n	800ef2e <transport_recv+0x15e>
		socketStatus=0;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800ef1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ef22:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	705a      	strb	r2, [r3, #1]
 800ef2c:	e00c      	b.n	800ef48 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800ef2e:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ef32:	461a      	mov	r2, r3
 800ef34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ef38:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800ef40:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ef44:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800ef48:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20000d08 	.word	0x20000d08

0800ef5c <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08e      	sub	sp, #56	; 0x38
 800ef60:	af02      	add	r7, sp, #8
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	88db      	ldrh	r3, [r3, #6]
 800ef76:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	789b      	ldrb	r3, [r3, #2]
 800ef84:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	78db      	ldrb	r3, [r3, #3]
 800ef8a:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	791b      	ldrb	r3, [r3, #4]
 800ef90:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	795b      	ldrb	r3, [r3, #5]
 800ef96:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	785b      	ldrb	r3, [r3, #1]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d111      	bne.n	800efc4 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800efa0:	f107 0314 	add.w	r3, r7, #20
 800efa4:	4619      	mov	r1, r3
 800efa6:	481c      	ldr	r0, [pc, #112]	; (800f018 <transport_send+0xbc>)
 800efa8:	f7fb fbd8 	bl	800a75c <ES_WIFI_StartClientConnection>
 800efac:	4603      	mov	r3, r0
 800efae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800efb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <transport_send+0x62>
			return 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	e027      	b.n	800f00e <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2201      	movs	r2, #1
 800efc2:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	7819      	ldrb	r1, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	b29a      	uxth	r2, r3
 800efcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efd0:	9301      	str	r3, [sp, #4]
 800efd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	4613      	mov	r3, r2
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	480e      	ldr	r0, [pc, #56]	; (800f018 <transport_send+0xbc>)
 800efde:	f7fb fca7 	bl	800a930 <ES_WIFI_SendData>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800efe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00a      	beq.n	800f006 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800eff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800effa:	4619      	mov	r1, r3
 800effc:	4807      	ldr	r0, [pc, #28]	; (800f01c <transport_send+0xc0>)
 800effe:	f003 ffeb 	bl	8012fd8 <iprintf>
		return 0;
 800f002:	2300      	movs	r3, #0
 800f004:	e003      	b.n	800f00e <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800f006:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f00a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3730      	adds	r7, #48	; 0x30
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20000d08 	.word	0x20000d08
 800f01c:	080155c8 	.word	0x080155c8

0800f020 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	60ba      	str	r2, [r7, #8]
 800f028:	607b      	str	r3, [r7, #4]
 800f02a:	4603      	mov	r3, r0
 800f02c:	73fb      	strb	r3, [r7, #15]
 800f02e:	460b      	mov	r3, r1
 800f030:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	7bfa      	ldrb	r2, [r7, #15]
 800f036:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	7bba      	ldrb	r2, [r7, #14]
 800f03c:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a08      	ldr	r2, [pc, #32]	; (800f064 <init_transport_from_socket+0x44>)
 800f042:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a08      	ldr	r2, [pc, #32]	; (800f068 <init_transport_from_socket+0x48>)
 800f048:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	60da      	str	r2, [r3, #12]
}
 800f056:	bf00      	nop
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	0800edd1 	.word	0x0800edd1
 800f068:	0800ef5d 	.word	0x0800ef5d

0800f06c <__NVIC_SetPriority>:
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	6039      	str	r1, [r7, #0]
 800f076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	db0a      	blt.n	800f096 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	b2da      	uxtb	r2, r3
 800f084:	490c      	ldr	r1, [pc, #48]	; (800f0b8 <__NVIC_SetPriority+0x4c>)
 800f086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f08a:	0112      	lsls	r2, r2, #4
 800f08c:	b2d2      	uxtb	r2, r2
 800f08e:	440b      	add	r3, r1
 800f090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f094:	e00a      	b.n	800f0ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	4908      	ldr	r1, [pc, #32]	; (800f0bc <__NVIC_SetPriority+0x50>)
 800f09c:	79fb      	ldrb	r3, [r7, #7]
 800f09e:	f003 030f 	and.w	r3, r3, #15
 800f0a2:	3b04      	subs	r3, #4
 800f0a4:	0112      	lsls	r2, r2, #4
 800f0a6:	b2d2      	uxtb	r2, r2
 800f0a8:	440b      	add	r3, r1
 800f0aa:	761a      	strb	r2, [r3, #24]
}
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr
 800f0b8:	e000e100 	.word	0xe000e100
 800f0bc:	e000ed00 	.word	0xe000ed00

0800f0c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f0c4:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <SysTick_Handler+0x1c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f0c8:	f002 f804 	bl	80110d4 <xTaskGetSchedulerState>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d001      	beq.n	800f0d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f0d2:	f002 fff1 	bl	80120b8 <xPortSysTickHandler>
  }
}
 800f0d6:	bf00      	nop
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	e000e010 	.word	0xe000e010

0800f0e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	f06f 0004 	mvn.w	r0, #4
 800f0ea:	f7ff ffbf 	bl	800f06c <__NVIC_SetPriority>
#endif
}
 800f0ee:	bf00      	nop
 800f0f0:	bd80      	pop	{r7, pc}
	...

0800f0f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0fa:	f3ef 8305 	mrs	r3, IPSR
 800f0fe:	603b      	str	r3, [r7, #0]
  return(result);
 800f100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f102:	2b00      	cmp	r3, #0
 800f104:	d003      	beq.n	800f10e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f106:	f06f 0305 	mvn.w	r3, #5
 800f10a:	607b      	str	r3, [r7, #4]
 800f10c:	e00c      	b.n	800f128 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f10e:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <osKernelInitialize+0x44>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d105      	bne.n	800f122 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f116:	4b08      	ldr	r3, [pc, #32]	; (800f138 <osKernelInitialize+0x44>)
 800f118:	2201      	movs	r2, #1
 800f11a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	607b      	str	r3, [r7, #4]
 800f120:	e002      	b.n	800f128 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f122:	f04f 33ff 	mov.w	r3, #4294967295
 800f126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f128:	687b      	ldr	r3, [r7, #4]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	20001608 	.word	0x20001608

0800f13c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f142:	f3ef 8305 	mrs	r3, IPSR
 800f146:	603b      	str	r3, [r7, #0]
  return(result);
 800f148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f14e:	f06f 0305 	mvn.w	r3, #5
 800f152:	607b      	str	r3, [r7, #4]
 800f154:	e010      	b.n	800f178 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f156:	4b0b      	ldr	r3, [pc, #44]	; (800f184 <osKernelStart+0x48>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d109      	bne.n	800f172 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f15e:	f7ff ffbf 	bl	800f0e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f162:	4b08      	ldr	r3, [pc, #32]	; (800f184 <osKernelStart+0x48>)
 800f164:	2202      	movs	r2, #2
 800f166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f168:	f001 fb3a 	bl	80107e0 <vTaskStartScheduler>
      stat = osOK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	607b      	str	r3, [r7, #4]
 800f170:	e002      	b.n	800f178 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f172:	f04f 33ff 	mov.w	r3, #4294967295
 800f176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f178:	687b      	ldr	r3, [r7, #4]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20001608 	.word	0x20001608

0800f188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08e      	sub	sp, #56	; 0x38
 800f18c:	af04      	add	r7, sp, #16
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f194:	2300      	movs	r3, #0
 800f196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f198:	f3ef 8305 	mrs	r3, IPSR
 800f19c:	617b      	str	r3, [r7, #20]
  return(result);
 800f19e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d17e      	bne.n	800f2a2 <osThreadNew+0x11a>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d07b      	beq.n	800f2a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f1aa:	2380      	movs	r3, #128	; 0x80
 800f1ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f1ae:	2318      	movs	r3, #24
 800f1b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d045      	beq.n	800f24e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <osThreadNew+0x48>
        name = attr->name;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d008      	beq.n	800f1f6 <osThreadNew+0x6e>
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	2b38      	cmp	r3, #56	; 0x38
 800f1e8:	d805      	bhi.n	800f1f6 <osThreadNew+0x6e>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <osThreadNew+0x72>
        return (NULL);
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e054      	b.n	800f2a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	695b      	ldr	r3, [r3, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d003      	beq.n	800f20a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	695b      	ldr	r3, [r3, #20]
 800f206:	089b      	lsrs	r3, r3, #2
 800f208:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00e      	beq.n	800f230 <osThreadNew+0xa8>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	2bbf      	cmp	r3, #191	; 0xbf
 800f218:	d90a      	bls.n	800f230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d006      	beq.n	800f230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	695b      	ldr	r3, [r3, #20]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d002      	beq.n	800f230 <osThreadNew+0xa8>
        mem = 1;
 800f22a:	2301      	movs	r3, #1
 800f22c:	61bb      	str	r3, [r7, #24]
 800f22e:	e010      	b.n	800f252 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10c      	bne.n	800f252 <osThreadNew+0xca>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d108      	bne.n	800f252 <osThreadNew+0xca>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <osThreadNew+0xca>
          mem = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	61bb      	str	r3, [r7, #24]
 800f24c:	e001      	b.n	800f252 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d110      	bne.n	800f27a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f260:	9202      	str	r2, [sp, #8]
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6a3a      	ldr	r2, [r7, #32]
 800f26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f001 f8c6 	bl	8010400 <xTaskCreateStatic>
 800f274:	4603      	mov	r3, r0
 800f276:	613b      	str	r3, [r7, #16]
 800f278:	e013      	b.n	800f2a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d110      	bne.n	800f2a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	b29a      	uxth	r2, r3
 800f284:	f107 0310 	add.w	r3, r7, #16
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f001 f911 	bl	80104ba <xTaskCreate>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d001      	beq.n	800f2a2 <osThreadNew+0x11a>
            hTask = NULL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f2a2:	693b      	ldr	r3, [r7, #16]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3728      	adds	r7, #40	; 0x28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b088      	sub	sp, #32
 800f2b0:	af02      	add	r7, sp, #8
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <osThreadFlagsSet+0x1a>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	da03      	bge.n	800f2ce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f2c6:	f06f 0303 	mvn.w	r3, #3
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	e035      	b.n	800f33a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800f2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2d4:	f3ef 8305 	mrs	r3, IPSR
 800f2d8:	613b      	str	r3, [r7, #16]
  return(result);
 800f2da:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d01f      	beq.n	800f320 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f2e4:	f107 0308 	add.w	r3, r7, #8
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6978      	ldr	r0, [r7, #20]
 800f2f2:	f002 f899 	bl	8011428 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f2f6:	f107 030c 	add.w	r3, r7, #12
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	9200      	str	r2, [sp, #0]
 800f2fe:	2200      	movs	r2, #0
 800f300:	2100      	movs	r1, #0
 800f302:	6978      	ldr	r0, [r7, #20]
 800f304:	f002 f890 	bl	8011428 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d015      	beq.n	800f33a <osThreadFlagsSet+0x8e>
 800f30e:	4b0d      	ldr	r3, [pc, #52]	; (800f344 <osThreadFlagsSet+0x98>)
 800f310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	e00c      	b.n	800f33a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f320:	2300      	movs	r3, #0
 800f322:	2201      	movs	r2, #1
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6978      	ldr	r0, [r7, #20]
 800f328:	f001 ffc0 	bl	80112ac <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f32c:	f107 030c 	add.w	r3, r7, #12
 800f330:	2200      	movs	r2, #0
 800f332:	2100      	movs	r1, #0
 800f334:	6978      	ldr	r0, [r7, #20]
 800f336:	f001 ffb9 	bl	80112ac <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f33a:	68fb      	ldr	r3, [r7, #12]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	e000ed04 	.word	0xe000ed04

0800f348 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08c      	sub	sp, #48	; 0x30
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f354:	f3ef 8305 	mrs	r3, IPSR
 800f358:	617b      	str	r3, [r7, #20]
  return(result);
 800f35a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f360:	f06f 0305 	mvn.w	r3, #5
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f366:	e06b      	b.n	800f440 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	da03      	bge.n	800f376 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f36e:	f06f 0303 	mvn.w	r3, #3
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f374:	e064      	b.n	800f440 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	f003 0302 	and.w	r3, r3, #2
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f380:	2300      	movs	r3, #0
 800f382:	62bb      	str	r3, [r7, #40]	; 0x28
 800f384:	e001      	b.n	800f38a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f38a:	2300      	movs	r3, #0
 800f38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f392:	f001 fb43 	bl	8010a1c <xTaskGetTickCount>
 800f396:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f398:	f107 0210 	add.w	r2, r7, #16
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	f001 ff23 	bl	80111ec <xTaskNotifyWait>
 800f3a6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d137      	bne.n	800f41e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00c      	beq.n	800f3e2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d032      	beq.n	800f43a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10f      	bne.n	800f3fa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f3da:	f06f 0302 	mvn.w	r3, #2
 800f3de:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f3e0:	e02e      	b.n	800f440 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	4013      	ands	r3, r2
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d128      	bne.n	800f43e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d103      	bne.n	800f3fa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f3f2:	f06f 0302 	mvn.w	r3, #2
 800f3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f3f8:	e022      	b.n	800f440 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f3fa:	f001 fb0f 	bl	8010a1c <xTaskGetTickCount>
 800f3fe:	4602      	mov	r2, r0
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f406:	69ba      	ldr	r2, [r7, #24]
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d902      	bls.n	800f414 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	627b      	str	r3, [r7, #36]	; 0x24
 800f412:	e00e      	b.n	800f432 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
 800f41c:	e009      	b.n	800f432 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d103      	bne.n	800f42c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f424:	f06f 0302 	mvn.w	r3, #2
 800f428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f42a:	e002      	b.n	800f432 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f42c:	f06f 0301 	mvn.w	r3, #1
 800f430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d1af      	bne.n	800f398 <osThreadFlagsWait+0x50>
 800f438:	e002      	b.n	800f440 <osThreadFlagsWait+0xf8>
            break;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <osThreadFlagsWait+0xf8>
            break;
 800f43e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f442:	4618      	mov	r0, r3
 800f444:	3730      	adds	r7, #48	; 0x30
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b084      	sub	sp, #16
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f452:	f3ef 8305 	mrs	r3, IPSR
 800f456:	60bb      	str	r3, [r7, #8]
  return(result);
 800f458:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <osDelay+0x1c>
    stat = osErrorISR;
 800f45e:	f06f 0305 	mvn.w	r3, #5
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e007      	b.n	800f476 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f466:	2300      	movs	r3, #0
 800f468:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 f981 	bl	8010778 <vTaskDelay>
    }
  }

  return (stat);
 800f476:	68fb      	ldr	r3, [r7, #12]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f480:	b580      	push	{r7, lr}
 800f482:	b08a      	sub	sp, #40	; 0x28
 800f484:	af02      	add	r7, sp, #8
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f48c:	2300      	movs	r3, #0
 800f48e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f490:	f3ef 8305 	mrs	r3, IPSR
 800f494:	613b      	str	r3, [r7, #16]
  return(result);
 800f496:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d15f      	bne.n	800f55c <osMessageQueueNew+0xdc>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d05c      	beq.n	800f55c <osMessageQueueNew+0xdc>
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d059      	beq.n	800f55c <osMessageQueueNew+0xdc>
    mem = -1;
 800f4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d029      	beq.n	800f508 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d012      	beq.n	800f4e2 <osMessageQueueNew+0x62>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	2b4f      	cmp	r3, #79	; 0x4f
 800f4c2:	d90e      	bls.n	800f4e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00a      	beq.n	800f4e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	695a      	ldr	r2, [r3, #20]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	68b9      	ldr	r1, [r7, #8]
 800f4d4:	fb01 f303 	mul.w	r3, r1, r3
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d302      	bcc.n	800f4e2 <osMessageQueueNew+0x62>
        mem = 1;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	61bb      	str	r3, [r7, #24]
 800f4e0:	e014      	b.n	800f50c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d110      	bne.n	800f50c <osMessageQueueNew+0x8c>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10c      	bne.n	800f50c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d108      	bne.n	800f50c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	695b      	ldr	r3, [r3, #20]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d104      	bne.n	800f50c <osMessageQueueNew+0x8c>
          mem = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	61bb      	str	r3, [r7, #24]
 800f506:	e001      	b.n	800f50c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f508:	2300      	movs	r3, #0
 800f50a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d10b      	bne.n	800f52a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	691a      	ldr	r2, [r3, #16]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	2100      	movs	r1, #0
 800f51c:	9100      	str	r1, [sp, #0]
 800f51e:	68b9      	ldr	r1, [r7, #8]
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f000 fa2f 	bl	800f984 <xQueueGenericCreateStatic>
 800f526:	61f8      	str	r0, [r7, #28]
 800f528:	e008      	b.n	800f53c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d105      	bne.n	800f53c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f530:	2200      	movs	r2, #0
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 fa9d 	bl	800fa74 <xQueueGenericCreate>
 800f53a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00c      	beq.n	800f55c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d003      	beq.n	800f550 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	e001      	b.n	800f554 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f550:	2300      	movs	r3, #0
 800f552:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f554:	6979      	ldr	r1, [r7, #20]
 800f556:	69f8      	ldr	r0, [r7, #28]
 800f558:	f000 fef4 	bl	8010344 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f55c:	69fb      	ldr	r3, [r7, #28]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3720      	adds	r7, #32
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
	...

0800f568 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f568:	b580      	push	{r7, lr}
 800f56a:	b088      	sub	sp, #32
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	603b      	str	r3, [r7, #0]
 800f574:	4613      	mov	r3, r2
 800f576:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f580:	f3ef 8305 	mrs	r3, IPSR
 800f584:	617b      	str	r3, [r7, #20]
  return(result);
 800f586:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d028      	beq.n	800f5de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d005      	beq.n	800f59e <osMessageQueuePut+0x36>
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d002      	beq.n	800f59e <osMessageQueuePut+0x36>
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d003      	beq.n	800f5a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f59e:	f06f 0303 	mvn.w	r3, #3
 800f5a2:	61fb      	str	r3, [r7, #28]
 800f5a4:	e038      	b.n	800f618 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f5aa:	f107 0210 	add.w	r2, r7, #16
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	69b8      	ldr	r0, [r7, #24]
 800f5b4:	f000 fbba 	bl	800fd2c <xQueueGenericSendFromISR>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d003      	beq.n	800f5c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f5be:	f06f 0302 	mvn.w	r3, #2
 800f5c2:	61fb      	str	r3, [r7, #28]
 800f5c4:	e028      	b.n	800f618 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d025      	beq.n	800f618 <osMessageQueuePut+0xb0>
 800f5cc:	4b15      	ldr	r3, [pc, #84]	; (800f624 <osMessageQueuePut+0xbc>)
 800f5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	e01c      	b.n	800f618 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d002      	beq.n	800f5ea <osMessageQueuePut+0x82>
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d103      	bne.n	800f5f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f5ea:	f06f 0303 	mvn.w	r3, #3
 800f5ee:	61fb      	str	r3, [r7, #28]
 800f5f0:	e012      	b.n	800f618 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	68b9      	ldr	r1, [r7, #8]
 800f5f8:	69b8      	ldr	r0, [r7, #24]
 800f5fa:	f000 fa99 	bl	800fb30 <xQueueGenericSend>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b01      	cmp	r3, #1
 800f602:	d009      	beq.n	800f618 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d003      	beq.n	800f612 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f60a:	f06f 0301 	mvn.w	r3, #1
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	e002      	b.n	800f618 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f612:	f06f 0302 	mvn.w	r3, #2
 800f616:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f618:	69fb      	ldr	r3, [r7, #28]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f628:	b580      	push	{r7, lr}
 800f62a:	b088      	sub	sp, #32
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f63a:	2300      	movs	r3, #0
 800f63c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f63e:	f3ef 8305 	mrs	r3, IPSR
 800f642:	617b      	str	r3, [r7, #20]
  return(result);
 800f644:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f646:	2b00      	cmp	r3, #0
 800f648:	d028      	beq.n	800f69c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d005      	beq.n	800f65c <osMessageQueueGet+0x34>
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d002      	beq.n	800f65c <osMessageQueueGet+0x34>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d003      	beq.n	800f664 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f65c:	f06f 0303 	mvn.w	r3, #3
 800f660:	61fb      	str	r3, [r7, #28]
 800f662:	e037      	b.n	800f6d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f664:	2300      	movs	r3, #0
 800f666:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f668:	f107 0310 	add.w	r3, r7, #16
 800f66c:	461a      	mov	r2, r3
 800f66e:	68b9      	ldr	r1, [r7, #8]
 800f670:	69b8      	ldr	r0, [r7, #24]
 800f672:	f000 fcd7 	bl	8010024 <xQueueReceiveFromISR>
 800f676:	4603      	mov	r3, r0
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d003      	beq.n	800f684 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f67c:	f06f 0302 	mvn.w	r3, #2
 800f680:	61fb      	str	r3, [r7, #28]
 800f682:	e027      	b.n	800f6d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d024      	beq.n	800f6d4 <osMessageQueueGet+0xac>
 800f68a:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <osMessageQueueGet+0xb8>)
 800f68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	e01b      	b.n	800f6d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d002      	beq.n	800f6a8 <osMessageQueueGet+0x80>
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d103      	bne.n	800f6b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f6a8:	f06f 0303 	mvn.w	r3, #3
 800f6ac:	61fb      	str	r3, [r7, #28]
 800f6ae:	e011      	b.n	800f6d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f6b0:	683a      	ldr	r2, [r7, #0]
 800f6b2:	68b9      	ldr	r1, [r7, #8]
 800f6b4:	69b8      	ldr	r0, [r7, #24]
 800f6b6:	f000 fbd5 	bl	800fe64 <xQueueReceive>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d009      	beq.n	800f6d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f6c6:	f06f 0301 	mvn.w	r3, #1
 800f6ca:	61fb      	str	r3, [r7, #28]
 800f6cc:	e002      	b.n	800f6d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f6ce:	f06f 0302 	mvn.w	r3, #2
 800f6d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f6d4:	69fb      	ldr	r3, [r7, #28]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3720      	adds	r7, #32
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	e000ed04 	.word	0xe000ed04

0800f6e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	4a07      	ldr	r2, [pc, #28]	; (800f710 <vApplicationGetIdleTaskMemory+0x2c>)
 800f6f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	4a06      	ldr	r2, [pc, #24]	; (800f714 <vApplicationGetIdleTaskMemory+0x30>)
 800f6fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2280      	movs	r2, #128	; 0x80
 800f700:	601a      	str	r2, [r3, #0]
}
 800f702:	bf00      	nop
 800f704:	3714      	adds	r7, #20
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	2000160c 	.word	0x2000160c
 800f714:	200016cc 	.word	0x200016cc

0800f718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	4a07      	ldr	r2, [pc, #28]	; (800f744 <vApplicationGetTimerTaskMemory+0x2c>)
 800f728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	4a06      	ldr	r2, [pc, #24]	; (800f748 <vApplicationGetTimerTaskMemory+0x30>)
 800f72e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f736:	601a      	str	r2, [r3, #0]
}
 800f738:	bf00      	nop
 800f73a:	3714      	adds	r7, #20
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	200018cc 	.word	0x200018cc
 800f748:	2000198c 	.word	0x2000198c

0800f74c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f103 0208 	add.w	r2, r3, #8
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f04f 32ff 	mov.w	r2, #4294967295
 800f764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f103 0208 	add.w	r2, r3, #8
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f103 0208 	add.w	r2, r3, #8
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f79a:	bf00      	nop
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b085      	sub	sp, #20
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	689a      	ldr	r2, [r3, #8]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	683a      	ldr	r2, [r7, #0]
 800f7ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	1c5a      	adds	r2, r3, #1
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b085      	sub	sp, #20
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f804:	d103      	bne.n	800f80e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	60fb      	str	r3, [r7, #12]
 800f80c:	e00c      	b.n	800f828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	3308      	adds	r3, #8
 800f812:	60fb      	str	r3, [r7, #12]
 800f814:	e002      	b.n	800f81c <vListInsert+0x2e>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	429a      	cmp	r2, r3
 800f826:	d2f6      	bcs.n	800f816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	685a      	ldr	r2, [r3, #4]
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	683a      	ldr	r2, [r7, #0]
 800f836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	683a      	ldr	r2, [r7, #0]
 800f842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	601a      	str	r2, [r3, #0]
}
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	6892      	ldr	r2, [r2, #8]
 800f876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	689b      	ldr	r3, [r3, #8]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	6852      	ldr	r2, [r2, #4]
 800f880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d103      	bne.n	800f894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	1e5a      	subs	r2, r3, #1
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3714      	adds	r7, #20
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10a      	bne.n	800f8de <xQueueGenericReset+0x2a>
	__asm volatile
 800f8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8cc:	f383 8811 	msr	BASEPRI, r3
 800f8d0:	f3bf 8f6f 	isb	sy
 800f8d4:	f3bf 8f4f 	dsb	sy
 800f8d8:	60bb      	str	r3, [r7, #8]
}
 800f8da:	bf00      	nop
 800f8dc:	e7fe      	b.n	800f8dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f8de:	f002 fb59 	bl	8011f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ea:	68f9      	ldr	r1, [r7, #12]
 800f8ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f8ee:	fb01 f303 	mul.w	r3, r1, r3
 800f8f2:	441a      	add	r2, r3
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f90e:	3b01      	subs	r3, #1
 800f910:	68f9      	ldr	r1, [r7, #12]
 800f912:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f914:	fb01 f303 	mul.w	r3, r1, r3
 800f918:	441a      	add	r2, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	22ff      	movs	r2, #255	; 0xff
 800f922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	22ff      	movs	r2, #255	; 0xff
 800f92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d114      	bne.n	800f95e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01a      	beq.n	800f972 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	3310      	adds	r3, #16
 800f940:	4618      	mov	r0, r3
 800f942:	f001 fa05 	bl	8010d50 <xTaskRemoveFromEventList>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d012      	beq.n	800f972 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f94c:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <xQueueGenericReset+0xcc>)
 800f94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	e009      	b.n	800f972 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3310      	adds	r3, #16
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff fef2 	bl	800f74c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3324      	adds	r3, #36	; 0x24
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7ff feed 	bl	800f74c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f972:	f002 fb3f 	bl	8011ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f976:	2301      	movs	r3, #1
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	e000ed04 	.word	0xe000ed04

0800f984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f984:	b580      	push	{r7, lr}
 800f986:	b08e      	sub	sp, #56	; 0x38
 800f988:	af02      	add	r7, sp, #8
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10a      	bne.n	800f9ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9aa:	bf00      	nop
 800f9ac:	e7fe      	b.n	800f9ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d10a      	bne.n	800f9ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f9c6:	bf00      	nop
 800f9c8:	e7fe      	b.n	800f9c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <xQueueGenericCreateStatic+0x52>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <xQueueGenericCreateStatic+0x56>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e000      	b.n	800f9dc <xQueueGenericCreateStatic+0x58>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10a      	bne.n	800f9f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	623b      	str	r3, [r7, #32]
}
 800f9f2:	bf00      	nop
 800f9f4:	e7fe      	b.n	800f9f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d102      	bne.n	800fa02 <xQueueGenericCreateStatic+0x7e>
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <xQueueGenericCreateStatic+0x82>
 800fa02:	2301      	movs	r3, #1
 800fa04:	e000      	b.n	800fa08 <xQueueGenericCreateStatic+0x84>
 800fa06:	2300      	movs	r3, #0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d10a      	bne.n	800fa22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa10:	f383 8811 	msr	BASEPRI, r3
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	61fb      	str	r3, [r7, #28]
}
 800fa1e:	bf00      	nop
 800fa20:	e7fe      	b.n	800fa20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa22:	2350      	movs	r3, #80	; 0x50
 800fa24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2b50      	cmp	r3, #80	; 0x50
 800fa2a:	d00a      	beq.n	800fa42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa30:	f383 8811 	msr	BASEPRI, r3
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	61bb      	str	r3, [r7, #24]
}
 800fa3e:	bf00      	nop
 800fa40:	e7fe      	b.n	800fa40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fa42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00d      	beq.n	800fa6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	2201      	movs	r2, #1
 800fa52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	68b9      	ldr	r1, [r7, #8]
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f000 f83f 	bl	800fae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3730      	adds	r7, #48	; 0x30
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08a      	sub	sp, #40	; 0x28
 800fa78:	af02      	add	r7, sp, #8
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10a      	bne.n	800fa9e <xQueueGenericCreate+0x2a>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	613b      	str	r3, [r7, #16]
}
 800fa9a:	bf00      	nop
 800fa9c:	e7fe      	b.n	800fa9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	fb02 f303 	mul.w	r3, r2, r3
 800faa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	3350      	adds	r3, #80	; 0x50
 800faac:	4618      	mov	r0, r3
 800faae:	f002 fb93 	bl	80121d8 <pvPortMalloc>
 800fab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d011      	beq.n	800fade <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	3350      	adds	r3, #80	; 0x50
 800fac2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800facc:	79fa      	ldrb	r2, [r7, #7]
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	4613      	mov	r3, r2
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f000 f805 	bl	800fae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fade:	69bb      	ldr	r3, [r7, #24]
	}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3720      	adds	r7, #32
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
 800faf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d103      	bne.n	800fb04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	69ba      	ldr	r2, [r7, #24]
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	e002      	b.n	800fb0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb16:	2101      	movs	r1, #1
 800fb18:	69b8      	ldr	r0, [r7, #24]
 800fb1a:	f7ff fecb 	bl	800f8b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	78fa      	ldrb	r2, [r7, #3]
 800fb22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb26:	bf00      	nop
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
	...

0800fb30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08e      	sub	sp, #56	; 0x38
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d10a      	bne.n	800fb62 <xQueueGenericSend+0x32>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d103      	bne.n	800fb70 <xQueueGenericSend+0x40>
 800fb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <xQueueGenericSend+0x44>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <xQueueGenericSend+0x46>
 800fb74:	2300      	movs	r3, #0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10a      	bne.n	800fb90 <xQueueGenericSend+0x60>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb8c:	bf00      	nop
 800fb8e:	e7fe      	b.n	800fb8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d103      	bne.n	800fb9e <xQueueGenericSend+0x6e>
 800fb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d101      	bne.n	800fba2 <xQueueGenericSend+0x72>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e000      	b.n	800fba4 <xQueueGenericSend+0x74>
 800fba2:	2300      	movs	r3, #0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <xQueueGenericSend+0x8e>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	623b      	str	r3, [r7, #32]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbbe:	f001 fa89 	bl	80110d4 <xTaskGetSchedulerState>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d102      	bne.n	800fbce <xQueueGenericSend+0x9e>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <xQueueGenericSend+0xa2>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e000      	b.n	800fbd4 <xQueueGenericSend+0xa4>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10a      	bne.n	800fbee <xQueueGenericSend+0xbe>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	61fb      	str	r3, [r7, #28]
}
 800fbea:	bf00      	nop
 800fbec:	e7fe      	b.n	800fbec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbee:	f002 f9d1 	bl	8011f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d302      	bcc.n	800fc04 <xQueueGenericSend+0xd4>
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d129      	bne.n	800fc58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	68b9      	ldr	r1, [r7, #8]
 800fc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc0a:	f000 fa8b 	bl	8010124 <prvCopyDataToQueue>
 800fc0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d010      	beq.n	800fc3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	3324      	adds	r3, #36	; 0x24
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f001 f897 	bl	8010d50 <xTaskRemoveFromEventList>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d013      	beq.n	800fc50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fc28:	4b3f      	ldr	r3, [pc, #252]	; (800fd28 <xQueueGenericSend+0x1f8>)
 800fc2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc2e:	601a      	str	r2, [r3, #0]
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	e00a      	b.n	800fc50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d007      	beq.n	800fc50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fc40:	4b39      	ldr	r3, [pc, #228]	; (800fd28 <xQueueGenericSend+0x1f8>)
 800fc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc46:	601a      	str	r2, [r3, #0]
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fc50:	f002 f9d0 	bl	8011ff4 <vPortExitCritical>
				return pdPASS;
 800fc54:	2301      	movs	r3, #1
 800fc56:	e063      	b.n	800fd20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d103      	bne.n	800fc66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc5e:	f002 f9c9 	bl	8011ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fc62:	2300      	movs	r3, #0
 800fc64:	e05c      	b.n	800fd20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d106      	bne.n	800fc7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc6c:	f107 0314 	add.w	r3, r7, #20
 800fc70:	4618      	mov	r0, r3
 800fc72:	f001 f8d1 	bl	8010e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc76:	2301      	movs	r3, #1
 800fc78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc7a:	f002 f9bb 	bl	8011ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc7e:	f000 fe21 	bl	80108c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc82:	f002 f987 	bl	8011f94 <vPortEnterCritical>
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc8c:	b25b      	sxtb	r3, r3
 800fc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc92:	d103      	bne.n	800fc9c <xQueueGenericSend+0x16c>
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fca2:	b25b      	sxtb	r3, r3
 800fca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca8:	d103      	bne.n	800fcb2 <xQueueGenericSend+0x182>
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcb2:	f002 f99f 	bl	8011ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcb6:	1d3a      	adds	r2, r7, #4
 800fcb8:	f107 0314 	add.w	r3, r7, #20
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f001 f8c0 	bl	8010e44 <xTaskCheckForTimeOut>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d124      	bne.n	800fd14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fcca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fccc:	f000 fb22 	bl	8010314 <prvIsQueueFull>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d018      	beq.n	800fd08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	3310      	adds	r3, #16
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	4611      	mov	r1, r2
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 ffe6 	bl	8010cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fce6:	f000 faad 	bl	8010244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fcea:	f000 fdf9 	bl	80108e0 <xTaskResumeAll>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f47f af7c 	bne.w	800fbee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <xQueueGenericSend+0x1f8>)
 800fcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcfc:	601a      	str	r2, [r3, #0]
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	e772      	b.n	800fbee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd0a:	f000 fa9b 	bl	8010244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd0e:	f000 fde7 	bl	80108e0 <xTaskResumeAll>
 800fd12:	e76c      	b.n	800fbee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fd14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd16:	f000 fa95 	bl	8010244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd1a:	f000 fde1 	bl	80108e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fd1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3738      	adds	r7, #56	; 0x38
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	e000ed04 	.word	0xe000ed04

0800fd2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b090      	sub	sp, #64	; 0x40
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
 800fd38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10a      	bne.n	800fd5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd56:	bf00      	nop
 800fd58:	e7fe      	b.n	800fd58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d103      	bne.n	800fd68 <xQueueGenericSendFromISR+0x3c>
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d101      	bne.n	800fd6c <xQueueGenericSendFromISR+0x40>
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e000      	b.n	800fd6e <xQueueGenericSendFromISR+0x42>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d10a      	bne.n	800fd88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd84:	bf00      	nop
 800fd86:	e7fe      	b.n	800fd86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d103      	bne.n	800fd96 <xQueueGenericSendFromISR+0x6a>
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d101      	bne.n	800fd9a <xQueueGenericSendFromISR+0x6e>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <xQueueGenericSendFromISR+0x70>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10a      	bne.n	800fdb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	623b      	str	r3, [r7, #32]
}
 800fdb2:	bf00      	nop
 800fdb4:	e7fe      	b.n	800fdb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdb6:	f002 f9cf 	bl	8012158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fdba:	f3ef 8211 	mrs	r2, BASEPRI
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	61fa      	str	r2, [r7, #28]
 800fdd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d302      	bcc.n	800fde8 <xQueueGenericSendFromISR+0xbc>
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	2b02      	cmp	r3, #2
 800fde6:	d12f      	bne.n	800fe48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	68b9      	ldr	r1, [r7, #8]
 800fdfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdfe:	f000 f991 	bl	8010124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fe06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0a:	d112      	bne.n	800fe32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d016      	beq.n	800fe42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	3324      	adds	r3, #36	; 0x24
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 ff99 	bl	8010d50 <xTaskRemoveFromEventList>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00e      	beq.n	800fe42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00b      	beq.n	800fe42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	e007      	b.n	800fe42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe36:	3301      	adds	r3, #1
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	b25a      	sxtb	r2, r3
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe42:	2301      	movs	r3, #1
 800fe44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fe46:	e001      	b.n	800fe4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fe56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3740      	adds	r7, #64	; 0x40
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	; 0x30
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe70:	2300      	movs	r3, #0
 800fe72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d10a      	bne.n	800fe94 <xQueueReceive+0x30>
	__asm volatile
 800fe7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe82:	f383 8811 	msr	BASEPRI, r3
 800fe86:	f3bf 8f6f 	isb	sy
 800fe8a:	f3bf 8f4f 	dsb	sy
 800fe8e:	623b      	str	r3, [r7, #32]
}
 800fe90:	bf00      	nop
 800fe92:	e7fe      	b.n	800fe92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d103      	bne.n	800fea2 <xQueueReceive+0x3e>
 800fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d101      	bne.n	800fea6 <xQueueReceive+0x42>
 800fea2:	2301      	movs	r3, #1
 800fea4:	e000      	b.n	800fea8 <xQueueReceive+0x44>
 800fea6:	2300      	movs	r3, #0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10a      	bne.n	800fec2 <xQueueReceive+0x5e>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb0:	f383 8811 	msr	BASEPRI, r3
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	61fb      	str	r3, [r7, #28]
}
 800febe:	bf00      	nop
 800fec0:	e7fe      	b.n	800fec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fec2:	f001 f907 	bl	80110d4 <xTaskGetSchedulerState>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d102      	bne.n	800fed2 <xQueueReceive+0x6e>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d101      	bne.n	800fed6 <xQueueReceive+0x72>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <xQueueReceive+0x74>
 800fed6:	2300      	movs	r3, #0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d10a      	bne.n	800fef2 <xQueueReceive+0x8e>
	__asm volatile
 800fedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee0:	f383 8811 	msr	BASEPRI, r3
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	f3bf 8f4f 	dsb	sy
 800feec:	61bb      	str	r3, [r7, #24]
}
 800feee:	bf00      	nop
 800fef0:	e7fe      	b.n	800fef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fef2:	f002 f84f 	bl	8011f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d01f      	beq.n	800ff42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff06:	f000 f977 	bl	80101f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0c:	1e5a      	subs	r2, r3, #1
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00f      	beq.n	800ff3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1c:	3310      	adds	r3, #16
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 ff16 	bl	8010d50 <xTaskRemoveFromEventList>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d007      	beq.n	800ff3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff2a:	4b3d      	ldr	r3, [pc, #244]	; (8010020 <xQueueReceive+0x1bc>)
 800ff2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff3a:	f002 f85b 	bl	8011ff4 <vPortExitCritical>
				return pdPASS;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e069      	b.n	8010016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d103      	bne.n	800ff50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff48:	f002 f854 	bl	8011ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e062      	b.n	8010016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff56:	f107 0310 	add.w	r3, r7, #16
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 ff5c 	bl	8010e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff60:	2301      	movs	r3, #1
 800ff62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff64:	f002 f846 	bl	8011ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff68:	f000 fcac 	bl	80108c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff6c:	f002 f812 	bl	8011f94 <vPortEnterCritical>
 800ff70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff76:	b25b      	sxtb	r3, r3
 800ff78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7c:	d103      	bne.n	800ff86 <xQueueReceive+0x122>
 800ff7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff8c:	b25b      	sxtb	r3, r3
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff92:	d103      	bne.n	800ff9c <xQueueReceive+0x138>
 800ff94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff96:	2200      	movs	r2, #0
 800ff98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff9c:	f002 f82a 	bl	8011ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffa0:	1d3a      	adds	r2, r7, #4
 800ffa2:	f107 0310 	add.w	r3, r7, #16
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 ff4b 	bl	8010e44 <xTaskCheckForTimeOut>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d123      	bne.n	800fffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffb6:	f000 f997 	bl	80102e8 <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d017      	beq.n	800fff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc2:	3324      	adds	r3, #36	; 0x24
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	4611      	mov	r1, r2
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 fe71 	bl	8010cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffd0:	f000 f938 	bl	8010244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffd4:	f000 fc84 	bl	80108e0 <xTaskResumeAll>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d189      	bne.n	800fef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ffde:	4b10      	ldr	r3, [pc, #64]	; (8010020 <xQueueReceive+0x1bc>)
 800ffe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	f3bf 8f4f 	dsb	sy
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	e780      	b.n	800fef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff2:	f000 f927 	bl	8010244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fff6:	f000 fc73 	bl	80108e0 <xTaskResumeAll>
 800fffa:	e77a      	b.n	800fef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fffe:	f000 f921 	bl	8010244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010002:	f000 fc6d 	bl	80108e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010008:	f000 f96e 	bl	80102e8 <prvIsQueueEmpty>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	f43f af6f 	beq.w	800fef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010016:	4618      	mov	r0, r3
 8010018:	3730      	adds	r7, #48	; 0x30
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	e000ed04 	.word	0xe000ed04

08010024 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b08e      	sub	sp, #56	; 0x38
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10a      	bne.n	8010050 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	623b      	str	r3, [r7, #32]
}
 801004c:	bf00      	nop
 801004e:	e7fe      	b.n	801004e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d103      	bne.n	801005e <xQueueReceiveFromISR+0x3a>
 8010056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005a:	2b00      	cmp	r3, #0
 801005c:	d101      	bne.n	8010062 <xQueueReceiveFromISR+0x3e>
 801005e:	2301      	movs	r3, #1
 8010060:	e000      	b.n	8010064 <xQueueReceiveFromISR+0x40>
 8010062:	2300      	movs	r3, #0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d10a      	bne.n	801007e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006c:	f383 8811 	msr	BASEPRI, r3
 8010070:	f3bf 8f6f 	isb	sy
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	61fb      	str	r3, [r7, #28]
}
 801007a:	bf00      	nop
 801007c:	e7fe      	b.n	801007c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801007e:	f002 f86b 	bl	8012158 <vPortValidateInterruptPriority>
	__asm volatile
 8010082:	f3ef 8211 	mrs	r2, BASEPRI
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	61ba      	str	r2, [r7, #24]
 8010098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801009a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801009c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d02f      	beq.n	801010a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100b4:	68b9      	ldr	r1, [r7, #8]
 80100b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100b8:	f000 f89e 	bl	80101f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	1e5a      	subs	r2, r3, #1
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80100c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100cc:	d112      	bne.n	80100f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d016      	beq.n	8010104 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	3310      	adds	r3, #16
 80100da:	4618      	mov	r0, r3
 80100dc:	f000 fe38 	bl	8010d50 <xTaskRemoveFromEventList>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00e      	beq.n	8010104 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00b      	beq.n	8010104 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	e007      	b.n	8010104 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f8:	3301      	adds	r3, #1
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	b25a      	sxtb	r2, r3
 80100fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010104:	2301      	movs	r3, #1
 8010106:	637b      	str	r3, [r7, #52]	; 0x34
 8010108:	e001      	b.n	801010e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801010a:	2300      	movs	r3, #0
 801010c:	637b      	str	r3, [r7, #52]	; 0x34
 801010e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010110:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	f383 8811 	msr	BASEPRI, r3
}
 8010118:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801011a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801011c:	4618      	mov	r0, r3
 801011e:	3738      	adds	r7, #56	; 0x38
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010130:	2300      	movs	r3, #0
 8010132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10d      	bne.n	801015e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d14d      	bne.n	80101e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	4618      	mov	r0, r3
 8010150:	f000 ffde 	bl	8011110 <xTaskPriorityDisinherit>
 8010154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	609a      	str	r2, [r3, #8]
 801015c:	e043      	b.n	80101e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d119      	bne.n	8010198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6858      	ldr	r0, [r3, #4]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801016c:	461a      	mov	r2, r3
 801016e:	68b9      	ldr	r1, [r7, #8]
 8010170:	f002 fb7f 	bl	8012872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	685a      	ldr	r2, [r3, #4]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801017c:	441a      	add	r2, r3
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	685a      	ldr	r2, [r3, #4]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	429a      	cmp	r2, r3
 801018c:	d32b      	bcc.n	80101e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	605a      	str	r2, [r3, #4]
 8010196:	e026      	b.n	80101e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	68d8      	ldr	r0, [r3, #12]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101a0:	461a      	mov	r2, r3
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	f002 fb65 	bl	8012872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	68da      	ldr	r2, [r3, #12]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101b0:	425b      	negs	r3, r3
 80101b2:	441a      	add	r2, r3
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	68da      	ldr	r2, [r3, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d207      	bcs.n	80101d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	689a      	ldr	r2, [r3, #8]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101cc:	425b      	negs	r3, r3
 80101ce:	441a      	add	r2, r3
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b02      	cmp	r3, #2
 80101d8:	d105      	bne.n	80101e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	1c5a      	adds	r2, r3, #1
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80101ee:	697b      	ldr	r3, [r7, #20]
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010206:	2b00      	cmp	r3, #0
 8010208:	d018      	beq.n	801023c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010212:	441a      	add	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68da      	ldr	r2, [r3, #12]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	429a      	cmp	r2, r3
 8010222:	d303      	bcc.n	801022c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68d9      	ldr	r1, [r3, #12]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010234:	461a      	mov	r2, r3
 8010236:	6838      	ldr	r0, [r7, #0]
 8010238:	f002 fb1b 	bl	8012872 <memcpy>
	}
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801024c:	f001 fea2 	bl	8011f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010258:	e011      	b.n	801027e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025e:	2b00      	cmp	r3, #0
 8010260:	d012      	beq.n	8010288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	3324      	adds	r3, #36	; 0x24
 8010266:	4618      	mov	r0, r3
 8010268:	f000 fd72 	bl	8010d50 <xTaskRemoveFromEventList>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010272:	f000 fe49 	bl	8010f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010276:	7bfb      	ldrb	r3, [r7, #15]
 8010278:	3b01      	subs	r3, #1
 801027a:	b2db      	uxtb	r3, r3
 801027c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801027e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010282:	2b00      	cmp	r3, #0
 8010284:	dce9      	bgt.n	801025a <prvUnlockQueue+0x16>
 8010286:	e000      	b.n	801028a <prvUnlockQueue+0x46>
					break;
 8010288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	22ff      	movs	r2, #255	; 0xff
 801028e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010292:	f001 feaf 	bl	8011ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010296:	f001 fe7d 	bl	8011f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80102a2:	e011      	b.n	80102c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	691b      	ldr	r3, [r3, #16]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d012      	beq.n	80102d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	3310      	adds	r3, #16
 80102b0:	4618      	mov	r0, r3
 80102b2:	f000 fd4d 	bl	8010d50 <xTaskRemoveFromEventList>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80102bc:	f000 fe24 	bl	8010f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80102c0:	7bbb      	ldrb	r3, [r7, #14]
 80102c2:	3b01      	subs	r3, #1
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80102c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dce9      	bgt.n	80102a4 <prvUnlockQueue+0x60>
 80102d0:	e000      	b.n	80102d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80102d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	22ff      	movs	r2, #255	; 0xff
 80102d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80102dc:	f001 fe8a 	bl	8011ff4 <vPortExitCritical>
}
 80102e0:	bf00      	nop
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80102f0:	f001 fe50 	bl	8011f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d102      	bne.n	8010302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80102fc:	2301      	movs	r3, #1
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	e001      	b.n	8010306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010302:	2300      	movs	r3, #0
 8010304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010306:	f001 fe75 	bl	8011ff4 <vPortExitCritical>

	return xReturn;
 801030a:	68fb      	ldr	r3, [r7, #12]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801031c:	f001 fe3a 	bl	8011f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010328:	429a      	cmp	r2, r3
 801032a:	d102      	bne.n	8010332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801032c:	2301      	movs	r3, #1
 801032e:	60fb      	str	r3, [r7, #12]
 8010330:	e001      	b.n	8010336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010332:	2300      	movs	r3, #0
 8010334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010336:	f001 fe5d 	bl	8011ff4 <vPortExitCritical>

	return xReturn;
 801033a:	68fb      	ldr	r3, [r7, #12]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801034e:	2300      	movs	r3, #0
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	e014      	b.n	801037e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010354:	4a0f      	ldr	r2, [pc, #60]	; (8010394 <vQueueAddToRegistry+0x50>)
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10b      	bne.n	8010378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010360:	490c      	ldr	r1, [pc, #48]	; (8010394 <vQueueAddToRegistry+0x50>)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	683a      	ldr	r2, [r7, #0]
 8010366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801036a:	4a0a      	ldr	r2, [pc, #40]	; (8010394 <vQueueAddToRegistry+0x50>)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	4413      	add	r3, r2
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010376:	e006      	b.n	8010386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	3301      	adds	r3, #1
 801037c:	60fb      	str	r3, [r7, #12]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b07      	cmp	r3, #7
 8010382:	d9e7      	bls.n	8010354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010384:	bf00      	nop
 8010386:	bf00      	nop
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	20001d8c 	.word	0x20001d8c

08010398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80103a8:	f001 fdf4 	bl	8011f94 <vPortEnterCritical>
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103b2:	b25b      	sxtb	r3, r3
 80103b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b8:	d103      	bne.n	80103c2 <vQueueWaitForMessageRestricted+0x2a>
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103c8:	b25b      	sxtb	r3, r3
 80103ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ce:	d103      	bne.n	80103d8 <vQueueWaitForMessageRestricted+0x40>
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103d8:	f001 fe0c 	bl	8011ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d106      	bne.n	80103f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	3324      	adds	r3, #36	; 0x24
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	68b9      	ldr	r1, [r7, #8]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 fc83 	bl	8010cf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80103f2:	6978      	ldr	r0, [r7, #20]
 80103f4:	f7ff ff26 	bl	8010244 <prvUnlockQueue>
	}
 80103f8:	bf00      	nop
 80103fa:	3718      	adds	r7, #24
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010400:	b580      	push	{r7, lr}
 8010402:	b08e      	sub	sp, #56	; 0x38
 8010404:	af04      	add	r7, sp, #16
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
 801040c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10a      	bne.n	801042a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010418:	f383 8811 	msr	BASEPRI, r3
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	623b      	str	r3, [r7, #32]
}
 8010426:	bf00      	nop
 8010428:	e7fe      	b.n	8010428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801042a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042c:	2b00      	cmp	r3, #0
 801042e:	d10a      	bne.n	8010446 <xTaskCreateStatic+0x46>
	__asm volatile
 8010430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	61fb      	str	r3, [r7, #28]
}
 8010442:	bf00      	nop
 8010444:	e7fe      	b.n	8010444 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010446:	23c0      	movs	r3, #192	; 0xc0
 8010448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2bc0      	cmp	r3, #192	; 0xc0
 801044e:	d00a      	beq.n	8010466 <xTaskCreateStatic+0x66>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010454:	f383 8811 	msr	BASEPRI, r3
 8010458:	f3bf 8f6f 	isb	sy
 801045c:	f3bf 8f4f 	dsb	sy
 8010460:	61bb      	str	r3, [r7, #24]
}
 8010462:	bf00      	nop
 8010464:	e7fe      	b.n	8010464 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010466:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	2b00      	cmp	r3, #0
 801046c:	d01e      	beq.n	80104ac <xTaskCreateStatic+0xac>
 801046e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010470:	2b00      	cmp	r3, #0
 8010472:	d01b      	beq.n	80104ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010476:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801047c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	2202      	movs	r2, #2
 8010482:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010486:	2300      	movs	r3, #0
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048c:	9302      	str	r3, [sp, #8]
 801048e:	f107 0314 	add.w	r3, r7, #20
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	68b9      	ldr	r1, [r7, #8]
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f000 f850 	bl	8010544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104a6:	f000 f8f7 	bl	8010698 <prvAddNewTaskToReadyList>
 80104aa:	e001      	b.n	80104b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80104ac:	2300      	movs	r3, #0
 80104ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80104b0:	697b      	ldr	r3, [r7, #20]
	}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3728      	adds	r7, #40	; 0x28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b08c      	sub	sp, #48	; 0x30
 80104be:	af04      	add	r7, sp, #16
 80104c0:	60f8      	str	r0, [r7, #12]
 80104c2:	60b9      	str	r1, [r7, #8]
 80104c4:	603b      	str	r3, [r7, #0]
 80104c6:	4613      	mov	r3, r2
 80104c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80104ca:	88fb      	ldrh	r3, [r7, #6]
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4618      	mov	r0, r3
 80104d0:	f001 fe82 	bl	80121d8 <pvPortMalloc>
 80104d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00e      	beq.n	80104fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80104dc:	20c0      	movs	r0, #192	; 0xc0
 80104de:	f001 fe7b 	bl	80121d8 <pvPortMalloc>
 80104e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d003      	beq.n	80104f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	697a      	ldr	r2, [r7, #20]
 80104ee:	631a      	str	r2, [r3, #48]	; 0x30
 80104f0:	e005      	b.n	80104fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80104f2:	6978      	ldr	r0, [r7, #20]
 80104f4:	f001 ff3c 	bl	8012370 <vPortFree>
 80104f8:	e001      	b.n	80104fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80104fa:	2300      	movs	r3, #0
 80104fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d017      	beq.n	8010534 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	2200      	movs	r2, #0
 8010508:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801050c:	88fa      	ldrh	r2, [r7, #6]
 801050e:	2300      	movs	r3, #0
 8010510:	9303      	str	r3, [sp, #12]
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	9302      	str	r3, [sp, #8]
 8010516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010518:	9301      	str	r3, [sp, #4]
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f000 f80e 	bl	8010544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010528:	69f8      	ldr	r0, [r7, #28]
 801052a:	f000 f8b5 	bl	8010698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801052e:	2301      	movs	r3, #1
 8010530:	61bb      	str	r3, [r7, #24]
 8010532:	e002      	b.n	801053a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010534:	f04f 33ff 	mov.w	r3, #4294967295
 8010538:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801053a:	69bb      	ldr	r3, [r7, #24]
	}
 801053c:	4618      	mov	r0, r3
 801053e:	3720      	adds	r7, #32
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b088      	sub	sp, #32
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
 8010550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	461a      	mov	r2, r3
 801055c:	21a5      	movs	r1, #165	; 0xa5
 801055e:	f002 f9b0 	bl	80128c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801056c:	3b01      	subs	r3, #1
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4413      	add	r3, r2
 8010572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	f023 0307 	bic.w	r3, r3, #7
 801057a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	f003 0307 	and.w	r3, r3, #7
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00a      	beq.n	801059c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	617b      	str	r3, [r7, #20]
}
 8010598:	bf00      	nop
 801059a:	e7fe      	b.n	801059a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d01f      	beq.n	80105e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80105a2:	2300      	movs	r3, #0
 80105a4:	61fb      	str	r3, [r7, #28]
 80105a6:	e012      	b.n	80105ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	4413      	add	r3, r2
 80105ae:	7819      	ldrb	r1, [r3, #0]
 80105b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	4413      	add	r3, r2
 80105b6:	3334      	adds	r3, #52	; 0x34
 80105b8:	460a      	mov	r2, r1
 80105ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80105bc:	68ba      	ldr	r2, [r7, #8]
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	4413      	add	r3, r2
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d006      	beq.n	80105d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	3301      	adds	r3, #1
 80105cc:	61fb      	str	r3, [r7, #28]
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	2b0f      	cmp	r3, #15
 80105d2:	d9e9      	bls.n	80105a8 <prvInitialiseNewTask+0x64>
 80105d4:	e000      	b.n	80105d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80105d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	2200      	movs	r2, #0
 80105dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105e0:	e003      	b.n	80105ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80105ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ec:	2b37      	cmp	r3, #55	; 0x37
 80105ee:	d901      	bls.n	80105f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80105f0:	2337      	movs	r3, #55	; 0x37
 80105f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80105f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	2200      	movs	r2, #0
 8010604:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010608:	3304      	adds	r3, #4
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff f8be 	bl	800f78c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010612:	3318      	adds	r3, #24
 8010614:	4618      	mov	r0, r3
 8010616:	f7ff f8b9 	bl	800f78c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010622:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801062a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801062e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010632:	2200      	movs	r2, #0
 8010634:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	2200      	movs	r2, #0
 801063a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010640:	2200      	movs	r2, #0
 8010642:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010648:	3358      	adds	r3, #88	; 0x58
 801064a:	2260      	movs	r2, #96	; 0x60
 801064c:	2100      	movs	r1, #0
 801064e:	4618      	mov	r0, r3
 8010650:	f002 f937 	bl	80128c2 <memset>
 8010654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010656:	4a0d      	ldr	r2, [pc, #52]	; (801068c <prvInitialiseNewTask+0x148>)
 8010658:	65da      	str	r2, [r3, #92]	; 0x5c
 801065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065c:	4a0c      	ldr	r2, [pc, #48]	; (8010690 <prvInitialiseNewTask+0x14c>)
 801065e:	661a      	str	r2, [r3, #96]	; 0x60
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	4a0c      	ldr	r2, [pc, #48]	; (8010694 <prvInitialiseNewTask+0x150>)
 8010664:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	68f9      	ldr	r1, [r7, #12]
 801066a:	69b8      	ldr	r0, [r7, #24]
 801066c:	f001 fb62 	bl	8011d34 <pxPortInitialiseStack>
 8010670:	4602      	mov	r2, r0
 8010672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010682:	bf00      	nop
 8010684:	3720      	adds	r7, #32
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	08015b20 	.word	0x08015b20
 8010690:	08015b40 	.word	0x08015b40
 8010694:	08015b00 	.word	0x08015b00

08010698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80106a0:	f001 fc78 	bl	8011f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80106a4:	4b2d      	ldr	r3, [pc, #180]	; (801075c <prvAddNewTaskToReadyList+0xc4>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	3301      	adds	r3, #1
 80106aa:	4a2c      	ldr	r2, [pc, #176]	; (801075c <prvAddNewTaskToReadyList+0xc4>)
 80106ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80106ae:	4b2c      	ldr	r3, [pc, #176]	; (8010760 <prvAddNewTaskToReadyList+0xc8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80106b6:	4a2a      	ldr	r2, [pc, #168]	; (8010760 <prvAddNewTaskToReadyList+0xc8>)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80106bc:	4b27      	ldr	r3, [pc, #156]	; (801075c <prvAddNewTaskToReadyList+0xc4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d110      	bne.n	80106e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80106c4:	f000 fc44 	bl	8010f50 <prvInitialiseTaskLists>
 80106c8:	e00d      	b.n	80106e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80106ca:	4b26      	ldr	r3, [pc, #152]	; (8010764 <prvAddNewTaskToReadyList+0xcc>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d109      	bne.n	80106e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80106d2:	4b23      	ldr	r3, [pc, #140]	; (8010760 <prvAddNewTaskToReadyList+0xc8>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106dc:	429a      	cmp	r2, r3
 80106de:	d802      	bhi.n	80106e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80106e0:	4a1f      	ldr	r2, [pc, #124]	; (8010760 <prvAddNewTaskToReadyList+0xc8>)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80106e6:	4b20      	ldr	r3, [pc, #128]	; (8010768 <prvAddNewTaskToReadyList+0xd0>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3301      	adds	r3, #1
 80106ec:	4a1e      	ldr	r2, [pc, #120]	; (8010768 <prvAddNewTaskToReadyList+0xd0>)
 80106ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80106f0:	4b1d      	ldr	r3, [pc, #116]	; (8010768 <prvAddNewTaskToReadyList+0xd0>)
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106fc:	4b1b      	ldr	r3, [pc, #108]	; (801076c <prvAddNewTaskToReadyList+0xd4>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	429a      	cmp	r2, r3
 8010702:	d903      	bls.n	801070c <prvAddNewTaskToReadyList+0x74>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010708:	4a18      	ldr	r2, [pc, #96]	; (801076c <prvAddNewTaskToReadyList+0xd4>)
 801070a:	6013      	str	r3, [r2, #0]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010710:	4613      	mov	r3, r2
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	4413      	add	r3, r2
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4a15      	ldr	r2, [pc, #84]	; (8010770 <prvAddNewTaskToReadyList+0xd8>)
 801071a:	441a      	add	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3304      	adds	r3, #4
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f7ff f83f 	bl	800f7a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010728:	f001 fc64 	bl	8011ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801072c:	4b0d      	ldr	r3, [pc, #52]	; (8010764 <prvAddNewTaskToReadyList+0xcc>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00e      	beq.n	8010752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010734:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <prvAddNewTaskToReadyList+0xc8>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073e:	429a      	cmp	r2, r3
 8010740:	d207      	bcs.n	8010752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010742:	4b0c      	ldr	r3, [pc, #48]	; (8010774 <prvAddNewTaskToReadyList+0xdc>)
 8010744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	f3bf 8f4f 	dsb	sy
 801074e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	200022a0 	.word	0x200022a0
 8010760:	20001dcc 	.word	0x20001dcc
 8010764:	200022ac 	.word	0x200022ac
 8010768:	200022bc 	.word	0x200022bc
 801076c:	200022a8 	.word	0x200022a8
 8010770:	20001dd0 	.word	0x20001dd0
 8010774:	e000ed04 	.word	0xe000ed04

08010778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010780:	2300      	movs	r3, #0
 8010782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d017      	beq.n	80107ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801078a:	4b13      	ldr	r3, [pc, #76]	; (80107d8 <vTaskDelay+0x60>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00a      	beq.n	80107a8 <vTaskDelay+0x30>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	60bb      	str	r3, [r7, #8]
}
 80107a4:	bf00      	nop
 80107a6:	e7fe      	b.n	80107a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80107a8:	f000 f88c 	bl	80108c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80107ac:	2100      	movs	r1, #0
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 ff1e 	bl	80115f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80107b4:	f000 f894 	bl	80108e0 <xTaskResumeAll>
 80107b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d107      	bne.n	80107d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80107c0:	4b06      	ldr	r3, [pc, #24]	; (80107dc <vTaskDelay+0x64>)
 80107c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107c6:	601a      	str	r2, [r3, #0]
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107d0:	bf00      	nop
 80107d2:	3710      	adds	r7, #16
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	200022c8 	.word	0x200022c8
 80107dc:	e000ed04 	.word	0xe000ed04

080107e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08a      	sub	sp, #40	; 0x28
 80107e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80107ea:	2300      	movs	r3, #0
 80107ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80107ee:	463a      	mov	r2, r7
 80107f0:	1d39      	adds	r1, r7, #4
 80107f2:	f107 0308 	add.w	r3, r7, #8
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fe ff74 	bl	800f6e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80107fc:	6839      	ldr	r1, [r7, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	9202      	str	r2, [sp, #8]
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	2300      	movs	r3, #0
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	2300      	movs	r3, #0
 801080c:	460a      	mov	r2, r1
 801080e:	4925      	ldr	r1, [pc, #148]	; (80108a4 <vTaskStartScheduler+0xc4>)
 8010810:	4825      	ldr	r0, [pc, #148]	; (80108a8 <vTaskStartScheduler+0xc8>)
 8010812:	f7ff fdf5 	bl	8010400 <xTaskCreateStatic>
 8010816:	4603      	mov	r3, r0
 8010818:	4a24      	ldr	r2, [pc, #144]	; (80108ac <vTaskStartScheduler+0xcc>)
 801081a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801081c:	4b23      	ldr	r3, [pc, #140]	; (80108ac <vTaskStartScheduler+0xcc>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d002      	beq.n	801082a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010824:	2301      	movs	r3, #1
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	e001      	b.n	801082e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801082a:	2300      	movs	r3, #0
 801082c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d102      	bne.n	801083a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010834:	f000 ff30 	bl	8011698 <xTimerCreateTimerTask>
 8010838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d11d      	bne.n	801087c <vTaskStartScheduler+0x9c>
	__asm volatile
 8010840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010844:	f383 8811 	msr	BASEPRI, r3
 8010848:	f3bf 8f6f 	isb	sy
 801084c:	f3bf 8f4f 	dsb	sy
 8010850:	613b      	str	r3, [r7, #16]
}
 8010852:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010854:	4b16      	ldr	r3, [pc, #88]	; (80108b0 <vTaskStartScheduler+0xd0>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3358      	adds	r3, #88	; 0x58
 801085a:	4a16      	ldr	r2, [pc, #88]	; (80108b4 <vTaskStartScheduler+0xd4>)
 801085c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801085e:	4b16      	ldr	r3, [pc, #88]	; (80108b8 <vTaskStartScheduler+0xd8>)
 8010860:	f04f 32ff 	mov.w	r2, #4294967295
 8010864:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010866:	4b15      	ldr	r3, [pc, #84]	; (80108bc <vTaskStartScheduler+0xdc>)
 8010868:	2201      	movs	r2, #1
 801086a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801086c:	4b14      	ldr	r3, [pc, #80]	; (80108c0 <vTaskStartScheduler+0xe0>)
 801086e:	2200      	movs	r2, #0
 8010870:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010872:	f7ef feaf 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010876:	f001 faeb 	bl	8011e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801087a:	e00e      	b.n	801089a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010882:	d10a      	bne.n	801089a <vTaskStartScheduler+0xba>
	__asm volatile
 8010884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010888:	f383 8811 	msr	BASEPRI, r3
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	60fb      	str	r3, [r7, #12]
}
 8010896:	bf00      	nop
 8010898:	e7fe      	b.n	8010898 <vTaskStartScheduler+0xb8>
}
 801089a:	bf00      	nop
 801089c:	3718      	adds	r7, #24
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	080155f8 	.word	0x080155f8
 80108a8:	08010f21 	.word	0x08010f21
 80108ac:	200022c4 	.word	0x200022c4
 80108b0:	20001dcc 	.word	0x20001dcc
 80108b4:	20000054 	.word	0x20000054
 80108b8:	200022c0 	.word	0x200022c0
 80108bc:	200022ac 	.word	0x200022ac
 80108c0:	200022a4 	.word	0x200022a4

080108c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80108c4:	b480      	push	{r7}
 80108c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80108c8:	4b04      	ldr	r3, [pc, #16]	; (80108dc <vTaskSuspendAll+0x18>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3301      	adds	r3, #1
 80108ce:	4a03      	ldr	r2, [pc, #12]	; (80108dc <vTaskSuspendAll+0x18>)
 80108d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80108d2:	bf00      	nop
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	200022c8 	.word	0x200022c8

080108e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80108ea:	2300      	movs	r3, #0
 80108ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80108ee:	4b42      	ldr	r3, [pc, #264]	; (80109f8 <xTaskResumeAll+0x118>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d10a      	bne.n	801090c <xTaskResumeAll+0x2c>
	__asm volatile
 80108f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	603b      	str	r3, [r7, #0]
}
 8010908:	bf00      	nop
 801090a:	e7fe      	b.n	801090a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801090c:	f001 fb42 	bl	8011f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010910:	4b39      	ldr	r3, [pc, #228]	; (80109f8 <xTaskResumeAll+0x118>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3b01      	subs	r3, #1
 8010916:	4a38      	ldr	r2, [pc, #224]	; (80109f8 <xTaskResumeAll+0x118>)
 8010918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801091a:	4b37      	ldr	r3, [pc, #220]	; (80109f8 <xTaskResumeAll+0x118>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d162      	bne.n	80109e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010922:	4b36      	ldr	r3, [pc, #216]	; (80109fc <xTaskResumeAll+0x11c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d05e      	beq.n	80109e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801092a:	e02f      	b.n	801098c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801092c:	4b34      	ldr	r3, [pc, #208]	; (8010a00 <xTaskResumeAll+0x120>)
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	3318      	adds	r3, #24
 8010938:	4618      	mov	r0, r3
 801093a:	f7fe ff91 	bl	800f860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3304      	adds	r3, #4
 8010942:	4618      	mov	r0, r3
 8010944:	f7fe ff8c 	bl	800f860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801094c:	4b2d      	ldr	r3, [pc, #180]	; (8010a04 <xTaskResumeAll+0x124>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	429a      	cmp	r2, r3
 8010952:	d903      	bls.n	801095c <xTaskResumeAll+0x7c>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010958:	4a2a      	ldr	r2, [pc, #168]	; (8010a04 <xTaskResumeAll+0x124>)
 801095a:	6013      	str	r3, [r2, #0]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010960:	4613      	mov	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4a27      	ldr	r2, [pc, #156]	; (8010a08 <xTaskResumeAll+0x128>)
 801096a:	441a      	add	r2, r3
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	3304      	adds	r3, #4
 8010970:	4619      	mov	r1, r3
 8010972:	4610      	mov	r0, r2
 8010974:	f7fe ff17 	bl	800f7a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097c:	4b23      	ldr	r3, [pc, #140]	; (8010a0c <xTaskResumeAll+0x12c>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010982:	429a      	cmp	r2, r3
 8010984:	d302      	bcc.n	801098c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010986:	4b22      	ldr	r3, [pc, #136]	; (8010a10 <xTaskResumeAll+0x130>)
 8010988:	2201      	movs	r2, #1
 801098a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801098c:	4b1c      	ldr	r3, [pc, #112]	; (8010a00 <xTaskResumeAll+0x120>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1cb      	bne.n	801092c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d001      	beq.n	801099e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801099a:	f000 fb7b 	bl	8011094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801099e:	4b1d      	ldr	r3, [pc, #116]	; (8010a14 <xTaskResumeAll+0x134>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d010      	beq.n	80109cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80109aa:	f000 f847 	bl	8010a3c <xTaskIncrementTick>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80109b4:	4b16      	ldr	r3, [pc, #88]	; (8010a10 <xTaskResumeAll+0x130>)
 80109b6:	2201      	movs	r2, #1
 80109b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	3b01      	subs	r3, #1
 80109be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1f1      	bne.n	80109aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80109c6:	4b13      	ldr	r3, [pc, #76]	; (8010a14 <xTaskResumeAll+0x134>)
 80109c8:	2200      	movs	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80109cc:	4b10      	ldr	r3, [pc, #64]	; (8010a10 <xTaskResumeAll+0x130>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d009      	beq.n	80109e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80109d4:	2301      	movs	r3, #1
 80109d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80109d8:	4b0f      	ldr	r3, [pc, #60]	; (8010a18 <xTaskResumeAll+0x138>)
 80109da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109de:	601a      	str	r2, [r3, #0]
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80109e8:	f001 fb04 	bl	8011ff4 <vPortExitCritical>

	return xAlreadyYielded;
 80109ec:	68bb      	ldr	r3, [r7, #8]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3710      	adds	r7, #16
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	200022c8 	.word	0x200022c8
 80109fc:	200022a0 	.word	0x200022a0
 8010a00:	20002260 	.word	0x20002260
 8010a04:	200022a8 	.word	0x200022a8
 8010a08:	20001dd0 	.word	0x20001dd0
 8010a0c:	20001dcc 	.word	0x20001dcc
 8010a10:	200022b4 	.word	0x200022b4
 8010a14:	200022b0 	.word	0x200022b0
 8010a18:	e000ed04 	.word	0xe000ed04

08010a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010a22:	4b05      	ldr	r3, [pc, #20]	; (8010a38 <xTaskGetTickCount+0x1c>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010a28:	687b      	ldr	r3, [r7, #4]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	370c      	adds	r7, #12
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	200022a4 	.word	0x200022a4

08010a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010a42:	2300      	movs	r3, #0
 8010a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a46:	4b4f      	ldr	r3, [pc, #316]	; (8010b84 <xTaskIncrementTick+0x148>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f040 808f 	bne.w	8010b6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010a50:	4b4d      	ldr	r3, [pc, #308]	; (8010b88 <xTaskIncrementTick+0x14c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3301      	adds	r3, #1
 8010a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010a58:	4a4b      	ldr	r2, [pc, #300]	; (8010b88 <xTaskIncrementTick+0x14c>)
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d120      	bne.n	8010aa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010a64:	4b49      	ldr	r3, [pc, #292]	; (8010b8c <xTaskIncrementTick+0x150>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00a      	beq.n	8010a84 <xTaskIncrementTick+0x48>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	603b      	str	r3, [r7, #0]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <xTaskIncrementTick+0x46>
 8010a84:	4b41      	ldr	r3, [pc, #260]	; (8010b8c <xTaskIncrementTick+0x150>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60fb      	str	r3, [r7, #12]
 8010a8a:	4b41      	ldr	r3, [pc, #260]	; (8010b90 <xTaskIncrementTick+0x154>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	4a3f      	ldr	r2, [pc, #252]	; (8010b8c <xTaskIncrementTick+0x150>)
 8010a90:	6013      	str	r3, [r2, #0]
 8010a92:	4a3f      	ldr	r2, [pc, #252]	; (8010b90 <xTaskIncrementTick+0x154>)
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6013      	str	r3, [r2, #0]
 8010a98:	4b3e      	ldr	r3, [pc, #248]	; (8010b94 <xTaskIncrementTick+0x158>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	4a3d      	ldr	r2, [pc, #244]	; (8010b94 <xTaskIncrementTick+0x158>)
 8010aa0:	6013      	str	r3, [r2, #0]
 8010aa2:	f000 faf7 	bl	8011094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010aa6:	4b3c      	ldr	r3, [pc, #240]	; (8010b98 <xTaskIncrementTick+0x15c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	693a      	ldr	r2, [r7, #16]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d349      	bcc.n	8010b44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ab0:	4b36      	ldr	r3, [pc, #216]	; (8010b8c <xTaskIncrementTick+0x150>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d104      	bne.n	8010ac4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010aba:	4b37      	ldr	r3, [pc, #220]	; (8010b98 <xTaskIncrementTick+0x15c>)
 8010abc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac0:	601a      	str	r2, [r3, #0]
					break;
 8010ac2:	e03f      	b.n	8010b44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ac4:	4b31      	ldr	r3, [pc, #196]	; (8010b8c <xTaskIncrementTick+0x150>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010ad4:	693a      	ldr	r2, [r7, #16]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d203      	bcs.n	8010ae4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010adc:	4a2e      	ldr	r2, [pc, #184]	; (8010b98 <xTaskIncrementTick+0x15c>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010ae2:	e02f      	b.n	8010b44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fe feb9 	bl	800f860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d004      	beq.n	8010b00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	3318      	adds	r3, #24
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe feb0 	bl	800f860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b04:	4b25      	ldr	r3, [pc, #148]	; (8010b9c <xTaskIncrementTick+0x160>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d903      	bls.n	8010b14 <xTaskIncrementTick+0xd8>
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b10:	4a22      	ldr	r2, [pc, #136]	; (8010b9c <xTaskIncrementTick+0x160>)
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b18:	4613      	mov	r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4413      	add	r3, r2
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	4a1f      	ldr	r2, [pc, #124]	; (8010ba0 <xTaskIncrementTick+0x164>)
 8010b22:	441a      	add	r2, r3
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	3304      	adds	r3, #4
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4610      	mov	r0, r2
 8010b2c:	f7fe fe3b 	bl	800f7a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b34:	4b1b      	ldr	r3, [pc, #108]	; (8010ba4 <xTaskIncrementTick+0x168>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d3b8      	bcc.n	8010ab0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b42:	e7b5      	b.n	8010ab0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010b44:	4b17      	ldr	r3, [pc, #92]	; (8010ba4 <xTaskIncrementTick+0x168>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b4a:	4915      	ldr	r1, [pc, #84]	; (8010ba0 <xTaskIncrementTick+0x164>)
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	4413      	add	r3, r2
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	440b      	add	r3, r1
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d901      	bls.n	8010b60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010b60:	4b11      	ldr	r3, [pc, #68]	; (8010ba8 <xTaskIncrementTick+0x16c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d007      	beq.n	8010b78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	617b      	str	r3, [r7, #20]
 8010b6c:	e004      	b.n	8010b78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010b6e:	4b0f      	ldr	r3, [pc, #60]	; (8010bac <xTaskIncrementTick+0x170>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	3301      	adds	r3, #1
 8010b74:	4a0d      	ldr	r2, [pc, #52]	; (8010bac <xTaskIncrementTick+0x170>)
 8010b76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010b78:	697b      	ldr	r3, [r7, #20]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3718      	adds	r7, #24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	200022c8 	.word	0x200022c8
 8010b88:	200022a4 	.word	0x200022a4
 8010b8c:	20002258 	.word	0x20002258
 8010b90:	2000225c 	.word	0x2000225c
 8010b94:	200022b8 	.word	0x200022b8
 8010b98:	200022c0 	.word	0x200022c0
 8010b9c:	200022a8 	.word	0x200022a8
 8010ba0:	20001dd0 	.word	0x20001dd0
 8010ba4:	20001dcc 	.word	0x20001dcc
 8010ba8:	200022b4 	.word	0x200022b4
 8010bac:	200022b0 	.word	0x200022b0

08010bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010bb6:	4b36      	ldr	r3, [pc, #216]	; (8010c90 <vTaskSwitchContext+0xe0>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010bbe:	4b35      	ldr	r3, [pc, #212]	; (8010c94 <vTaskSwitchContext+0xe4>)
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010bc4:	e05f      	b.n	8010c86 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8010bc6:	4b33      	ldr	r3, [pc, #204]	; (8010c94 <vTaskSwitchContext+0xe4>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010bcc:	f7ef fd10 	bl	80005f0 <getRunTimeCounterValue>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	4a31      	ldr	r2, [pc, #196]	; (8010c98 <vTaskSwitchContext+0xe8>)
 8010bd4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010bd6:	4b30      	ldr	r3, [pc, #192]	; (8010c98 <vTaskSwitchContext+0xe8>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	4b30      	ldr	r3, [pc, #192]	; (8010c9c <vTaskSwitchContext+0xec>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d909      	bls.n	8010bf6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010be2:	4b2f      	ldr	r3, [pc, #188]	; (8010ca0 <vTaskSwitchContext+0xf0>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010be8:	4a2b      	ldr	r2, [pc, #172]	; (8010c98 <vTaskSwitchContext+0xe8>)
 8010bea:	6810      	ldr	r0, [r2, #0]
 8010bec:	4a2b      	ldr	r2, [pc, #172]	; (8010c9c <vTaskSwitchContext+0xec>)
 8010bee:	6812      	ldr	r2, [r2, #0]
 8010bf0:	1a82      	subs	r2, r0, r2
 8010bf2:	440a      	add	r2, r1
 8010bf4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010bf6:	4b28      	ldr	r3, [pc, #160]	; (8010c98 <vTaskSwitchContext+0xe8>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4a28      	ldr	r2, [pc, #160]	; (8010c9c <vTaskSwitchContext+0xec>)
 8010bfc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bfe:	4b29      	ldr	r3, [pc, #164]	; (8010ca4 <vTaskSwitchContext+0xf4>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	e010      	b.n	8010c28 <vTaskSwitchContext+0x78>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10a      	bne.n	8010c22 <vTaskSwitchContext+0x72>
	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	607b      	str	r3, [r7, #4]
}
 8010c1e:	bf00      	nop
 8010c20:	e7fe      	b.n	8010c20 <vTaskSwitchContext+0x70>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	491f      	ldr	r1, [pc, #124]	; (8010ca8 <vTaskSwitchContext+0xf8>)
 8010c2a:	68fa      	ldr	r2, [r7, #12]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	4413      	add	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	440b      	add	r3, r1
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d0e4      	beq.n	8010c06 <vTaskSwitchContext+0x56>
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4a18      	ldr	r2, [pc, #96]	; (8010ca8 <vTaskSwitchContext+0xf8>)
 8010c48:	4413      	add	r3, r2
 8010c4a:	60bb      	str	r3, [r7, #8]
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	685a      	ldr	r2, [r3, #4]
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	605a      	str	r2, [r3, #4]
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	3308      	adds	r3, #8
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d104      	bne.n	8010c6c <vTaskSwitchContext+0xbc>
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	685a      	ldr	r2, [r3, #4]
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	605a      	str	r2, [r3, #4]
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <vTaskSwitchContext+0xf0>)
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	4a0b      	ldr	r2, [pc, #44]	; (8010ca4 <vTaskSwitchContext+0xf4>)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c7c:	4b08      	ldr	r3, [pc, #32]	; (8010ca0 <vTaskSwitchContext+0xf0>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3358      	adds	r3, #88	; 0x58
 8010c82:	4a0a      	ldr	r2, [pc, #40]	; (8010cac <vTaskSwitchContext+0xfc>)
 8010c84:	6013      	str	r3, [r2, #0]
}
 8010c86:	bf00      	nop
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	200022c8 	.word	0x200022c8
 8010c94:	200022b4 	.word	0x200022b4
 8010c98:	200022d0 	.word	0x200022d0
 8010c9c:	200022cc 	.word	0x200022cc
 8010ca0:	20001dcc 	.word	0x20001dcc
 8010ca4:	200022a8 	.word	0x200022a8
 8010ca8:	20001dd0 	.word	0x20001dd0
 8010cac:	20000054 	.word	0x20000054

08010cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10a      	bne.n	8010cd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010cd6:	4b07      	ldr	r3, [pc, #28]	; (8010cf4 <vTaskPlaceOnEventList+0x44>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	3318      	adds	r3, #24
 8010cdc:	4619      	mov	r1, r3
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f7fe fd85 	bl	800f7ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	6838      	ldr	r0, [r7, #0]
 8010ce8:	f000 fc82 	bl	80115f0 <prvAddCurrentTaskToDelayedList>
}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20001dcc 	.word	0x20001dcc

08010cf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d10a      	bne.n	8010d20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	617b      	str	r3, [r7, #20]
}
 8010d1c:	bf00      	nop
 8010d1e:	e7fe      	b.n	8010d1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d20:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <vTaskPlaceOnEventListRestricted+0x54>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	3318      	adds	r3, #24
 8010d26:	4619      	mov	r1, r3
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7fe fd3c 	bl	800f7a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010d34:	f04f 33ff 	mov.w	r3, #4294967295
 8010d38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	68b8      	ldr	r0, [r7, #8]
 8010d3e:	f000 fc57 	bl	80115f0 <prvAddCurrentTaskToDelayedList>
	}
 8010d42:	bf00      	nop
 8010d44:	3718      	adds	r7, #24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20001dcc 	.word	0x20001dcc

08010d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10a      	bne.n	8010d7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	f383 8811 	msr	BASEPRI, r3
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f3bf 8f4f 	dsb	sy
 8010d76:	60fb      	str	r3, [r7, #12]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	3318      	adds	r3, #24
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe fd6d 	bl	800f860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d86:	4b1e      	ldr	r3, [pc, #120]	; (8010e00 <xTaskRemoveFromEventList+0xb0>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d11d      	bne.n	8010dca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	3304      	adds	r3, #4
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fd64 	bl	800f860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d9c:	4b19      	ldr	r3, [pc, #100]	; (8010e04 <xTaskRemoveFromEventList+0xb4>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d903      	bls.n	8010dac <xTaskRemoveFromEventList+0x5c>
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da8:	4a16      	ldr	r2, [pc, #88]	; (8010e04 <xTaskRemoveFromEventList+0xb4>)
 8010daa:	6013      	str	r3, [r2, #0]
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db0:	4613      	mov	r3, r2
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	4413      	add	r3, r2
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	4a13      	ldr	r2, [pc, #76]	; (8010e08 <xTaskRemoveFromEventList+0xb8>)
 8010dba:	441a      	add	r2, r3
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	4610      	mov	r0, r2
 8010dc4:	f7fe fcef 	bl	800f7a6 <vListInsertEnd>
 8010dc8:	e005      	b.n	8010dd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	3318      	adds	r3, #24
 8010dce:	4619      	mov	r1, r3
 8010dd0:	480e      	ldr	r0, [pc, #56]	; (8010e0c <xTaskRemoveFromEventList+0xbc>)
 8010dd2:	f7fe fce8 	bl	800f7a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dda:	4b0d      	ldr	r3, [pc, #52]	; (8010e10 <xTaskRemoveFromEventList+0xc0>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d905      	bls.n	8010df0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010de4:	2301      	movs	r3, #1
 8010de6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010de8:	4b0a      	ldr	r3, [pc, #40]	; (8010e14 <xTaskRemoveFromEventList+0xc4>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	e001      	b.n	8010df4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010df0:	2300      	movs	r3, #0
 8010df2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010df4:	697b      	ldr	r3, [r7, #20]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	200022c8 	.word	0x200022c8
 8010e04:	200022a8 	.word	0x200022a8
 8010e08:	20001dd0 	.word	0x20001dd0
 8010e0c:	20002260 	.word	0x20002260
 8010e10:	20001dcc 	.word	0x20001dcc
 8010e14:	200022b4 	.word	0x200022b4

08010e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e20:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <vTaskInternalSetTimeOutState+0x24>)
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e28:	4b05      	ldr	r3, [pc, #20]	; (8010e40 <vTaskInternalSetTimeOutState+0x28>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	605a      	str	r2, [r3, #4]
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	200022b8 	.word	0x200022b8
 8010e40:	200022a4 	.word	0x200022a4

08010e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b088      	sub	sp, #32
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10a      	bne.n	8010e6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	613b      	str	r3, [r7, #16]
}
 8010e66:	bf00      	nop
 8010e68:	e7fe      	b.n	8010e68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d10a      	bne.n	8010e86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	60fb      	str	r3, [r7, #12]
}
 8010e82:	bf00      	nop
 8010e84:	e7fe      	b.n	8010e84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010e86:	f001 f885 	bl	8011f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010e8a:	4b1d      	ldr	r3, [pc, #116]	; (8010f00 <xTaskCheckForTimeOut+0xbc>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	69ba      	ldr	r2, [r7, #24]
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea2:	d102      	bne.n	8010eaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	61fb      	str	r3, [r7, #28]
 8010ea8:	e023      	b.n	8010ef2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	4b15      	ldr	r3, [pc, #84]	; (8010f04 <xTaskCheckForTimeOut+0xc0>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d007      	beq.n	8010ec6 <xTaskCheckForTimeOut+0x82>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d302      	bcc.n	8010ec6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	61fb      	str	r3, [r7, #28]
 8010ec4:	e015      	b.n	8010ef2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	697a      	ldr	r2, [r7, #20]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d20b      	bcs.n	8010ee8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	1ad2      	subs	r2, r2, r3
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f7ff ff9b 	bl	8010e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	61fb      	str	r3, [r7, #28]
 8010ee6:	e004      	b.n	8010ef2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	2200      	movs	r2, #0
 8010eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010eee:	2301      	movs	r3, #1
 8010ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010ef2:	f001 f87f 	bl	8011ff4 <vPortExitCritical>

	return xReturn;
 8010ef6:	69fb      	ldr	r3, [r7, #28]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3720      	adds	r7, #32
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	200022a4 	.word	0x200022a4
 8010f04:	200022b8 	.word	0x200022b8

08010f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f08:	b480      	push	{r7}
 8010f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010f0c:	4b03      	ldr	r3, [pc, #12]	; (8010f1c <vTaskMissedYield+0x14>)
 8010f0e:	2201      	movs	r2, #1
 8010f10:	601a      	str	r2, [r3, #0]
}
 8010f12:	bf00      	nop
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	200022b4 	.word	0x200022b4

08010f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010f28:	f000 f852 	bl	8010fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010f2c:	4b06      	ldr	r3, [pc, #24]	; (8010f48 <prvIdleTask+0x28>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d9f9      	bls.n	8010f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010f34:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <prvIdleTask+0x2c>)
 8010f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f3a:	601a      	str	r2, [r3, #0]
 8010f3c:	f3bf 8f4f 	dsb	sy
 8010f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010f44:	e7f0      	b.n	8010f28 <prvIdleTask+0x8>
 8010f46:	bf00      	nop
 8010f48:	20001dd0 	.word	0x20001dd0
 8010f4c:	e000ed04 	.word	0xe000ed04

08010f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f56:	2300      	movs	r3, #0
 8010f58:	607b      	str	r3, [r7, #4]
 8010f5a:	e00c      	b.n	8010f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	4613      	mov	r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	4413      	add	r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	4a12      	ldr	r2, [pc, #72]	; (8010fb0 <prvInitialiseTaskLists+0x60>)
 8010f68:	4413      	add	r3, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fe fbee 	bl	800f74c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3301      	adds	r3, #1
 8010f74:	607b      	str	r3, [r7, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b37      	cmp	r3, #55	; 0x37
 8010f7a:	d9ef      	bls.n	8010f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010f7c:	480d      	ldr	r0, [pc, #52]	; (8010fb4 <prvInitialiseTaskLists+0x64>)
 8010f7e:	f7fe fbe5 	bl	800f74c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010f82:	480d      	ldr	r0, [pc, #52]	; (8010fb8 <prvInitialiseTaskLists+0x68>)
 8010f84:	f7fe fbe2 	bl	800f74c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010f88:	480c      	ldr	r0, [pc, #48]	; (8010fbc <prvInitialiseTaskLists+0x6c>)
 8010f8a:	f7fe fbdf 	bl	800f74c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010f8e:	480c      	ldr	r0, [pc, #48]	; (8010fc0 <prvInitialiseTaskLists+0x70>)
 8010f90:	f7fe fbdc 	bl	800f74c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010f94:	480b      	ldr	r0, [pc, #44]	; (8010fc4 <prvInitialiseTaskLists+0x74>)
 8010f96:	f7fe fbd9 	bl	800f74c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010f9a:	4b0b      	ldr	r3, [pc, #44]	; (8010fc8 <prvInitialiseTaskLists+0x78>)
 8010f9c:	4a05      	ldr	r2, [pc, #20]	; (8010fb4 <prvInitialiseTaskLists+0x64>)
 8010f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010fa0:	4b0a      	ldr	r3, [pc, #40]	; (8010fcc <prvInitialiseTaskLists+0x7c>)
 8010fa2:	4a05      	ldr	r2, [pc, #20]	; (8010fb8 <prvInitialiseTaskLists+0x68>)
 8010fa4:	601a      	str	r2, [r3, #0]
}
 8010fa6:	bf00      	nop
 8010fa8:	3708      	adds	r7, #8
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	20001dd0 	.word	0x20001dd0
 8010fb4:	20002230 	.word	0x20002230
 8010fb8:	20002244 	.word	0x20002244
 8010fbc:	20002260 	.word	0x20002260
 8010fc0:	20002274 	.word	0x20002274
 8010fc4:	2000228c 	.word	0x2000228c
 8010fc8:	20002258 	.word	0x20002258
 8010fcc:	2000225c 	.word	0x2000225c

08010fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010fd6:	e019      	b.n	801100c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010fd8:	f000 ffdc 	bl	8011f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fdc:	4b10      	ldr	r3, [pc, #64]	; (8011020 <prvCheckTasksWaitingTermination+0x50>)
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3304      	adds	r3, #4
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fe fc39 	bl	800f860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010fee:	4b0d      	ldr	r3, [pc, #52]	; (8011024 <prvCheckTasksWaitingTermination+0x54>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	4a0b      	ldr	r2, [pc, #44]	; (8011024 <prvCheckTasksWaitingTermination+0x54>)
 8010ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ff8:	4b0b      	ldr	r3, [pc, #44]	; (8011028 <prvCheckTasksWaitingTermination+0x58>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	4a0a      	ldr	r2, [pc, #40]	; (8011028 <prvCheckTasksWaitingTermination+0x58>)
 8011000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011002:	f000 fff7 	bl	8011ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 f810 	bl	801102c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801100c:	4b06      	ldr	r3, [pc, #24]	; (8011028 <prvCheckTasksWaitingTermination+0x58>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1e1      	bne.n	8010fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop
 8011018:	3708      	adds	r7, #8
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	20002274 	.word	0x20002274
 8011024:	200022a0 	.word	0x200022a0
 8011028:	20002288 	.word	0x20002288

0801102c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3358      	adds	r3, #88	; 0x58
 8011038:	4618      	mov	r0, r3
 801103a:	f002 f869 	bl	8013110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011044:	2b00      	cmp	r3, #0
 8011046:	d108      	bne.n	801105a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104c:	4618      	mov	r0, r3
 801104e:	f001 f98f 	bl	8012370 <vPortFree>
				vPortFree( pxTCB );
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f001 f98c 	bl	8012370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011058:	e018      	b.n	801108c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011060:	2b01      	cmp	r3, #1
 8011062:	d103      	bne.n	801106c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f001 f983 	bl	8012370 <vPortFree>
	}
 801106a:	e00f      	b.n	801108c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011072:	2b02      	cmp	r3, #2
 8011074:	d00a      	beq.n	801108c <prvDeleteTCB+0x60>
	__asm volatile
 8011076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107a:	f383 8811 	msr	BASEPRI, r3
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	f3bf 8f4f 	dsb	sy
 8011086:	60fb      	str	r3, [r7, #12]
}
 8011088:	bf00      	nop
 801108a:	e7fe      	b.n	801108a <prvDeleteTCB+0x5e>
	}
 801108c:	bf00      	nop
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801109a:	4b0c      	ldr	r3, [pc, #48]	; (80110cc <prvResetNextTaskUnblockTime+0x38>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d104      	bne.n	80110ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80110a4:	4b0a      	ldr	r3, [pc, #40]	; (80110d0 <prvResetNextTaskUnblockTime+0x3c>)
 80110a6:	f04f 32ff 	mov.w	r2, #4294967295
 80110aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80110ac:	e008      	b.n	80110c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110ae:	4b07      	ldr	r3, [pc, #28]	; (80110cc <prvResetNextTaskUnblockTime+0x38>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	4a04      	ldr	r2, [pc, #16]	; (80110d0 <prvResetNextTaskUnblockTime+0x3c>)
 80110be:	6013      	str	r3, [r2, #0]
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr
 80110cc:	20002258 	.word	0x20002258
 80110d0:	200022c0 	.word	0x200022c0

080110d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80110da:	4b0b      	ldr	r3, [pc, #44]	; (8011108 <xTaskGetSchedulerState+0x34>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d102      	bne.n	80110e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80110e2:	2301      	movs	r3, #1
 80110e4:	607b      	str	r3, [r7, #4]
 80110e6:	e008      	b.n	80110fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110e8:	4b08      	ldr	r3, [pc, #32]	; (801110c <xTaskGetSchedulerState+0x38>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80110f0:	2302      	movs	r3, #2
 80110f2:	607b      	str	r3, [r7, #4]
 80110f4:	e001      	b.n	80110fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80110f6:	2300      	movs	r3, #0
 80110f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80110fa:	687b      	ldr	r3, [r7, #4]
	}
 80110fc:	4618      	mov	r0, r3
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	200022ac 	.word	0x200022ac
 801110c:	200022c8 	.word	0x200022c8

08011110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801111c:	2300      	movs	r3, #0
 801111e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d056      	beq.n	80111d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011126:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <xTaskPriorityDisinherit+0xd0>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	693a      	ldr	r2, [r7, #16]
 801112c:	429a      	cmp	r2, r3
 801112e:	d00a      	beq.n	8011146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	60fb      	str	r3, [r7, #12]
}
 8011142:	bf00      	nop
 8011144:	e7fe      	b.n	8011144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801114a:	2b00      	cmp	r3, #0
 801114c:	d10a      	bne.n	8011164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	60bb      	str	r3, [r7, #8]
}
 8011160:	bf00      	nop
 8011162:	e7fe      	b.n	8011162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011168:	1e5a      	subs	r2, r3, #1
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011176:	429a      	cmp	r2, r3
 8011178:	d02c      	beq.n	80111d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801117e:	2b00      	cmp	r3, #0
 8011180:	d128      	bne.n	80111d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	3304      	adds	r3, #4
 8011186:	4618      	mov	r0, r3
 8011188:	f7fe fb6a 	bl	800f860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a4:	4b0f      	ldr	r3, [pc, #60]	; (80111e4 <xTaskPriorityDisinherit+0xd4>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d903      	bls.n	80111b4 <xTaskPriorityDisinherit+0xa4>
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b0:	4a0c      	ldr	r2, [pc, #48]	; (80111e4 <xTaskPriorityDisinherit+0xd4>)
 80111b2:	6013      	str	r3, [r2, #0]
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111b8:	4613      	mov	r3, r2
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4413      	add	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	4a09      	ldr	r2, [pc, #36]	; (80111e8 <xTaskPriorityDisinherit+0xd8>)
 80111c2:	441a      	add	r2, r3
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	3304      	adds	r3, #4
 80111c8:	4619      	mov	r1, r3
 80111ca:	4610      	mov	r0, r2
 80111cc:	f7fe faeb 	bl	800f7a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80111d0:	2301      	movs	r3, #1
 80111d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80111d4:	697b      	ldr	r3, [r7, #20]
	}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	20001dcc 	.word	0x20001dcc
 80111e4:	200022a8 	.word	0x200022a8
 80111e8:	20001dd0 	.word	0x20001dd0

080111ec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80111fa:	f000 fecb 	bl	8011f94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80111fe:	4b29      	ldr	r3, [pc, #164]	; (80112a4 <xTaskNotifyWait+0xb8>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b02      	cmp	r3, #2
 801120a:	d01c      	beq.n	8011246 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801120c:	4b25      	ldr	r3, [pc, #148]	; (80112a4 <xTaskNotifyWait+0xb8>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	43d2      	mvns	r2, r2
 8011218:	400a      	ands	r2, r1
 801121a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801121e:	4b21      	ldr	r3, [pc, #132]	; (80112a4 <xTaskNotifyWait+0xb8>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2201      	movs	r2, #1
 8011224:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00b      	beq.n	8011246 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801122e:	2101      	movs	r1, #1
 8011230:	6838      	ldr	r0, [r7, #0]
 8011232:	f000 f9dd 	bl	80115f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011236:	4b1c      	ldr	r3, [pc, #112]	; (80112a8 <xTaskNotifyWait+0xbc>)
 8011238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011246:	f000 fed5 	bl	8011ff4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801124a:	f000 fea3 	bl	8011f94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d005      	beq.n	8011260 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011254:	4b13      	ldr	r3, [pc, #76]	; (80112a4 <xTaskNotifyWait+0xb8>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011260:	4b10      	ldr	r3, [pc, #64]	; (80112a4 <xTaskNotifyWait+0xb8>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011268:	b2db      	uxtb	r3, r3
 801126a:	2b02      	cmp	r3, #2
 801126c:	d002      	beq.n	8011274 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801126e:	2300      	movs	r3, #0
 8011270:	617b      	str	r3, [r7, #20]
 8011272:	e00a      	b.n	801128a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011274:	4b0b      	ldr	r3, [pc, #44]	; (80112a4 <xTaskNotifyWait+0xb8>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	43d2      	mvns	r2, r2
 8011280:	400a      	ands	r2, r1
 8011282:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8011286:	2301      	movs	r3, #1
 8011288:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801128a:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <xTaskNotifyWait+0xb8>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2200      	movs	r2, #0
 8011290:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8011294:	f000 feae 	bl	8011ff4 <vPortExitCritical>

		return xReturn;
 8011298:	697b      	ldr	r3, [r7, #20]
	}
 801129a:	4618      	mov	r0, r3
 801129c:	3718      	adds	r7, #24
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	20001dcc 	.word	0x20001dcc
 80112a8:	e000ed04 	.word	0xe000ed04

080112ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b08a      	sub	sp, #40	; 0x28
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	603b      	str	r3, [r7, #0]
 80112b8:	4613      	mov	r3, r2
 80112ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80112bc:	2301      	movs	r3, #1
 80112be:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d10a      	bne.n	80112dc <xTaskGenericNotify+0x30>
	__asm volatile
 80112c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ca:	f383 8811 	msr	BASEPRI, r3
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f3bf 8f4f 	dsb	sy
 80112d6:	61bb      	str	r3, [r7, #24]
}
 80112d8:	bf00      	nop
 80112da:	e7fe      	b.n	80112da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80112e0:	f000 fe58 	bl	8011f94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80112ea:	6a3b      	ldr	r3, [r7, #32]
 80112ec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80112f4:	6a3b      	ldr	r3, [r7, #32]
 80112f6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80112fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	2202      	movs	r2, #2
 8011300:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8011304:	79fb      	ldrb	r3, [r7, #7]
 8011306:	2b04      	cmp	r3, #4
 8011308:	d82d      	bhi.n	8011366 <xTaskGenericNotify+0xba>
 801130a:	a201      	add	r2, pc, #4	; (adr r2, 8011310 <xTaskGenericNotify+0x64>)
 801130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011310:	08011389 	.word	0x08011389
 8011314:	08011325 	.word	0x08011325
 8011318:	08011337 	.word	0x08011337
 801131c:	08011347 	.word	0x08011347
 8011320:	08011351 	.word	0x08011351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	431a      	orrs	r2, r3
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011334:	e02b      	b.n	801138e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011344:	e023      	b.n	801138e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011346:	6a3b      	ldr	r3, [r7, #32]
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801134e:	e01e      	b.n	801138e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011350:	7ffb      	ldrb	r3, [r7, #31]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d004      	beq.n	8011360 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801135e:	e016      	b.n	801138e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011360:	2300      	movs	r3, #0
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011364:	e013      	b.n	801138e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011366:	6a3b      	ldr	r3, [r7, #32]
 8011368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011370:	d00c      	beq.n	801138c <xTaskGenericNotify+0xe0>
	__asm volatile
 8011372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011376:	f383 8811 	msr	BASEPRI, r3
 801137a:	f3bf 8f6f 	isb	sy
 801137e:	f3bf 8f4f 	dsb	sy
 8011382:	617b      	str	r3, [r7, #20]
}
 8011384:	bf00      	nop
 8011386:	e7fe      	b.n	8011386 <xTaskGenericNotify+0xda>
					break;
 8011388:	bf00      	nop
 801138a:	e000      	b.n	801138e <xTaskGenericNotify+0xe2>

					break;
 801138c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801138e:	7ffb      	ldrb	r3, [r7, #31]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d13a      	bne.n	801140a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011394:	6a3b      	ldr	r3, [r7, #32]
 8011396:	3304      	adds	r3, #4
 8011398:	4618      	mov	r0, r3
 801139a:	f7fe fa61 	bl	800f860 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801139e:	6a3b      	ldr	r3, [r7, #32]
 80113a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a2:	4b1d      	ldr	r3, [pc, #116]	; (8011418 <xTaskGenericNotify+0x16c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d903      	bls.n	80113b2 <xTaskGenericNotify+0x106>
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ae:	4a1a      	ldr	r2, [pc, #104]	; (8011418 <xTaskGenericNotify+0x16c>)
 80113b0:	6013      	str	r3, [r2, #0]
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b6:	4613      	mov	r3, r2
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4a17      	ldr	r2, [pc, #92]	; (801141c <xTaskGenericNotify+0x170>)
 80113c0:	441a      	add	r2, r3
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	3304      	adds	r3, #4
 80113c6:	4619      	mov	r1, r3
 80113c8:	4610      	mov	r0, r2
 80113ca:	f7fe f9ec 	bl	800f7a6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80113ce:	6a3b      	ldr	r3, [r7, #32]
 80113d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00a      	beq.n	80113ec <xTaskGenericNotify+0x140>
	__asm volatile
 80113d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113da:	f383 8811 	msr	BASEPRI, r3
 80113de:	f3bf 8f6f 	isb	sy
 80113e2:	f3bf 8f4f 	dsb	sy
 80113e6:	613b      	str	r3, [r7, #16]
}
 80113e8:	bf00      	nop
 80113ea:	e7fe      	b.n	80113ea <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f0:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <xTaskGenericNotify+0x174>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d907      	bls.n	801140a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80113fa:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <xTaskGenericNotify+0x178>)
 80113fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801140a:	f000 fdf3 	bl	8011ff4 <vPortExitCritical>

		return xReturn;
 801140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011410:	4618      	mov	r0, r3
 8011412:	3728      	adds	r7, #40	; 0x28
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	200022a8 	.word	0x200022a8
 801141c:	20001dd0 	.word	0x20001dd0
 8011420:	20001dcc 	.word	0x20001dcc
 8011424:	e000ed04 	.word	0xe000ed04

08011428 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08e      	sub	sp, #56	; 0x38
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	603b      	str	r3, [r7, #0]
 8011434:	4613      	mov	r3, r2
 8011436:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011438:	2301      	movs	r3, #1
 801143a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d10a      	bne.n	8011458 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8011442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011446:	f383 8811 	msr	BASEPRI, r3
 801144a:	f3bf 8f6f 	isb	sy
 801144e:	f3bf 8f4f 	dsb	sy
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011454:	bf00      	nop
 8011456:	e7fe      	b.n	8011456 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011458:	f000 fe7e 	bl	8012158 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011460:	f3ef 8211 	mrs	r2, BASEPRI
 8011464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011468:	f383 8811 	msr	BASEPRI, r3
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	623a      	str	r2, [r7, #32]
 8011476:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011478:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801147a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d004      	beq.n	801148c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011484:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	2202      	movs	r2, #2
 801149a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801149e:	79fb      	ldrb	r3, [r7, #7]
 80114a0:	2b04      	cmp	r3, #4
 80114a2:	d82f      	bhi.n	8011504 <xTaskGenericNotifyFromISR+0xdc>
 80114a4:	a201      	add	r2, pc, #4	; (adr r2, 80114ac <xTaskGenericNotifyFromISR+0x84>)
 80114a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114aa:	bf00      	nop
 80114ac:	08011527 	.word	0x08011527
 80114b0:	080114c1 	.word	0x080114c1
 80114b4:	080114d3 	.word	0x080114d3
 80114b8:	080114e3 	.word	0x080114e3
 80114bc:	080114ed 	.word	0x080114ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80114c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	431a      	orrs	r2, r3
 80114ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80114d0:	e02c      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80114d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114dc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80114e0:	e024      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80114e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80114ea:	e01f      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80114ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80114f0:	2b02      	cmp	r3, #2
 80114f2:	d004      	beq.n	80114fe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80114f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f6:	68ba      	ldr	r2, [r7, #8]
 80114f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80114fc:	e016      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80114fe:	2300      	movs	r3, #0
 8011500:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011502:	e013      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011506:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150e:	d00c      	beq.n	801152a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8011510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	61bb      	str	r3, [r7, #24]
}
 8011522:	bf00      	nop
 8011524:	e7fe      	b.n	8011524 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <xTaskGenericNotifyFromISR+0x104>
					break;
 801152a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801152c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011530:	2b01      	cmp	r3, #1
 8011532:	d146      	bne.n	80115c2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00a      	beq.n	8011552 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 801153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011540:	f383 8811 	msr	BASEPRI, r3
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	f3bf 8f4f 	dsb	sy
 801154c:	617b      	str	r3, [r7, #20]
}
 801154e:	bf00      	nop
 8011550:	e7fe      	b.n	8011550 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011552:	4b21      	ldr	r3, [pc, #132]	; (80115d8 <xTaskGenericNotifyFromISR+0x1b0>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d11d      	bne.n	8011596 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155c:	3304      	adds	r3, #4
 801155e:	4618      	mov	r0, r3
 8011560:	f7fe f97e 	bl	800f860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011568:	4b1c      	ldr	r3, [pc, #112]	; (80115dc <xTaskGenericNotifyFromISR+0x1b4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	429a      	cmp	r2, r3
 801156e:	d903      	bls.n	8011578 <xTaskGenericNotifyFromISR+0x150>
 8011570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011574:	4a19      	ldr	r2, [pc, #100]	; (80115dc <xTaskGenericNotifyFromISR+0x1b4>)
 8011576:	6013      	str	r3, [r2, #0]
 8011578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157c:	4613      	mov	r3, r2
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	4a16      	ldr	r2, [pc, #88]	; (80115e0 <xTaskGenericNotifyFromISR+0x1b8>)
 8011586:	441a      	add	r2, r3
 8011588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158a:	3304      	adds	r3, #4
 801158c:	4619      	mov	r1, r3
 801158e:	4610      	mov	r0, r2
 8011590:	f7fe f909 	bl	800f7a6 <vListInsertEnd>
 8011594:	e005      	b.n	80115a2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011598:	3318      	adds	r3, #24
 801159a:	4619      	mov	r1, r3
 801159c:	4811      	ldr	r0, [pc, #68]	; (80115e4 <xTaskGenericNotifyFromISR+0x1bc>)
 801159e:	f7fe f902 	bl	800f7a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a6:	4b10      	ldr	r3, [pc, #64]	; (80115e8 <xTaskGenericNotifyFromISR+0x1c0>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d908      	bls.n	80115c2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80115b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d002      	beq.n	80115bc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80115b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115b8:	2201      	movs	r2, #1
 80115ba:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80115bc:	4b0b      	ldr	r3, [pc, #44]	; (80115ec <xTaskGenericNotifyFromISR+0x1c4>)
 80115be:	2201      	movs	r2, #1
 80115c0:	601a      	str	r2, [r3, #0]
 80115c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	f383 8811 	msr	BASEPRI, r3
}
 80115cc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80115ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3738      	adds	r7, #56	; 0x38
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	200022c8 	.word	0x200022c8
 80115dc:	200022a8 	.word	0x200022a8
 80115e0:	20001dd0 	.word	0x20001dd0
 80115e4:	20002260 	.word	0x20002260
 80115e8:	20001dcc 	.word	0x20001dcc
 80115ec:	200022b4 	.word	0x200022b4

080115f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115fa:	4b21      	ldr	r3, [pc, #132]	; (8011680 <prvAddCurrentTaskToDelayedList+0x90>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011600:	4b20      	ldr	r3, [pc, #128]	; (8011684 <prvAddCurrentTaskToDelayedList+0x94>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3304      	adds	r3, #4
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe f92a 	bl	800f860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011612:	d10a      	bne.n	801162a <prvAddCurrentTaskToDelayedList+0x3a>
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d007      	beq.n	801162a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801161a:	4b1a      	ldr	r3, [pc, #104]	; (8011684 <prvAddCurrentTaskToDelayedList+0x94>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3304      	adds	r3, #4
 8011620:	4619      	mov	r1, r3
 8011622:	4819      	ldr	r0, [pc, #100]	; (8011688 <prvAddCurrentTaskToDelayedList+0x98>)
 8011624:	f7fe f8bf 	bl	800f7a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011628:	e026      	b.n	8011678 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4413      	add	r3, r2
 8011630:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011632:	4b14      	ldr	r3, [pc, #80]	; (8011684 <prvAddCurrentTaskToDelayedList+0x94>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801163a:	68ba      	ldr	r2, [r7, #8]
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	429a      	cmp	r2, r3
 8011640:	d209      	bcs.n	8011656 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011642:	4b12      	ldr	r3, [pc, #72]	; (801168c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	4b0f      	ldr	r3, [pc, #60]	; (8011684 <prvAddCurrentTaskToDelayedList+0x94>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	3304      	adds	r3, #4
 801164c:	4619      	mov	r1, r3
 801164e:	4610      	mov	r0, r2
 8011650:	f7fe f8cd 	bl	800f7ee <vListInsert>
}
 8011654:	e010      	b.n	8011678 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011656:	4b0e      	ldr	r3, [pc, #56]	; (8011690 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	4b0a      	ldr	r3, [pc, #40]	; (8011684 <prvAddCurrentTaskToDelayedList+0x94>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3304      	adds	r3, #4
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fe f8c3 	bl	800f7ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011668:	4b0a      	ldr	r3, [pc, #40]	; (8011694 <prvAddCurrentTaskToDelayedList+0xa4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	429a      	cmp	r2, r3
 8011670:	d202      	bcs.n	8011678 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011672:	4a08      	ldr	r2, [pc, #32]	; (8011694 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	6013      	str	r3, [r2, #0]
}
 8011678:	bf00      	nop
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	200022a4 	.word	0x200022a4
 8011684:	20001dcc 	.word	0x20001dcc
 8011688:	2000228c 	.word	0x2000228c
 801168c:	2000225c 	.word	0x2000225c
 8011690:	20002258 	.word	0x20002258
 8011694:	200022c0 	.word	0x200022c0

08011698 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b08a      	sub	sp, #40	; 0x28
 801169c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801169e:	2300      	movs	r3, #0
 80116a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80116a2:	f000 fb07 	bl	8011cb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80116a6:	4b1c      	ldr	r3, [pc, #112]	; (8011718 <xTimerCreateTimerTask+0x80>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d021      	beq.n	80116f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80116b6:	1d3a      	adds	r2, r7, #4
 80116b8:	f107 0108 	add.w	r1, r7, #8
 80116bc:	f107 030c 	add.w	r3, r7, #12
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fe f829 	bl	800f718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80116c6:	6879      	ldr	r1, [r7, #4]
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	9202      	str	r2, [sp, #8]
 80116ce:	9301      	str	r3, [sp, #4]
 80116d0:	2302      	movs	r3, #2
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	2300      	movs	r3, #0
 80116d6:	460a      	mov	r2, r1
 80116d8:	4910      	ldr	r1, [pc, #64]	; (801171c <xTimerCreateTimerTask+0x84>)
 80116da:	4811      	ldr	r0, [pc, #68]	; (8011720 <xTimerCreateTimerTask+0x88>)
 80116dc:	f7fe fe90 	bl	8010400 <xTaskCreateStatic>
 80116e0:	4603      	mov	r3, r0
 80116e2:	4a10      	ldr	r2, [pc, #64]	; (8011724 <xTimerCreateTimerTask+0x8c>)
 80116e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80116e6:	4b0f      	ldr	r3, [pc, #60]	; (8011724 <xTimerCreateTimerTask+0x8c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d001      	beq.n	80116f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80116ee:	2301      	movs	r3, #1
 80116f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10a      	bne.n	801170e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80116f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fc:	f383 8811 	msr	BASEPRI, r3
 8011700:	f3bf 8f6f 	isb	sy
 8011704:	f3bf 8f4f 	dsb	sy
 8011708:	613b      	str	r3, [r7, #16]
}
 801170a:	bf00      	nop
 801170c:	e7fe      	b.n	801170c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801170e:	697b      	ldr	r3, [r7, #20]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3718      	adds	r7, #24
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	20002304 	.word	0x20002304
 801171c:	08015628 	.word	0x08015628
 8011720:	0801185d 	.word	0x0801185d
 8011724:	20002308 	.word	0x20002308

08011728 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b08a      	sub	sp, #40	; 0x28
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
 8011734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011736:	2300      	movs	r3, #0
 8011738:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10a      	bne.n	8011756 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	623b      	str	r3, [r7, #32]
}
 8011752:	bf00      	nop
 8011754:	e7fe      	b.n	8011754 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011756:	4b1a      	ldr	r3, [pc, #104]	; (80117c0 <xTimerGenericCommand+0x98>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d02a      	beq.n	80117b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2b05      	cmp	r3, #5
 801176e:	dc18      	bgt.n	80117a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011770:	f7ff fcb0 	bl	80110d4 <xTaskGetSchedulerState>
 8011774:	4603      	mov	r3, r0
 8011776:	2b02      	cmp	r3, #2
 8011778:	d109      	bne.n	801178e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801177a:	4b11      	ldr	r3, [pc, #68]	; (80117c0 <xTimerGenericCommand+0x98>)
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	f107 0110 	add.w	r1, r7, #16
 8011782:	2300      	movs	r3, #0
 8011784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011786:	f7fe f9d3 	bl	800fb30 <xQueueGenericSend>
 801178a:	6278      	str	r0, [r7, #36]	; 0x24
 801178c:	e012      	b.n	80117b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801178e:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <xTimerGenericCommand+0x98>)
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	f107 0110 	add.w	r1, r7, #16
 8011796:	2300      	movs	r3, #0
 8011798:	2200      	movs	r2, #0
 801179a:	f7fe f9c9 	bl	800fb30 <xQueueGenericSend>
 801179e:	6278      	str	r0, [r7, #36]	; 0x24
 80117a0:	e008      	b.n	80117b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80117a2:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <xTimerGenericCommand+0x98>)
 80117a4:	6818      	ldr	r0, [r3, #0]
 80117a6:	f107 0110 	add.w	r1, r7, #16
 80117aa:	2300      	movs	r3, #0
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	f7fe fabd 	bl	800fd2c <xQueueGenericSendFromISR>
 80117b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80117b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3728      	adds	r7, #40	; 0x28
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	20002304 	.word	0x20002304

080117c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b088      	sub	sp, #32
 80117c8:	af02      	add	r7, sp, #8
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117ce:	4b22      	ldr	r3, [pc, #136]	; (8011858 <prvProcessExpiredTimer+0x94>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	3304      	adds	r3, #4
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fe f83f 	bl	800f860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117e8:	f003 0304 	and.w	r3, r3, #4
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d022      	beq.n	8011836 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	699a      	ldr	r2, [r3, #24]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	18d1      	adds	r1, r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	683a      	ldr	r2, [r7, #0]
 80117fc:	6978      	ldr	r0, [r7, #20]
 80117fe:	f000 f8d1 	bl	80119a4 <prvInsertTimerInActiveList>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d01f      	beq.n	8011848 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011808:	2300      	movs	r3, #0
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	2300      	movs	r3, #0
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	2100      	movs	r1, #0
 8011812:	6978      	ldr	r0, [r7, #20]
 8011814:	f7ff ff88 	bl	8011728 <xTimerGenericCommand>
 8011818:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d113      	bne.n	8011848 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	60fb      	str	r3, [r7, #12]
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801183c:	f023 0301 	bic.w	r3, r3, #1
 8011840:	b2da      	uxtb	r2, r3
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	6a1b      	ldr	r3, [r3, #32]
 801184c:	6978      	ldr	r0, [r7, #20]
 801184e:	4798      	blx	r3
}
 8011850:	bf00      	nop
 8011852:	3718      	adds	r7, #24
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	200022fc 	.word	0x200022fc

0801185c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011864:	f107 0308 	add.w	r3, r7, #8
 8011868:	4618      	mov	r0, r3
 801186a:	f000 f857 	bl	801191c <prvGetNextExpireTime>
 801186e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	4619      	mov	r1, r3
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f000 f803 	bl	8011880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801187a:	f000 f8d5 	bl	8011a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801187e:	e7f1      	b.n	8011864 <prvTimerTask+0x8>

08011880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801188a:	f7ff f81b 	bl	80108c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801188e:	f107 0308 	add.w	r3, r7, #8
 8011892:	4618      	mov	r0, r3
 8011894:	f000 f866 	bl	8011964 <prvSampleTimeNow>
 8011898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d130      	bne.n	8011902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d10a      	bne.n	80118bc <prvProcessTimerOrBlockTask+0x3c>
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d806      	bhi.n	80118bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80118ae:	f7ff f817 	bl	80108e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80118b2:	68f9      	ldr	r1, [r7, #12]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f7ff ff85 	bl	80117c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80118ba:	e024      	b.n	8011906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d008      	beq.n	80118d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80118c2:	4b13      	ldr	r3, [pc, #76]	; (8011910 <prvProcessTimerOrBlockTask+0x90>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d101      	bne.n	80118d0 <prvProcessTimerOrBlockTask+0x50>
 80118cc:	2301      	movs	r3, #1
 80118ce:	e000      	b.n	80118d2 <prvProcessTimerOrBlockTask+0x52>
 80118d0:	2300      	movs	r3, #0
 80118d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80118d4:	4b0f      	ldr	r3, [pc, #60]	; (8011914 <prvProcessTimerOrBlockTask+0x94>)
 80118d6:	6818      	ldr	r0, [r3, #0]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	683a      	ldr	r2, [r7, #0]
 80118e0:	4619      	mov	r1, r3
 80118e2:	f7fe fd59 	bl	8010398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80118e6:	f7fe fffb 	bl	80108e0 <xTaskResumeAll>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d10a      	bne.n	8011906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80118f0:	4b09      	ldr	r3, [pc, #36]	; (8011918 <prvProcessTimerOrBlockTask+0x98>)
 80118f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	f3bf 8f4f 	dsb	sy
 80118fc:	f3bf 8f6f 	isb	sy
}
 8011900:	e001      	b.n	8011906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011902:	f7fe ffed 	bl	80108e0 <xTaskResumeAll>
}
 8011906:	bf00      	nop
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	20002300 	.word	0x20002300
 8011914:	20002304 	.word	0x20002304
 8011918:	e000ed04 	.word	0xe000ed04

0801191c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801191c:	b480      	push	{r7}
 801191e:	b085      	sub	sp, #20
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011924:	4b0e      	ldr	r3, [pc, #56]	; (8011960 <prvGetNextExpireTime+0x44>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d101      	bne.n	8011932 <prvGetNextExpireTime+0x16>
 801192e:	2201      	movs	r2, #1
 8011930:	e000      	b.n	8011934 <prvGetNextExpireTime+0x18>
 8011932:	2200      	movs	r2, #0
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d105      	bne.n	801194c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011940:	4b07      	ldr	r3, [pc, #28]	; (8011960 <prvGetNextExpireTime+0x44>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	60fb      	str	r3, [r7, #12]
 801194a:	e001      	b.n	8011950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801194c:	2300      	movs	r3, #0
 801194e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011950:	68fb      	ldr	r3, [r7, #12]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	200022fc 	.word	0x200022fc

08011964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801196c:	f7ff f856 	bl	8010a1c <xTaskGetTickCount>
 8011970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011972:	4b0b      	ldr	r3, [pc, #44]	; (80119a0 <prvSampleTimeNow+0x3c>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	429a      	cmp	r2, r3
 801197a:	d205      	bcs.n	8011988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801197c:	f000 f936 	bl	8011bec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2201      	movs	r2, #1
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	e002      	b.n	801198e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801198e:	4a04      	ldr	r2, [pc, #16]	; (80119a0 <prvSampleTimeNow+0x3c>)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011994:	68fb      	ldr	r3, [r7, #12]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	2000230c 	.word	0x2000230c

080119a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	607a      	str	r2, [r7, #4]
 80119b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80119b2:	2300      	movs	r3, #0
 80119b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80119c2:	68ba      	ldr	r2, [r7, #8]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d812      	bhi.n	80119f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	1ad2      	subs	r2, r2, r3
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	699b      	ldr	r3, [r3, #24]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d302      	bcc.n	80119de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80119d8:	2301      	movs	r3, #1
 80119da:	617b      	str	r3, [r7, #20]
 80119dc:	e01b      	b.n	8011a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80119de:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <prvInsertTimerInActiveList+0x7c>)
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3304      	adds	r3, #4
 80119e6:	4619      	mov	r1, r3
 80119e8:	4610      	mov	r0, r2
 80119ea:	f7fd ff00 	bl	800f7ee <vListInsert>
 80119ee:	e012      	b.n	8011a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d206      	bcs.n	8011a06 <prvInsertTimerInActiveList+0x62>
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d302      	bcc.n	8011a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011a00:	2301      	movs	r3, #1
 8011a02:	617b      	str	r3, [r7, #20]
 8011a04:	e007      	b.n	8011a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a06:	4b07      	ldr	r3, [pc, #28]	; (8011a24 <prvInsertTimerInActiveList+0x80>)
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	3304      	adds	r3, #4
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4610      	mov	r0, r2
 8011a12:	f7fd feec 	bl	800f7ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011a16:	697b      	ldr	r3, [r7, #20]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	20002300 	.word	0x20002300
 8011a24:	200022fc 	.word	0x200022fc

08011a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b08e      	sub	sp, #56	; 0x38
 8011a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a2e:	e0ca      	b.n	8011bc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	da18      	bge.n	8011a68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011a36:	1d3b      	adds	r3, r7, #4
 8011a38:	3304      	adds	r3, #4
 8011a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10a      	bne.n	8011a58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	61fb      	str	r3, [r7, #28]
}
 8011a54:	bf00      	nop
 8011a56:	e7fe      	b.n	8011a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a5e:	6850      	ldr	r0, [r2, #4]
 8011a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a62:	6892      	ldr	r2, [r2, #8]
 8011a64:	4611      	mov	r1, r2
 8011a66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	f2c0 80aa 	blt.w	8011bc4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	695b      	ldr	r3, [r3, #20]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d004      	beq.n	8011a86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	3304      	adds	r3, #4
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fd feed 	bl	800f860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a86:	463b      	mov	r3, r7
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7ff ff6b 	bl	8011964 <prvSampleTimeNow>
 8011a8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b09      	cmp	r3, #9
 8011a94:	f200 8097 	bhi.w	8011bc6 <prvProcessReceivedCommands+0x19e>
 8011a98:	a201      	add	r2, pc, #4	; (adr r2, 8011aa0 <prvProcessReceivedCommands+0x78>)
 8011a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9e:	bf00      	nop
 8011aa0:	08011ac9 	.word	0x08011ac9
 8011aa4:	08011ac9 	.word	0x08011ac9
 8011aa8:	08011ac9 	.word	0x08011ac9
 8011aac:	08011b3d 	.word	0x08011b3d
 8011ab0:	08011b51 	.word	0x08011b51
 8011ab4:	08011b9b 	.word	0x08011b9b
 8011ab8:	08011ac9 	.word	0x08011ac9
 8011abc:	08011ac9 	.word	0x08011ac9
 8011ac0:	08011b3d 	.word	0x08011b3d
 8011ac4:	08011b51 	.word	0x08011b51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ace:	f043 0301 	orr.w	r3, r3, #1
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ade:	699b      	ldr	r3, [r3, #24]
 8011ae0:	18d1      	adds	r1, r2, r3
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ae8:	f7ff ff5c 	bl	80119a4 <prvInsertTimerInActiveList>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d069      	beq.n	8011bc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af4:	6a1b      	ldr	r3, [r3, #32]
 8011af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b00:	f003 0304 	and.w	r3, r3, #4
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d05e      	beq.n	8011bc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	441a      	add	r2, r3
 8011b10:	2300      	movs	r3, #0
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	2300      	movs	r3, #0
 8011b16:	2100      	movs	r1, #0
 8011b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b1a:	f7ff fe05 	bl	8011728 <xTimerGenericCommand>
 8011b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011b20:	6a3b      	ldr	r3, [r7, #32]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d14f      	bne.n	8011bc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	61bb      	str	r3, [r7, #24]
}
 8011b38:	bf00      	nop
 8011b3a:	e7fe      	b.n	8011b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b42:	f023 0301 	bic.w	r3, r3, #1
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011b4e:	e03a      	b.n	8011bc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b56:	f043 0301 	orr.w	r3, r3, #1
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b62:	68ba      	ldr	r2, [r7, #8]
 8011b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d10a      	bne.n	8011b86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b74:	f383 8811 	msr	BASEPRI, r3
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	617b      	str	r3, [r7, #20]
}
 8011b82:	bf00      	nop
 8011b84:	e7fe      	b.n	8011b84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b88:	699a      	ldr	r2, [r3, #24]
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	18d1      	adds	r1, r2, r3
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b94:	f7ff ff06 	bl	80119a4 <prvInsertTimerInActiveList>
					break;
 8011b98:	e015      	b.n	8011bc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ba0:	f003 0302 	and.w	r3, r3, #2
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d103      	bne.n	8011bb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011baa:	f000 fbe1 	bl	8012370 <vPortFree>
 8011bae:	e00a      	b.n	8011bc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bb6:	f023 0301 	bic.w	r3, r3, #1
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011bc2:	e000      	b.n	8011bc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011bc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011bc6:	4b08      	ldr	r3, [pc, #32]	; (8011be8 <prvProcessReceivedCommands+0x1c0>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	1d39      	adds	r1, r7, #4
 8011bcc:	2200      	movs	r2, #0
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fe f948 	bl	800fe64 <xQueueReceive>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f47f af2a 	bne.w	8011a30 <prvProcessReceivedCommands+0x8>
	}
}
 8011bdc:	bf00      	nop
 8011bde:	bf00      	nop
 8011be0:	3730      	adds	r7, #48	; 0x30
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	20002304 	.word	0x20002304

08011bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011bf2:	e048      	b.n	8011c86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011bf4:	4b2d      	ldr	r3, [pc, #180]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bfe:	4b2b      	ldr	r3, [pc, #172]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fd fe27 	bl	800f860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	6a1b      	ldr	r3, [r3, #32]
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c20:	f003 0304 	and.w	r3, r3, #4
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d02e      	beq.n	8011c86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	693a      	ldr	r2, [r7, #16]
 8011c2e:	4413      	add	r3, r2
 8011c30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d90e      	bls.n	8011c58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c46:	4b19      	ldr	r3, [pc, #100]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4610      	mov	r0, r2
 8011c52:	f7fd fdcc 	bl	800f7ee <vListInsert>
 8011c56:	e016      	b.n	8011c86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c58:	2300      	movs	r3, #0
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	693a      	ldr	r2, [r7, #16]
 8011c60:	2100      	movs	r1, #0
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f7ff fd60 	bl	8011728 <xTimerGenericCommand>
 8011c68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10a      	bne.n	8011c86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	603b      	str	r3, [r7, #0]
}
 8011c82:	bf00      	nop
 8011c84:	e7fe      	b.n	8011c84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c86:	4b09      	ldr	r3, [pc, #36]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d1b1      	bne.n	8011bf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011c90:	4b06      	ldr	r3, [pc, #24]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011c96:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <prvSwitchTimerLists+0xc4>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a04      	ldr	r2, [pc, #16]	; (8011cac <prvSwitchTimerLists+0xc0>)
 8011c9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011c9e:	4a04      	ldr	r2, [pc, #16]	; (8011cb0 <prvSwitchTimerLists+0xc4>)
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	6013      	str	r3, [r2, #0]
}
 8011ca4:	bf00      	nop
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	200022fc 	.word	0x200022fc
 8011cb0:	20002300 	.word	0x20002300

08011cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011cba:	f000 f96b 	bl	8011f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011cbe:	4b15      	ldr	r3, [pc, #84]	; (8011d14 <prvCheckForValidListAndQueue+0x60>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d120      	bne.n	8011d08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011cc6:	4814      	ldr	r0, [pc, #80]	; (8011d18 <prvCheckForValidListAndQueue+0x64>)
 8011cc8:	f7fd fd40 	bl	800f74c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ccc:	4813      	ldr	r0, [pc, #76]	; (8011d1c <prvCheckForValidListAndQueue+0x68>)
 8011cce:	f7fd fd3d 	bl	800f74c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011cd2:	4b13      	ldr	r3, [pc, #76]	; (8011d20 <prvCheckForValidListAndQueue+0x6c>)
 8011cd4:	4a10      	ldr	r2, [pc, #64]	; (8011d18 <prvCheckForValidListAndQueue+0x64>)
 8011cd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011cd8:	4b12      	ldr	r3, [pc, #72]	; (8011d24 <prvCheckForValidListAndQueue+0x70>)
 8011cda:	4a10      	ldr	r2, [pc, #64]	; (8011d1c <prvCheckForValidListAndQueue+0x68>)
 8011cdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011cde:	2300      	movs	r3, #0
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	4b11      	ldr	r3, [pc, #68]	; (8011d28 <prvCheckForValidListAndQueue+0x74>)
 8011ce4:	4a11      	ldr	r2, [pc, #68]	; (8011d2c <prvCheckForValidListAndQueue+0x78>)
 8011ce6:	2110      	movs	r1, #16
 8011ce8:	200a      	movs	r0, #10
 8011cea:	f7fd fe4b 	bl	800f984 <xQueueGenericCreateStatic>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	4a08      	ldr	r2, [pc, #32]	; (8011d14 <prvCheckForValidListAndQueue+0x60>)
 8011cf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011cf4:	4b07      	ldr	r3, [pc, #28]	; (8011d14 <prvCheckForValidListAndQueue+0x60>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d005      	beq.n	8011d08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011cfc:	4b05      	ldr	r3, [pc, #20]	; (8011d14 <prvCheckForValidListAndQueue+0x60>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	490b      	ldr	r1, [pc, #44]	; (8011d30 <prvCheckForValidListAndQueue+0x7c>)
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7fe fb1e 	bl	8010344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d08:	f000 f974 	bl	8011ff4 <vPortExitCritical>
}
 8011d0c:	bf00      	nop
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	20002304 	.word	0x20002304
 8011d18:	200022d4 	.word	0x200022d4
 8011d1c:	200022e8 	.word	0x200022e8
 8011d20:	200022fc 	.word	0x200022fc
 8011d24:	20002300 	.word	0x20002300
 8011d28:	200023b0 	.word	0x200023b0
 8011d2c:	20002310 	.word	0x20002310
 8011d30:	08015630 	.word	0x08015630

08011d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	3b04      	subs	r3, #4
 8011d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	3b04      	subs	r3, #4
 8011d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	f023 0201 	bic.w	r2, r3, #1
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3b04      	subs	r3, #4
 8011d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d64:	4a0c      	ldr	r2, [pc, #48]	; (8011d98 <pxPortInitialiseStack+0x64>)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	3b14      	subs	r3, #20
 8011d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	3b04      	subs	r3, #4
 8011d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f06f 0202 	mvn.w	r2, #2
 8011d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	3b20      	subs	r3, #32
 8011d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3714      	adds	r7, #20
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	08011d9d 	.word	0x08011d9d

08011d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b085      	sub	sp, #20
 8011da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011da6:	4b12      	ldr	r3, [pc, #72]	; (8011df0 <prvTaskExitError+0x54>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dae:	d00a      	beq.n	8011dc6 <prvTaskExitError+0x2a>
	__asm volatile
 8011db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db4:	f383 8811 	msr	BASEPRI, r3
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	f3bf 8f4f 	dsb	sy
 8011dc0:	60fb      	str	r3, [r7, #12]
}
 8011dc2:	bf00      	nop
 8011dc4:	e7fe      	b.n	8011dc4 <prvTaskExitError+0x28>
	__asm volatile
 8011dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	60bb      	str	r3, [r7, #8]
}
 8011dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011dda:	bf00      	nop
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0fc      	beq.n	8011ddc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011de2:	bf00      	nop
 8011de4:	bf00      	nop
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	20000050 	.word	0x20000050
	...

08011e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e00:	4b07      	ldr	r3, [pc, #28]	; (8011e20 <pxCurrentTCBConst2>)
 8011e02:	6819      	ldr	r1, [r3, #0]
 8011e04:	6808      	ldr	r0, [r1, #0]
 8011e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e0a:	f380 8809 	msr	PSP, r0
 8011e0e:	f3bf 8f6f 	isb	sy
 8011e12:	f04f 0000 	mov.w	r0, #0
 8011e16:	f380 8811 	msr	BASEPRI, r0
 8011e1a:	4770      	bx	lr
 8011e1c:	f3af 8000 	nop.w

08011e20 <pxCurrentTCBConst2>:
 8011e20:	20001dcc 	.word	0x20001dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011e24:	bf00      	nop
 8011e26:	bf00      	nop

08011e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011e28:	4808      	ldr	r0, [pc, #32]	; (8011e4c <prvPortStartFirstTask+0x24>)
 8011e2a:	6800      	ldr	r0, [r0, #0]
 8011e2c:	6800      	ldr	r0, [r0, #0]
 8011e2e:	f380 8808 	msr	MSP, r0
 8011e32:	f04f 0000 	mov.w	r0, #0
 8011e36:	f380 8814 	msr	CONTROL, r0
 8011e3a:	b662      	cpsie	i
 8011e3c:	b661      	cpsie	f
 8011e3e:	f3bf 8f4f 	dsb	sy
 8011e42:	f3bf 8f6f 	isb	sy
 8011e46:	df00      	svc	0
 8011e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011e4a:	bf00      	nop
 8011e4c:	e000ed08 	.word	0xe000ed08

08011e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011e56:	4b46      	ldr	r3, [pc, #280]	; (8011f70 <xPortStartScheduler+0x120>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a46      	ldr	r2, [pc, #280]	; (8011f74 <xPortStartScheduler+0x124>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d10a      	bne.n	8011e76 <xPortStartScheduler+0x26>
	__asm volatile
 8011e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e64:	f383 8811 	msr	BASEPRI, r3
 8011e68:	f3bf 8f6f 	isb	sy
 8011e6c:	f3bf 8f4f 	dsb	sy
 8011e70:	613b      	str	r3, [r7, #16]
}
 8011e72:	bf00      	nop
 8011e74:	e7fe      	b.n	8011e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e76:	4b3e      	ldr	r3, [pc, #248]	; (8011f70 <xPortStartScheduler+0x120>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	4a3f      	ldr	r2, [pc, #252]	; (8011f78 <xPortStartScheduler+0x128>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d10a      	bne.n	8011e96 <xPortStartScheduler+0x46>
	__asm volatile
 8011e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e84:	f383 8811 	msr	BASEPRI, r3
 8011e88:	f3bf 8f6f 	isb	sy
 8011e8c:	f3bf 8f4f 	dsb	sy
 8011e90:	60fb      	str	r3, [r7, #12]
}
 8011e92:	bf00      	nop
 8011e94:	e7fe      	b.n	8011e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e96:	4b39      	ldr	r3, [pc, #228]	; (8011f7c <xPortStartScheduler+0x12c>)
 8011e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	22ff      	movs	r2, #255	; 0xff
 8011ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011eb0:	78fb      	ldrb	r3, [r7, #3]
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	4b31      	ldr	r3, [pc, #196]	; (8011f80 <xPortStartScheduler+0x130>)
 8011ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011ebe:	4b31      	ldr	r3, [pc, #196]	; (8011f84 <xPortStartScheduler+0x134>)
 8011ec0:	2207      	movs	r2, #7
 8011ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ec4:	e009      	b.n	8011eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011ec6:	4b2f      	ldr	r3, [pc, #188]	; (8011f84 <xPortStartScheduler+0x134>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	4a2d      	ldr	r2, [pc, #180]	; (8011f84 <xPortStartScheduler+0x134>)
 8011ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011ed0:	78fb      	ldrb	r3, [r7, #3]
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	005b      	lsls	r3, r3, #1
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011eda:	78fb      	ldrb	r3, [r7, #3]
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ee2:	2b80      	cmp	r3, #128	; 0x80
 8011ee4:	d0ef      	beq.n	8011ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011ee6:	4b27      	ldr	r3, [pc, #156]	; (8011f84 <xPortStartScheduler+0x134>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f1c3 0307 	rsb	r3, r3, #7
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	d00a      	beq.n	8011f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8011ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	60bb      	str	r3, [r7, #8]
}
 8011f04:	bf00      	nop
 8011f06:	e7fe      	b.n	8011f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f08:	4b1e      	ldr	r3, [pc, #120]	; (8011f84 <xPortStartScheduler+0x134>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	021b      	lsls	r3, r3, #8
 8011f0e:	4a1d      	ldr	r2, [pc, #116]	; (8011f84 <xPortStartScheduler+0x134>)
 8011f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f12:	4b1c      	ldr	r3, [pc, #112]	; (8011f84 <xPortStartScheduler+0x134>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f1a:	4a1a      	ldr	r2, [pc, #104]	; (8011f84 <xPortStartScheduler+0x134>)
 8011f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	b2da      	uxtb	r2, r3
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011f26:	4b18      	ldr	r3, [pc, #96]	; (8011f88 <xPortStartScheduler+0x138>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a17      	ldr	r2, [pc, #92]	; (8011f88 <xPortStartScheduler+0x138>)
 8011f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011f32:	4b15      	ldr	r3, [pc, #84]	; (8011f88 <xPortStartScheduler+0x138>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	4a14      	ldr	r2, [pc, #80]	; (8011f88 <xPortStartScheduler+0x138>)
 8011f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011f3e:	f000 f8dd 	bl	80120fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011f42:	4b12      	ldr	r3, [pc, #72]	; (8011f8c <xPortStartScheduler+0x13c>)
 8011f44:	2200      	movs	r2, #0
 8011f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011f48:	f000 f8fc 	bl	8012144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011f4c:	4b10      	ldr	r3, [pc, #64]	; (8011f90 <xPortStartScheduler+0x140>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a0f      	ldr	r2, [pc, #60]	; (8011f90 <xPortStartScheduler+0x140>)
 8011f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011f58:	f7ff ff66 	bl	8011e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f5c:	f7fe fe28 	bl	8010bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8011f60:	f7ff ff1c 	bl	8011d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3718      	adds	r7, #24
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	e000ed00 	.word	0xe000ed00
 8011f74:	410fc271 	.word	0x410fc271
 8011f78:	410fc270 	.word	0x410fc270
 8011f7c:	e000e400 	.word	0xe000e400
 8011f80:	20002400 	.word	0x20002400
 8011f84:	20002404 	.word	0x20002404
 8011f88:	e000ed20 	.word	0xe000ed20
 8011f8c:	20000050 	.word	0x20000050
 8011f90:	e000ef34 	.word	0xe000ef34

08011f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
	__asm volatile
 8011f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	607b      	str	r3, [r7, #4]
}
 8011fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011fae:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <vPortEnterCritical+0x58>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	4a0d      	ldr	r2, [pc, #52]	; (8011fec <vPortEnterCritical+0x58>)
 8011fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <vPortEnterCritical+0x58>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d10f      	bne.n	8011fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011fc0:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <vPortEnterCritical+0x5c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d00a      	beq.n	8011fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	603b      	str	r3, [r7, #0]
}
 8011fdc:	bf00      	nop
 8011fde:	e7fe      	b.n	8011fde <vPortEnterCritical+0x4a>
	}
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	20000050 	.word	0x20000050
 8011ff0:	e000ed04 	.word	0xe000ed04

08011ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011ffa:	4b12      	ldr	r3, [pc, #72]	; (8012044 <vPortExitCritical+0x50>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d10a      	bne.n	8012018 <vPortExitCritical+0x24>
	__asm volatile
 8012002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012006:	f383 8811 	msr	BASEPRI, r3
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	607b      	str	r3, [r7, #4]
}
 8012014:	bf00      	nop
 8012016:	e7fe      	b.n	8012016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012018:	4b0a      	ldr	r3, [pc, #40]	; (8012044 <vPortExitCritical+0x50>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	3b01      	subs	r3, #1
 801201e:	4a09      	ldr	r2, [pc, #36]	; (8012044 <vPortExitCritical+0x50>)
 8012020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012022:	4b08      	ldr	r3, [pc, #32]	; (8012044 <vPortExitCritical+0x50>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d105      	bne.n	8012036 <vPortExitCritical+0x42>
 801202a:	2300      	movs	r3, #0
 801202c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	f383 8811 	msr	BASEPRI, r3
}
 8012034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012036:	bf00      	nop
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	20000050 	.word	0x20000050
	...

08012050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012050:	f3ef 8009 	mrs	r0, PSP
 8012054:	f3bf 8f6f 	isb	sy
 8012058:	4b15      	ldr	r3, [pc, #84]	; (80120b0 <pxCurrentTCBConst>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	f01e 0f10 	tst.w	lr, #16
 8012060:	bf08      	it	eq
 8012062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206a:	6010      	str	r0, [r2, #0]
 801206c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012074:	f380 8811 	msr	BASEPRI, r0
 8012078:	f3bf 8f4f 	dsb	sy
 801207c:	f3bf 8f6f 	isb	sy
 8012080:	f7fe fd96 	bl	8010bb0 <vTaskSwitchContext>
 8012084:	f04f 0000 	mov.w	r0, #0
 8012088:	f380 8811 	msr	BASEPRI, r0
 801208c:	bc09      	pop	{r0, r3}
 801208e:	6819      	ldr	r1, [r3, #0]
 8012090:	6808      	ldr	r0, [r1, #0]
 8012092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012096:	f01e 0f10 	tst.w	lr, #16
 801209a:	bf08      	it	eq
 801209c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80120a0:	f380 8809 	msr	PSP, r0
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	f3af 8000 	nop.w

080120b0 <pxCurrentTCBConst>:
 80120b0:	20001dcc 	.word	0x20001dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80120b4:	bf00      	nop
 80120b6:	bf00      	nop

080120b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
	__asm volatile
 80120be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c2:	f383 8811 	msr	BASEPRI, r3
 80120c6:	f3bf 8f6f 	isb	sy
 80120ca:	f3bf 8f4f 	dsb	sy
 80120ce:	607b      	str	r3, [r7, #4]
}
 80120d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80120d2:	f7fe fcb3 	bl	8010a3c <xTaskIncrementTick>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d003      	beq.n	80120e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80120dc:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <xPortSysTickHandler+0x40>)
 80120de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	2300      	movs	r3, #0
 80120e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	f383 8811 	msr	BASEPRI, r3
}
 80120ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80120f0:	bf00      	nop
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	e000ed04 	.word	0xe000ed04

080120fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80120fc:	b480      	push	{r7}
 80120fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012100:	4b0b      	ldr	r3, [pc, #44]	; (8012130 <vPortSetupTimerInterrupt+0x34>)
 8012102:	2200      	movs	r2, #0
 8012104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012106:	4b0b      	ldr	r3, [pc, #44]	; (8012134 <vPortSetupTimerInterrupt+0x38>)
 8012108:	2200      	movs	r2, #0
 801210a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801210c:	4b0a      	ldr	r3, [pc, #40]	; (8012138 <vPortSetupTimerInterrupt+0x3c>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a0a      	ldr	r2, [pc, #40]	; (801213c <vPortSetupTimerInterrupt+0x40>)
 8012112:	fba2 2303 	umull	r2, r3, r2, r3
 8012116:	099b      	lsrs	r3, r3, #6
 8012118:	4a09      	ldr	r2, [pc, #36]	; (8012140 <vPortSetupTimerInterrupt+0x44>)
 801211a:	3b01      	subs	r3, #1
 801211c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801211e:	4b04      	ldr	r3, [pc, #16]	; (8012130 <vPortSetupTimerInterrupt+0x34>)
 8012120:	2207      	movs	r2, #7
 8012122:	601a      	str	r2, [r3, #0]
}
 8012124:	bf00      	nop
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	e000e010 	.word	0xe000e010
 8012134:	e000e018 	.word	0xe000e018
 8012138:	20000010 	.word	0x20000010
 801213c:	10624dd3 	.word	0x10624dd3
 8012140:	e000e014 	.word	0xe000e014

08012144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012154 <vPortEnableVFP+0x10>
 8012148:	6801      	ldr	r1, [r0, #0]
 801214a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801214e:	6001      	str	r1, [r0, #0]
 8012150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012152:	bf00      	nop
 8012154:	e000ed88 	.word	0xe000ed88

08012158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012158:	b480      	push	{r7}
 801215a:	b085      	sub	sp, #20
 801215c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801215e:	f3ef 8305 	mrs	r3, IPSR
 8012162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2b0f      	cmp	r3, #15
 8012168:	d914      	bls.n	8012194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801216a:	4a17      	ldr	r2, [pc, #92]	; (80121c8 <vPortValidateInterruptPriority+0x70>)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	4413      	add	r3, r2
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012174:	4b15      	ldr	r3, [pc, #84]	; (80121cc <vPortValidateInterruptPriority+0x74>)
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	7afa      	ldrb	r2, [r7, #11]
 801217a:	429a      	cmp	r2, r3
 801217c:	d20a      	bcs.n	8012194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012182:	f383 8811 	msr	BASEPRI, r3
 8012186:	f3bf 8f6f 	isb	sy
 801218a:	f3bf 8f4f 	dsb	sy
 801218e:	607b      	str	r3, [r7, #4]
}
 8012190:	bf00      	nop
 8012192:	e7fe      	b.n	8012192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012194:	4b0e      	ldr	r3, [pc, #56]	; (80121d0 <vPortValidateInterruptPriority+0x78>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801219c:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <vPortValidateInterruptPriority+0x7c>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d90a      	bls.n	80121ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80121a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	603b      	str	r3, [r7, #0]
}
 80121b6:	bf00      	nop
 80121b8:	e7fe      	b.n	80121b8 <vPortValidateInterruptPriority+0x60>
	}
 80121ba:	bf00      	nop
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop
 80121c8:	e000e3f0 	.word	0xe000e3f0
 80121cc:	20002400 	.word	0x20002400
 80121d0:	e000ed0c 	.word	0xe000ed0c
 80121d4:	20002404 	.word	0x20002404

080121d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08a      	sub	sp, #40	; 0x28
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80121e0:	2300      	movs	r3, #0
 80121e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80121e4:	f7fe fb6e 	bl	80108c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80121e8:	4b5b      	ldr	r3, [pc, #364]	; (8012358 <pvPortMalloc+0x180>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d101      	bne.n	80121f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80121f0:	f000 f920 	bl	8012434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80121f4:	4b59      	ldr	r3, [pc, #356]	; (801235c <pvPortMalloc+0x184>)
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	4013      	ands	r3, r2
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	f040 8093 	bne.w	8012328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d01d      	beq.n	8012244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012208:	2208      	movs	r2, #8
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4413      	add	r3, r2
 801220e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f003 0307 	and.w	r3, r3, #7
 8012216:	2b00      	cmp	r3, #0
 8012218:	d014      	beq.n	8012244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f023 0307 	bic.w	r3, r3, #7
 8012220:	3308      	adds	r3, #8
 8012222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f003 0307 	and.w	r3, r3, #7
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00a      	beq.n	8012244 <pvPortMalloc+0x6c>
	__asm volatile
 801222e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	617b      	str	r3, [r7, #20]
}
 8012240:	bf00      	nop
 8012242:	e7fe      	b.n	8012242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d06e      	beq.n	8012328 <pvPortMalloc+0x150>
 801224a:	4b45      	ldr	r3, [pc, #276]	; (8012360 <pvPortMalloc+0x188>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	429a      	cmp	r2, r3
 8012252:	d869      	bhi.n	8012328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012254:	4b43      	ldr	r3, [pc, #268]	; (8012364 <pvPortMalloc+0x18c>)
 8012256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012258:	4b42      	ldr	r3, [pc, #264]	; (8012364 <pvPortMalloc+0x18c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801225e:	e004      	b.n	801226a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	429a      	cmp	r2, r3
 8012272:	d903      	bls.n	801227c <pvPortMalloc+0xa4>
 8012274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1f1      	bne.n	8012260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801227c:	4b36      	ldr	r3, [pc, #216]	; (8012358 <pvPortMalloc+0x180>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012282:	429a      	cmp	r2, r3
 8012284:	d050      	beq.n	8012328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012286:	6a3b      	ldr	r3, [r7, #32]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2208      	movs	r2, #8
 801228c:	4413      	add	r3, r2
 801228e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	6a3b      	ldr	r3, [r7, #32]
 8012296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	685a      	ldr	r2, [r3, #4]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	1ad2      	subs	r2, r2, r3
 80122a0:	2308      	movs	r3, #8
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d91f      	bls.n	80122e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80122a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4413      	add	r3, r2
 80122ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	f003 0307 	and.w	r3, r3, #7
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00a      	beq.n	80122d0 <pvPortMalloc+0xf8>
	__asm volatile
 80122ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122be:	f383 8811 	msr	BASEPRI, r3
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	f3bf 8f4f 	dsb	sy
 80122ca:	613b      	str	r3, [r7, #16]
}
 80122cc:	bf00      	nop
 80122ce:	e7fe      	b.n	80122ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	685a      	ldr	r2, [r3, #4]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	1ad2      	subs	r2, r2, r3
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80122e2:	69b8      	ldr	r0, [r7, #24]
 80122e4:	f000 f908 	bl	80124f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80122e8:	4b1d      	ldr	r3, [pc, #116]	; (8012360 <pvPortMalloc+0x188>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	4a1b      	ldr	r2, [pc, #108]	; (8012360 <pvPortMalloc+0x188>)
 80122f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80122f6:	4b1a      	ldr	r3, [pc, #104]	; (8012360 <pvPortMalloc+0x188>)
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	4b1b      	ldr	r3, [pc, #108]	; (8012368 <pvPortMalloc+0x190>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d203      	bcs.n	801230a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012302:	4b17      	ldr	r3, [pc, #92]	; (8012360 <pvPortMalloc+0x188>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	4a18      	ldr	r2, [pc, #96]	; (8012368 <pvPortMalloc+0x190>)
 8012308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	4b13      	ldr	r3, [pc, #76]	; (801235c <pvPortMalloc+0x184>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	431a      	orrs	r2, r3
 8012314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	2200      	movs	r2, #0
 801231c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801231e:	4b13      	ldr	r3, [pc, #76]	; (801236c <pvPortMalloc+0x194>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3301      	adds	r3, #1
 8012324:	4a11      	ldr	r2, [pc, #68]	; (801236c <pvPortMalloc+0x194>)
 8012326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012328:	f7fe fada 	bl	80108e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	f003 0307 	and.w	r3, r3, #7
 8012332:	2b00      	cmp	r3, #0
 8012334:	d00a      	beq.n	801234c <pvPortMalloc+0x174>
	__asm volatile
 8012336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233a:	f383 8811 	msr	BASEPRI, r3
 801233e:	f3bf 8f6f 	isb	sy
 8012342:	f3bf 8f4f 	dsb	sy
 8012346:	60fb      	str	r3, [r7, #12]
}
 8012348:	bf00      	nop
 801234a:	e7fe      	b.n	801234a <pvPortMalloc+0x172>
	return pvReturn;
 801234c:	69fb      	ldr	r3, [r7, #28]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3728      	adds	r7, #40	; 0x28
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	20004f08 	.word	0x20004f08
 801235c:	20004f1c 	.word	0x20004f1c
 8012360:	20004f0c 	.word	0x20004f0c
 8012364:	20004f00 	.word	0x20004f00
 8012368:	20004f10 	.word	0x20004f10
 801236c:	20004f14 	.word	0x20004f14

08012370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d04d      	beq.n	801241e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012382:	2308      	movs	r3, #8
 8012384:	425b      	negs	r3, r3
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	4413      	add	r3, r2
 801238a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	685a      	ldr	r2, [r3, #4]
 8012394:	4b24      	ldr	r3, [pc, #144]	; (8012428 <vPortFree+0xb8>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4013      	ands	r3, r2
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10a      	bne.n	80123b4 <vPortFree+0x44>
	__asm volatile
 801239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	60fb      	str	r3, [r7, #12]
}
 80123b0:	bf00      	nop
 80123b2:	e7fe      	b.n	80123b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00a      	beq.n	80123d2 <vPortFree+0x62>
	__asm volatile
 80123bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c0:	f383 8811 	msr	BASEPRI, r3
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	f3bf 8f4f 	dsb	sy
 80123cc:	60bb      	str	r3, [r7, #8]
}
 80123ce:	bf00      	nop
 80123d0:	e7fe      	b.n	80123d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	685a      	ldr	r2, [r3, #4]
 80123d6:	4b14      	ldr	r3, [pc, #80]	; (8012428 <vPortFree+0xb8>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4013      	ands	r3, r2
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d01e      	beq.n	801241e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d11a      	bne.n	801241e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	685a      	ldr	r2, [r3, #4]
 80123ec:	4b0e      	ldr	r3, [pc, #56]	; (8012428 <vPortFree+0xb8>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	43db      	mvns	r3, r3
 80123f2:	401a      	ands	r2, r3
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80123f8:	f7fe fa64 	bl	80108c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	685a      	ldr	r2, [r3, #4]
 8012400:	4b0a      	ldr	r3, [pc, #40]	; (801242c <vPortFree+0xbc>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4413      	add	r3, r2
 8012406:	4a09      	ldr	r2, [pc, #36]	; (801242c <vPortFree+0xbc>)
 8012408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801240a:	6938      	ldr	r0, [r7, #16]
 801240c:	f000 f874 	bl	80124f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012410:	4b07      	ldr	r3, [pc, #28]	; (8012430 <vPortFree+0xc0>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	3301      	adds	r3, #1
 8012416:	4a06      	ldr	r2, [pc, #24]	; (8012430 <vPortFree+0xc0>)
 8012418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801241a:	f7fe fa61 	bl	80108e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801241e:	bf00      	nop
 8012420:	3718      	adds	r7, #24
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20004f1c 	.word	0x20004f1c
 801242c:	20004f0c 	.word	0x20004f0c
 8012430:	20004f18 	.word	0x20004f18

08012434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012434:	b480      	push	{r7}
 8012436:	b085      	sub	sp, #20
 8012438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801243a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 801243e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012440:	4b27      	ldr	r3, [pc, #156]	; (80124e0 <prvHeapInit+0xac>)
 8012442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f003 0307 	and.w	r3, r3, #7
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00c      	beq.n	8012468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	3307      	adds	r3, #7
 8012452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f023 0307 	bic.w	r3, r3, #7
 801245a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	4a1f      	ldr	r2, [pc, #124]	; (80124e0 <prvHeapInit+0xac>)
 8012464:	4413      	add	r3, r2
 8012466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801246c:	4a1d      	ldr	r2, [pc, #116]	; (80124e4 <prvHeapInit+0xb0>)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012472:	4b1c      	ldr	r3, [pc, #112]	; (80124e4 <prvHeapInit+0xb0>)
 8012474:	2200      	movs	r2, #0
 8012476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	68ba      	ldr	r2, [r7, #8]
 801247c:	4413      	add	r3, r2
 801247e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012480:	2208      	movs	r2, #8
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	1a9b      	subs	r3, r3, r2
 8012486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f023 0307 	bic.w	r3, r3, #7
 801248e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	4a15      	ldr	r2, [pc, #84]	; (80124e8 <prvHeapInit+0xb4>)
 8012494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012496:	4b14      	ldr	r3, [pc, #80]	; (80124e8 <prvHeapInit+0xb4>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	2200      	movs	r2, #0
 801249c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801249e:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <prvHeapInit+0xb4>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2200      	movs	r2, #0
 80124a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	68fa      	ldr	r2, [r7, #12]
 80124ae:	1ad2      	subs	r2, r2, r3
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80124b4:	4b0c      	ldr	r3, [pc, #48]	; (80124e8 <prvHeapInit+0xb4>)
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4a0a      	ldr	r2, [pc, #40]	; (80124ec <prvHeapInit+0xb8>)
 80124c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	4a09      	ldr	r2, [pc, #36]	; (80124f0 <prvHeapInit+0xbc>)
 80124ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80124cc:	4b09      	ldr	r3, [pc, #36]	; (80124f4 <prvHeapInit+0xc0>)
 80124ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80124d2:	601a      	str	r2, [r3, #0]
}
 80124d4:	bf00      	nop
 80124d6:	3714      	adds	r7, #20
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr
 80124e0:	20002408 	.word	0x20002408
 80124e4:	20004f00 	.word	0x20004f00
 80124e8:	20004f08 	.word	0x20004f08
 80124ec:	20004f10 	.word	0x20004f10
 80124f0:	20004f0c 	.word	0x20004f0c
 80124f4:	20004f1c 	.word	0x20004f1c

080124f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80124f8:	b480      	push	{r7}
 80124fa:	b085      	sub	sp, #20
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012500:	4b28      	ldr	r3, [pc, #160]	; (80125a4 <prvInsertBlockIntoFreeList+0xac>)
 8012502:	60fb      	str	r3, [r7, #12]
 8012504:	e002      	b.n	801250c <prvInsertBlockIntoFreeList+0x14>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	60fb      	str	r3, [r7, #12]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	429a      	cmp	r2, r3
 8012514:	d8f7      	bhi.n	8012506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	4413      	add	r3, r2
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	429a      	cmp	r2, r3
 8012526:	d108      	bne.n	801253a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	685a      	ldr	r2, [r3, #4]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	441a      	add	r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	68ba      	ldr	r2, [r7, #8]
 8012544:	441a      	add	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	429a      	cmp	r2, r3
 801254c:	d118      	bne.n	8012580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	4b15      	ldr	r3, [pc, #84]	; (80125a8 <prvInsertBlockIntoFreeList+0xb0>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	429a      	cmp	r2, r3
 8012558:	d00d      	beq.n	8012576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	441a      	add	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	e008      	b.n	8012588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012576:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <prvInsertBlockIntoFreeList+0xb0>)
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	e003      	b.n	8012588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012588:	68fa      	ldr	r2, [r7, #12]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	429a      	cmp	r2, r3
 801258e:	d002      	beq.n	8012596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012596:	bf00      	nop
 8012598:	3714      	adds	r7, #20
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	20004f00 	.word	0x20004f00
 80125a8:	20004f08 	.word	0x20004f08

080125ac <__assert_func>:
 80125ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125ae:	4614      	mov	r4, r2
 80125b0:	461a      	mov	r2, r3
 80125b2:	4b09      	ldr	r3, [pc, #36]	; (80125d8 <__assert_func+0x2c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4605      	mov	r5, r0
 80125b8:	68d8      	ldr	r0, [r3, #12]
 80125ba:	b14c      	cbz	r4, 80125d0 <__assert_func+0x24>
 80125bc:	4b07      	ldr	r3, [pc, #28]	; (80125dc <__assert_func+0x30>)
 80125be:	9100      	str	r1, [sp, #0]
 80125c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125c4:	4906      	ldr	r1, [pc, #24]	; (80125e0 <__assert_func+0x34>)
 80125c6:	462b      	mov	r3, r5
 80125c8:	f000 f8ea 	bl	80127a0 <fiprintf>
 80125cc:	f000 fffa 	bl	80135c4 <abort>
 80125d0:	4b04      	ldr	r3, [pc, #16]	; (80125e4 <__assert_func+0x38>)
 80125d2:	461c      	mov	r4, r3
 80125d4:	e7f3      	b.n	80125be <__assert_func+0x12>
 80125d6:	bf00      	nop
 80125d8:	20000054 	.word	0x20000054
 80125dc:	08015ac3 	.word	0x08015ac3
 80125e0:	08015ad0 	.word	0x08015ad0
 80125e4:	08015afe 	.word	0x08015afe

080125e8 <__errno>:
 80125e8:	4b01      	ldr	r3, [pc, #4]	; (80125f0 <__errno+0x8>)
 80125ea:	6818      	ldr	r0, [r3, #0]
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	20000054 	.word	0x20000054

080125f4 <std>:
 80125f4:	2300      	movs	r3, #0
 80125f6:	b510      	push	{r4, lr}
 80125f8:	4604      	mov	r4, r0
 80125fa:	e9c0 3300 	strd	r3, r3, [r0]
 80125fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012602:	6083      	str	r3, [r0, #8]
 8012604:	8181      	strh	r1, [r0, #12]
 8012606:	6643      	str	r3, [r0, #100]	; 0x64
 8012608:	81c2      	strh	r2, [r0, #14]
 801260a:	6183      	str	r3, [r0, #24]
 801260c:	4619      	mov	r1, r3
 801260e:	2208      	movs	r2, #8
 8012610:	305c      	adds	r0, #92	; 0x5c
 8012612:	f000 f956 	bl	80128c2 <memset>
 8012616:	4b05      	ldr	r3, [pc, #20]	; (801262c <std+0x38>)
 8012618:	6263      	str	r3, [r4, #36]	; 0x24
 801261a:	4b05      	ldr	r3, [pc, #20]	; (8012630 <std+0x3c>)
 801261c:	62a3      	str	r3, [r4, #40]	; 0x28
 801261e:	4b05      	ldr	r3, [pc, #20]	; (8012634 <std+0x40>)
 8012620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012622:	4b05      	ldr	r3, [pc, #20]	; (8012638 <std+0x44>)
 8012624:	6224      	str	r4, [r4, #32]
 8012626:	6323      	str	r3, [r4, #48]	; 0x30
 8012628:	bd10      	pop	{r4, pc}
 801262a:	bf00      	nop
 801262c:	08013291 	.word	0x08013291
 8012630:	080132b3 	.word	0x080132b3
 8012634:	080132eb 	.word	0x080132eb
 8012638:	0801330f 	.word	0x0801330f

0801263c <_cleanup_r>:
 801263c:	4901      	ldr	r1, [pc, #4]	; (8012644 <_cleanup_r+0x8>)
 801263e:	f000 b8c1 	b.w	80127c4 <_fwalk_reent>
 8012642:	bf00      	nop
 8012644:	08013701 	.word	0x08013701

08012648 <__sfmoreglue>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	2268      	movs	r2, #104	; 0x68
 801264c:	1e4d      	subs	r5, r1, #1
 801264e:	4355      	muls	r5, r2
 8012650:	460e      	mov	r6, r1
 8012652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012656:	f000 f95d 	bl	8012914 <_malloc_r>
 801265a:	4604      	mov	r4, r0
 801265c:	b140      	cbz	r0, 8012670 <__sfmoreglue+0x28>
 801265e:	2100      	movs	r1, #0
 8012660:	e9c0 1600 	strd	r1, r6, [r0]
 8012664:	300c      	adds	r0, #12
 8012666:	60a0      	str	r0, [r4, #8]
 8012668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801266c:	f000 f929 	bl	80128c2 <memset>
 8012670:	4620      	mov	r0, r4
 8012672:	bd70      	pop	{r4, r5, r6, pc}

08012674 <__sfp_lock_acquire>:
 8012674:	4801      	ldr	r0, [pc, #4]	; (801267c <__sfp_lock_acquire+0x8>)
 8012676:	f000 b8ea 	b.w	801284e <__retarget_lock_acquire_recursive>
 801267a:	bf00      	nop
 801267c:	20004f21 	.word	0x20004f21

08012680 <__sfp_lock_release>:
 8012680:	4801      	ldr	r0, [pc, #4]	; (8012688 <__sfp_lock_release+0x8>)
 8012682:	f000 b8e5 	b.w	8012850 <__retarget_lock_release_recursive>
 8012686:	bf00      	nop
 8012688:	20004f21 	.word	0x20004f21

0801268c <__sinit_lock_acquire>:
 801268c:	4801      	ldr	r0, [pc, #4]	; (8012694 <__sinit_lock_acquire+0x8>)
 801268e:	f000 b8de 	b.w	801284e <__retarget_lock_acquire_recursive>
 8012692:	bf00      	nop
 8012694:	20004f22 	.word	0x20004f22

08012698 <__sinit_lock_release>:
 8012698:	4801      	ldr	r0, [pc, #4]	; (80126a0 <__sinit_lock_release+0x8>)
 801269a:	f000 b8d9 	b.w	8012850 <__retarget_lock_release_recursive>
 801269e:	bf00      	nop
 80126a0:	20004f22 	.word	0x20004f22

080126a4 <__sinit>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4604      	mov	r4, r0
 80126a8:	f7ff fff0 	bl	801268c <__sinit_lock_acquire>
 80126ac:	69a3      	ldr	r3, [r4, #24]
 80126ae:	b11b      	cbz	r3, 80126b8 <__sinit+0x14>
 80126b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b4:	f7ff bff0 	b.w	8012698 <__sinit_lock_release>
 80126b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80126bc:	6523      	str	r3, [r4, #80]	; 0x50
 80126be:	4b13      	ldr	r3, [pc, #76]	; (801270c <__sinit+0x68>)
 80126c0:	4a13      	ldr	r2, [pc, #76]	; (8012710 <__sinit+0x6c>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80126c6:	42a3      	cmp	r3, r4
 80126c8:	bf04      	itt	eq
 80126ca:	2301      	moveq	r3, #1
 80126cc:	61a3      	streq	r3, [r4, #24]
 80126ce:	4620      	mov	r0, r4
 80126d0:	f000 f820 	bl	8012714 <__sfp>
 80126d4:	6060      	str	r0, [r4, #4]
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 f81c 	bl	8012714 <__sfp>
 80126dc:	60a0      	str	r0, [r4, #8]
 80126de:	4620      	mov	r0, r4
 80126e0:	f000 f818 	bl	8012714 <__sfp>
 80126e4:	2200      	movs	r2, #0
 80126e6:	60e0      	str	r0, [r4, #12]
 80126e8:	2104      	movs	r1, #4
 80126ea:	6860      	ldr	r0, [r4, #4]
 80126ec:	f7ff ff82 	bl	80125f4 <std>
 80126f0:	68a0      	ldr	r0, [r4, #8]
 80126f2:	2201      	movs	r2, #1
 80126f4:	2109      	movs	r1, #9
 80126f6:	f7ff ff7d 	bl	80125f4 <std>
 80126fa:	68e0      	ldr	r0, [r4, #12]
 80126fc:	2202      	movs	r2, #2
 80126fe:	2112      	movs	r1, #18
 8012700:	f7ff ff78 	bl	80125f4 <std>
 8012704:	2301      	movs	r3, #1
 8012706:	61a3      	str	r3, [r4, #24]
 8012708:	e7d2      	b.n	80126b0 <__sinit+0xc>
 801270a:	bf00      	nop
 801270c:	08015b60 	.word	0x08015b60
 8012710:	0801263d 	.word	0x0801263d

08012714 <__sfp>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	4607      	mov	r7, r0
 8012718:	f7ff ffac 	bl	8012674 <__sfp_lock_acquire>
 801271c:	4b1e      	ldr	r3, [pc, #120]	; (8012798 <__sfp+0x84>)
 801271e:	681e      	ldr	r6, [r3, #0]
 8012720:	69b3      	ldr	r3, [r6, #24]
 8012722:	b913      	cbnz	r3, 801272a <__sfp+0x16>
 8012724:	4630      	mov	r0, r6
 8012726:	f7ff ffbd 	bl	80126a4 <__sinit>
 801272a:	3648      	adds	r6, #72	; 0x48
 801272c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012730:	3b01      	subs	r3, #1
 8012732:	d503      	bpl.n	801273c <__sfp+0x28>
 8012734:	6833      	ldr	r3, [r6, #0]
 8012736:	b30b      	cbz	r3, 801277c <__sfp+0x68>
 8012738:	6836      	ldr	r6, [r6, #0]
 801273a:	e7f7      	b.n	801272c <__sfp+0x18>
 801273c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012740:	b9d5      	cbnz	r5, 8012778 <__sfp+0x64>
 8012742:	4b16      	ldr	r3, [pc, #88]	; (801279c <__sfp+0x88>)
 8012744:	60e3      	str	r3, [r4, #12]
 8012746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801274a:	6665      	str	r5, [r4, #100]	; 0x64
 801274c:	f000 f87e 	bl	801284c <__retarget_lock_init_recursive>
 8012750:	f7ff ff96 	bl	8012680 <__sfp_lock_release>
 8012754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801275c:	6025      	str	r5, [r4, #0]
 801275e:	61a5      	str	r5, [r4, #24]
 8012760:	2208      	movs	r2, #8
 8012762:	4629      	mov	r1, r5
 8012764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012768:	f000 f8ab 	bl	80128c2 <memset>
 801276c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012774:	4620      	mov	r0, r4
 8012776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012778:	3468      	adds	r4, #104	; 0x68
 801277a:	e7d9      	b.n	8012730 <__sfp+0x1c>
 801277c:	2104      	movs	r1, #4
 801277e:	4638      	mov	r0, r7
 8012780:	f7ff ff62 	bl	8012648 <__sfmoreglue>
 8012784:	4604      	mov	r4, r0
 8012786:	6030      	str	r0, [r6, #0]
 8012788:	2800      	cmp	r0, #0
 801278a:	d1d5      	bne.n	8012738 <__sfp+0x24>
 801278c:	f7ff ff78 	bl	8012680 <__sfp_lock_release>
 8012790:	230c      	movs	r3, #12
 8012792:	603b      	str	r3, [r7, #0]
 8012794:	e7ee      	b.n	8012774 <__sfp+0x60>
 8012796:	bf00      	nop
 8012798:	08015b60 	.word	0x08015b60
 801279c:	ffff0001 	.word	0xffff0001

080127a0 <fiprintf>:
 80127a0:	b40e      	push	{r1, r2, r3}
 80127a2:	b503      	push	{r0, r1, lr}
 80127a4:	4601      	mov	r1, r0
 80127a6:	ab03      	add	r3, sp, #12
 80127a8:	4805      	ldr	r0, [pc, #20]	; (80127c0 <fiprintf+0x20>)
 80127aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ae:	6800      	ldr	r0, [r0, #0]
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	f000 f94d 	bl	8012a50 <_vfiprintf_r>
 80127b6:	b002      	add	sp, #8
 80127b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127bc:	b003      	add	sp, #12
 80127be:	4770      	bx	lr
 80127c0:	20000054 	.word	0x20000054

080127c4 <_fwalk_reent>:
 80127c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c8:	4606      	mov	r6, r0
 80127ca:	4688      	mov	r8, r1
 80127cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80127d0:	2700      	movs	r7, #0
 80127d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127d6:	f1b9 0901 	subs.w	r9, r9, #1
 80127da:	d505      	bpl.n	80127e8 <_fwalk_reent+0x24>
 80127dc:	6824      	ldr	r4, [r4, #0]
 80127de:	2c00      	cmp	r4, #0
 80127e0:	d1f7      	bne.n	80127d2 <_fwalk_reent+0xe>
 80127e2:	4638      	mov	r0, r7
 80127e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127e8:	89ab      	ldrh	r3, [r5, #12]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d907      	bls.n	80127fe <_fwalk_reent+0x3a>
 80127ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127f2:	3301      	adds	r3, #1
 80127f4:	d003      	beq.n	80127fe <_fwalk_reent+0x3a>
 80127f6:	4629      	mov	r1, r5
 80127f8:	4630      	mov	r0, r6
 80127fa:	47c0      	blx	r8
 80127fc:	4307      	orrs	r7, r0
 80127fe:	3568      	adds	r5, #104	; 0x68
 8012800:	e7e9      	b.n	80127d6 <_fwalk_reent+0x12>
	...

08012804 <__libc_init_array>:
 8012804:	b570      	push	{r4, r5, r6, lr}
 8012806:	4d0d      	ldr	r5, [pc, #52]	; (801283c <__libc_init_array+0x38>)
 8012808:	4c0d      	ldr	r4, [pc, #52]	; (8012840 <__libc_init_array+0x3c>)
 801280a:	1b64      	subs	r4, r4, r5
 801280c:	10a4      	asrs	r4, r4, #2
 801280e:	2600      	movs	r6, #0
 8012810:	42a6      	cmp	r6, r4
 8012812:	d109      	bne.n	8012828 <__libc_init_array+0x24>
 8012814:	4d0b      	ldr	r5, [pc, #44]	; (8012844 <__libc_init_array+0x40>)
 8012816:	4c0c      	ldr	r4, [pc, #48]	; (8012848 <__libc_init_array+0x44>)
 8012818:	f001 fa90 	bl	8013d3c <_init>
 801281c:	1b64      	subs	r4, r4, r5
 801281e:	10a4      	asrs	r4, r4, #2
 8012820:	2600      	movs	r6, #0
 8012822:	42a6      	cmp	r6, r4
 8012824:	d105      	bne.n	8012832 <__libc_init_array+0x2e>
 8012826:	bd70      	pop	{r4, r5, r6, pc}
 8012828:	f855 3b04 	ldr.w	r3, [r5], #4
 801282c:	4798      	blx	r3
 801282e:	3601      	adds	r6, #1
 8012830:	e7ee      	b.n	8012810 <__libc_init_array+0xc>
 8012832:	f855 3b04 	ldr.w	r3, [r5], #4
 8012836:	4798      	blx	r3
 8012838:	3601      	adds	r6, #1
 801283a:	e7f2      	b.n	8012822 <__libc_init_array+0x1e>
 801283c:	08015c14 	.word	0x08015c14
 8012840:	08015c14 	.word	0x08015c14
 8012844:	08015c14 	.word	0x08015c14
 8012848:	08015c18 	.word	0x08015c18

0801284c <__retarget_lock_init_recursive>:
 801284c:	4770      	bx	lr

0801284e <__retarget_lock_acquire_recursive>:
 801284e:	4770      	bx	lr

08012850 <__retarget_lock_release_recursive>:
 8012850:	4770      	bx	lr

08012852 <memcmp>:
 8012852:	b510      	push	{r4, lr}
 8012854:	3901      	subs	r1, #1
 8012856:	4402      	add	r2, r0
 8012858:	4290      	cmp	r0, r2
 801285a:	d101      	bne.n	8012860 <memcmp+0xe>
 801285c:	2000      	movs	r0, #0
 801285e:	e005      	b.n	801286c <memcmp+0x1a>
 8012860:	7803      	ldrb	r3, [r0, #0]
 8012862:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012866:	42a3      	cmp	r3, r4
 8012868:	d001      	beq.n	801286e <memcmp+0x1c>
 801286a:	1b18      	subs	r0, r3, r4
 801286c:	bd10      	pop	{r4, pc}
 801286e:	3001      	adds	r0, #1
 8012870:	e7f2      	b.n	8012858 <memcmp+0x6>

08012872 <memcpy>:
 8012872:	440a      	add	r2, r1
 8012874:	4291      	cmp	r1, r2
 8012876:	f100 33ff 	add.w	r3, r0, #4294967295
 801287a:	d100      	bne.n	801287e <memcpy+0xc>
 801287c:	4770      	bx	lr
 801287e:	b510      	push	{r4, lr}
 8012880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012888:	4291      	cmp	r1, r2
 801288a:	d1f9      	bne.n	8012880 <memcpy+0xe>
 801288c:	bd10      	pop	{r4, pc}

0801288e <memmove>:
 801288e:	4288      	cmp	r0, r1
 8012890:	b510      	push	{r4, lr}
 8012892:	eb01 0402 	add.w	r4, r1, r2
 8012896:	d902      	bls.n	801289e <memmove+0x10>
 8012898:	4284      	cmp	r4, r0
 801289a:	4623      	mov	r3, r4
 801289c:	d807      	bhi.n	80128ae <memmove+0x20>
 801289e:	1e43      	subs	r3, r0, #1
 80128a0:	42a1      	cmp	r1, r4
 80128a2:	d008      	beq.n	80128b6 <memmove+0x28>
 80128a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128ac:	e7f8      	b.n	80128a0 <memmove+0x12>
 80128ae:	4402      	add	r2, r0
 80128b0:	4601      	mov	r1, r0
 80128b2:	428a      	cmp	r2, r1
 80128b4:	d100      	bne.n	80128b8 <memmove+0x2a>
 80128b6:	bd10      	pop	{r4, pc}
 80128b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128c0:	e7f7      	b.n	80128b2 <memmove+0x24>

080128c2 <memset>:
 80128c2:	4402      	add	r2, r0
 80128c4:	4603      	mov	r3, r0
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d100      	bne.n	80128cc <memset+0xa>
 80128ca:	4770      	bx	lr
 80128cc:	f803 1b01 	strb.w	r1, [r3], #1
 80128d0:	e7f9      	b.n	80128c6 <memset+0x4>
	...

080128d4 <sbrk_aligned>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	4e0e      	ldr	r6, [pc, #56]	; (8012910 <sbrk_aligned+0x3c>)
 80128d8:	460c      	mov	r4, r1
 80128da:	6831      	ldr	r1, [r6, #0]
 80128dc:	4605      	mov	r5, r0
 80128de:	b911      	cbnz	r1, 80128e6 <sbrk_aligned+0x12>
 80128e0:	f000 fc72 	bl	80131c8 <_sbrk_r>
 80128e4:	6030      	str	r0, [r6, #0]
 80128e6:	4621      	mov	r1, r4
 80128e8:	4628      	mov	r0, r5
 80128ea:	f000 fc6d 	bl	80131c8 <_sbrk_r>
 80128ee:	1c43      	adds	r3, r0, #1
 80128f0:	d00a      	beq.n	8012908 <sbrk_aligned+0x34>
 80128f2:	1cc4      	adds	r4, r0, #3
 80128f4:	f024 0403 	bic.w	r4, r4, #3
 80128f8:	42a0      	cmp	r0, r4
 80128fa:	d007      	beq.n	801290c <sbrk_aligned+0x38>
 80128fc:	1a21      	subs	r1, r4, r0
 80128fe:	4628      	mov	r0, r5
 8012900:	f000 fc62 	bl	80131c8 <_sbrk_r>
 8012904:	3001      	adds	r0, #1
 8012906:	d101      	bne.n	801290c <sbrk_aligned+0x38>
 8012908:	f04f 34ff 	mov.w	r4, #4294967295
 801290c:	4620      	mov	r0, r4
 801290e:	bd70      	pop	{r4, r5, r6, pc}
 8012910:	20004f28 	.word	0x20004f28

08012914 <_malloc_r>:
 8012914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012918:	1ccd      	adds	r5, r1, #3
 801291a:	f025 0503 	bic.w	r5, r5, #3
 801291e:	3508      	adds	r5, #8
 8012920:	2d0c      	cmp	r5, #12
 8012922:	bf38      	it	cc
 8012924:	250c      	movcc	r5, #12
 8012926:	2d00      	cmp	r5, #0
 8012928:	4607      	mov	r7, r0
 801292a:	db01      	blt.n	8012930 <_malloc_r+0x1c>
 801292c:	42a9      	cmp	r1, r5
 801292e:	d905      	bls.n	801293c <_malloc_r+0x28>
 8012930:	230c      	movs	r3, #12
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	2600      	movs	r6, #0
 8012936:	4630      	mov	r0, r6
 8012938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801293c:	4e2e      	ldr	r6, [pc, #184]	; (80129f8 <_malloc_r+0xe4>)
 801293e:	f000 ff9b 	bl	8013878 <__malloc_lock>
 8012942:	6833      	ldr	r3, [r6, #0]
 8012944:	461c      	mov	r4, r3
 8012946:	bb34      	cbnz	r4, 8012996 <_malloc_r+0x82>
 8012948:	4629      	mov	r1, r5
 801294a:	4638      	mov	r0, r7
 801294c:	f7ff ffc2 	bl	80128d4 <sbrk_aligned>
 8012950:	1c43      	adds	r3, r0, #1
 8012952:	4604      	mov	r4, r0
 8012954:	d14d      	bne.n	80129f2 <_malloc_r+0xde>
 8012956:	6834      	ldr	r4, [r6, #0]
 8012958:	4626      	mov	r6, r4
 801295a:	2e00      	cmp	r6, #0
 801295c:	d140      	bne.n	80129e0 <_malloc_r+0xcc>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	4631      	mov	r1, r6
 8012962:	4638      	mov	r0, r7
 8012964:	eb04 0803 	add.w	r8, r4, r3
 8012968:	f000 fc2e 	bl	80131c8 <_sbrk_r>
 801296c:	4580      	cmp	r8, r0
 801296e:	d13a      	bne.n	80129e6 <_malloc_r+0xd2>
 8012970:	6821      	ldr	r1, [r4, #0]
 8012972:	3503      	adds	r5, #3
 8012974:	1a6d      	subs	r5, r5, r1
 8012976:	f025 0503 	bic.w	r5, r5, #3
 801297a:	3508      	adds	r5, #8
 801297c:	2d0c      	cmp	r5, #12
 801297e:	bf38      	it	cc
 8012980:	250c      	movcc	r5, #12
 8012982:	4629      	mov	r1, r5
 8012984:	4638      	mov	r0, r7
 8012986:	f7ff ffa5 	bl	80128d4 <sbrk_aligned>
 801298a:	3001      	adds	r0, #1
 801298c:	d02b      	beq.n	80129e6 <_malloc_r+0xd2>
 801298e:	6823      	ldr	r3, [r4, #0]
 8012990:	442b      	add	r3, r5
 8012992:	6023      	str	r3, [r4, #0]
 8012994:	e00e      	b.n	80129b4 <_malloc_r+0xa0>
 8012996:	6822      	ldr	r2, [r4, #0]
 8012998:	1b52      	subs	r2, r2, r5
 801299a:	d41e      	bmi.n	80129da <_malloc_r+0xc6>
 801299c:	2a0b      	cmp	r2, #11
 801299e:	d916      	bls.n	80129ce <_malloc_r+0xba>
 80129a0:	1961      	adds	r1, r4, r5
 80129a2:	42a3      	cmp	r3, r4
 80129a4:	6025      	str	r5, [r4, #0]
 80129a6:	bf18      	it	ne
 80129a8:	6059      	strne	r1, [r3, #4]
 80129aa:	6863      	ldr	r3, [r4, #4]
 80129ac:	bf08      	it	eq
 80129ae:	6031      	streq	r1, [r6, #0]
 80129b0:	5162      	str	r2, [r4, r5]
 80129b2:	604b      	str	r3, [r1, #4]
 80129b4:	4638      	mov	r0, r7
 80129b6:	f104 060b 	add.w	r6, r4, #11
 80129ba:	f000 ff63 	bl	8013884 <__malloc_unlock>
 80129be:	f026 0607 	bic.w	r6, r6, #7
 80129c2:	1d23      	adds	r3, r4, #4
 80129c4:	1af2      	subs	r2, r6, r3
 80129c6:	d0b6      	beq.n	8012936 <_malloc_r+0x22>
 80129c8:	1b9b      	subs	r3, r3, r6
 80129ca:	50a3      	str	r3, [r4, r2]
 80129cc:	e7b3      	b.n	8012936 <_malloc_r+0x22>
 80129ce:	6862      	ldr	r2, [r4, #4]
 80129d0:	42a3      	cmp	r3, r4
 80129d2:	bf0c      	ite	eq
 80129d4:	6032      	streq	r2, [r6, #0]
 80129d6:	605a      	strne	r2, [r3, #4]
 80129d8:	e7ec      	b.n	80129b4 <_malloc_r+0xa0>
 80129da:	4623      	mov	r3, r4
 80129dc:	6864      	ldr	r4, [r4, #4]
 80129de:	e7b2      	b.n	8012946 <_malloc_r+0x32>
 80129e0:	4634      	mov	r4, r6
 80129e2:	6876      	ldr	r6, [r6, #4]
 80129e4:	e7b9      	b.n	801295a <_malloc_r+0x46>
 80129e6:	230c      	movs	r3, #12
 80129e8:	603b      	str	r3, [r7, #0]
 80129ea:	4638      	mov	r0, r7
 80129ec:	f000 ff4a 	bl	8013884 <__malloc_unlock>
 80129f0:	e7a1      	b.n	8012936 <_malloc_r+0x22>
 80129f2:	6025      	str	r5, [r4, #0]
 80129f4:	e7de      	b.n	80129b4 <_malloc_r+0xa0>
 80129f6:	bf00      	nop
 80129f8:	20004f24 	.word	0x20004f24

080129fc <__sfputc_r>:
 80129fc:	6893      	ldr	r3, [r2, #8]
 80129fe:	3b01      	subs	r3, #1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	b410      	push	{r4}
 8012a04:	6093      	str	r3, [r2, #8]
 8012a06:	da08      	bge.n	8012a1a <__sfputc_r+0x1e>
 8012a08:	6994      	ldr	r4, [r2, #24]
 8012a0a:	42a3      	cmp	r3, r4
 8012a0c:	db01      	blt.n	8012a12 <__sfputc_r+0x16>
 8012a0e:	290a      	cmp	r1, #10
 8012a10:	d103      	bne.n	8012a1a <__sfputc_r+0x1e>
 8012a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a16:	f000 bd03 	b.w	8013420 <__swbuf_r>
 8012a1a:	6813      	ldr	r3, [r2, #0]
 8012a1c:	1c58      	adds	r0, r3, #1
 8012a1e:	6010      	str	r0, [r2, #0]
 8012a20:	7019      	strb	r1, [r3, #0]
 8012a22:	4608      	mov	r0, r1
 8012a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a28:	4770      	bx	lr

08012a2a <__sfputs_r>:
 8012a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	460f      	mov	r7, r1
 8012a30:	4614      	mov	r4, r2
 8012a32:	18d5      	adds	r5, r2, r3
 8012a34:	42ac      	cmp	r4, r5
 8012a36:	d101      	bne.n	8012a3c <__sfputs_r+0x12>
 8012a38:	2000      	movs	r0, #0
 8012a3a:	e007      	b.n	8012a4c <__sfputs_r+0x22>
 8012a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a40:	463a      	mov	r2, r7
 8012a42:	4630      	mov	r0, r6
 8012a44:	f7ff ffda 	bl	80129fc <__sfputc_r>
 8012a48:	1c43      	adds	r3, r0, #1
 8012a4a:	d1f3      	bne.n	8012a34 <__sfputs_r+0xa>
 8012a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a50 <_vfiprintf_r>:
 8012a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a54:	460d      	mov	r5, r1
 8012a56:	b09d      	sub	sp, #116	; 0x74
 8012a58:	4614      	mov	r4, r2
 8012a5a:	4698      	mov	r8, r3
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	b118      	cbz	r0, 8012a68 <_vfiprintf_r+0x18>
 8012a60:	6983      	ldr	r3, [r0, #24]
 8012a62:	b90b      	cbnz	r3, 8012a68 <_vfiprintf_r+0x18>
 8012a64:	f7ff fe1e 	bl	80126a4 <__sinit>
 8012a68:	4b89      	ldr	r3, [pc, #548]	; (8012c90 <_vfiprintf_r+0x240>)
 8012a6a:	429d      	cmp	r5, r3
 8012a6c:	d11b      	bne.n	8012aa6 <_vfiprintf_r+0x56>
 8012a6e:	6875      	ldr	r5, [r6, #4]
 8012a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a72:	07d9      	lsls	r1, r3, #31
 8012a74:	d405      	bmi.n	8012a82 <_vfiprintf_r+0x32>
 8012a76:	89ab      	ldrh	r3, [r5, #12]
 8012a78:	059a      	lsls	r2, r3, #22
 8012a7a:	d402      	bmi.n	8012a82 <_vfiprintf_r+0x32>
 8012a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a7e:	f7ff fee6 	bl	801284e <__retarget_lock_acquire_recursive>
 8012a82:	89ab      	ldrh	r3, [r5, #12]
 8012a84:	071b      	lsls	r3, r3, #28
 8012a86:	d501      	bpl.n	8012a8c <_vfiprintf_r+0x3c>
 8012a88:	692b      	ldr	r3, [r5, #16]
 8012a8a:	b9eb      	cbnz	r3, 8012ac8 <_vfiprintf_r+0x78>
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f000 fd2a 	bl	80134e8 <__swsetup_r>
 8012a94:	b1c0      	cbz	r0, 8012ac8 <_vfiprintf_r+0x78>
 8012a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a98:	07dc      	lsls	r4, r3, #31
 8012a9a:	d50e      	bpl.n	8012aba <_vfiprintf_r+0x6a>
 8012a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa0:	b01d      	add	sp, #116	; 0x74
 8012aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	4b7b      	ldr	r3, [pc, #492]	; (8012c94 <_vfiprintf_r+0x244>)
 8012aa8:	429d      	cmp	r5, r3
 8012aaa:	d101      	bne.n	8012ab0 <_vfiprintf_r+0x60>
 8012aac:	68b5      	ldr	r5, [r6, #8]
 8012aae:	e7df      	b.n	8012a70 <_vfiprintf_r+0x20>
 8012ab0:	4b79      	ldr	r3, [pc, #484]	; (8012c98 <_vfiprintf_r+0x248>)
 8012ab2:	429d      	cmp	r5, r3
 8012ab4:	bf08      	it	eq
 8012ab6:	68f5      	ldreq	r5, [r6, #12]
 8012ab8:	e7da      	b.n	8012a70 <_vfiprintf_r+0x20>
 8012aba:	89ab      	ldrh	r3, [r5, #12]
 8012abc:	0598      	lsls	r0, r3, #22
 8012abe:	d4ed      	bmi.n	8012a9c <_vfiprintf_r+0x4c>
 8012ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ac2:	f7ff fec5 	bl	8012850 <__retarget_lock_release_recursive>
 8012ac6:	e7e9      	b.n	8012a9c <_vfiprintf_r+0x4c>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	9309      	str	r3, [sp, #36]	; 0x24
 8012acc:	2320      	movs	r3, #32
 8012ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ad6:	2330      	movs	r3, #48	; 0x30
 8012ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c9c <_vfiprintf_r+0x24c>
 8012adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ae0:	f04f 0901 	mov.w	r9, #1
 8012ae4:	4623      	mov	r3, r4
 8012ae6:	469a      	mov	sl, r3
 8012ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012aec:	b10a      	cbz	r2, 8012af2 <_vfiprintf_r+0xa2>
 8012aee:	2a25      	cmp	r2, #37	; 0x25
 8012af0:	d1f9      	bne.n	8012ae6 <_vfiprintf_r+0x96>
 8012af2:	ebba 0b04 	subs.w	fp, sl, r4
 8012af6:	d00b      	beq.n	8012b10 <_vfiprintf_r+0xc0>
 8012af8:	465b      	mov	r3, fp
 8012afa:	4622      	mov	r2, r4
 8012afc:	4629      	mov	r1, r5
 8012afe:	4630      	mov	r0, r6
 8012b00:	f7ff ff93 	bl	8012a2a <__sfputs_r>
 8012b04:	3001      	adds	r0, #1
 8012b06:	f000 80aa 	beq.w	8012c5e <_vfiprintf_r+0x20e>
 8012b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b0c:	445a      	add	r2, fp
 8012b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012b10:	f89a 3000 	ldrb.w	r3, [sl]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 80a2 	beq.w	8012c5e <_vfiprintf_r+0x20e>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b24:	f10a 0a01 	add.w	sl, sl, #1
 8012b28:	9304      	str	r3, [sp, #16]
 8012b2a:	9307      	str	r3, [sp, #28]
 8012b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b30:	931a      	str	r3, [sp, #104]	; 0x68
 8012b32:	4654      	mov	r4, sl
 8012b34:	2205      	movs	r2, #5
 8012b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b3a:	4858      	ldr	r0, [pc, #352]	; (8012c9c <_vfiprintf_r+0x24c>)
 8012b3c:	f7ed fb50 	bl	80001e0 <memchr>
 8012b40:	9a04      	ldr	r2, [sp, #16]
 8012b42:	b9d8      	cbnz	r0, 8012b7c <_vfiprintf_r+0x12c>
 8012b44:	06d1      	lsls	r1, r2, #27
 8012b46:	bf44      	itt	mi
 8012b48:	2320      	movmi	r3, #32
 8012b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b4e:	0713      	lsls	r3, r2, #28
 8012b50:	bf44      	itt	mi
 8012b52:	232b      	movmi	r3, #43	; 0x2b
 8012b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b58:	f89a 3000 	ldrb.w	r3, [sl]
 8012b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b5e:	d015      	beq.n	8012b8c <_vfiprintf_r+0x13c>
 8012b60:	9a07      	ldr	r2, [sp, #28]
 8012b62:	4654      	mov	r4, sl
 8012b64:	2000      	movs	r0, #0
 8012b66:	f04f 0c0a 	mov.w	ip, #10
 8012b6a:	4621      	mov	r1, r4
 8012b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b70:	3b30      	subs	r3, #48	; 0x30
 8012b72:	2b09      	cmp	r3, #9
 8012b74:	d94e      	bls.n	8012c14 <_vfiprintf_r+0x1c4>
 8012b76:	b1b0      	cbz	r0, 8012ba6 <_vfiprintf_r+0x156>
 8012b78:	9207      	str	r2, [sp, #28]
 8012b7a:	e014      	b.n	8012ba6 <_vfiprintf_r+0x156>
 8012b7c:	eba0 0308 	sub.w	r3, r0, r8
 8012b80:	fa09 f303 	lsl.w	r3, r9, r3
 8012b84:	4313      	orrs	r3, r2
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	46a2      	mov	sl, r4
 8012b8a:	e7d2      	b.n	8012b32 <_vfiprintf_r+0xe2>
 8012b8c:	9b03      	ldr	r3, [sp, #12]
 8012b8e:	1d19      	adds	r1, r3, #4
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	9103      	str	r1, [sp, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	bfbb      	ittet	lt
 8012b98:	425b      	neglt	r3, r3
 8012b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b9e:	9307      	strge	r3, [sp, #28]
 8012ba0:	9307      	strlt	r3, [sp, #28]
 8012ba2:	bfb8      	it	lt
 8012ba4:	9204      	strlt	r2, [sp, #16]
 8012ba6:	7823      	ldrb	r3, [r4, #0]
 8012ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8012baa:	d10c      	bne.n	8012bc6 <_vfiprintf_r+0x176>
 8012bac:	7863      	ldrb	r3, [r4, #1]
 8012bae:	2b2a      	cmp	r3, #42	; 0x2a
 8012bb0:	d135      	bne.n	8012c1e <_vfiprintf_r+0x1ce>
 8012bb2:	9b03      	ldr	r3, [sp, #12]
 8012bb4:	1d1a      	adds	r2, r3, #4
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	9203      	str	r2, [sp, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	bfb8      	it	lt
 8012bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bc2:	3402      	adds	r4, #2
 8012bc4:	9305      	str	r3, [sp, #20]
 8012bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012cac <_vfiprintf_r+0x25c>
 8012bca:	7821      	ldrb	r1, [r4, #0]
 8012bcc:	2203      	movs	r2, #3
 8012bce:	4650      	mov	r0, sl
 8012bd0:	f7ed fb06 	bl	80001e0 <memchr>
 8012bd4:	b140      	cbz	r0, 8012be8 <_vfiprintf_r+0x198>
 8012bd6:	2340      	movs	r3, #64	; 0x40
 8012bd8:	eba0 000a 	sub.w	r0, r0, sl
 8012bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8012be0:	9b04      	ldr	r3, [sp, #16]
 8012be2:	4303      	orrs	r3, r0
 8012be4:	3401      	adds	r4, #1
 8012be6:	9304      	str	r3, [sp, #16]
 8012be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bec:	482c      	ldr	r0, [pc, #176]	; (8012ca0 <_vfiprintf_r+0x250>)
 8012bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bf2:	2206      	movs	r2, #6
 8012bf4:	f7ed faf4 	bl	80001e0 <memchr>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d03f      	beq.n	8012c7c <_vfiprintf_r+0x22c>
 8012bfc:	4b29      	ldr	r3, [pc, #164]	; (8012ca4 <_vfiprintf_r+0x254>)
 8012bfe:	bb1b      	cbnz	r3, 8012c48 <_vfiprintf_r+0x1f8>
 8012c00:	9b03      	ldr	r3, [sp, #12]
 8012c02:	3307      	adds	r3, #7
 8012c04:	f023 0307 	bic.w	r3, r3, #7
 8012c08:	3308      	adds	r3, #8
 8012c0a:	9303      	str	r3, [sp, #12]
 8012c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c0e:	443b      	add	r3, r7
 8012c10:	9309      	str	r3, [sp, #36]	; 0x24
 8012c12:	e767      	b.n	8012ae4 <_vfiprintf_r+0x94>
 8012c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c18:	460c      	mov	r4, r1
 8012c1a:	2001      	movs	r0, #1
 8012c1c:	e7a5      	b.n	8012b6a <_vfiprintf_r+0x11a>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	3401      	adds	r4, #1
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	4619      	mov	r1, r3
 8012c26:	f04f 0c0a 	mov.w	ip, #10
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c30:	3a30      	subs	r2, #48	; 0x30
 8012c32:	2a09      	cmp	r2, #9
 8012c34:	d903      	bls.n	8012c3e <_vfiprintf_r+0x1ee>
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d0c5      	beq.n	8012bc6 <_vfiprintf_r+0x176>
 8012c3a:	9105      	str	r1, [sp, #20]
 8012c3c:	e7c3      	b.n	8012bc6 <_vfiprintf_r+0x176>
 8012c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c42:	4604      	mov	r4, r0
 8012c44:	2301      	movs	r3, #1
 8012c46:	e7f0      	b.n	8012c2a <_vfiprintf_r+0x1da>
 8012c48:	ab03      	add	r3, sp, #12
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	462a      	mov	r2, r5
 8012c4e:	4b16      	ldr	r3, [pc, #88]	; (8012ca8 <_vfiprintf_r+0x258>)
 8012c50:	a904      	add	r1, sp, #16
 8012c52:	4630      	mov	r0, r6
 8012c54:	f3af 8000 	nop.w
 8012c58:	4607      	mov	r7, r0
 8012c5a:	1c78      	adds	r0, r7, #1
 8012c5c:	d1d6      	bne.n	8012c0c <_vfiprintf_r+0x1bc>
 8012c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c60:	07d9      	lsls	r1, r3, #31
 8012c62:	d405      	bmi.n	8012c70 <_vfiprintf_r+0x220>
 8012c64:	89ab      	ldrh	r3, [r5, #12]
 8012c66:	059a      	lsls	r2, r3, #22
 8012c68:	d402      	bmi.n	8012c70 <_vfiprintf_r+0x220>
 8012c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c6c:	f7ff fdf0 	bl	8012850 <__retarget_lock_release_recursive>
 8012c70:	89ab      	ldrh	r3, [r5, #12]
 8012c72:	065b      	lsls	r3, r3, #25
 8012c74:	f53f af12 	bmi.w	8012a9c <_vfiprintf_r+0x4c>
 8012c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c7a:	e711      	b.n	8012aa0 <_vfiprintf_r+0x50>
 8012c7c:	ab03      	add	r3, sp, #12
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	462a      	mov	r2, r5
 8012c82:	4b09      	ldr	r3, [pc, #36]	; (8012ca8 <_vfiprintf_r+0x258>)
 8012c84:	a904      	add	r1, sp, #16
 8012c86:	4630      	mov	r0, r6
 8012c88:	f000 f880 	bl	8012d8c <_printf_i>
 8012c8c:	e7e4      	b.n	8012c58 <_vfiprintf_r+0x208>
 8012c8e:	bf00      	nop
 8012c90:	08015b20 	.word	0x08015b20
 8012c94:	08015b40 	.word	0x08015b40
 8012c98:	08015b00 	.word	0x08015b00
 8012c9c:	08015b64 	.word	0x08015b64
 8012ca0:	08015b6e 	.word	0x08015b6e
 8012ca4:	00000000 	.word	0x00000000
 8012ca8:	08012a2b 	.word	0x08012a2b
 8012cac:	08015b6a 	.word	0x08015b6a

08012cb0 <_printf_common>:
 8012cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb4:	4616      	mov	r6, r2
 8012cb6:	4699      	mov	r9, r3
 8012cb8:	688a      	ldr	r2, [r1, #8]
 8012cba:	690b      	ldr	r3, [r1, #16]
 8012cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	bfb8      	it	lt
 8012cc4:	4613      	movlt	r3, r2
 8012cc6:	6033      	str	r3, [r6, #0]
 8012cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ccc:	4607      	mov	r7, r0
 8012cce:	460c      	mov	r4, r1
 8012cd0:	b10a      	cbz	r2, 8012cd6 <_printf_common+0x26>
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	6033      	str	r3, [r6, #0]
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	0699      	lsls	r1, r3, #26
 8012cda:	bf42      	ittt	mi
 8012cdc:	6833      	ldrmi	r3, [r6, #0]
 8012cde:	3302      	addmi	r3, #2
 8012ce0:	6033      	strmi	r3, [r6, #0]
 8012ce2:	6825      	ldr	r5, [r4, #0]
 8012ce4:	f015 0506 	ands.w	r5, r5, #6
 8012ce8:	d106      	bne.n	8012cf8 <_printf_common+0x48>
 8012cea:	f104 0a19 	add.w	sl, r4, #25
 8012cee:	68e3      	ldr	r3, [r4, #12]
 8012cf0:	6832      	ldr	r2, [r6, #0]
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	42ab      	cmp	r3, r5
 8012cf6:	dc26      	bgt.n	8012d46 <_printf_common+0x96>
 8012cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012cfc:	1e13      	subs	r3, r2, #0
 8012cfe:	6822      	ldr	r2, [r4, #0]
 8012d00:	bf18      	it	ne
 8012d02:	2301      	movne	r3, #1
 8012d04:	0692      	lsls	r2, r2, #26
 8012d06:	d42b      	bmi.n	8012d60 <_printf_common+0xb0>
 8012d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d0c:	4649      	mov	r1, r9
 8012d0e:	4638      	mov	r0, r7
 8012d10:	47c0      	blx	r8
 8012d12:	3001      	adds	r0, #1
 8012d14:	d01e      	beq.n	8012d54 <_printf_common+0xa4>
 8012d16:	6823      	ldr	r3, [r4, #0]
 8012d18:	68e5      	ldr	r5, [r4, #12]
 8012d1a:	6832      	ldr	r2, [r6, #0]
 8012d1c:	f003 0306 	and.w	r3, r3, #6
 8012d20:	2b04      	cmp	r3, #4
 8012d22:	bf08      	it	eq
 8012d24:	1aad      	subeq	r5, r5, r2
 8012d26:	68a3      	ldr	r3, [r4, #8]
 8012d28:	6922      	ldr	r2, [r4, #16]
 8012d2a:	bf0c      	ite	eq
 8012d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d30:	2500      	movne	r5, #0
 8012d32:	4293      	cmp	r3, r2
 8012d34:	bfc4      	itt	gt
 8012d36:	1a9b      	subgt	r3, r3, r2
 8012d38:	18ed      	addgt	r5, r5, r3
 8012d3a:	2600      	movs	r6, #0
 8012d3c:	341a      	adds	r4, #26
 8012d3e:	42b5      	cmp	r5, r6
 8012d40:	d11a      	bne.n	8012d78 <_printf_common+0xc8>
 8012d42:	2000      	movs	r0, #0
 8012d44:	e008      	b.n	8012d58 <_printf_common+0xa8>
 8012d46:	2301      	movs	r3, #1
 8012d48:	4652      	mov	r2, sl
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	4638      	mov	r0, r7
 8012d4e:	47c0      	blx	r8
 8012d50:	3001      	adds	r0, #1
 8012d52:	d103      	bne.n	8012d5c <_printf_common+0xac>
 8012d54:	f04f 30ff 	mov.w	r0, #4294967295
 8012d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d5c:	3501      	adds	r5, #1
 8012d5e:	e7c6      	b.n	8012cee <_printf_common+0x3e>
 8012d60:	18e1      	adds	r1, r4, r3
 8012d62:	1c5a      	adds	r2, r3, #1
 8012d64:	2030      	movs	r0, #48	; 0x30
 8012d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d6a:	4422      	add	r2, r4
 8012d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d74:	3302      	adds	r3, #2
 8012d76:	e7c7      	b.n	8012d08 <_printf_common+0x58>
 8012d78:	2301      	movs	r3, #1
 8012d7a:	4622      	mov	r2, r4
 8012d7c:	4649      	mov	r1, r9
 8012d7e:	4638      	mov	r0, r7
 8012d80:	47c0      	blx	r8
 8012d82:	3001      	adds	r0, #1
 8012d84:	d0e6      	beq.n	8012d54 <_printf_common+0xa4>
 8012d86:	3601      	adds	r6, #1
 8012d88:	e7d9      	b.n	8012d3e <_printf_common+0x8e>
	...

08012d8c <_printf_i>:
 8012d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d90:	7e0f      	ldrb	r7, [r1, #24]
 8012d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d94:	2f78      	cmp	r7, #120	; 0x78
 8012d96:	4691      	mov	r9, r2
 8012d98:	4680      	mov	r8, r0
 8012d9a:	460c      	mov	r4, r1
 8012d9c:	469a      	mov	sl, r3
 8012d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012da2:	d807      	bhi.n	8012db4 <_printf_i+0x28>
 8012da4:	2f62      	cmp	r7, #98	; 0x62
 8012da6:	d80a      	bhi.n	8012dbe <_printf_i+0x32>
 8012da8:	2f00      	cmp	r7, #0
 8012daa:	f000 80d8 	beq.w	8012f5e <_printf_i+0x1d2>
 8012dae:	2f58      	cmp	r7, #88	; 0x58
 8012db0:	f000 80a3 	beq.w	8012efa <_printf_i+0x16e>
 8012db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012dbc:	e03a      	b.n	8012e34 <_printf_i+0xa8>
 8012dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dc2:	2b15      	cmp	r3, #21
 8012dc4:	d8f6      	bhi.n	8012db4 <_printf_i+0x28>
 8012dc6:	a101      	add	r1, pc, #4	; (adr r1, 8012dcc <_printf_i+0x40>)
 8012dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012dcc:	08012e25 	.word	0x08012e25
 8012dd0:	08012e39 	.word	0x08012e39
 8012dd4:	08012db5 	.word	0x08012db5
 8012dd8:	08012db5 	.word	0x08012db5
 8012ddc:	08012db5 	.word	0x08012db5
 8012de0:	08012db5 	.word	0x08012db5
 8012de4:	08012e39 	.word	0x08012e39
 8012de8:	08012db5 	.word	0x08012db5
 8012dec:	08012db5 	.word	0x08012db5
 8012df0:	08012db5 	.word	0x08012db5
 8012df4:	08012db5 	.word	0x08012db5
 8012df8:	08012f45 	.word	0x08012f45
 8012dfc:	08012e69 	.word	0x08012e69
 8012e00:	08012f27 	.word	0x08012f27
 8012e04:	08012db5 	.word	0x08012db5
 8012e08:	08012db5 	.word	0x08012db5
 8012e0c:	08012f67 	.word	0x08012f67
 8012e10:	08012db5 	.word	0x08012db5
 8012e14:	08012e69 	.word	0x08012e69
 8012e18:	08012db5 	.word	0x08012db5
 8012e1c:	08012db5 	.word	0x08012db5
 8012e20:	08012f2f 	.word	0x08012f2f
 8012e24:	682b      	ldr	r3, [r5, #0]
 8012e26:	1d1a      	adds	r2, r3, #4
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	602a      	str	r2, [r5, #0]
 8012e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e34:	2301      	movs	r3, #1
 8012e36:	e0a3      	b.n	8012f80 <_printf_i+0x1f4>
 8012e38:	6820      	ldr	r0, [r4, #0]
 8012e3a:	6829      	ldr	r1, [r5, #0]
 8012e3c:	0606      	lsls	r6, r0, #24
 8012e3e:	f101 0304 	add.w	r3, r1, #4
 8012e42:	d50a      	bpl.n	8012e5a <_printf_i+0xce>
 8012e44:	680e      	ldr	r6, [r1, #0]
 8012e46:	602b      	str	r3, [r5, #0]
 8012e48:	2e00      	cmp	r6, #0
 8012e4a:	da03      	bge.n	8012e54 <_printf_i+0xc8>
 8012e4c:	232d      	movs	r3, #45	; 0x2d
 8012e4e:	4276      	negs	r6, r6
 8012e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e54:	485e      	ldr	r0, [pc, #376]	; (8012fd0 <_printf_i+0x244>)
 8012e56:	230a      	movs	r3, #10
 8012e58:	e019      	b.n	8012e8e <_printf_i+0x102>
 8012e5a:	680e      	ldr	r6, [r1, #0]
 8012e5c:	602b      	str	r3, [r5, #0]
 8012e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e62:	bf18      	it	ne
 8012e64:	b236      	sxthne	r6, r6
 8012e66:	e7ef      	b.n	8012e48 <_printf_i+0xbc>
 8012e68:	682b      	ldr	r3, [r5, #0]
 8012e6a:	6820      	ldr	r0, [r4, #0]
 8012e6c:	1d19      	adds	r1, r3, #4
 8012e6e:	6029      	str	r1, [r5, #0]
 8012e70:	0601      	lsls	r1, r0, #24
 8012e72:	d501      	bpl.n	8012e78 <_printf_i+0xec>
 8012e74:	681e      	ldr	r6, [r3, #0]
 8012e76:	e002      	b.n	8012e7e <_printf_i+0xf2>
 8012e78:	0646      	lsls	r6, r0, #25
 8012e7a:	d5fb      	bpl.n	8012e74 <_printf_i+0xe8>
 8012e7c:	881e      	ldrh	r6, [r3, #0]
 8012e7e:	4854      	ldr	r0, [pc, #336]	; (8012fd0 <_printf_i+0x244>)
 8012e80:	2f6f      	cmp	r7, #111	; 0x6f
 8012e82:	bf0c      	ite	eq
 8012e84:	2308      	moveq	r3, #8
 8012e86:	230a      	movne	r3, #10
 8012e88:	2100      	movs	r1, #0
 8012e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e8e:	6865      	ldr	r5, [r4, #4]
 8012e90:	60a5      	str	r5, [r4, #8]
 8012e92:	2d00      	cmp	r5, #0
 8012e94:	bfa2      	ittt	ge
 8012e96:	6821      	ldrge	r1, [r4, #0]
 8012e98:	f021 0104 	bicge.w	r1, r1, #4
 8012e9c:	6021      	strge	r1, [r4, #0]
 8012e9e:	b90e      	cbnz	r6, 8012ea4 <_printf_i+0x118>
 8012ea0:	2d00      	cmp	r5, #0
 8012ea2:	d04d      	beq.n	8012f40 <_printf_i+0x1b4>
 8012ea4:	4615      	mov	r5, r2
 8012ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8012eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8012eae:	5dc7      	ldrb	r7, [r0, r7]
 8012eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012eb4:	4637      	mov	r7, r6
 8012eb6:	42bb      	cmp	r3, r7
 8012eb8:	460e      	mov	r6, r1
 8012eba:	d9f4      	bls.n	8012ea6 <_printf_i+0x11a>
 8012ebc:	2b08      	cmp	r3, #8
 8012ebe:	d10b      	bne.n	8012ed8 <_printf_i+0x14c>
 8012ec0:	6823      	ldr	r3, [r4, #0]
 8012ec2:	07de      	lsls	r6, r3, #31
 8012ec4:	d508      	bpl.n	8012ed8 <_printf_i+0x14c>
 8012ec6:	6923      	ldr	r3, [r4, #16]
 8012ec8:	6861      	ldr	r1, [r4, #4]
 8012eca:	4299      	cmp	r1, r3
 8012ecc:	bfde      	ittt	le
 8012ece:	2330      	movle	r3, #48	; 0x30
 8012ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ed8:	1b52      	subs	r2, r2, r5
 8012eda:	6122      	str	r2, [r4, #16]
 8012edc:	f8cd a000 	str.w	sl, [sp]
 8012ee0:	464b      	mov	r3, r9
 8012ee2:	aa03      	add	r2, sp, #12
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	4640      	mov	r0, r8
 8012ee8:	f7ff fee2 	bl	8012cb0 <_printf_common>
 8012eec:	3001      	adds	r0, #1
 8012eee:	d14c      	bne.n	8012f8a <_printf_i+0x1fe>
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	b004      	add	sp, #16
 8012ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012efa:	4835      	ldr	r0, [pc, #212]	; (8012fd0 <_printf_i+0x244>)
 8012efc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012f00:	6829      	ldr	r1, [r5, #0]
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f08:	6029      	str	r1, [r5, #0]
 8012f0a:	061d      	lsls	r5, r3, #24
 8012f0c:	d514      	bpl.n	8012f38 <_printf_i+0x1ac>
 8012f0e:	07df      	lsls	r7, r3, #31
 8012f10:	bf44      	itt	mi
 8012f12:	f043 0320 	orrmi.w	r3, r3, #32
 8012f16:	6023      	strmi	r3, [r4, #0]
 8012f18:	b91e      	cbnz	r6, 8012f22 <_printf_i+0x196>
 8012f1a:	6823      	ldr	r3, [r4, #0]
 8012f1c:	f023 0320 	bic.w	r3, r3, #32
 8012f20:	6023      	str	r3, [r4, #0]
 8012f22:	2310      	movs	r3, #16
 8012f24:	e7b0      	b.n	8012e88 <_printf_i+0xfc>
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	f043 0320 	orr.w	r3, r3, #32
 8012f2c:	6023      	str	r3, [r4, #0]
 8012f2e:	2378      	movs	r3, #120	; 0x78
 8012f30:	4828      	ldr	r0, [pc, #160]	; (8012fd4 <_printf_i+0x248>)
 8012f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f36:	e7e3      	b.n	8012f00 <_printf_i+0x174>
 8012f38:	0659      	lsls	r1, r3, #25
 8012f3a:	bf48      	it	mi
 8012f3c:	b2b6      	uxthmi	r6, r6
 8012f3e:	e7e6      	b.n	8012f0e <_printf_i+0x182>
 8012f40:	4615      	mov	r5, r2
 8012f42:	e7bb      	b.n	8012ebc <_printf_i+0x130>
 8012f44:	682b      	ldr	r3, [r5, #0]
 8012f46:	6826      	ldr	r6, [r4, #0]
 8012f48:	6961      	ldr	r1, [r4, #20]
 8012f4a:	1d18      	adds	r0, r3, #4
 8012f4c:	6028      	str	r0, [r5, #0]
 8012f4e:	0635      	lsls	r5, r6, #24
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	d501      	bpl.n	8012f58 <_printf_i+0x1cc>
 8012f54:	6019      	str	r1, [r3, #0]
 8012f56:	e002      	b.n	8012f5e <_printf_i+0x1d2>
 8012f58:	0670      	lsls	r0, r6, #25
 8012f5a:	d5fb      	bpl.n	8012f54 <_printf_i+0x1c8>
 8012f5c:	8019      	strh	r1, [r3, #0]
 8012f5e:	2300      	movs	r3, #0
 8012f60:	6123      	str	r3, [r4, #16]
 8012f62:	4615      	mov	r5, r2
 8012f64:	e7ba      	b.n	8012edc <_printf_i+0x150>
 8012f66:	682b      	ldr	r3, [r5, #0]
 8012f68:	1d1a      	adds	r2, r3, #4
 8012f6a:	602a      	str	r2, [r5, #0]
 8012f6c:	681d      	ldr	r5, [r3, #0]
 8012f6e:	6862      	ldr	r2, [r4, #4]
 8012f70:	2100      	movs	r1, #0
 8012f72:	4628      	mov	r0, r5
 8012f74:	f7ed f934 	bl	80001e0 <memchr>
 8012f78:	b108      	cbz	r0, 8012f7e <_printf_i+0x1f2>
 8012f7a:	1b40      	subs	r0, r0, r5
 8012f7c:	6060      	str	r0, [r4, #4]
 8012f7e:	6863      	ldr	r3, [r4, #4]
 8012f80:	6123      	str	r3, [r4, #16]
 8012f82:	2300      	movs	r3, #0
 8012f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f88:	e7a8      	b.n	8012edc <_printf_i+0x150>
 8012f8a:	6923      	ldr	r3, [r4, #16]
 8012f8c:	462a      	mov	r2, r5
 8012f8e:	4649      	mov	r1, r9
 8012f90:	4640      	mov	r0, r8
 8012f92:	47d0      	blx	sl
 8012f94:	3001      	adds	r0, #1
 8012f96:	d0ab      	beq.n	8012ef0 <_printf_i+0x164>
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	079b      	lsls	r3, r3, #30
 8012f9c:	d413      	bmi.n	8012fc6 <_printf_i+0x23a>
 8012f9e:	68e0      	ldr	r0, [r4, #12]
 8012fa0:	9b03      	ldr	r3, [sp, #12]
 8012fa2:	4298      	cmp	r0, r3
 8012fa4:	bfb8      	it	lt
 8012fa6:	4618      	movlt	r0, r3
 8012fa8:	e7a4      	b.n	8012ef4 <_printf_i+0x168>
 8012faa:	2301      	movs	r3, #1
 8012fac:	4632      	mov	r2, r6
 8012fae:	4649      	mov	r1, r9
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	47d0      	blx	sl
 8012fb4:	3001      	adds	r0, #1
 8012fb6:	d09b      	beq.n	8012ef0 <_printf_i+0x164>
 8012fb8:	3501      	adds	r5, #1
 8012fba:	68e3      	ldr	r3, [r4, #12]
 8012fbc:	9903      	ldr	r1, [sp, #12]
 8012fbe:	1a5b      	subs	r3, r3, r1
 8012fc0:	42ab      	cmp	r3, r5
 8012fc2:	dcf2      	bgt.n	8012faa <_printf_i+0x21e>
 8012fc4:	e7eb      	b.n	8012f9e <_printf_i+0x212>
 8012fc6:	2500      	movs	r5, #0
 8012fc8:	f104 0619 	add.w	r6, r4, #25
 8012fcc:	e7f5      	b.n	8012fba <_printf_i+0x22e>
 8012fce:	bf00      	nop
 8012fd0:	08015b75 	.word	0x08015b75
 8012fd4:	08015b86 	.word	0x08015b86

08012fd8 <iprintf>:
 8012fd8:	b40f      	push	{r0, r1, r2, r3}
 8012fda:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <iprintf+0x2c>)
 8012fdc:	b513      	push	{r0, r1, r4, lr}
 8012fde:	681c      	ldr	r4, [r3, #0]
 8012fe0:	b124      	cbz	r4, 8012fec <iprintf+0x14>
 8012fe2:	69a3      	ldr	r3, [r4, #24]
 8012fe4:	b913      	cbnz	r3, 8012fec <iprintf+0x14>
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f7ff fb5c 	bl	80126a4 <__sinit>
 8012fec:	ab05      	add	r3, sp, #20
 8012fee:	9a04      	ldr	r2, [sp, #16]
 8012ff0:	68a1      	ldr	r1, [r4, #8]
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	f7ff fd2b 	bl	8012a50 <_vfiprintf_r>
 8012ffa:	b002      	add	sp, #8
 8012ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013000:	b004      	add	sp, #16
 8013002:	4770      	bx	lr
 8013004:	20000054 	.word	0x20000054

08013008 <_puts_r>:
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	460e      	mov	r6, r1
 801300c:	4605      	mov	r5, r0
 801300e:	b118      	cbz	r0, 8013018 <_puts_r+0x10>
 8013010:	6983      	ldr	r3, [r0, #24]
 8013012:	b90b      	cbnz	r3, 8013018 <_puts_r+0x10>
 8013014:	f7ff fb46 	bl	80126a4 <__sinit>
 8013018:	69ab      	ldr	r3, [r5, #24]
 801301a:	68ac      	ldr	r4, [r5, #8]
 801301c:	b913      	cbnz	r3, 8013024 <_puts_r+0x1c>
 801301e:	4628      	mov	r0, r5
 8013020:	f7ff fb40 	bl	80126a4 <__sinit>
 8013024:	4b2c      	ldr	r3, [pc, #176]	; (80130d8 <_puts_r+0xd0>)
 8013026:	429c      	cmp	r4, r3
 8013028:	d120      	bne.n	801306c <_puts_r+0x64>
 801302a:	686c      	ldr	r4, [r5, #4]
 801302c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801302e:	07db      	lsls	r3, r3, #31
 8013030:	d405      	bmi.n	801303e <_puts_r+0x36>
 8013032:	89a3      	ldrh	r3, [r4, #12]
 8013034:	0598      	lsls	r0, r3, #22
 8013036:	d402      	bmi.n	801303e <_puts_r+0x36>
 8013038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801303a:	f7ff fc08 	bl	801284e <__retarget_lock_acquire_recursive>
 801303e:	89a3      	ldrh	r3, [r4, #12]
 8013040:	0719      	lsls	r1, r3, #28
 8013042:	d51d      	bpl.n	8013080 <_puts_r+0x78>
 8013044:	6923      	ldr	r3, [r4, #16]
 8013046:	b1db      	cbz	r3, 8013080 <_puts_r+0x78>
 8013048:	3e01      	subs	r6, #1
 801304a:	68a3      	ldr	r3, [r4, #8]
 801304c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013050:	3b01      	subs	r3, #1
 8013052:	60a3      	str	r3, [r4, #8]
 8013054:	bb39      	cbnz	r1, 80130a6 <_puts_r+0x9e>
 8013056:	2b00      	cmp	r3, #0
 8013058:	da38      	bge.n	80130cc <_puts_r+0xc4>
 801305a:	4622      	mov	r2, r4
 801305c:	210a      	movs	r1, #10
 801305e:	4628      	mov	r0, r5
 8013060:	f000 f9de 	bl	8013420 <__swbuf_r>
 8013064:	3001      	adds	r0, #1
 8013066:	d011      	beq.n	801308c <_puts_r+0x84>
 8013068:	250a      	movs	r5, #10
 801306a:	e011      	b.n	8013090 <_puts_r+0x88>
 801306c:	4b1b      	ldr	r3, [pc, #108]	; (80130dc <_puts_r+0xd4>)
 801306e:	429c      	cmp	r4, r3
 8013070:	d101      	bne.n	8013076 <_puts_r+0x6e>
 8013072:	68ac      	ldr	r4, [r5, #8]
 8013074:	e7da      	b.n	801302c <_puts_r+0x24>
 8013076:	4b1a      	ldr	r3, [pc, #104]	; (80130e0 <_puts_r+0xd8>)
 8013078:	429c      	cmp	r4, r3
 801307a:	bf08      	it	eq
 801307c:	68ec      	ldreq	r4, [r5, #12]
 801307e:	e7d5      	b.n	801302c <_puts_r+0x24>
 8013080:	4621      	mov	r1, r4
 8013082:	4628      	mov	r0, r5
 8013084:	f000 fa30 	bl	80134e8 <__swsetup_r>
 8013088:	2800      	cmp	r0, #0
 801308a:	d0dd      	beq.n	8013048 <_puts_r+0x40>
 801308c:	f04f 35ff 	mov.w	r5, #4294967295
 8013090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013092:	07da      	lsls	r2, r3, #31
 8013094:	d405      	bmi.n	80130a2 <_puts_r+0x9a>
 8013096:	89a3      	ldrh	r3, [r4, #12]
 8013098:	059b      	lsls	r3, r3, #22
 801309a:	d402      	bmi.n	80130a2 <_puts_r+0x9a>
 801309c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801309e:	f7ff fbd7 	bl	8012850 <__retarget_lock_release_recursive>
 80130a2:	4628      	mov	r0, r5
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	da04      	bge.n	80130b4 <_puts_r+0xac>
 80130aa:	69a2      	ldr	r2, [r4, #24]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	dc06      	bgt.n	80130be <_puts_r+0xb6>
 80130b0:	290a      	cmp	r1, #10
 80130b2:	d004      	beq.n	80130be <_puts_r+0xb6>
 80130b4:	6823      	ldr	r3, [r4, #0]
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	6022      	str	r2, [r4, #0]
 80130ba:	7019      	strb	r1, [r3, #0]
 80130bc:	e7c5      	b.n	801304a <_puts_r+0x42>
 80130be:	4622      	mov	r2, r4
 80130c0:	4628      	mov	r0, r5
 80130c2:	f000 f9ad 	bl	8013420 <__swbuf_r>
 80130c6:	3001      	adds	r0, #1
 80130c8:	d1bf      	bne.n	801304a <_puts_r+0x42>
 80130ca:	e7df      	b.n	801308c <_puts_r+0x84>
 80130cc:	6823      	ldr	r3, [r4, #0]
 80130ce:	250a      	movs	r5, #10
 80130d0:	1c5a      	adds	r2, r3, #1
 80130d2:	6022      	str	r2, [r4, #0]
 80130d4:	701d      	strb	r5, [r3, #0]
 80130d6:	e7db      	b.n	8013090 <_puts_r+0x88>
 80130d8:	08015b20 	.word	0x08015b20
 80130dc:	08015b40 	.word	0x08015b40
 80130e0:	08015b00 	.word	0x08015b00

080130e4 <puts>:
 80130e4:	4b02      	ldr	r3, [pc, #8]	; (80130f0 <puts+0xc>)
 80130e6:	4601      	mov	r1, r0
 80130e8:	6818      	ldr	r0, [r3, #0]
 80130ea:	f7ff bf8d 	b.w	8013008 <_puts_r>
 80130ee:	bf00      	nop
 80130f0:	20000054 	.word	0x20000054

080130f4 <cleanup_glue>:
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	460c      	mov	r4, r1
 80130f8:	6809      	ldr	r1, [r1, #0]
 80130fa:	4605      	mov	r5, r0
 80130fc:	b109      	cbz	r1, 8013102 <cleanup_glue+0xe>
 80130fe:	f7ff fff9 	bl	80130f4 <cleanup_glue>
 8013102:	4621      	mov	r1, r4
 8013104:	4628      	mov	r0, r5
 8013106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801310a:	f000 bbc1 	b.w	8013890 <_free_r>
	...

08013110 <_reclaim_reent>:
 8013110:	4b2c      	ldr	r3, [pc, #176]	; (80131c4 <_reclaim_reent+0xb4>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4283      	cmp	r3, r0
 8013116:	b570      	push	{r4, r5, r6, lr}
 8013118:	4604      	mov	r4, r0
 801311a:	d051      	beq.n	80131c0 <_reclaim_reent+0xb0>
 801311c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801311e:	b143      	cbz	r3, 8013132 <_reclaim_reent+0x22>
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d14a      	bne.n	80131bc <_reclaim_reent+0xac>
 8013126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013128:	6819      	ldr	r1, [r3, #0]
 801312a:	b111      	cbz	r1, 8013132 <_reclaim_reent+0x22>
 801312c:	4620      	mov	r0, r4
 801312e:	f000 fbaf 	bl	8013890 <_free_r>
 8013132:	6961      	ldr	r1, [r4, #20]
 8013134:	b111      	cbz	r1, 801313c <_reclaim_reent+0x2c>
 8013136:	4620      	mov	r0, r4
 8013138:	f000 fbaa 	bl	8013890 <_free_r>
 801313c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801313e:	b111      	cbz	r1, 8013146 <_reclaim_reent+0x36>
 8013140:	4620      	mov	r0, r4
 8013142:	f000 fba5 	bl	8013890 <_free_r>
 8013146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013148:	b111      	cbz	r1, 8013150 <_reclaim_reent+0x40>
 801314a:	4620      	mov	r0, r4
 801314c:	f000 fba0 	bl	8013890 <_free_r>
 8013150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013152:	b111      	cbz	r1, 801315a <_reclaim_reent+0x4a>
 8013154:	4620      	mov	r0, r4
 8013156:	f000 fb9b 	bl	8013890 <_free_r>
 801315a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801315c:	b111      	cbz	r1, 8013164 <_reclaim_reent+0x54>
 801315e:	4620      	mov	r0, r4
 8013160:	f000 fb96 	bl	8013890 <_free_r>
 8013164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013166:	b111      	cbz	r1, 801316e <_reclaim_reent+0x5e>
 8013168:	4620      	mov	r0, r4
 801316a:	f000 fb91 	bl	8013890 <_free_r>
 801316e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013170:	b111      	cbz	r1, 8013178 <_reclaim_reent+0x68>
 8013172:	4620      	mov	r0, r4
 8013174:	f000 fb8c 	bl	8013890 <_free_r>
 8013178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801317a:	b111      	cbz	r1, 8013182 <_reclaim_reent+0x72>
 801317c:	4620      	mov	r0, r4
 801317e:	f000 fb87 	bl	8013890 <_free_r>
 8013182:	69a3      	ldr	r3, [r4, #24]
 8013184:	b1e3      	cbz	r3, 80131c0 <_reclaim_reent+0xb0>
 8013186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013188:	4620      	mov	r0, r4
 801318a:	4798      	blx	r3
 801318c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801318e:	b1b9      	cbz	r1, 80131c0 <_reclaim_reent+0xb0>
 8013190:	4620      	mov	r0, r4
 8013192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013196:	f7ff bfad 	b.w	80130f4 <cleanup_glue>
 801319a:	5949      	ldr	r1, [r1, r5]
 801319c:	b941      	cbnz	r1, 80131b0 <_reclaim_reent+0xa0>
 801319e:	3504      	adds	r5, #4
 80131a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131a2:	2d80      	cmp	r5, #128	; 0x80
 80131a4:	68d9      	ldr	r1, [r3, #12]
 80131a6:	d1f8      	bne.n	801319a <_reclaim_reent+0x8a>
 80131a8:	4620      	mov	r0, r4
 80131aa:	f000 fb71 	bl	8013890 <_free_r>
 80131ae:	e7ba      	b.n	8013126 <_reclaim_reent+0x16>
 80131b0:	680e      	ldr	r6, [r1, #0]
 80131b2:	4620      	mov	r0, r4
 80131b4:	f000 fb6c 	bl	8013890 <_free_r>
 80131b8:	4631      	mov	r1, r6
 80131ba:	e7ef      	b.n	801319c <_reclaim_reent+0x8c>
 80131bc:	2500      	movs	r5, #0
 80131be:	e7ef      	b.n	80131a0 <_reclaim_reent+0x90>
 80131c0:	bd70      	pop	{r4, r5, r6, pc}
 80131c2:	bf00      	nop
 80131c4:	20000054 	.word	0x20000054

080131c8 <_sbrk_r>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	4d06      	ldr	r5, [pc, #24]	; (80131e4 <_sbrk_r+0x1c>)
 80131cc:	2300      	movs	r3, #0
 80131ce:	4604      	mov	r4, r0
 80131d0:	4608      	mov	r0, r1
 80131d2:	602b      	str	r3, [r5, #0]
 80131d4:	f7ef fc56 	bl	8002a84 <_sbrk>
 80131d8:	1c43      	adds	r3, r0, #1
 80131da:	d102      	bne.n	80131e2 <_sbrk_r+0x1a>
 80131dc:	682b      	ldr	r3, [r5, #0]
 80131de:	b103      	cbz	r3, 80131e2 <_sbrk_r+0x1a>
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	20004f2c 	.word	0x20004f2c

080131e8 <sniprintf>:
 80131e8:	b40c      	push	{r2, r3}
 80131ea:	b530      	push	{r4, r5, lr}
 80131ec:	4b17      	ldr	r3, [pc, #92]	; (801324c <sniprintf+0x64>)
 80131ee:	1e0c      	subs	r4, r1, #0
 80131f0:	681d      	ldr	r5, [r3, #0]
 80131f2:	b09d      	sub	sp, #116	; 0x74
 80131f4:	da08      	bge.n	8013208 <sniprintf+0x20>
 80131f6:	238b      	movs	r3, #139	; 0x8b
 80131f8:	602b      	str	r3, [r5, #0]
 80131fa:	f04f 30ff 	mov.w	r0, #4294967295
 80131fe:	b01d      	add	sp, #116	; 0x74
 8013200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013204:	b002      	add	sp, #8
 8013206:	4770      	bx	lr
 8013208:	f44f 7302 	mov.w	r3, #520	; 0x208
 801320c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013210:	bf14      	ite	ne
 8013212:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013216:	4623      	moveq	r3, r4
 8013218:	9304      	str	r3, [sp, #16]
 801321a:	9307      	str	r3, [sp, #28]
 801321c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013220:	9002      	str	r0, [sp, #8]
 8013222:	9006      	str	r0, [sp, #24]
 8013224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801322a:	ab21      	add	r3, sp, #132	; 0x84
 801322c:	a902      	add	r1, sp, #8
 801322e:	4628      	mov	r0, r5
 8013230:	9301      	str	r3, [sp, #4]
 8013232:	f000 fc03 	bl	8013a3c <_svfiprintf_r>
 8013236:	1c43      	adds	r3, r0, #1
 8013238:	bfbc      	itt	lt
 801323a:	238b      	movlt	r3, #139	; 0x8b
 801323c:	602b      	strlt	r3, [r5, #0]
 801323e:	2c00      	cmp	r4, #0
 8013240:	d0dd      	beq.n	80131fe <sniprintf+0x16>
 8013242:	9b02      	ldr	r3, [sp, #8]
 8013244:	2200      	movs	r2, #0
 8013246:	701a      	strb	r2, [r3, #0]
 8013248:	e7d9      	b.n	80131fe <sniprintf+0x16>
 801324a:	bf00      	nop
 801324c:	20000054 	.word	0x20000054

08013250 <siprintf>:
 8013250:	b40e      	push	{r1, r2, r3}
 8013252:	b500      	push	{lr}
 8013254:	b09c      	sub	sp, #112	; 0x70
 8013256:	ab1d      	add	r3, sp, #116	; 0x74
 8013258:	9002      	str	r0, [sp, #8]
 801325a:	9006      	str	r0, [sp, #24]
 801325c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013260:	4809      	ldr	r0, [pc, #36]	; (8013288 <siprintf+0x38>)
 8013262:	9107      	str	r1, [sp, #28]
 8013264:	9104      	str	r1, [sp, #16]
 8013266:	4909      	ldr	r1, [pc, #36]	; (801328c <siprintf+0x3c>)
 8013268:	f853 2b04 	ldr.w	r2, [r3], #4
 801326c:	9105      	str	r1, [sp, #20]
 801326e:	6800      	ldr	r0, [r0, #0]
 8013270:	9301      	str	r3, [sp, #4]
 8013272:	a902      	add	r1, sp, #8
 8013274:	f000 fbe2 	bl	8013a3c <_svfiprintf_r>
 8013278:	9b02      	ldr	r3, [sp, #8]
 801327a:	2200      	movs	r2, #0
 801327c:	701a      	strb	r2, [r3, #0]
 801327e:	b01c      	add	sp, #112	; 0x70
 8013280:	f85d eb04 	ldr.w	lr, [sp], #4
 8013284:	b003      	add	sp, #12
 8013286:	4770      	bx	lr
 8013288:	20000054 	.word	0x20000054
 801328c:	ffff0208 	.word	0xffff0208

08013290 <__sread>:
 8013290:	b510      	push	{r4, lr}
 8013292:	460c      	mov	r4, r1
 8013294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013298:	f000 fcd0 	bl	8013c3c <_read_r>
 801329c:	2800      	cmp	r0, #0
 801329e:	bfab      	itete	ge
 80132a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80132a2:	89a3      	ldrhlt	r3, [r4, #12]
 80132a4:	181b      	addge	r3, r3, r0
 80132a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80132aa:	bfac      	ite	ge
 80132ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80132ae:	81a3      	strhlt	r3, [r4, #12]
 80132b0:	bd10      	pop	{r4, pc}

080132b2 <__swrite>:
 80132b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b6:	461f      	mov	r7, r3
 80132b8:	898b      	ldrh	r3, [r1, #12]
 80132ba:	05db      	lsls	r3, r3, #23
 80132bc:	4605      	mov	r5, r0
 80132be:	460c      	mov	r4, r1
 80132c0:	4616      	mov	r6, r2
 80132c2:	d505      	bpl.n	80132d0 <__swrite+0x1e>
 80132c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132c8:	2302      	movs	r3, #2
 80132ca:	2200      	movs	r2, #0
 80132cc:	f000 fa54 	bl	8013778 <_lseek_r>
 80132d0:	89a3      	ldrh	r3, [r4, #12]
 80132d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80132da:	81a3      	strh	r3, [r4, #12]
 80132dc:	4632      	mov	r2, r6
 80132de:	463b      	mov	r3, r7
 80132e0:	4628      	mov	r0, r5
 80132e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132e6:	f000 b8ed 	b.w	80134c4 <_write_r>

080132ea <__sseek>:
 80132ea:	b510      	push	{r4, lr}
 80132ec:	460c      	mov	r4, r1
 80132ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132f2:	f000 fa41 	bl	8013778 <_lseek_r>
 80132f6:	1c43      	adds	r3, r0, #1
 80132f8:	89a3      	ldrh	r3, [r4, #12]
 80132fa:	bf15      	itete	ne
 80132fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80132fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013306:	81a3      	strheq	r3, [r4, #12]
 8013308:	bf18      	it	ne
 801330a:	81a3      	strhne	r3, [r4, #12]
 801330c:	bd10      	pop	{r4, pc}

0801330e <__sclose>:
 801330e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013312:	f000 b95f 	b.w	80135d4 <_close_r>

08013316 <strncpy>:
 8013316:	b510      	push	{r4, lr}
 8013318:	3901      	subs	r1, #1
 801331a:	4603      	mov	r3, r0
 801331c:	b132      	cbz	r2, 801332c <strncpy+0x16>
 801331e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013322:	f803 4b01 	strb.w	r4, [r3], #1
 8013326:	3a01      	subs	r2, #1
 8013328:	2c00      	cmp	r4, #0
 801332a:	d1f7      	bne.n	801331c <strncpy+0x6>
 801332c:	441a      	add	r2, r3
 801332e:	2100      	movs	r1, #0
 8013330:	4293      	cmp	r3, r2
 8013332:	d100      	bne.n	8013336 <strncpy+0x20>
 8013334:	bd10      	pop	{r4, pc}
 8013336:	f803 1b01 	strb.w	r1, [r3], #1
 801333a:	e7f9      	b.n	8013330 <strncpy+0x1a>

0801333c <strstr>:
 801333c:	780a      	ldrb	r2, [r1, #0]
 801333e:	b570      	push	{r4, r5, r6, lr}
 8013340:	b96a      	cbnz	r2, 801335e <strstr+0x22>
 8013342:	bd70      	pop	{r4, r5, r6, pc}
 8013344:	429a      	cmp	r2, r3
 8013346:	d109      	bne.n	801335c <strstr+0x20>
 8013348:	460c      	mov	r4, r1
 801334a:	4605      	mov	r5, r0
 801334c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013350:	2b00      	cmp	r3, #0
 8013352:	d0f6      	beq.n	8013342 <strstr+0x6>
 8013354:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013358:	429e      	cmp	r6, r3
 801335a:	d0f7      	beq.n	801334c <strstr+0x10>
 801335c:	3001      	adds	r0, #1
 801335e:	7803      	ldrb	r3, [r0, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1ef      	bne.n	8013344 <strstr+0x8>
 8013364:	4618      	mov	r0, r3
 8013366:	e7ec      	b.n	8013342 <strstr+0x6>

08013368 <strtok>:
 8013368:	4b16      	ldr	r3, [pc, #88]	; (80133c4 <strtok+0x5c>)
 801336a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801336c:	681e      	ldr	r6, [r3, #0]
 801336e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013370:	4605      	mov	r5, r0
 8013372:	b9fc      	cbnz	r4, 80133b4 <strtok+0x4c>
 8013374:	2050      	movs	r0, #80	; 0x50
 8013376:	9101      	str	r1, [sp, #4]
 8013378:	f000 fa76 	bl	8013868 <malloc>
 801337c:	9901      	ldr	r1, [sp, #4]
 801337e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013380:	4602      	mov	r2, r0
 8013382:	b920      	cbnz	r0, 801338e <strtok+0x26>
 8013384:	4b10      	ldr	r3, [pc, #64]	; (80133c8 <strtok+0x60>)
 8013386:	4811      	ldr	r0, [pc, #68]	; (80133cc <strtok+0x64>)
 8013388:	2157      	movs	r1, #87	; 0x57
 801338a:	f7ff f90f 	bl	80125ac <__assert_func>
 801338e:	e9c0 4400 	strd	r4, r4, [r0]
 8013392:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013396:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801339a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801339e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80133a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80133a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80133aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80133ae:	6184      	str	r4, [r0, #24]
 80133b0:	7704      	strb	r4, [r0, #28]
 80133b2:	6244      	str	r4, [r0, #36]	; 0x24
 80133b4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80133b6:	2301      	movs	r3, #1
 80133b8:	4628      	mov	r0, r5
 80133ba:	b002      	add	sp, #8
 80133bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133c0:	f000 b806 	b.w	80133d0 <__strtok_r>
 80133c4:	20000054 	.word	0x20000054
 80133c8:	08015b97 	.word	0x08015b97
 80133cc:	08015bae 	.word	0x08015bae

080133d0 <__strtok_r>:
 80133d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133d2:	b908      	cbnz	r0, 80133d8 <__strtok_r+0x8>
 80133d4:	6810      	ldr	r0, [r2, #0]
 80133d6:	b188      	cbz	r0, 80133fc <__strtok_r+0x2c>
 80133d8:	4604      	mov	r4, r0
 80133da:	4620      	mov	r0, r4
 80133dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80133e0:	460f      	mov	r7, r1
 80133e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80133e6:	b91e      	cbnz	r6, 80133f0 <__strtok_r+0x20>
 80133e8:	b965      	cbnz	r5, 8013404 <__strtok_r+0x34>
 80133ea:	6015      	str	r5, [r2, #0]
 80133ec:	4628      	mov	r0, r5
 80133ee:	e005      	b.n	80133fc <__strtok_r+0x2c>
 80133f0:	42b5      	cmp	r5, r6
 80133f2:	d1f6      	bne.n	80133e2 <__strtok_r+0x12>
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1f0      	bne.n	80133da <__strtok_r+0xa>
 80133f8:	6014      	str	r4, [r2, #0]
 80133fa:	7003      	strb	r3, [r0, #0]
 80133fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fe:	461c      	mov	r4, r3
 8013400:	e00c      	b.n	801341c <__strtok_r+0x4c>
 8013402:	b915      	cbnz	r5, 801340a <__strtok_r+0x3a>
 8013404:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013408:	460e      	mov	r6, r1
 801340a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801340e:	42ab      	cmp	r3, r5
 8013410:	d1f7      	bne.n	8013402 <__strtok_r+0x32>
 8013412:	2b00      	cmp	r3, #0
 8013414:	d0f3      	beq.n	80133fe <__strtok_r+0x2e>
 8013416:	2300      	movs	r3, #0
 8013418:	f804 3c01 	strb.w	r3, [r4, #-1]
 801341c:	6014      	str	r4, [r2, #0]
 801341e:	e7ed      	b.n	80133fc <__strtok_r+0x2c>

08013420 <__swbuf_r>:
 8013420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013422:	460e      	mov	r6, r1
 8013424:	4614      	mov	r4, r2
 8013426:	4605      	mov	r5, r0
 8013428:	b118      	cbz	r0, 8013432 <__swbuf_r+0x12>
 801342a:	6983      	ldr	r3, [r0, #24]
 801342c:	b90b      	cbnz	r3, 8013432 <__swbuf_r+0x12>
 801342e:	f7ff f939 	bl	80126a4 <__sinit>
 8013432:	4b21      	ldr	r3, [pc, #132]	; (80134b8 <__swbuf_r+0x98>)
 8013434:	429c      	cmp	r4, r3
 8013436:	d12b      	bne.n	8013490 <__swbuf_r+0x70>
 8013438:	686c      	ldr	r4, [r5, #4]
 801343a:	69a3      	ldr	r3, [r4, #24]
 801343c:	60a3      	str	r3, [r4, #8]
 801343e:	89a3      	ldrh	r3, [r4, #12]
 8013440:	071a      	lsls	r2, r3, #28
 8013442:	d52f      	bpl.n	80134a4 <__swbuf_r+0x84>
 8013444:	6923      	ldr	r3, [r4, #16]
 8013446:	b36b      	cbz	r3, 80134a4 <__swbuf_r+0x84>
 8013448:	6923      	ldr	r3, [r4, #16]
 801344a:	6820      	ldr	r0, [r4, #0]
 801344c:	1ac0      	subs	r0, r0, r3
 801344e:	6963      	ldr	r3, [r4, #20]
 8013450:	b2f6      	uxtb	r6, r6
 8013452:	4283      	cmp	r3, r0
 8013454:	4637      	mov	r7, r6
 8013456:	dc04      	bgt.n	8013462 <__swbuf_r+0x42>
 8013458:	4621      	mov	r1, r4
 801345a:	4628      	mov	r0, r5
 801345c:	f000 f950 	bl	8013700 <_fflush_r>
 8013460:	bb30      	cbnz	r0, 80134b0 <__swbuf_r+0x90>
 8013462:	68a3      	ldr	r3, [r4, #8]
 8013464:	3b01      	subs	r3, #1
 8013466:	60a3      	str	r3, [r4, #8]
 8013468:	6823      	ldr	r3, [r4, #0]
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	6022      	str	r2, [r4, #0]
 801346e:	701e      	strb	r6, [r3, #0]
 8013470:	6963      	ldr	r3, [r4, #20]
 8013472:	3001      	adds	r0, #1
 8013474:	4283      	cmp	r3, r0
 8013476:	d004      	beq.n	8013482 <__swbuf_r+0x62>
 8013478:	89a3      	ldrh	r3, [r4, #12]
 801347a:	07db      	lsls	r3, r3, #31
 801347c:	d506      	bpl.n	801348c <__swbuf_r+0x6c>
 801347e:	2e0a      	cmp	r6, #10
 8013480:	d104      	bne.n	801348c <__swbuf_r+0x6c>
 8013482:	4621      	mov	r1, r4
 8013484:	4628      	mov	r0, r5
 8013486:	f000 f93b 	bl	8013700 <_fflush_r>
 801348a:	b988      	cbnz	r0, 80134b0 <__swbuf_r+0x90>
 801348c:	4638      	mov	r0, r7
 801348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013490:	4b0a      	ldr	r3, [pc, #40]	; (80134bc <__swbuf_r+0x9c>)
 8013492:	429c      	cmp	r4, r3
 8013494:	d101      	bne.n	801349a <__swbuf_r+0x7a>
 8013496:	68ac      	ldr	r4, [r5, #8]
 8013498:	e7cf      	b.n	801343a <__swbuf_r+0x1a>
 801349a:	4b09      	ldr	r3, [pc, #36]	; (80134c0 <__swbuf_r+0xa0>)
 801349c:	429c      	cmp	r4, r3
 801349e:	bf08      	it	eq
 80134a0:	68ec      	ldreq	r4, [r5, #12]
 80134a2:	e7ca      	b.n	801343a <__swbuf_r+0x1a>
 80134a4:	4621      	mov	r1, r4
 80134a6:	4628      	mov	r0, r5
 80134a8:	f000 f81e 	bl	80134e8 <__swsetup_r>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d0cb      	beq.n	8013448 <__swbuf_r+0x28>
 80134b0:	f04f 37ff 	mov.w	r7, #4294967295
 80134b4:	e7ea      	b.n	801348c <__swbuf_r+0x6c>
 80134b6:	bf00      	nop
 80134b8:	08015b20 	.word	0x08015b20
 80134bc:	08015b40 	.word	0x08015b40
 80134c0:	08015b00 	.word	0x08015b00

080134c4 <_write_r>:
 80134c4:	b538      	push	{r3, r4, r5, lr}
 80134c6:	4d07      	ldr	r5, [pc, #28]	; (80134e4 <_write_r+0x20>)
 80134c8:	4604      	mov	r4, r0
 80134ca:	4608      	mov	r0, r1
 80134cc:	4611      	mov	r1, r2
 80134ce:	2200      	movs	r2, #0
 80134d0:	602a      	str	r2, [r5, #0]
 80134d2:	461a      	mov	r2, r3
 80134d4:	f7ed fd66 	bl	8000fa4 <_write>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	d102      	bne.n	80134e2 <_write_r+0x1e>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	b103      	cbz	r3, 80134e2 <_write_r+0x1e>
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	bd38      	pop	{r3, r4, r5, pc}
 80134e4:	20004f2c 	.word	0x20004f2c

080134e8 <__swsetup_r>:
 80134e8:	4b32      	ldr	r3, [pc, #200]	; (80135b4 <__swsetup_r+0xcc>)
 80134ea:	b570      	push	{r4, r5, r6, lr}
 80134ec:	681d      	ldr	r5, [r3, #0]
 80134ee:	4606      	mov	r6, r0
 80134f0:	460c      	mov	r4, r1
 80134f2:	b125      	cbz	r5, 80134fe <__swsetup_r+0x16>
 80134f4:	69ab      	ldr	r3, [r5, #24]
 80134f6:	b913      	cbnz	r3, 80134fe <__swsetup_r+0x16>
 80134f8:	4628      	mov	r0, r5
 80134fa:	f7ff f8d3 	bl	80126a4 <__sinit>
 80134fe:	4b2e      	ldr	r3, [pc, #184]	; (80135b8 <__swsetup_r+0xd0>)
 8013500:	429c      	cmp	r4, r3
 8013502:	d10f      	bne.n	8013524 <__swsetup_r+0x3c>
 8013504:	686c      	ldr	r4, [r5, #4]
 8013506:	89a3      	ldrh	r3, [r4, #12]
 8013508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801350c:	0719      	lsls	r1, r3, #28
 801350e:	d42c      	bmi.n	801356a <__swsetup_r+0x82>
 8013510:	06dd      	lsls	r5, r3, #27
 8013512:	d411      	bmi.n	8013538 <__swsetup_r+0x50>
 8013514:	2309      	movs	r3, #9
 8013516:	6033      	str	r3, [r6, #0]
 8013518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801351c:	81a3      	strh	r3, [r4, #12]
 801351e:	f04f 30ff 	mov.w	r0, #4294967295
 8013522:	e03e      	b.n	80135a2 <__swsetup_r+0xba>
 8013524:	4b25      	ldr	r3, [pc, #148]	; (80135bc <__swsetup_r+0xd4>)
 8013526:	429c      	cmp	r4, r3
 8013528:	d101      	bne.n	801352e <__swsetup_r+0x46>
 801352a:	68ac      	ldr	r4, [r5, #8]
 801352c:	e7eb      	b.n	8013506 <__swsetup_r+0x1e>
 801352e:	4b24      	ldr	r3, [pc, #144]	; (80135c0 <__swsetup_r+0xd8>)
 8013530:	429c      	cmp	r4, r3
 8013532:	bf08      	it	eq
 8013534:	68ec      	ldreq	r4, [r5, #12]
 8013536:	e7e6      	b.n	8013506 <__swsetup_r+0x1e>
 8013538:	0758      	lsls	r0, r3, #29
 801353a:	d512      	bpl.n	8013562 <__swsetup_r+0x7a>
 801353c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801353e:	b141      	cbz	r1, 8013552 <__swsetup_r+0x6a>
 8013540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013544:	4299      	cmp	r1, r3
 8013546:	d002      	beq.n	801354e <__swsetup_r+0x66>
 8013548:	4630      	mov	r0, r6
 801354a:	f000 f9a1 	bl	8013890 <_free_r>
 801354e:	2300      	movs	r3, #0
 8013550:	6363      	str	r3, [r4, #52]	; 0x34
 8013552:	89a3      	ldrh	r3, [r4, #12]
 8013554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013558:	81a3      	strh	r3, [r4, #12]
 801355a:	2300      	movs	r3, #0
 801355c:	6063      	str	r3, [r4, #4]
 801355e:	6923      	ldr	r3, [r4, #16]
 8013560:	6023      	str	r3, [r4, #0]
 8013562:	89a3      	ldrh	r3, [r4, #12]
 8013564:	f043 0308 	orr.w	r3, r3, #8
 8013568:	81a3      	strh	r3, [r4, #12]
 801356a:	6923      	ldr	r3, [r4, #16]
 801356c:	b94b      	cbnz	r3, 8013582 <__swsetup_r+0x9a>
 801356e:	89a3      	ldrh	r3, [r4, #12]
 8013570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013578:	d003      	beq.n	8013582 <__swsetup_r+0x9a>
 801357a:	4621      	mov	r1, r4
 801357c:	4630      	mov	r0, r6
 801357e:	f000 f933 	bl	80137e8 <__smakebuf_r>
 8013582:	89a0      	ldrh	r0, [r4, #12]
 8013584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013588:	f010 0301 	ands.w	r3, r0, #1
 801358c:	d00a      	beq.n	80135a4 <__swsetup_r+0xbc>
 801358e:	2300      	movs	r3, #0
 8013590:	60a3      	str	r3, [r4, #8]
 8013592:	6963      	ldr	r3, [r4, #20]
 8013594:	425b      	negs	r3, r3
 8013596:	61a3      	str	r3, [r4, #24]
 8013598:	6923      	ldr	r3, [r4, #16]
 801359a:	b943      	cbnz	r3, 80135ae <__swsetup_r+0xc6>
 801359c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80135a0:	d1ba      	bne.n	8013518 <__swsetup_r+0x30>
 80135a2:	bd70      	pop	{r4, r5, r6, pc}
 80135a4:	0781      	lsls	r1, r0, #30
 80135a6:	bf58      	it	pl
 80135a8:	6963      	ldrpl	r3, [r4, #20]
 80135aa:	60a3      	str	r3, [r4, #8]
 80135ac:	e7f4      	b.n	8013598 <__swsetup_r+0xb0>
 80135ae:	2000      	movs	r0, #0
 80135b0:	e7f7      	b.n	80135a2 <__swsetup_r+0xba>
 80135b2:	bf00      	nop
 80135b4:	20000054 	.word	0x20000054
 80135b8:	08015b20 	.word	0x08015b20
 80135bc:	08015b40 	.word	0x08015b40
 80135c0:	08015b00 	.word	0x08015b00

080135c4 <abort>:
 80135c4:	b508      	push	{r3, lr}
 80135c6:	2006      	movs	r0, #6
 80135c8:	f000 fb72 	bl	8013cb0 <raise>
 80135cc:	2001      	movs	r0, #1
 80135ce:	f7ef f9fd 	bl	80029cc <_exit>
	...

080135d4 <_close_r>:
 80135d4:	b538      	push	{r3, r4, r5, lr}
 80135d6:	4d06      	ldr	r5, [pc, #24]	; (80135f0 <_close_r+0x1c>)
 80135d8:	2300      	movs	r3, #0
 80135da:	4604      	mov	r4, r0
 80135dc:	4608      	mov	r0, r1
 80135de:	602b      	str	r3, [r5, #0]
 80135e0:	f7ef fa1b 	bl	8002a1a <_close>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_close_r+0x1a>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_close_r+0x1a>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	20004f2c 	.word	0x20004f2c

080135f4 <__sflush_r>:
 80135f4:	898a      	ldrh	r2, [r1, #12]
 80135f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135fa:	4605      	mov	r5, r0
 80135fc:	0710      	lsls	r0, r2, #28
 80135fe:	460c      	mov	r4, r1
 8013600:	d458      	bmi.n	80136b4 <__sflush_r+0xc0>
 8013602:	684b      	ldr	r3, [r1, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	dc05      	bgt.n	8013614 <__sflush_r+0x20>
 8013608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801360a:	2b00      	cmp	r3, #0
 801360c:	dc02      	bgt.n	8013614 <__sflush_r+0x20>
 801360e:	2000      	movs	r0, #0
 8013610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013616:	2e00      	cmp	r6, #0
 8013618:	d0f9      	beq.n	801360e <__sflush_r+0x1a>
 801361a:	2300      	movs	r3, #0
 801361c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013620:	682f      	ldr	r7, [r5, #0]
 8013622:	602b      	str	r3, [r5, #0]
 8013624:	d032      	beq.n	801368c <__sflush_r+0x98>
 8013626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	075a      	lsls	r2, r3, #29
 801362c:	d505      	bpl.n	801363a <__sflush_r+0x46>
 801362e:	6863      	ldr	r3, [r4, #4]
 8013630:	1ac0      	subs	r0, r0, r3
 8013632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013634:	b10b      	cbz	r3, 801363a <__sflush_r+0x46>
 8013636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013638:	1ac0      	subs	r0, r0, r3
 801363a:	2300      	movs	r3, #0
 801363c:	4602      	mov	r2, r0
 801363e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013640:	6a21      	ldr	r1, [r4, #32]
 8013642:	4628      	mov	r0, r5
 8013644:	47b0      	blx	r6
 8013646:	1c43      	adds	r3, r0, #1
 8013648:	89a3      	ldrh	r3, [r4, #12]
 801364a:	d106      	bne.n	801365a <__sflush_r+0x66>
 801364c:	6829      	ldr	r1, [r5, #0]
 801364e:	291d      	cmp	r1, #29
 8013650:	d82c      	bhi.n	80136ac <__sflush_r+0xb8>
 8013652:	4a2a      	ldr	r2, [pc, #168]	; (80136fc <__sflush_r+0x108>)
 8013654:	40ca      	lsrs	r2, r1
 8013656:	07d6      	lsls	r6, r2, #31
 8013658:	d528      	bpl.n	80136ac <__sflush_r+0xb8>
 801365a:	2200      	movs	r2, #0
 801365c:	6062      	str	r2, [r4, #4]
 801365e:	04d9      	lsls	r1, r3, #19
 8013660:	6922      	ldr	r2, [r4, #16]
 8013662:	6022      	str	r2, [r4, #0]
 8013664:	d504      	bpl.n	8013670 <__sflush_r+0x7c>
 8013666:	1c42      	adds	r2, r0, #1
 8013668:	d101      	bne.n	801366e <__sflush_r+0x7a>
 801366a:	682b      	ldr	r3, [r5, #0]
 801366c:	b903      	cbnz	r3, 8013670 <__sflush_r+0x7c>
 801366e:	6560      	str	r0, [r4, #84]	; 0x54
 8013670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013672:	602f      	str	r7, [r5, #0]
 8013674:	2900      	cmp	r1, #0
 8013676:	d0ca      	beq.n	801360e <__sflush_r+0x1a>
 8013678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801367c:	4299      	cmp	r1, r3
 801367e:	d002      	beq.n	8013686 <__sflush_r+0x92>
 8013680:	4628      	mov	r0, r5
 8013682:	f000 f905 	bl	8013890 <_free_r>
 8013686:	2000      	movs	r0, #0
 8013688:	6360      	str	r0, [r4, #52]	; 0x34
 801368a:	e7c1      	b.n	8013610 <__sflush_r+0x1c>
 801368c:	6a21      	ldr	r1, [r4, #32]
 801368e:	2301      	movs	r3, #1
 8013690:	4628      	mov	r0, r5
 8013692:	47b0      	blx	r6
 8013694:	1c41      	adds	r1, r0, #1
 8013696:	d1c7      	bne.n	8013628 <__sflush_r+0x34>
 8013698:	682b      	ldr	r3, [r5, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d0c4      	beq.n	8013628 <__sflush_r+0x34>
 801369e:	2b1d      	cmp	r3, #29
 80136a0:	d001      	beq.n	80136a6 <__sflush_r+0xb2>
 80136a2:	2b16      	cmp	r3, #22
 80136a4:	d101      	bne.n	80136aa <__sflush_r+0xb6>
 80136a6:	602f      	str	r7, [r5, #0]
 80136a8:	e7b1      	b.n	801360e <__sflush_r+0x1a>
 80136aa:	89a3      	ldrh	r3, [r4, #12]
 80136ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136b0:	81a3      	strh	r3, [r4, #12]
 80136b2:	e7ad      	b.n	8013610 <__sflush_r+0x1c>
 80136b4:	690f      	ldr	r7, [r1, #16]
 80136b6:	2f00      	cmp	r7, #0
 80136b8:	d0a9      	beq.n	801360e <__sflush_r+0x1a>
 80136ba:	0793      	lsls	r3, r2, #30
 80136bc:	680e      	ldr	r6, [r1, #0]
 80136be:	bf08      	it	eq
 80136c0:	694b      	ldreq	r3, [r1, #20]
 80136c2:	600f      	str	r7, [r1, #0]
 80136c4:	bf18      	it	ne
 80136c6:	2300      	movne	r3, #0
 80136c8:	eba6 0807 	sub.w	r8, r6, r7
 80136cc:	608b      	str	r3, [r1, #8]
 80136ce:	f1b8 0f00 	cmp.w	r8, #0
 80136d2:	dd9c      	ble.n	801360e <__sflush_r+0x1a>
 80136d4:	6a21      	ldr	r1, [r4, #32]
 80136d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136d8:	4643      	mov	r3, r8
 80136da:	463a      	mov	r2, r7
 80136dc:	4628      	mov	r0, r5
 80136de:	47b0      	blx	r6
 80136e0:	2800      	cmp	r0, #0
 80136e2:	dc06      	bgt.n	80136f2 <__sflush_r+0xfe>
 80136e4:	89a3      	ldrh	r3, [r4, #12]
 80136e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136ea:	81a3      	strh	r3, [r4, #12]
 80136ec:	f04f 30ff 	mov.w	r0, #4294967295
 80136f0:	e78e      	b.n	8013610 <__sflush_r+0x1c>
 80136f2:	4407      	add	r7, r0
 80136f4:	eba8 0800 	sub.w	r8, r8, r0
 80136f8:	e7e9      	b.n	80136ce <__sflush_r+0xda>
 80136fa:	bf00      	nop
 80136fc:	20400001 	.word	0x20400001

08013700 <_fflush_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	690b      	ldr	r3, [r1, #16]
 8013704:	4605      	mov	r5, r0
 8013706:	460c      	mov	r4, r1
 8013708:	b913      	cbnz	r3, 8013710 <_fflush_r+0x10>
 801370a:	2500      	movs	r5, #0
 801370c:	4628      	mov	r0, r5
 801370e:	bd38      	pop	{r3, r4, r5, pc}
 8013710:	b118      	cbz	r0, 801371a <_fflush_r+0x1a>
 8013712:	6983      	ldr	r3, [r0, #24]
 8013714:	b90b      	cbnz	r3, 801371a <_fflush_r+0x1a>
 8013716:	f7fe ffc5 	bl	80126a4 <__sinit>
 801371a:	4b14      	ldr	r3, [pc, #80]	; (801376c <_fflush_r+0x6c>)
 801371c:	429c      	cmp	r4, r3
 801371e:	d11b      	bne.n	8013758 <_fflush_r+0x58>
 8013720:	686c      	ldr	r4, [r5, #4]
 8013722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d0ef      	beq.n	801370a <_fflush_r+0xa>
 801372a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801372c:	07d0      	lsls	r0, r2, #31
 801372e:	d404      	bmi.n	801373a <_fflush_r+0x3a>
 8013730:	0599      	lsls	r1, r3, #22
 8013732:	d402      	bmi.n	801373a <_fflush_r+0x3a>
 8013734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013736:	f7ff f88a 	bl	801284e <__retarget_lock_acquire_recursive>
 801373a:	4628      	mov	r0, r5
 801373c:	4621      	mov	r1, r4
 801373e:	f7ff ff59 	bl	80135f4 <__sflush_r>
 8013742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013744:	07da      	lsls	r2, r3, #31
 8013746:	4605      	mov	r5, r0
 8013748:	d4e0      	bmi.n	801370c <_fflush_r+0xc>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	059b      	lsls	r3, r3, #22
 801374e:	d4dd      	bmi.n	801370c <_fflush_r+0xc>
 8013750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013752:	f7ff f87d 	bl	8012850 <__retarget_lock_release_recursive>
 8013756:	e7d9      	b.n	801370c <_fflush_r+0xc>
 8013758:	4b05      	ldr	r3, [pc, #20]	; (8013770 <_fflush_r+0x70>)
 801375a:	429c      	cmp	r4, r3
 801375c:	d101      	bne.n	8013762 <_fflush_r+0x62>
 801375e:	68ac      	ldr	r4, [r5, #8]
 8013760:	e7df      	b.n	8013722 <_fflush_r+0x22>
 8013762:	4b04      	ldr	r3, [pc, #16]	; (8013774 <_fflush_r+0x74>)
 8013764:	429c      	cmp	r4, r3
 8013766:	bf08      	it	eq
 8013768:	68ec      	ldreq	r4, [r5, #12]
 801376a:	e7da      	b.n	8013722 <_fflush_r+0x22>
 801376c:	08015b20 	.word	0x08015b20
 8013770:	08015b40 	.word	0x08015b40
 8013774:	08015b00 	.word	0x08015b00

08013778 <_lseek_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4d07      	ldr	r5, [pc, #28]	; (8013798 <_lseek_r+0x20>)
 801377c:	4604      	mov	r4, r0
 801377e:	4608      	mov	r0, r1
 8013780:	4611      	mov	r1, r2
 8013782:	2200      	movs	r2, #0
 8013784:	602a      	str	r2, [r5, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	f7ef f96e 	bl	8002a68 <_lseek>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_lseek_r+0x1e>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	b103      	cbz	r3, 8013796 <_lseek_r+0x1e>
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	20004f2c 	.word	0x20004f2c

0801379c <__swhatbuf_r>:
 801379c:	b570      	push	{r4, r5, r6, lr}
 801379e:	460e      	mov	r6, r1
 80137a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137a4:	2900      	cmp	r1, #0
 80137a6:	b096      	sub	sp, #88	; 0x58
 80137a8:	4614      	mov	r4, r2
 80137aa:	461d      	mov	r5, r3
 80137ac:	da08      	bge.n	80137c0 <__swhatbuf_r+0x24>
 80137ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80137b2:	2200      	movs	r2, #0
 80137b4:	602a      	str	r2, [r5, #0]
 80137b6:	061a      	lsls	r2, r3, #24
 80137b8:	d410      	bmi.n	80137dc <__swhatbuf_r+0x40>
 80137ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137be:	e00e      	b.n	80137de <__swhatbuf_r+0x42>
 80137c0:	466a      	mov	r2, sp
 80137c2:	f000 fa91 	bl	8013ce8 <_fstat_r>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	dbf1      	blt.n	80137ae <__swhatbuf_r+0x12>
 80137ca:	9a01      	ldr	r2, [sp, #4]
 80137cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137d4:	425a      	negs	r2, r3
 80137d6:	415a      	adcs	r2, r3
 80137d8:	602a      	str	r2, [r5, #0]
 80137da:	e7ee      	b.n	80137ba <__swhatbuf_r+0x1e>
 80137dc:	2340      	movs	r3, #64	; 0x40
 80137de:	2000      	movs	r0, #0
 80137e0:	6023      	str	r3, [r4, #0]
 80137e2:	b016      	add	sp, #88	; 0x58
 80137e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080137e8 <__smakebuf_r>:
 80137e8:	898b      	ldrh	r3, [r1, #12]
 80137ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137ec:	079d      	lsls	r5, r3, #30
 80137ee:	4606      	mov	r6, r0
 80137f0:	460c      	mov	r4, r1
 80137f2:	d507      	bpl.n	8013804 <__smakebuf_r+0x1c>
 80137f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137f8:	6023      	str	r3, [r4, #0]
 80137fa:	6123      	str	r3, [r4, #16]
 80137fc:	2301      	movs	r3, #1
 80137fe:	6163      	str	r3, [r4, #20]
 8013800:	b002      	add	sp, #8
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	ab01      	add	r3, sp, #4
 8013806:	466a      	mov	r2, sp
 8013808:	f7ff ffc8 	bl	801379c <__swhatbuf_r>
 801380c:	9900      	ldr	r1, [sp, #0]
 801380e:	4605      	mov	r5, r0
 8013810:	4630      	mov	r0, r6
 8013812:	f7ff f87f 	bl	8012914 <_malloc_r>
 8013816:	b948      	cbnz	r0, 801382c <__smakebuf_r+0x44>
 8013818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381c:	059a      	lsls	r2, r3, #22
 801381e:	d4ef      	bmi.n	8013800 <__smakebuf_r+0x18>
 8013820:	f023 0303 	bic.w	r3, r3, #3
 8013824:	f043 0302 	orr.w	r3, r3, #2
 8013828:	81a3      	strh	r3, [r4, #12]
 801382a:	e7e3      	b.n	80137f4 <__smakebuf_r+0xc>
 801382c:	4b0d      	ldr	r3, [pc, #52]	; (8013864 <__smakebuf_r+0x7c>)
 801382e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013830:	89a3      	ldrh	r3, [r4, #12]
 8013832:	6020      	str	r0, [r4, #0]
 8013834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013838:	81a3      	strh	r3, [r4, #12]
 801383a:	9b00      	ldr	r3, [sp, #0]
 801383c:	6163      	str	r3, [r4, #20]
 801383e:	9b01      	ldr	r3, [sp, #4]
 8013840:	6120      	str	r0, [r4, #16]
 8013842:	b15b      	cbz	r3, 801385c <__smakebuf_r+0x74>
 8013844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013848:	4630      	mov	r0, r6
 801384a:	f000 fa5f 	bl	8013d0c <_isatty_r>
 801384e:	b128      	cbz	r0, 801385c <__smakebuf_r+0x74>
 8013850:	89a3      	ldrh	r3, [r4, #12]
 8013852:	f023 0303 	bic.w	r3, r3, #3
 8013856:	f043 0301 	orr.w	r3, r3, #1
 801385a:	81a3      	strh	r3, [r4, #12]
 801385c:	89a0      	ldrh	r0, [r4, #12]
 801385e:	4305      	orrs	r5, r0
 8013860:	81a5      	strh	r5, [r4, #12]
 8013862:	e7cd      	b.n	8013800 <__smakebuf_r+0x18>
 8013864:	0801263d 	.word	0x0801263d

08013868 <malloc>:
 8013868:	4b02      	ldr	r3, [pc, #8]	; (8013874 <malloc+0xc>)
 801386a:	4601      	mov	r1, r0
 801386c:	6818      	ldr	r0, [r3, #0]
 801386e:	f7ff b851 	b.w	8012914 <_malloc_r>
 8013872:	bf00      	nop
 8013874:	20000054 	.word	0x20000054

08013878 <__malloc_lock>:
 8013878:	4801      	ldr	r0, [pc, #4]	; (8013880 <__malloc_lock+0x8>)
 801387a:	f7fe bfe8 	b.w	801284e <__retarget_lock_acquire_recursive>
 801387e:	bf00      	nop
 8013880:	20004f20 	.word	0x20004f20

08013884 <__malloc_unlock>:
 8013884:	4801      	ldr	r0, [pc, #4]	; (801388c <__malloc_unlock+0x8>)
 8013886:	f7fe bfe3 	b.w	8012850 <__retarget_lock_release_recursive>
 801388a:	bf00      	nop
 801388c:	20004f20 	.word	0x20004f20

08013890 <_free_r>:
 8013890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013892:	2900      	cmp	r1, #0
 8013894:	d044      	beq.n	8013920 <_free_r+0x90>
 8013896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801389a:	9001      	str	r0, [sp, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	f1a1 0404 	sub.w	r4, r1, #4
 80138a2:	bfb8      	it	lt
 80138a4:	18e4      	addlt	r4, r4, r3
 80138a6:	f7ff ffe7 	bl	8013878 <__malloc_lock>
 80138aa:	4a1e      	ldr	r2, [pc, #120]	; (8013924 <_free_r+0x94>)
 80138ac:	9801      	ldr	r0, [sp, #4]
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	b933      	cbnz	r3, 80138c0 <_free_r+0x30>
 80138b2:	6063      	str	r3, [r4, #4]
 80138b4:	6014      	str	r4, [r2, #0]
 80138b6:	b003      	add	sp, #12
 80138b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138bc:	f7ff bfe2 	b.w	8013884 <__malloc_unlock>
 80138c0:	42a3      	cmp	r3, r4
 80138c2:	d908      	bls.n	80138d6 <_free_r+0x46>
 80138c4:	6825      	ldr	r5, [r4, #0]
 80138c6:	1961      	adds	r1, r4, r5
 80138c8:	428b      	cmp	r3, r1
 80138ca:	bf01      	itttt	eq
 80138cc:	6819      	ldreq	r1, [r3, #0]
 80138ce:	685b      	ldreq	r3, [r3, #4]
 80138d0:	1949      	addeq	r1, r1, r5
 80138d2:	6021      	streq	r1, [r4, #0]
 80138d4:	e7ed      	b.n	80138b2 <_free_r+0x22>
 80138d6:	461a      	mov	r2, r3
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	b10b      	cbz	r3, 80138e0 <_free_r+0x50>
 80138dc:	42a3      	cmp	r3, r4
 80138de:	d9fa      	bls.n	80138d6 <_free_r+0x46>
 80138e0:	6811      	ldr	r1, [r2, #0]
 80138e2:	1855      	adds	r5, r2, r1
 80138e4:	42a5      	cmp	r5, r4
 80138e6:	d10b      	bne.n	8013900 <_free_r+0x70>
 80138e8:	6824      	ldr	r4, [r4, #0]
 80138ea:	4421      	add	r1, r4
 80138ec:	1854      	adds	r4, r2, r1
 80138ee:	42a3      	cmp	r3, r4
 80138f0:	6011      	str	r1, [r2, #0]
 80138f2:	d1e0      	bne.n	80138b6 <_free_r+0x26>
 80138f4:	681c      	ldr	r4, [r3, #0]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	6053      	str	r3, [r2, #4]
 80138fa:	4421      	add	r1, r4
 80138fc:	6011      	str	r1, [r2, #0]
 80138fe:	e7da      	b.n	80138b6 <_free_r+0x26>
 8013900:	d902      	bls.n	8013908 <_free_r+0x78>
 8013902:	230c      	movs	r3, #12
 8013904:	6003      	str	r3, [r0, #0]
 8013906:	e7d6      	b.n	80138b6 <_free_r+0x26>
 8013908:	6825      	ldr	r5, [r4, #0]
 801390a:	1961      	adds	r1, r4, r5
 801390c:	428b      	cmp	r3, r1
 801390e:	bf04      	itt	eq
 8013910:	6819      	ldreq	r1, [r3, #0]
 8013912:	685b      	ldreq	r3, [r3, #4]
 8013914:	6063      	str	r3, [r4, #4]
 8013916:	bf04      	itt	eq
 8013918:	1949      	addeq	r1, r1, r5
 801391a:	6021      	streq	r1, [r4, #0]
 801391c:	6054      	str	r4, [r2, #4]
 801391e:	e7ca      	b.n	80138b6 <_free_r+0x26>
 8013920:	b003      	add	sp, #12
 8013922:	bd30      	pop	{r4, r5, pc}
 8013924:	20004f24 	.word	0x20004f24

08013928 <_realloc_r>:
 8013928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392c:	4680      	mov	r8, r0
 801392e:	4614      	mov	r4, r2
 8013930:	460e      	mov	r6, r1
 8013932:	b921      	cbnz	r1, 801393e <_realloc_r+0x16>
 8013934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013938:	4611      	mov	r1, r2
 801393a:	f7fe bfeb 	b.w	8012914 <_malloc_r>
 801393e:	b92a      	cbnz	r2, 801394c <_realloc_r+0x24>
 8013940:	f7ff ffa6 	bl	8013890 <_free_r>
 8013944:	4625      	mov	r5, r4
 8013946:	4628      	mov	r0, r5
 8013948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801394c:	f000 f9ee 	bl	8013d2c <_malloc_usable_size_r>
 8013950:	4284      	cmp	r4, r0
 8013952:	4607      	mov	r7, r0
 8013954:	d802      	bhi.n	801395c <_realloc_r+0x34>
 8013956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801395a:	d812      	bhi.n	8013982 <_realloc_r+0x5a>
 801395c:	4621      	mov	r1, r4
 801395e:	4640      	mov	r0, r8
 8013960:	f7fe ffd8 	bl	8012914 <_malloc_r>
 8013964:	4605      	mov	r5, r0
 8013966:	2800      	cmp	r0, #0
 8013968:	d0ed      	beq.n	8013946 <_realloc_r+0x1e>
 801396a:	42bc      	cmp	r4, r7
 801396c:	4622      	mov	r2, r4
 801396e:	4631      	mov	r1, r6
 8013970:	bf28      	it	cs
 8013972:	463a      	movcs	r2, r7
 8013974:	f7fe ff7d 	bl	8012872 <memcpy>
 8013978:	4631      	mov	r1, r6
 801397a:	4640      	mov	r0, r8
 801397c:	f7ff ff88 	bl	8013890 <_free_r>
 8013980:	e7e1      	b.n	8013946 <_realloc_r+0x1e>
 8013982:	4635      	mov	r5, r6
 8013984:	e7df      	b.n	8013946 <_realloc_r+0x1e>

08013986 <__ssputs_r>:
 8013986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801398a:	688e      	ldr	r6, [r1, #8]
 801398c:	429e      	cmp	r6, r3
 801398e:	4682      	mov	sl, r0
 8013990:	460c      	mov	r4, r1
 8013992:	4690      	mov	r8, r2
 8013994:	461f      	mov	r7, r3
 8013996:	d838      	bhi.n	8013a0a <__ssputs_r+0x84>
 8013998:	898a      	ldrh	r2, [r1, #12]
 801399a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801399e:	d032      	beq.n	8013a06 <__ssputs_r+0x80>
 80139a0:	6825      	ldr	r5, [r4, #0]
 80139a2:	6909      	ldr	r1, [r1, #16]
 80139a4:	eba5 0901 	sub.w	r9, r5, r1
 80139a8:	6965      	ldr	r5, [r4, #20]
 80139aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139b2:	3301      	adds	r3, #1
 80139b4:	444b      	add	r3, r9
 80139b6:	106d      	asrs	r5, r5, #1
 80139b8:	429d      	cmp	r5, r3
 80139ba:	bf38      	it	cc
 80139bc:	461d      	movcc	r5, r3
 80139be:	0553      	lsls	r3, r2, #21
 80139c0:	d531      	bpl.n	8013a26 <__ssputs_r+0xa0>
 80139c2:	4629      	mov	r1, r5
 80139c4:	f7fe ffa6 	bl	8012914 <_malloc_r>
 80139c8:	4606      	mov	r6, r0
 80139ca:	b950      	cbnz	r0, 80139e2 <__ssputs_r+0x5c>
 80139cc:	230c      	movs	r3, #12
 80139ce:	f8ca 3000 	str.w	r3, [sl]
 80139d2:	89a3      	ldrh	r3, [r4, #12]
 80139d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139d8:	81a3      	strh	r3, [r4, #12]
 80139da:	f04f 30ff 	mov.w	r0, #4294967295
 80139de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e2:	6921      	ldr	r1, [r4, #16]
 80139e4:	464a      	mov	r2, r9
 80139e6:	f7fe ff44 	bl	8012872 <memcpy>
 80139ea:	89a3      	ldrh	r3, [r4, #12]
 80139ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80139f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139f4:	81a3      	strh	r3, [r4, #12]
 80139f6:	6126      	str	r6, [r4, #16]
 80139f8:	6165      	str	r5, [r4, #20]
 80139fa:	444e      	add	r6, r9
 80139fc:	eba5 0509 	sub.w	r5, r5, r9
 8013a00:	6026      	str	r6, [r4, #0]
 8013a02:	60a5      	str	r5, [r4, #8]
 8013a04:	463e      	mov	r6, r7
 8013a06:	42be      	cmp	r6, r7
 8013a08:	d900      	bls.n	8013a0c <__ssputs_r+0x86>
 8013a0a:	463e      	mov	r6, r7
 8013a0c:	6820      	ldr	r0, [r4, #0]
 8013a0e:	4632      	mov	r2, r6
 8013a10:	4641      	mov	r1, r8
 8013a12:	f7fe ff3c 	bl	801288e <memmove>
 8013a16:	68a3      	ldr	r3, [r4, #8]
 8013a18:	1b9b      	subs	r3, r3, r6
 8013a1a:	60a3      	str	r3, [r4, #8]
 8013a1c:	6823      	ldr	r3, [r4, #0]
 8013a1e:	4433      	add	r3, r6
 8013a20:	6023      	str	r3, [r4, #0]
 8013a22:	2000      	movs	r0, #0
 8013a24:	e7db      	b.n	80139de <__ssputs_r+0x58>
 8013a26:	462a      	mov	r2, r5
 8013a28:	f7ff ff7e 	bl	8013928 <_realloc_r>
 8013a2c:	4606      	mov	r6, r0
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d1e1      	bne.n	80139f6 <__ssputs_r+0x70>
 8013a32:	6921      	ldr	r1, [r4, #16]
 8013a34:	4650      	mov	r0, sl
 8013a36:	f7ff ff2b 	bl	8013890 <_free_r>
 8013a3a:	e7c7      	b.n	80139cc <__ssputs_r+0x46>

08013a3c <_svfiprintf_r>:
 8013a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a40:	4698      	mov	r8, r3
 8013a42:	898b      	ldrh	r3, [r1, #12]
 8013a44:	061b      	lsls	r3, r3, #24
 8013a46:	b09d      	sub	sp, #116	; 0x74
 8013a48:	4607      	mov	r7, r0
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	4614      	mov	r4, r2
 8013a4e:	d50e      	bpl.n	8013a6e <_svfiprintf_r+0x32>
 8013a50:	690b      	ldr	r3, [r1, #16]
 8013a52:	b963      	cbnz	r3, 8013a6e <_svfiprintf_r+0x32>
 8013a54:	2140      	movs	r1, #64	; 0x40
 8013a56:	f7fe ff5d 	bl	8012914 <_malloc_r>
 8013a5a:	6028      	str	r0, [r5, #0]
 8013a5c:	6128      	str	r0, [r5, #16]
 8013a5e:	b920      	cbnz	r0, 8013a6a <_svfiprintf_r+0x2e>
 8013a60:	230c      	movs	r3, #12
 8013a62:	603b      	str	r3, [r7, #0]
 8013a64:	f04f 30ff 	mov.w	r0, #4294967295
 8013a68:	e0d1      	b.n	8013c0e <_svfiprintf_r+0x1d2>
 8013a6a:	2340      	movs	r3, #64	; 0x40
 8013a6c:	616b      	str	r3, [r5, #20]
 8013a6e:	2300      	movs	r3, #0
 8013a70:	9309      	str	r3, [sp, #36]	; 0x24
 8013a72:	2320      	movs	r3, #32
 8013a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a7c:	2330      	movs	r3, #48	; 0x30
 8013a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c28 <_svfiprintf_r+0x1ec>
 8013a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a86:	f04f 0901 	mov.w	r9, #1
 8013a8a:	4623      	mov	r3, r4
 8013a8c:	469a      	mov	sl, r3
 8013a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a92:	b10a      	cbz	r2, 8013a98 <_svfiprintf_r+0x5c>
 8013a94:	2a25      	cmp	r2, #37	; 0x25
 8013a96:	d1f9      	bne.n	8013a8c <_svfiprintf_r+0x50>
 8013a98:	ebba 0b04 	subs.w	fp, sl, r4
 8013a9c:	d00b      	beq.n	8013ab6 <_svfiprintf_r+0x7a>
 8013a9e:	465b      	mov	r3, fp
 8013aa0:	4622      	mov	r2, r4
 8013aa2:	4629      	mov	r1, r5
 8013aa4:	4638      	mov	r0, r7
 8013aa6:	f7ff ff6e 	bl	8013986 <__ssputs_r>
 8013aaa:	3001      	adds	r0, #1
 8013aac:	f000 80aa 	beq.w	8013c04 <_svfiprintf_r+0x1c8>
 8013ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ab2:	445a      	add	r2, fp
 8013ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8013ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f000 80a2 	beq.w	8013c04 <_svfiprintf_r+0x1c8>
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013aca:	f10a 0a01 	add.w	sl, sl, #1
 8013ace:	9304      	str	r3, [sp, #16]
 8013ad0:	9307      	str	r3, [sp, #28]
 8013ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8013ad8:	4654      	mov	r4, sl
 8013ada:	2205      	movs	r2, #5
 8013adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ae0:	4851      	ldr	r0, [pc, #324]	; (8013c28 <_svfiprintf_r+0x1ec>)
 8013ae2:	f7ec fb7d 	bl	80001e0 <memchr>
 8013ae6:	9a04      	ldr	r2, [sp, #16]
 8013ae8:	b9d8      	cbnz	r0, 8013b22 <_svfiprintf_r+0xe6>
 8013aea:	06d0      	lsls	r0, r2, #27
 8013aec:	bf44      	itt	mi
 8013aee:	2320      	movmi	r3, #32
 8013af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013af4:	0711      	lsls	r1, r2, #28
 8013af6:	bf44      	itt	mi
 8013af8:	232b      	movmi	r3, #43	; 0x2b
 8013afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013afe:	f89a 3000 	ldrb.w	r3, [sl]
 8013b02:	2b2a      	cmp	r3, #42	; 0x2a
 8013b04:	d015      	beq.n	8013b32 <_svfiprintf_r+0xf6>
 8013b06:	9a07      	ldr	r2, [sp, #28]
 8013b08:	4654      	mov	r4, sl
 8013b0a:	2000      	movs	r0, #0
 8013b0c:	f04f 0c0a 	mov.w	ip, #10
 8013b10:	4621      	mov	r1, r4
 8013b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b16:	3b30      	subs	r3, #48	; 0x30
 8013b18:	2b09      	cmp	r3, #9
 8013b1a:	d94e      	bls.n	8013bba <_svfiprintf_r+0x17e>
 8013b1c:	b1b0      	cbz	r0, 8013b4c <_svfiprintf_r+0x110>
 8013b1e:	9207      	str	r2, [sp, #28]
 8013b20:	e014      	b.n	8013b4c <_svfiprintf_r+0x110>
 8013b22:	eba0 0308 	sub.w	r3, r0, r8
 8013b26:	fa09 f303 	lsl.w	r3, r9, r3
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	46a2      	mov	sl, r4
 8013b30:	e7d2      	b.n	8013ad8 <_svfiprintf_r+0x9c>
 8013b32:	9b03      	ldr	r3, [sp, #12]
 8013b34:	1d19      	adds	r1, r3, #4
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	9103      	str	r1, [sp, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	bfbb      	ittet	lt
 8013b3e:	425b      	neglt	r3, r3
 8013b40:	f042 0202 	orrlt.w	r2, r2, #2
 8013b44:	9307      	strge	r3, [sp, #28]
 8013b46:	9307      	strlt	r3, [sp, #28]
 8013b48:	bfb8      	it	lt
 8013b4a:	9204      	strlt	r2, [sp, #16]
 8013b4c:	7823      	ldrb	r3, [r4, #0]
 8013b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8013b50:	d10c      	bne.n	8013b6c <_svfiprintf_r+0x130>
 8013b52:	7863      	ldrb	r3, [r4, #1]
 8013b54:	2b2a      	cmp	r3, #42	; 0x2a
 8013b56:	d135      	bne.n	8013bc4 <_svfiprintf_r+0x188>
 8013b58:	9b03      	ldr	r3, [sp, #12]
 8013b5a:	1d1a      	adds	r2, r3, #4
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	9203      	str	r2, [sp, #12]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	bfb8      	it	lt
 8013b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b68:	3402      	adds	r4, #2
 8013b6a:	9305      	str	r3, [sp, #20]
 8013b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c38 <_svfiprintf_r+0x1fc>
 8013b70:	7821      	ldrb	r1, [r4, #0]
 8013b72:	2203      	movs	r2, #3
 8013b74:	4650      	mov	r0, sl
 8013b76:	f7ec fb33 	bl	80001e0 <memchr>
 8013b7a:	b140      	cbz	r0, 8013b8e <_svfiprintf_r+0x152>
 8013b7c:	2340      	movs	r3, #64	; 0x40
 8013b7e:	eba0 000a 	sub.w	r0, r0, sl
 8013b82:	fa03 f000 	lsl.w	r0, r3, r0
 8013b86:	9b04      	ldr	r3, [sp, #16]
 8013b88:	4303      	orrs	r3, r0
 8013b8a:	3401      	adds	r4, #1
 8013b8c:	9304      	str	r3, [sp, #16]
 8013b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b92:	4826      	ldr	r0, [pc, #152]	; (8013c2c <_svfiprintf_r+0x1f0>)
 8013b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b98:	2206      	movs	r2, #6
 8013b9a:	f7ec fb21 	bl	80001e0 <memchr>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d038      	beq.n	8013c14 <_svfiprintf_r+0x1d8>
 8013ba2:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <_svfiprintf_r+0x1f4>)
 8013ba4:	bb1b      	cbnz	r3, 8013bee <_svfiprintf_r+0x1b2>
 8013ba6:	9b03      	ldr	r3, [sp, #12]
 8013ba8:	3307      	adds	r3, #7
 8013baa:	f023 0307 	bic.w	r3, r3, #7
 8013bae:	3308      	adds	r3, #8
 8013bb0:	9303      	str	r3, [sp, #12]
 8013bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bb4:	4433      	add	r3, r6
 8013bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bb8:	e767      	b.n	8013a8a <_svfiprintf_r+0x4e>
 8013bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bbe:	460c      	mov	r4, r1
 8013bc0:	2001      	movs	r0, #1
 8013bc2:	e7a5      	b.n	8013b10 <_svfiprintf_r+0xd4>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	3401      	adds	r4, #1
 8013bc8:	9305      	str	r3, [sp, #20]
 8013bca:	4619      	mov	r1, r3
 8013bcc:	f04f 0c0a 	mov.w	ip, #10
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bd6:	3a30      	subs	r2, #48	; 0x30
 8013bd8:	2a09      	cmp	r2, #9
 8013bda:	d903      	bls.n	8013be4 <_svfiprintf_r+0x1a8>
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d0c5      	beq.n	8013b6c <_svfiprintf_r+0x130>
 8013be0:	9105      	str	r1, [sp, #20]
 8013be2:	e7c3      	b.n	8013b6c <_svfiprintf_r+0x130>
 8013be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013be8:	4604      	mov	r4, r0
 8013bea:	2301      	movs	r3, #1
 8013bec:	e7f0      	b.n	8013bd0 <_svfiprintf_r+0x194>
 8013bee:	ab03      	add	r3, sp, #12
 8013bf0:	9300      	str	r3, [sp, #0]
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	4b0f      	ldr	r3, [pc, #60]	; (8013c34 <_svfiprintf_r+0x1f8>)
 8013bf6:	a904      	add	r1, sp, #16
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	f3af 8000 	nop.w
 8013bfe:	1c42      	adds	r2, r0, #1
 8013c00:	4606      	mov	r6, r0
 8013c02:	d1d6      	bne.n	8013bb2 <_svfiprintf_r+0x176>
 8013c04:	89ab      	ldrh	r3, [r5, #12]
 8013c06:	065b      	lsls	r3, r3, #25
 8013c08:	f53f af2c 	bmi.w	8013a64 <_svfiprintf_r+0x28>
 8013c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c0e:	b01d      	add	sp, #116	; 0x74
 8013c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c14:	ab03      	add	r3, sp, #12
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	462a      	mov	r2, r5
 8013c1a:	4b06      	ldr	r3, [pc, #24]	; (8013c34 <_svfiprintf_r+0x1f8>)
 8013c1c:	a904      	add	r1, sp, #16
 8013c1e:	4638      	mov	r0, r7
 8013c20:	f7ff f8b4 	bl	8012d8c <_printf_i>
 8013c24:	e7eb      	b.n	8013bfe <_svfiprintf_r+0x1c2>
 8013c26:	bf00      	nop
 8013c28:	08015b64 	.word	0x08015b64
 8013c2c:	08015b6e 	.word	0x08015b6e
 8013c30:	00000000 	.word	0x00000000
 8013c34:	08013987 	.word	0x08013987
 8013c38:	08015b6a 	.word	0x08015b6a

08013c3c <_read_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4d07      	ldr	r5, [pc, #28]	; (8013c5c <_read_r+0x20>)
 8013c40:	4604      	mov	r4, r0
 8013c42:	4608      	mov	r0, r1
 8013c44:	4611      	mov	r1, r2
 8013c46:	2200      	movs	r2, #0
 8013c48:	602a      	str	r2, [r5, #0]
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	f7ee fec8 	bl	80029e0 <_read>
 8013c50:	1c43      	adds	r3, r0, #1
 8013c52:	d102      	bne.n	8013c5a <_read_r+0x1e>
 8013c54:	682b      	ldr	r3, [r5, #0]
 8013c56:	b103      	cbz	r3, 8013c5a <_read_r+0x1e>
 8013c58:	6023      	str	r3, [r4, #0]
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	20004f2c 	.word	0x20004f2c

08013c60 <_raise_r>:
 8013c60:	291f      	cmp	r1, #31
 8013c62:	b538      	push	{r3, r4, r5, lr}
 8013c64:	4604      	mov	r4, r0
 8013c66:	460d      	mov	r5, r1
 8013c68:	d904      	bls.n	8013c74 <_raise_r+0x14>
 8013c6a:	2316      	movs	r3, #22
 8013c6c:	6003      	str	r3, [r0, #0]
 8013c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c72:	bd38      	pop	{r3, r4, r5, pc}
 8013c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c76:	b112      	cbz	r2, 8013c7e <_raise_r+0x1e>
 8013c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c7c:	b94b      	cbnz	r3, 8013c92 <_raise_r+0x32>
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f000 f830 	bl	8013ce4 <_getpid_r>
 8013c84:	462a      	mov	r2, r5
 8013c86:	4601      	mov	r1, r0
 8013c88:	4620      	mov	r0, r4
 8013c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c8e:	f000 b817 	b.w	8013cc0 <_kill_r>
 8013c92:	2b01      	cmp	r3, #1
 8013c94:	d00a      	beq.n	8013cac <_raise_r+0x4c>
 8013c96:	1c59      	adds	r1, r3, #1
 8013c98:	d103      	bne.n	8013ca2 <_raise_r+0x42>
 8013c9a:	2316      	movs	r3, #22
 8013c9c:	6003      	str	r3, [r0, #0]
 8013c9e:	2001      	movs	r0, #1
 8013ca0:	e7e7      	b.n	8013c72 <_raise_r+0x12>
 8013ca2:	2400      	movs	r4, #0
 8013ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ca8:	4628      	mov	r0, r5
 8013caa:	4798      	blx	r3
 8013cac:	2000      	movs	r0, #0
 8013cae:	e7e0      	b.n	8013c72 <_raise_r+0x12>

08013cb0 <raise>:
 8013cb0:	4b02      	ldr	r3, [pc, #8]	; (8013cbc <raise+0xc>)
 8013cb2:	4601      	mov	r1, r0
 8013cb4:	6818      	ldr	r0, [r3, #0]
 8013cb6:	f7ff bfd3 	b.w	8013c60 <_raise_r>
 8013cba:	bf00      	nop
 8013cbc:	20000054 	.word	0x20000054

08013cc0 <_kill_r>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	4d07      	ldr	r5, [pc, #28]	; (8013ce0 <_kill_r+0x20>)
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	4608      	mov	r0, r1
 8013cca:	4611      	mov	r1, r2
 8013ccc:	602b      	str	r3, [r5, #0]
 8013cce:	f7ee fe6d 	bl	80029ac <_kill>
 8013cd2:	1c43      	adds	r3, r0, #1
 8013cd4:	d102      	bne.n	8013cdc <_kill_r+0x1c>
 8013cd6:	682b      	ldr	r3, [r5, #0]
 8013cd8:	b103      	cbz	r3, 8013cdc <_kill_r+0x1c>
 8013cda:	6023      	str	r3, [r4, #0]
 8013cdc:	bd38      	pop	{r3, r4, r5, pc}
 8013cde:	bf00      	nop
 8013ce0:	20004f2c 	.word	0x20004f2c

08013ce4 <_getpid_r>:
 8013ce4:	f7ee be5a 	b.w	800299c <_getpid>

08013ce8 <_fstat_r>:
 8013ce8:	b538      	push	{r3, r4, r5, lr}
 8013cea:	4d07      	ldr	r5, [pc, #28]	; (8013d08 <_fstat_r+0x20>)
 8013cec:	2300      	movs	r3, #0
 8013cee:	4604      	mov	r4, r0
 8013cf0:	4608      	mov	r0, r1
 8013cf2:	4611      	mov	r1, r2
 8013cf4:	602b      	str	r3, [r5, #0]
 8013cf6:	f7ee fe9c 	bl	8002a32 <_fstat>
 8013cfa:	1c43      	adds	r3, r0, #1
 8013cfc:	d102      	bne.n	8013d04 <_fstat_r+0x1c>
 8013cfe:	682b      	ldr	r3, [r5, #0]
 8013d00:	b103      	cbz	r3, 8013d04 <_fstat_r+0x1c>
 8013d02:	6023      	str	r3, [r4, #0]
 8013d04:	bd38      	pop	{r3, r4, r5, pc}
 8013d06:	bf00      	nop
 8013d08:	20004f2c 	.word	0x20004f2c

08013d0c <_isatty_r>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	4d06      	ldr	r5, [pc, #24]	; (8013d28 <_isatty_r+0x1c>)
 8013d10:	2300      	movs	r3, #0
 8013d12:	4604      	mov	r4, r0
 8013d14:	4608      	mov	r0, r1
 8013d16:	602b      	str	r3, [r5, #0]
 8013d18:	f7ee fe9b 	bl	8002a52 <_isatty>
 8013d1c:	1c43      	adds	r3, r0, #1
 8013d1e:	d102      	bne.n	8013d26 <_isatty_r+0x1a>
 8013d20:	682b      	ldr	r3, [r5, #0]
 8013d22:	b103      	cbz	r3, 8013d26 <_isatty_r+0x1a>
 8013d24:	6023      	str	r3, [r4, #0]
 8013d26:	bd38      	pop	{r3, r4, r5, pc}
 8013d28:	20004f2c 	.word	0x20004f2c

08013d2c <_malloc_usable_size_r>:
 8013d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d30:	1f18      	subs	r0, r3, #4
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	bfbc      	itt	lt
 8013d36:	580b      	ldrlt	r3, [r1, r0]
 8013d38:	18c0      	addlt	r0, r0, r3
 8013d3a:	4770      	bx	lr

08013d3c <_init>:
 8013d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d3e:	bf00      	nop
 8013d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d42:	bc08      	pop	{r3}
 8013d44:	469e      	mov	lr, r3
 8013d46:	4770      	bx	lr

08013d48 <_fini>:
 8013d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4a:	bf00      	nop
 8013d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d4e:	bc08      	pop	{r3}
 8013d50:	469e      	mov	lr, r3
 8013d52:	4770      	bx	lr
