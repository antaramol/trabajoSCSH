
nodo_acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016550  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002278  080166e0  080166e0  000266e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018958  08018958  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08018958  08018958  00028958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018960  08018960  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018960  08018960  00028960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018964  08018964  00028964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08018968  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e70  20000228  08018b90  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005098  08018b90  00035098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000398ab  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e11  00000000  00000000  00069b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb0  00000000  00000000  00070918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d18  00000000  00000000  000738c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098f8  00000000  00000000  000765e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034c52  00000000  00000000  0007fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117ecc  00000000  00000000  000b4b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dffc  00000000  00000000  001cca48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080166c8 	.word	0x080166c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080166c8 	.word	0x080166c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ecc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	e000      	b.n	8000ed8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <configureTimerForRunTimeStats>:
void temporizador_func(void *argument);
void clientMQTT_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <configureTimerForRunTimeStats+0x14>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <configureTimerForRunTimeStats+0x18>)
 8000f08:	f007 fd76 	bl	80089f8 <HAL_TIM_Base_Start_IT>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000934 	.word	0x20000934
 8000f14:	20000394 	.word	0x20000394

08000f18 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <getRunTimeCounterValue+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000934 	.word	0x20000934

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f002 fdcb 	bl	8003ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8ae 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fb0c 	bl	8001558 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f40:	f000 f90e 	bl	8001160 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f44:	f000 f944 	bl	80011d0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f48:	f000 f980 	bl	800124c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f4c:	f000 fa02 	bl	8001354 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f50:	f000 fa74 	bl	800143c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f54:	f000 faa2 	bl	800149c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f58:	f000 fad0 	bl	80014fc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000f5c:	f000 fa38 	bl	80013d0 <MX_TIM7_Init>
  MX_RTC_Init();
 8000f60:	f000 f99a 	bl	8001298 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT(LSM6DSL_ODR_52Hz, LSM6DSL_ACC_FULLSCALE_2G);
 8000f64:	2100      	movs	r1, #0
 8000f66:	2030      	movs	r0, #48	; 0x30
 8000f68:	f000 fcb4 	bl	80018d4 <BSP_ACCELERO_Init_INT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <main+0xf8>)
 8000f72:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <main+0xf8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <main+0x52>
	  printf("Acelerometro inicializado\r\n");
 8000f7c:	482b      	ldr	r0, [pc, #172]	; (800102c <main+0xfc>)
 8000f7e:	f013 fb3f 	bl	8014600 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f82:	f00f f871 	bl	8010068 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (2, sizeof(uintptr_t), &print_queue_attributes);
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <main+0x100>)
 8000f88:	2104      	movs	r1, #4
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f00f fa32 	bl	80103f4 <osMessageQueueNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a28      	ldr	r2, [pc, #160]	; (8001034 <main+0x104>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <main+0x108>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f00f fa2a 	bl	80103f4 <osMessageQueueNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a26      	ldr	r2, [pc, #152]	; (800103c <main+0x10c>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of publish_queue */
  publish_queueHandle = osMessageQueueNew (50, sizeof(uintptr_t), &publish_queue_attributes);
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <main+0x110>)
 8000fa8:	2104      	movs	r1, #4
 8000faa:	2032      	movs	r0, #50	; 0x32
 8000fac:	f00f fa22 	bl	80103f4 <osMessageQueueNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <main+0x114>)
 8000fb4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of config_task */
  config_taskHandle = osThreadNew(config_task_func, NULL, &config_task_attributes);
 8000fb6:	4a24      	ldr	r2, [pc, #144]	; (8001048 <main+0x118>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4824      	ldr	r0, [pc, #144]	; (800104c <main+0x11c>)
 8000fbc:	f00f f89e 	bl	80100fc <osThreadNew>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <main+0x120>)
 8000fc4:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <main+0x124>)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <main+0x128>)
 8000fcc:	f00f f896 	bl	80100fc <osThreadNew>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <main+0x12c>)
 8000fd4:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <main+0x130>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <main+0x134>)
 8000fdc:	f00f f88e 	bl	80100fc <osThreadNew>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <main+0x138>)
 8000fe4:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <main+0x13c>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0x140>)
 8000fec:	f00f f886 	bl	80100fc <osThreadNew>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <main+0x144>)
 8000ff4:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <main+0x148>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4820      	ldr	r0, [pc, #128]	; (800107c <main+0x14c>)
 8000ffc:	f00f f87e 	bl	80100fc <osThreadNew>
 8001000:	4603      	mov	r3, r0
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <main+0x150>)
 8001004:	6013      	str	r3, [r2, #0]

  /* creation of clientMQTT */
  clientMQTTHandle = osThreadNew(clientMQTT_func, NULL, &clientMQTT_attributes);
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <main+0x154>)
 8001008:	2100      	movs	r1, #0
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0x158>)
 800100c:	f00f f876 	bl	80100fc <osThreadNew>
 8001010:	4603      	mov	r3, r0
 8001012:	4a1e      	ldr	r2, [pc, #120]	; (800108c <main+0x15c>)
 8001014:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001016:	2201      	movs	r2, #1
 8001018:	491d      	ldr	r1, [pc, #116]	; (8001090 <main+0x160>)
 800101a:	481e      	ldr	r0, [pc, #120]	; (8001094 <main+0x164>)
 800101c:	f008 f8c6 	bl	80091ac <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001020:	f00f f846 	bl	80100b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0xf4>
 8001026:	bf00      	nop
 8001028:	2000092c 	.word	0x2000092c
 800102c:	080167c0 	.word	0x080167c0
 8001030:	080181b4 	.word	0x080181b4
 8001034:	20000908 	.word	0x20000908
 8001038:	080181cc 	.word	0x080181cc
 800103c:	2000090c 	.word	0x2000090c
 8001040:	080181e4 	.word	0x080181e4
 8001044:	20000910 	.word	0x20000910
 8001048:	080180dc 	.word	0x080180dc
 800104c:	08002189 	.word	0x08002189
 8001050:	200008f0 	.word	0x200008f0
 8001054:	08018100 	.word	0x08018100
 8001058:	0800285d 	.word	0x0800285d
 800105c:	200008f4 	.word	0x200008f4
 8001060:	08018124 	.word	0x08018124
 8001064:	08002ae1 	.word	0x08002ae1
 8001068:	200008f8 	.word	0x200008f8
 800106c:	08018148 	.word	0x08018148
 8001070:	08002b49 	.word	0x08002b49
 8001074:	200008fc 	.word	0x200008fc
 8001078:	0801816c 	.word	0x0801816c
 800107c:	08002b99 	.word	0x08002b99
 8001080:	20000900 	.word	0x20000900
 8001084:	08018190 	.word	0x08018190
 8001088:	08002bd5 	.word	0x08002bd5
 800108c:	20000904 	.word	0x20000904
 8001090:	20000938 	.word	0x20000938
 8001094:	200003e0 	.word	0x200003e0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f012 fbc3 	bl	8013832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010be:	f004 f9ef 	bl	80054a0 <HAL_PWREx_ControlVoltageScaling>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c8:	f001 fe54 	bl	8002d74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010cc:	f004 f9ca 	bl	8005464 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <SystemClock_Config+0xc4>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <SystemClock_Config+0xc4>)
 80010d8:	f023 0318 	bic.w	r3, r3, #24
 80010dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80010e0:	231c      	movs	r3, #28
 80010e2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001104:	2328      	movs	r3, #40	; 0x28
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fae3 	bl	80056e4 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001124:	f001 fe26 	bl	8002d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2303      	movs	r3, #3
 800112e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2104      	movs	r1, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f004 feb7 	bl	8005eb4 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800114c:	f001 fe12 	bl	8002d74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001150:	f005 fbd2 	bl	80068f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001154:	bf00      	nop
 8001156:	3758      	adds	r7, #88	; 0x58
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000

08001160 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001166:	4a19      	ldr	r2, [pc, #100]	; (80011cc <MX_DFSDM1_Init+0x6c>)
 8001168:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 800116c:	2201      	movs	r2, #1
 800116e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001178:	2202      	movs	r2, #2
 800117a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 800118a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 8001198:	2204      	movs	r2, #4
 800119a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_DFSDM1_Init+0x68>)
 80011b6:	f002 fdfb 	bl	8003db0 <HAL_DFSDM_ChannelInit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80011c0:	f001 fdd8 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000244 	.word	0x20000244
 80011cc:	40016020 	.word	0x40016020

080011d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_I2C2_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_I2C2_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_I2C2_Init+0x74>)
 80011dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80011e0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_I2C2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_I2C2_Init+0x74>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_I2C2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_I2C2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_I2C2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_I2C2_Init+0x74>)
 800120e:	f003 fa41 	bl	8004694 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001218:	f001 fdac 	bl	8002d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_I2C2_Init+0x74>)
 8001220:	f003 ff40 	bl	80050a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800122a:	f001 fda3 	bl	8002d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C2_Init+0x74>)
 8001232:	f003 ff82 	bl	800513a <HAL_I2CEx_ConfigDigitalFilter>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800123c:	f001 fd9a 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000027c 	.word	0x2000027c
 8001248:	40005800 	.word	0x40005800

0800124c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_QUADSPI_Init+0x44>)
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <MX_QUADSPI_Init+0x48>)
 8001254:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_QUADSPI_Init+0x44>)
 8001258:	2202      	movs	r2, #2
 800125a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_QUADSPI_Init+0x44>)
 800125e:	2204      	movs	r2, #4
 8001260:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_QUADSPI_Init+0x44>)
 8001264:	2210      	movs	r2, #16
 8001266:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_QUADSPI_Init+0x44>)
 800126a:	2217      	movs	r2, #23
 800126c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_QUADSPI_Init+0x44>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_QUADSPI_Init+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_QUADSPI_Init+0x44>)
 800127c:	f004 f976 	bl	800556c <HAL_QSPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001286:	f001 fd75 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002c8 	.word	0x200002c8
 8001294:	a0001000 	.word	0xa0001000

08001298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_RTC_Init+0xb4>)
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <MX_RTC_Init+0xb8>)
 80012b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_RTC_Init+0xb4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_RTC_Init+0xb4>)
 80012be:	227f      	movs	r2, #127	; 0x7f
 80012c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_RTC_Init+0xb4>)
 80012c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_RTC_Init+0xb4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_RTC_Init+0xb4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_RTC_Init+0xb4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_RTC_Init+0xb4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <MX_RTC_Init+0xb4>)
 80012e4:	f005 fcea 	bl	8006cbc <HAL_RTC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80012ee:	f001 fd41 	bl	8002d74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80012f2:	230d      	movs	r3, #13
 80012f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_RTC_Init+0xb4>)
 800130e:	f005 fd50 	bl	8006db2 <HAL_RTC_SetTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001318:	f001 fd2c 	bl	8002d74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800131c:	2301      	movs	r3, #1
 800131e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001320:	2301      	movs	r3, #1
 8001322:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_RTC_Init+0xb4>)
 8001334:	f005 fe36 	bl	8006fa4 <HAL_RTC_SetDate>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800133e:	f001 fd19 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000030c 	.word	0x2000030c
 8001350:	40002800 	.word	0x40002800

08001354 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_SPI3_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_SPI3_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_SPI3_Init+0x74>)
 800136e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001372:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_SPI3_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_SPI3_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_SPI3_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_SPI3_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_SPI3_Init+0x74>)
 80013a2:	2207      	movs	r2, #7
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_SPI3_Init+0x74>)
 80013ae:	2208      	movs	r2, #8
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_SPI3_Init+0x74>)
 80013b4:	f005 ff9c 	bl	80072f0 <HAL_SPI_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013be:	f001 fcd9 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000330 	.word	0x20000330
 80013cc:	40003c00 	.word	0x40003c00

080013d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_TIM7_Init+0x64>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_TIM7_Init+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_TIM7_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_TIM7_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_TIM7_Init+0x64>)
 80013f4:	f240 321f 	movw	r2, #799	; 0x31f
 80013f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM7_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM7_Init+0x64>)
 8001402:	f007 faa2 	bl	800894a <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800140c:	f001 fcb2 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM7_Init+0x64>)
 800141e:	f007 fd3d 	bl	8008e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001428:	f001 fca4 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000394 	.word	0x20000394
 8001438:	40001400 	.word	0x40001400

0800143c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART1_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART1_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART1_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART1_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART1_UART_Init+0x58>)
 8001480:	f007 fdb2 	bl	8008fe8 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f001 fc73 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003e0 	.word	0x200003e0
 8001498:	40013800 	.word	0x40013800

0800149c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <MX_USART3_UART_Init+0x5c>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART3_UART_Init+0x58>)
 80014e0:	f007 fd82 	bl	8008fe8 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014ea:	f001 fc43 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000464 	.word	0x20000464
 80014f8:	40004800 	.word	0x40004800

080014fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001506:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150a:	2206      	movs	r2, #6
 800150c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001510:	2202      	movs	r2, #2
 8001512:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001516:	2202      	movs	r2, #2
 8001518:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001540:	f003 fe47 	bl	80051d2 <HAL_PCD_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800154a:	f001 fc13 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200004e8 	.word	0x200004e8

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4bbb      	ldr	r3, [pc, #748]	; (800185c <MX_GPIO_Init+0x304>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4aba      	ldr	r2, [pc, #744]	; (800185c <MX_GPIO_Init+0x304>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4bb8      	ldr	r3, [pc, #736]	; (800185c <MX_GPIO_Init+0x304>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4bb5      	ldr	r3, [pc, #724]	; (800185c <MX_GPIO_Init+0x304>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4ab4      	ldr	r2, [pc, #720]	; (800185c <MX_GPIO_Init+0x304>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4bb2      	ldr	r3, [pc, #712]	; (800185c <MX_GPIO_Init+0x304>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4baf      	ldr	r3, [pc, #700]	; (800185c <MX_GPIO_Init+0x304>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4aae      	ldr	r2, [pc, #696]	; (800185c <MX_GPIO_Init+0x304>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4bac      	ldr	r3, [pc, #688]	; (800185c <MX_GPIO_Init+0x304>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4ba9      	ldr	r3, [pc, #676]	; (800185c <MX_GPIO_Init+0x304>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4aa8      	ldr	r2, [pc, #672]	; (800185c <MX_GPIO_Init+0x304>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4ba6      	ldr	r3, [pc, #664]	; (800185c <MX_GPIO_Init+0x304>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4ba3      	ldr	r3, [pc, #652]	; (800185c <MX_GPIO_Init+0x304>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4aa2      	ldr	r2, [pc, #648]	; (800185c <MX_GPIO_Init+0x304>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4ba0      	ldr	r3, [pc, #640]	; (800185c <MX_GPIO_Init+0x304>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015ec:	489c      	ldr	r0, [pc, #624]	; (8001860 <MX_GPIO_Init+0x308>)
 80015ee:	f003 f821 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f248 1124 	movw	r1, #33060	; 0x8124
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f003 f81a 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001600:	2200      	movs	r2, #0
 8001602:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001606:	4897      	ldr	r0, [pc, #604]	; (8001864 <MX_GPIO_Init+0x30c>)
 8001608:	f003 f814 	bl	8004634 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001612:	4895      	ldr	r0, [pc, #596]	; (8001868 <MX_GPIO_Init+0x310>)
 8001614:	f003 f80e 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161e:	4892      	ldr	r0, [pc, #584]	; (8001868 <MX_GPIO_Init+0x310>)
 8001620:	f003 f808 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7110 	mov.w	r1, #576	; 0x240
 800162a:	4890      	ldr	r0, [pc, #576]	; (800186c <MX_GPIO_Init+0x314>)
 800162c:	f003 f802 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2101      	movs	r1, #1
 8001634:	488a      	ldr	r0, [pc, #552]	; (8001860 <MX_GPIO_Init+0x308>)
 8001636:	f002 fffd 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800163a:	f240 1315 	movw	r3, #277	; 0x115
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4883      	ldr	r0, [pc, #524]	; (8001860 <MX_GPIO_Init+0x308>)
 8001654:	f002 fd38 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001658:	236a      	movs	r3, #106	; 0x6a
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165c:	4b84      	ldr	r3, [pc, #528]	; (8001870 <MX_GPIO_Init+0x318>)
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	487d      	ldr	r0, [pc, #500]	; (8001860 <MX_GPIO_Init+0x308>)
 800166c:	f002 fd2c 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001670:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001676:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <MX_GPIO_Init+0x318>)
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4879      	ldr	r0, [pc, #484]	; (800186c <MX_GPIO_Init+0x314>)
 8001686:	f002 fd1f 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800168a:	233f      	movs	r3, #63	; 0x3f
 800168c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800168e:	230b      	movs	r3, #11
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4873      	ldr	r0, [pc, #460]	; (800186c <MX_GPIO_Init+0x314>)
 800169e:	f002 fd13 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80016a2:	2303      	movs	r3, #3
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016b2:	2308      	movs	r3, #8
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 fd02 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016c4:	f248 1324 	movw	r3, #33060	; 0x8124
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f002 fcf2 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016e4:	2308      	movs	r3, #8
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f002 fce1 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001706:	2310      	movs	r3, #16
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800170a:	230b      	movs	r3, #11
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f002 fcd4 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001720:	23c0      	movs	r3, #192	; 0xc0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001730:	2305      	movs	r3, #5
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f002 fcc3 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <MX_GPIO_Init+0x318>)
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4843      	ldr	r0, [pc, #268]	; (8001864 <MX_GPIO_Init+0x30c>)
 8001756:	f002 fcb7 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800175e:	230b      	movs	r3, #11
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	483d      	ldr	r0, [pc, #244]	; (8001864 <MX_GPIO_Init+0x30c>)
 800176e:	f002 fcab 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001772:	f24f 0314 	movw	r3, #61460	; 0xf014
 8001776:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4836      	ldr	r0, [pc, #216]	; (8001864 <MX_GPIO_Init+0x30c>)
 800178c:	f002 fc9c 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001790:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001794:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <MX_GPIO_Init+0x318>)
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4830      	ldr	r0, [pc, #192]	; (8001868 <MX_GPIO_Init+0x310>)
 80017a6:	f002 fc8f 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80017aa:	f243 0381 	movw	r3, #12417	; 0x3081
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4829      	ldr	r0, [pc, #164]	; (8001868 <MX_GPIO_Init+0x310>)
 80017c4:	f002 fc80 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80017c8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4822      	ldr	r0, [pc, #136]	; (800186c <MX_GPIO_Init+0x314>)
 80017e2:	f002 fc71 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f6:	2305      	movs	r3, #5
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4819      	ldr	r0, [pc, #100]	; (8001868 <MX_GPIO_Init+0x310>)
 8001802:	f002 fc61 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001806:	2378      	movs	r3, #120	; 0x78
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001816:	2307      	movs	r3, #7
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4811      	ldr	r0, [pc, #68]	; (8001868 <MX_GPIO_Init+0x310>)
 8001822:	f002 fc51 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001826:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182c:	2312      	movs	r3, #18
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001838:	2304      	movs	r3, #4
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_GPIO_Init+0x30c>)
 8001844:	f002 fc40 	bl	80040c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2105      	movs	r1, #5
 800184c:	2007      	movs	r0, #7
 800184e:	f002 fa77 	bl	8003d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001852:	2007      	movs	r0, #7
 8001854:	f002 fa90 	bl	8003d78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	e00b      	b.n	8001874 <MX_GPIO_Init+0x31c>
 800185c:	40021000 	.word	0x40021000
 8001860:	48001000 	.word	0x48001000
 8001864:	48000400 	.word	0x48000400
 8001868:	48000c00 	.word	0x48000c00
 800186c:	48000800 	.word	0x48000800
 8001870:	10110000 	.word	0x10110000
 8001874:	2105      	movs	r1, #5
 8001876:	2017      	movs	r0, #23
 8001878:	f002 fa62 	bl	8003d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800187c:	2017      	movs	r0, #23
 800187e:	f002 fa7b 	bl	8003d78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2105      	movs	r1, #5
 8001886:	2028      	movs	r0, #40	; 0x28
 8001888:	f002 fa5a 	bl	8003d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800188c:	2028      	movs	r0, #40	; 0x28
 800188e:	f002 fa73 	bl	8003d78 <HAL_NVIC_EnableIRQ>

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop

0800189c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e009      	b.n	80018c2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faf8 	bl	8000eac <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf1      	blt.n	80018ae <_write+0x12>
	}
	return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(uint8_t frec, uint8_t fs)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init(frec, fs);
 80018e4:	79ba      	ldrb	r2, [r7, #6]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f009 f868 	bl	800a9c0 <BSP_ACCELERO_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	73fb      	strb	r3, [r7, #15]
	if (ret == ACCELERO_OK)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d12f      	bne.n	800195a <BSP_ACCELERO_Init_INT+0x86>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 80018fa:	210b      	movs	r1, #11
 80018fc:	20d4      	movs	r0, #212	; 0xd4
 80018fe:	f009 f823 	bl	800a948 <SENSOR_IO_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	73bb      	strb	r3, [r7, #14]
		tmp |=0b10000000;
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800190c:	73bb      	strb	r3, [r7, #14]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	461a      	mov	r2, r3
 8001912:	210b      	movs	r1, #11
 8001914:	20d4      	movs	r0, #212	; 0xd4
 8001916:	f008 fffd 	bl	800a914 <SENSOR_IO_Write>

		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 800191a:	210d      	movs	r1, #13
 800191c:	20d4      	movs	r0, #212	; 0xd4
 800191e:	f009 f813 	bl	800a948 <SENSOR_IO_Read>
 8001922:	4603      	mov	r3, r0
 8001924:	73bb      	strb	r3, [r7, #14]
		tmp |=0b00000001;
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	73bb      	strb	r3, [r7, #14]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	461a      	mov	r2, r3
 8001932:	210d      	movs	r1, #13
 8001934:	20d4      	movs	r0, #212	; 0xd4
 8001936:	f008 ffed 	bl	800a914 <SENSOR_IO_Write>

		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 800193a:	211a      	movs	r1, #26
 800193c:	20d4      	movs	r0, #212	; 0xd4
 800193e:	f009 f803 	bl	800a948 <SENSOR_IO_Read>
 8001942:	4603      	mov	r3, r0
 8001944:	73bb      	strb	r3, [r7, #14]
		tmp |=0b10000000;
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800194c:	73bb      	strb	r3, [r7, #14]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	461a      	mov	r2, r3
 8001952:	211a      	movs	r1, #26
 8001954:	20d4      	movs	r0, #212	; 0xd4
 8001956:	f008 ffdd 	bl	800a914 <SENSOR_IO_Write>
	}
	return ret;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_UART_RxCpltCallback+0x3c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d110      	bne.n	8001996 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001974:	2201      	movs	r2, #1
 8001976:	490b      	ldr	r1, [pc, #44]	; (80019a4 <HAL_UART_RxCpltCallback+0x40>)
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_UART_RxCpltCallback+0x3c>)
 800197a:	f007 fc17 	bl	80091ac <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_UART_RxCpltCallback+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <HAL_UART_RxCpltCallback+0x44>)
 8001986:	f012 fdb5 	bl	80144f4 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_UART_RxCpltCallback+0x48>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f00e fc45 	bl	8010220 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003e0 	.word	0x200003e0
 80019a4:	20000938 	.word	0x20000938
 80019a8:	080167dc 	.word	0x080167dc
 80019ac:	200008fc 	.word	0x200008fc

080019b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c0:	d00e      	beq.n	80019e0 <HAL_GPIO_EXTI_Callback+0x30>
 80019c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c6:	dc18      	bgt.n	80019fa <HAL_GPIO_EXTI_Callback+0x4a>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_EXTI_Callback+0x44>
 80019cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d0:	d113      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x54>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f00e fc21 	bl	8010220 <osThreadFlagsSet>
			break;
 80019de:	e00d      	b.n	80019fc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x58>)
 80019e2:	f012 fe0d 	bl	8014600 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x54>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00e fc17 	bl	8010220 <osThreadFlagsSet>
			break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80019f4:	f00a fc56 	bl	800c2a4 <SPI_WIFI_ISR>
			break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80019fa:	bf00      	nop
		}
	}
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200008f4 	.word	0x200008f4
 8001a08:	080167ec 	.word	0x080167ec

08001a0c <wifi_start>:

static int wifi_start(void)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 8001a12:	481d      	ldr	r0, [pc, #116]	; (8001a88 <wifi_start+0x7c>)
 8001a14:	f012 fdf4 	bl	8014600 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001a18:	f00a fc54 	bl	800c2c4 <WIFI_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d129      	bne.n	8001a76 <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 8001a22:	481a      	ldr	r0, [pc, #104]	; (8001a8c <wifi_start+0x80>)
 8001a24:	f012 fdec 	bl	8014600 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <wifi_start+0x84>)
 8001a2a:	f012 fde9 	bl	8014600 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00a fc95 	bl	800c360 <WIFI_GetMAC_Address>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d116      	bne.n	8001a6a <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001a3c:	4815      	ldr	r0, [pc, #84]	; (8001a94 <wifi_start+0x88>)
 8001a3e:	f012 fddf 	bl	8014600 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001a42:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a44:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001a46:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a48:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001a4a:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a4c:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001a50:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001a52:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001a54:	9102      	str	r1, [sp, #8]
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	4601      	mov	r1, r0
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <wifi_start+0x8c>)
 8001a62:	f012 fd47 	bl	80144f4 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e00a      	b.n	8001a80 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <wifi_start+0x90>)
 8001a6c:	f012 fdc8 	bl	8014600 <puts>
      return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e004      	b.n	8001a80 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 8001a76:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <wifi_start+0x94>)
 8001a78:	f012 fdc2 	bl	8014600 <puts>
    return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	08016804 	.word	0x08016804
 8001a8c:	08016810 	.word	0x08016810
 8001a90:	0801681c 	.word	0x0801681c
 8001a94:	08016834 	.word	0x08016834
 8001a98:	08016844 	.word	0x08016844
 8001a9c:	08016884 	.word	0x08016884
 8001aa0:	080168a8 	.word	0x080168a8

08001aa4 <wifi_connect>:

int wifi_connect(char* SSID, char* PASSWORD)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]

  wifi_start();
 8001aae:	f7ff ffad 	bl	8001a0c <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <wifi_connect+0x74>)
 8001ab6:	f012 fd1d 	bl	80144f4 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001aba:	2203      	movs	r2, #3
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f00a fc2c 	bl	800c31c <WIFI_Connect>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11d      	bne.n	8001b06 <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <wifi_connect+0x78>)
 8001acc:	f00a fc5e 	bl	800c38c <WIFI_GetIP_Address>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d111      	bne.n	8001afa <wifi_connect+0x56>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <wifi_connect+0x78>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ada:	4619      	mov	r1, r3
               IP_Addr[1],
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <wifi_connect+0x78>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ae0:	461a      	mov	r2, r3
               IP_Addr[2],
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <wifi_connect+0x78>)
 8001ae4:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001ae6:	4618      	mov	r0, r3
               IP_Addr[3]);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <wifi_connect+0x78>)
 8001aea:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4603      	mov	r3, r0
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <wifi_connect+0x7c>)
 8001af2:	f012 fcff 	bl	80144f4 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e00a      	b.n	8001b10 <wifi_connect+0x6c>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <wifi_connect+0x80>)
 8001afc:	f012 fd80 	bl	8014600 <puts>
      return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e004      	b.n	8001b10 <wifi_connect+0x6c>
		 printf("ERROR : es-wifi module NOT connected\n");
 8001b06:	4808      	ldr	r0, [pc, #32]	; (8001b28 <wifi_connect+0x84>)
 8001b08:	f012 fd7a 	bl	8014600 <puts>
     return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	080168b4 	.word	0x080168b4
 8001b1c:	20000930 	.word	0x20000930
 8001b20:	080168c8 	.word	0x080168c8
 8001b24:	08016904 	.word	0x08016904
 8001b28:	08016934 	.word	0x08016934

08001b2c <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <SPI3_IRQHandler+0x10>)
 8001b32:	f006 f9d9 	bl	8007ee8 <HAL_SPI_IRQHandler>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000dfc 	.word	0x20000dfc

08001b40 <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b0d9      	sub	sp, #356	; 0x164
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b4a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b4e:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;
    uint8_t i;
    uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001b50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b58:	4ab3      	ldr	r2, [pc, #716]	; (8001e28 <prvMQTTProcessIncomingPublish+0x2e8>)
 8001b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t numero_usuario,frec_muestreo, frec_muestreo_str;
    uint8_t fondo_escala, fondo_escala_str;
    uint8_t to_change[6];
    bool dato_erroneo;
	const char* msg_error = "\r\nERROR: Valor de configuracion no válido\r\n";
 8001b60:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b68:	4ab0      	ldr	r2, [pc, #704]	; (8001e2c <prvMQTTProcessIncomingPublish+0x2ec>)
 8001b6a:	601a      	str	r2, [r3, #0]
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001b6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b74:	4aae      	ldr	r2, [pc, #696]	; (8001e30 <prvMQTTProcessIncomingPublish+0x2f0>)
 8001b76:	601a      	str	r2, [r3, #0]
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001b78:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b80:	4aac      	ldr	r2, [pc, #688]	; (8001e34 <prvMQTTProcessIncomingPublish+0x2f4>)
 8001b82:	601a      	str	r2, [r3, #0]

	uint8_t valores_frec_accel[3] = {52,104,208};
 8001b84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b8c:	4aaa      	ldr	r2, [pc, #680]	; (8001e38 <prvMQTTProcessIncomingPublish+0x2f8>)
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4611      	mov	r1, r2
 8001b92:	8019      	strh	r1, [r3, #0]
 8001b94:	3302      	adds	r3, #2
 8001b96:	0c12      	lsrs	r2, r2, #16
 8001b98:	701a      	strb	r2, [r3, #0]
	uint8_t valores_frec_accel_str[3] = {LSM6DSL_ODR_52Hz, LSM6DSL_ODR_104Hz, LSM6DSL_ODR_208Hz};
 8001b9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ba2:	4aa6      	ldr	r2, [pc, #664]	; (8001e3c <prvMQTTProcessIncomingPublish+0x2fc>)
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	8019      	strh	r1, [r3, #0]
 8001baa:	3302      	adds	r3, #2
 8001bac:	0c12      	lsrs	r2, r2, #16
 8001bae:	701a      	strb	r2, [r3, #0]
	uint8_t valores_fs_accel[3] = {2,4,8};
 8001bb0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001bb4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bb8:	4aa1      	ldr	r2, [pc, #644]	; (8001e40 <prvMQTTProcessIncomingPublish+0x300>)
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	8019      	strh	r1, [r3, #0]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	0c12      	lsrs	r2, r2, #16
 8001bc4:	701a      	strb	r2, [r3, #0]
	uint8_t valores_fs_accel_str[3] = {LSM6DSL_ACC_SENSITIVITY_2G, LSM6DSL_ACC_SENSITIVITY_4G, LSM6DSL_ACC_SENSITIVITY_8G};
 8001bc6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001bca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bce:	4a9d      	ldr	r2, [pc, #628]	; (8001e44 <prvMQTTProcessIncomingPublish+0x304>)
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	8019      	strh	r1, [r3, #0]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	701a      	strb	r2, [r3, #0]
	const char* msg_accelero_reconf = "ACELEROMETRO RECONFIGURADO\r\n";
 8001bdc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001be0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001be4:	4a98      	ldr	r2, [pc, #608]	; (8001e48 <prvMQTTProcessIncomingPublish+0x308>)
 8001be6:	601a      	str	r2, [r3, #0]

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001be8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001bec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001bf8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b7f      	cmp	r3, #127	; 0x7f
 8001c02:	bf28      	it	cs
 8001c04:	237f      	movcs	r3, #127	; 0x7f
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f011 fde8 	bl	80137e2 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001c12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c16:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c22:	4293      	cmp	r3, r2
 8001c24:	bf28      	it	cs
 8001c26:	4613      	movcs	r3, r2
 8001c28:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c2c:	443b      	add	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f803 2c8c 	strb.w	r2, [r3, #-140]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001c34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c38:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c44:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	891b      	ldrh	r3, [r3, #8]
 8001c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4e:	bf28      	it	cs
 8001c50:	237f      	movcs	r3, #127	; 0x7f
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f011 fdc1 	bl	80137e2 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001c60:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c64:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	891b      	ldrh	r3, [r3, #8]
 8001c6c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf28      	it	cs
 8001c74:	4613      	movcs	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8001c86:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001c8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c8e:	4619      	mov	r1, r3
 8001c90:	486e      	ldr	r0, [pc, #440]	; (8001e4c <prvMQTTProcessIncomingPublish+0x30c>)
 8001c92:	f012 fc2f 	bl	80144f4 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa

	for(i=0;i<strlen(pcTempTopic2);i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001c9c:	e011      	b.n	8001cc2 <prvMQTTProcessIncomingPublish+0x182>
		if(buffer2[i] != pcTempTopic2[i]){
 8001c9e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001ca2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001ca6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001caa:	5cd2      	ldrb	r2, [r2, r3]
 8001cac:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001cb0:	4967      	ldr	r1, [pc, #412]	; (8001e50 <prvMQTTProcessIncomingPublish+0x310>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d109      	bne.n	8001ccc <prvMQTTProcessIncomingPublish+0x18c>
	for(i=0;i<strlen(pcTempTopic2);i++){
 8001cb8:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001cc2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001cc6:	2b17      	cmp	r3, #23
 8001cc8:	d9e9      	bls.n	8001c9e <prvMQTTProcessIncomingPublish+0x15e>
 8001cca:	e000      	b.n	8001cce <prvMQTTProcessIncomingPublish+0x18e>
			break;
 8001ccc:	bf00      	nop
		}
	}
	if (i == strlen(pcTempTopic2)){
 8001cce:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001cd2:	2b18      	cmp	r3, #24
 8001cd4:	d11a      	bne.n	8001d0c <prvMQTTProcessIncomingPublish+0x1cc>
		if(buffer1[0]=='1'){
 8001cd6:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001cda:	2b31      	cmp	r3, #49	; 0x31
 8001cdc:	d109      	bne.n	8001cf2 <prvMQTTProcessIncomingPublish+0x1b2>
			modo_continuo = true;
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <prvMQTTProcessIncomingPublish+0x314>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cea:	485b      	ldr	r0, [pc, #364]	; (8001e58 <prvMQTTProcessIncomingPublish+0x318>)
 8001cec:	f002 fca2 	bl	8004634 <HAL_GPIO_WritePin>
 8001cf0:	e00c      	b.n	8001d0c <prvMQTTProcessIncomingPublish+0x1cc>
		}else if(buffer1[0]=='0'){
 8001cf2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001cf6:	2b30      	cmp	r3, #48	; 0x30
 8001cf8:	d108      	bne.n	8001d0c <prvMQTTProcessIncomingPublish+0x1cc>
			modo_continuo = false;
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <prvMQTTProcessIncomingPublish+0x314>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d06:	4854      	ldr	r0, [pc, #336]	; (8001e58 <prvMQTTProcessIncomingPublish+0x318>)
 8001d08:	f002 fc94 	bl	8004634 <HAL_GPIO_WritePin>
		}

	}

	for(i=0;i<strlen(rtcConfTopic);i++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001d12:	e011      	b.n	8001d38 <prvMQTTProcessIncomingPublish+0x1f8>
		if(buffer2[i] != rtcConfTopic[i]){
 8001d14:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d18:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001d1c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001d20:	5cd2      	ldrb	r2, [r2, r3]
 8001d22:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d26:	494d      	ldr	r1, [pc, #308]	; (8001e5c <prvMQTTProcessIncomingPublish+0x31c>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d109      	bne.n	8001d42 <prvMQTTProcessIncomingPublish+0x202>
	for(i=0;i<strlen(rtcConfTopic);i++){
 8001d2e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d32:	3301      	adds	r3, #1
 8001d34:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001d38:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	d9e9      	bls.n	8001d14 <prvMQTTProcessIncomingPublish+0x1d4>
 8001d40:	e000      	b.n	8001d44 <prvMQTTProcessIncomingPublish+0x204>
			break;
 8001d42:	bf00      	nop
		}
	}
	if (i == strlen(rtcConfTopic)){
 8001d44:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d48:	2b19      	cmp	r3, #25
 8001d4a:	f040 812e 	bne.w	8001faa <prvMQTTProcessIncomingPublish+0x46a>
		dato_erroneo = false;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
		for (i=0;i<6 && !dato_erroneo;){
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001d5a:	e096      	b.n	8001e8a <prvMQTTProcessIncomingPublish+0x34a>
			numero_usuario = 10*(buffer1[3*i]-48) + buffer1[3*i+1]-48;
 8001d5c:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001d6a:	443b      	add	r3, r7
 8001d6c:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8001d70:	3b30      	subs	r3, #48	; 0x30
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	b299      	uxth	r1, r3
 8001d7e:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001d8e:	443b      	add	r3, r7
 8001d90:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	440b      	add	r3, r1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b30      	subs	r3, #48	; 0x30
 8001d9c:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
			printf("Dato: %d\r\n",numero_usuario);
 8001da0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8001da4:	4619      	mov	r1, r3
 8001da6:	482e      	ldr	r0, [pc, #184]	; (8001e60 <prvMQTTProcessIncomingPublish+0x320>)
 8001da8:	f012 fba4 	bl	80144f4 <iprintf>
			printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 8001dac:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8001db0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001db4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001db8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001dc2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001dc6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4824      	ldr	r0, [pc, #144]	; (8001e64 <prvMQTTProcessIncomingPublish+0x324>)
 8001dd4:	f012 fb8e 	bl	80144f4 <iprintf>
			if (numero_usuario<limit[i][0] || numero_usuario>limit[i][1]){
 8001dd8:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8001ddc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001de0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001de4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d30d      	bcc.n	8001e0e <prvMQTTProcessIncomingPublish+0x2ce>
 8001df2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001df6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001dfa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	785b      	ldrb	r3, [r3, #1]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d92e      	bls.n	8001e6c <prvMQTTProcessIncomingPublish+0x32c>
				dato_erroneo = true;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
				osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <prvMQTTProcessIncomingPublish+0x328>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001e1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e20:	2200      	movs	r2, #0
 8001e22:	f00e fb5b 	bl	80104dc <osMessageQueuePut>
 8001e26:	e030      	b.n	8001e8a <prvMQTTProcessIncomingPublish+0x34a>
 8001e28:	08016a30 	.word	0x08016a30
 8001e2c:	0801695c 	.word	0x0801695c
 8001e30:	0801698c 	.word	0x0801698c
 8001e34:	080169ac 	.word	0x080169ac
 8001e38:	08016a3c 	.word	0x08016a3c
 8001e3c:	08016a40 	.word	0x08016a40
 8001e40:	08016a44 	.word	0x08016a44
 8001e44:	08016a48 	.word	0x08016a48
 8001e48:	080169cc 	.word	0x080169cc
 8001e4c:	080169ec 	.word	0x080169ec
 8001e50:	08016a4c 	.word	0x08016a4c
 8001e54:	2000092d 	.word	0x2000092d
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	08016a68 	.word	0x08016a68
 8001e60:	08016a08 	.word	0x08016a08
 8001e64:	08016a14 	.word	0x08016a14
 8001e68:	20000908 	.word	0x20000908

			}else{
				to_change[i]=numero_usuario;
 8001e6c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001e70:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8001e74:	b2d1      	uxtb	r1, r2
 8001e76:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001e7a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001e7e:	54d1      	strb	r1, [r2, r3]
				i++;
 8001e80:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001e84:	3301      	adds	r3, #1
 8001e86:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		for (i=0;i<6 && !dato_erroneo;){
 8001e8a:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d807      	bhi.n	8001ea2 <prvMQTTProcessIncomingPublish+0x362>
 8001e92:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f af5d 	bne.w	8001d5c <prvMQTTProcessIncomingPublish+0x21c>
			}

		}
		if(i == 6){
 8001ea2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d17f      	bne.n	8001faa <prvMQTTProcessIncomingPublish+0x46a>
			RTC_TimeTypeDef sTime = {0};
 8001eaa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001eae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	6053      	str	r3, [r2, #4]
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	60d3      	str	r3, [r2, #12]
 8001ebe:	6113      	str	r3, [r2, #16]
			RTC_DateTypeDef sDate = {0};
 8001ec0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ec4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

			sTime.Hours = to_change[0];
 8001ecc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ed0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001eda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ede:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = to_change[1];
 8001ee0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ee4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ee8:	785a      	ldrb	r2, [r3, #1]
 8001eea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001eee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ef2:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = to_change[2];
 8001ef4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ef8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001efc:	789a      	ldrb	r2, [r3, #2]
 8001efe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f06:	709a      	strb	r2, [r3, #2]

			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4897      	ldr	r0, [pc, #604]	; (8002170 <prvMQTTProcessIncomingPublish+0x630>)
 8001f12:	f004 ff4e 	bl	8006db2 <HAL_RTC_SetTime>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <prvMQTTProcessIncomingPublish+0x3e0>
			  {
				Error_Handler();
 8001f1c:	f000 ff2a 	bl	8002d74 <Error_Handler>
			  }

			osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <prvMQTTProcessIncomingPublish+0x634>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f00e fad5 	bl	80104dc <osMessageQueuePut>

			sDate.Date = to_change[3];
 8001f32:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f3a:	78da      	ldrb	r2, [r3, #3]
 8001f3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f40:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f44:	709a      	strb	r2, [r3, #2]
			sDate.Month = to_change[4];
 8001f46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f4e:	791a      	ldrb	r2, [r3, #4]
 8001f50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f54:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f58:	705a      	strb	r2, [r3, #1]
			sDate.Year = to_change[5];
 8001f5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f62:	795a      	ldrb	r2, [r3, #5]
 8001f64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f68:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f6c:	70da      	strb	r2, [r3, #3]
			printf("Anio: %d\r\n",to_change[5]);
 8001f6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f76:	795b      	ldrb	r3, [r3, #5]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	487f      	ldr	r0, [pc, #508]	; (8002178 <prvMQTTProcessIncomingPublish+0x638>)
 8001f7c:	f012 faba 	bl	80144f4 <iprintf>
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4879      	ldr	r0, [pc, #484]	; (8002170 <prvMQTTProcessIncomingPublish+0x630>)
 8001f8a:	f005 f80b 	bl	8006fa4 <HAL_RTC_SetDate>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <prvMQTTProcessIncomingPublish+0x458>
			{
				Error_Handler();
 8001f94:	f000 feee 	bl	8002d74 <Error_Handler>
			}

			osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 8001f98:	4b76      	ldr	r3, [pc, #472]	; (8002174 <prvMQTTProcessIncomingPublish+0x634>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001fa0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f00e fa99 	bl	80104dc <osMessageQueuePut>
		}
	}

	for(i=0;i<strlen(accelConfTopic);i++){
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001fb0:	e011      	b.n	8001fd6 <prvMQTTProcessIncomingPublish+0x496>
		if(buffer2[i] != accelConfTopic[i]){
 8001fb2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001fb6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001fba:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001fbe:	5cd2      	ldrb	r2, [r2, r3]
 8001fc0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001fc4:	496d      	ldr	r1, [pc, #436]	; (800217c <prvMQTTProcessIncomingPublish+0x63c>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d109      	bne.n	8001fe0 <prvMQTTProcessIncomingPublish+0x4a0>
	for(i=0;i<strlen(accelConfTopic);i++){
 8001fcc:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8001fd6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001fda:	2b1a      	cmp	r3, #26
 8001fdc:	d9e9      	bls.n	8001fb2 <prvMQTTProcessIncomingPublish+0x472>
 8001fde:	e000      	b.n	8001fe2 <prvMQTTProcessIncomingPublish+0x4a2>
			break;
 8001fe0:	bf00      	nop
		}
	}
	if (i == strlen(accelConfTopic)){
 8001fe2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001fe6:	2b1b      	cmp	r3, #27
 8001fe8:	f040 80bd 	bne.w	8002166 <prvMQTTProcessIncomingPublish+0x626>
		frec_muestreo = 100*(buffer1[0]-48) + 10*(buffer1[1]-48) + buffer1[2]-48;
 8001fec:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001ff0:	3b30      	subs	r3, #48	; 0x30
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	0091      	lsls	r1, r2, #2
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	b29a      	uxth	r2, r3
 8002008:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800200c:	3b30      	subs	r3, #48	; 0x30
 800200e:	b29b      	uxth	r3, r3
 8002010:	4619      	mov	r1, r3
 8002012:	0089      	lsls	r1, r1, #2
 8002014:	440b      	add	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	4413      	add	r3, r2
 800201c:	b29a      	uxth	r2, r3
 800201e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8002022:	b29b      	uxth	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b30      	subs	r3, #48	; 0x30
 800202a:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		fondo_escala = buffer1[4]-48;
 800202e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8002032:	3b30      	subs	r3, #48	; 0x30
 8002034:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		for(i=0 ; i<strlen(valores_frec_accel) ; i++){
 8002038:	2300      	movs	r3, #0
 800203a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 800203e:	e01a      	b.n	8002076 <prvMQTTProcessIncomingPublish+0x536>
			if (frec_muestreo == valores_frec_accel[i]){
 8002040:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8002044:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002048:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8002054:	429a      	cmp	r2, r3
 8002056:	d109      	bne.n	800206c <prvMQTTProcessIncomingPublish+0x52c>
				frec_muestreo_str = valores_frec_accel_str[i];
 8002058:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800205c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002060:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
				break;
 800206a:	e00e      	b.n	800208a <prvMQTTProcessIncomingPublish+0x54a>
		for(i=0 ; i<strlen(valores_frec_accel) ; i++){
 800206c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8002070:	3301      	adds	r3, #1
 8002072:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8002076:	f897 415f 	ldrb.w	r4, [r7, #351]	; 0x15f
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f8a6 	bl	80001d0 <strlen>
 8002084:	4603      	mov	r3, r0
 8002086:	429c      	cmp	r4, r3
 8002088:	d3da      	bcc.n	8002040 <prvMQTTProcessIncomingPublish+0x500>
			}
		}
		if (i == strlen(valores_frec_accel)){
 800208a:	f897 415f 	ldrb.w	r4, [r7, #351]	; 0x15f
 800208e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f89c 	bl	80001d0 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	429c      	cmp	r4, r3
 800209c:	d109      	bne.n	80020b2 <prvMQTTProcessIncomingPublish+0x572>
			osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <prvMQTTProcessIncomingPublish+0x634>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80020a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020aa:	2200      	movs	r2, #0
 80020ac:	f00e fa16 	bl	80104dc <osMessageQueuePut>

	}

	//if (buffer1 == "prueba")

}
 80020b0:	e059      	b.n	8002166 <prvMQTTProcessIncomingPublish+0x626>
			for(i=0 ; i<strlen(valores_fs_accel) ; i++){
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 80020b8:	e019      	b.n	80020ee <prvMQTTProcessIncomingPublish+0x5ae>
				if (fondo_escala == valores_fs_accel[i]){
 80020ba:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80020be:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80020c2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	f897 2155 	ldrb.w	r2, [r7, #341]	; 0x155
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d109      	bne.n	80020e4 <prvMQTTProcessIncomingPublish+0x5a4>
					fondo_escala_str = valores_fs_accel_str[i];
 80020d0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80020d4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80020d8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
					break;
 80020e2:	e00e      	b.n	8002102 <prvMQTTProcessIncomingPublish+0x5c2>
			for(i=0 ; i<strlen(valores_fs_accel) ; i++){
 80020e4:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80020e8:	3301      	adds	r3, #1
 80020ea:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 80020ee:	f897 415f 	ldrb.w	r4, [r7, #351]	; 0x15f
 80020f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f86a 	bl	80001d0 <strlen>
 80020fc:	4603      	mov	r3, r0
 80020fe:	429c      	cmp	r4, r3
 8002100:	d3db      	bcc.n	80020ba <prvMQTTProcessIncomingPublish+0x57a>
			if (i == strlen(valores_fs_accel)){
 8002102:	f897 415f 	ldrb.w	r4, [r7, #351]	; 0x15f
 8002106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f860 	bl	80001d0 <strlen>
 8002110:	4603      	mov	r3, r0
 8002112:	429c      	cmp	r4, r3
 8002114:	d109      	bne.n	800212a <prvMQTTProcessIncomingPublish+0x5ea>
				osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <prvMQTTProcessIncomingPublish+0x634>)
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800211e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002122:	2200      	movs	r2, #0
 8002124:	f00e f9da 	bl	80104dc <osMessageQueuePut>
}
 8002128:	e01d      	b.n	8002166 <prvMQTTProcessIncomingPublish+0x626>
				status_acc = BSP_ACCELERO_Init_INT(frec_muestreo_str, fondo_escala_str);
 800212a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fbcc 	bl	80018d4 <BSP_ACCELERO_Init_INT>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <prvMQTTProcessIncomingPublish+0x640>)
 8002142:	701a      	strb	r2, [r3, #0]
				if (status_acc == ACCELERO_OK){
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <prvMQTTProcessIncomingPublish+0x640>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <prvMQTTProcessIncomingPublish+0x626>
					frec_muestreo_actual = frec_muestreo;
 800214c:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <prvMQTTProcessIncomingPublish+0x644>)
 8002152:	6013      	str	r3, [r2, #0]
					osMessageQueuePut(print_queueHandle, &msg_accelero_reconf, 0, pdMS_TO_TICKS(500));
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <prvMQTTProcessIncomingPublish+0x634>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f107 0120 	add.w	r1, r7, #32
 800215c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002160:	2200      	movs	r2, #0
 8002162:	f00e f9bb 	bl	80104dc <osMessageQueuePut>
}
 8002166:	bf00      	nop
 8002168:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	2000030c 	.word	0x2000030c
 8002174:	20000908 	.word	0x20000908
 8002178:	08016a24 	.word	0x08016a24
 800217c:	08016a84 	.word	0x08016a84
 8002180:	2000092c 	.word	0x2000092c
 8002184:	20000000 	.word	0x20000000

08002188 <config_task_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_config_task_func */
void config_task_func(void *argument)
{
 8002188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800218c:	b0b2      	sub	sp, #200	; 0xc8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[20];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8002198:	4b94      	ldr	r3, [pc, #592]	; (80023ec <config_task_func+0x264>)
 800219a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 800219e:	4b94      	ldr	r3, [pc, #592]	; (80023f0 <config_task_func+0x268>)
 80021a0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 80021a2:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <config_task_func+0x26c>)
 80021a4:	67bb      	str	r3, [r7, #120]	; 0x78
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 80021a6:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <config_task_func+0x270>)
 80021a8:	677b      	str	r3, [r7, #116]	; 0x74
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 80021aa:	4b94      	ldr	r3, [pc, #592]	; (80023fc <config_task_func+0x274>)
 80021ac:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80021b0:	461d      	mov	r5, r3
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ba:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 80021be:	4a90      	ldr	r2, [pc, #576]	; (8002400 <config_task_func+0x278>)
 80021c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};


	printf("Empieza el bucle\r\n");
 80021ca:	488e      	ldr	r0, [pc, #568]	; (8002404 <config_task_func+0x27c>)
 80021cc:	f012 fa18 	bl	8014600 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 80021d0:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <config_task_func+0x280>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80021d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021dc:	2200      	movs	r2, #0
 80021de:	f00e f97d 	bl	80104dc <osMessageQueuePut>
 80021e2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	int i,j,m = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	for (i=0;i<6;){
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80021f2:	e12e      	b.n	8002452 <config_task_func+0x2ca>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 80021f4:	4b84      	ldr	r3, [pc, #528]	; (8002408 <config_task_func+0x280>)
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	18d1      	adds	r1, r2, r3
 8002204:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002208:	2200      	movs	r2, #0
 800220a:	f00e f967 	bl	80104dc <osMessageQueuePut>
 800220e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		printf("Esperando a que ser reciba el dato\r\n");
 8002212:	487e      	ldr	r0, [pc, #504]	; (800240c <config_task_func+0x284>)
 8002214:	f012 f9f4 	bl	8014600 <puts>

		for (j=0;j<3;){
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800221e:	e03d      	b.n	800229c <config_task_func+0x114>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8002220:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <config_task_func+0x288>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800222c:	18d1      	adds	r1, r2, r3
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	2200      	movs	r2, #0
 8002234:	f00e f9b2 	bl	801059c <osMessageQueueGet>
 8002238:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 800223c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4872      	ldr	r0, [pc, #456]	; (8002414 <config_task_func+0x28c>)
 800224c:	f012 f952 	bl	80144f4 <iprintf>
			if(recibido[j]==13){
 8002250:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b0d      	cmp	r3, #13
 800225e:	d103      	bne.n	8002268 <config_task_func+0xe0>
				printf("Ha pulsado intro\r\n");
 8002260:	486d      	ldr	r0, [pc, #436]	; (8002418 <config_task_func+0x290>)
 8002262:	f012 f9cd 	bl	8014600 <puts>
				break;
 8002266:	e01d      	b.n	80022a4 <config_task_func+0x11c>
			}
			if (recibido[j]==127){
 8002268:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800226c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b7f      	cmp	r3, #127	; 0x7f
 8002276:	d10c      	bne.n	8002292 <config_task_func+0x10a>
				printf("Ha pulsado borrar\r\n");
 8002278:	4868      	ldr	r0, [pc, #416]	; (800241c <config_task_func+0x294>)
 800227a:	f012 f9c1 	bl	8014600 <puts>
				if (j>0) j--;
 800227e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002282:	2b00      	cmp	r3, #0
 8002284:	dd0a      	ble.n	800229c <config_task_func+0x114>
 8002286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800228a:	3b01      	subs	r3, #1
 800228c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002290:	e004      	b.n	800229c <config_task_func+0x114>
			}else{
				j++;
 8002292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002296:	3301      	adds	r3, #1
 8002298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0;j<3;){
 800229c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	ddbd      	ble.n	8002220 <config_task_func+0x98>
			}
		}
		printf("%d\r\n",j);
 80022a4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80022a8:	485d      	ldr	r0, [pc, #372]	; (8002420 <config_task_func+0x298>)
 80022aa:	f012 f923 	bl	80144f4 <iprintf>
		switch(j){
 80022ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d849      	bhi.n	800234a <config_task_func+0x1c2>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <config_task_func+0x134>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022d5 	.word	0x080022d5
 80022c4:	080022e3 	.word	0x080022e3
 80022c8:	08002307 	.word	0x08002307
		case 0:
			num_usuario=0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 80022d2:	e03a      	b.n	800234a <config_task_func+0x1c2>
		case 1:
			num_usuario = recibido[0]-48;
 80022d4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b30      	subs	r3, #48	; 0x30
 80022dc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 80022e0:	e033      	b.n	800234a <config_task_func+0x1c2>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 80022e2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80022e6:	3b30      	subs	r3, #48	; 0x30
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b30      	subs	r3, #48	; 0x30
 8002300:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			//i++;
			break;
 8002304:	e021      	b.n	800234a <config_task_func+0x1c2>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 8002306:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800230a:	3b30      	subs	r3, #48	; 0x30
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4413      	add	r3, r2
 8002314:	461a      	mov	r2, r3
 8002316:	0091      	lsls	r1, r2, #2
 8002318:	461a      	mov	r2, r3
 800231a:	460b      	mov	r3, r1
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	b29a      	uxth	r2, r3
 8002322:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002326:	3b30      	subs	r3, #48	; 0x30
 8002328:	b29b      	uxth	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	0089      	lsls	r1, r1, #2
 800232e:	440b      	add	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	b29a      	uxth	r2, r3
 8002338:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800233c:	b29b      	uxth	r3, r3
 800233e:	4413      	add	r3, r2
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b30      	subs	r3, #48	; 0x30
 8002344:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 8002348:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800234a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800234e:	4619      	mov	r1, r3
 8002350:	4834      	ldr	r0, [pc, #208]	; (8002424 <config_task_func+0x29c>)
 8002352:	f012 f8cf 	bl	80144f4 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 8002356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	33b8      	adds	r3, #184	; 0xb8
 800235e:	f107 0210 	add.w	r2, r7, #16
 8002362:	4413      	add	r3, r2
 8002364:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8002368:	4619      	mov	r1, r3
 800236a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	33b8      	adds	r3, #184	; 0xb8
 8002372:	f107 0210 	add.w	r2, r7, #16
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 800237c:	461a      	mov	r2, r3
 800237e:	482a      	ldr	r0, [pc, #168]	; (8002428 <config_task_func+0x2a0>)
 8002380:	f012 f8b8 	bl	80144f4 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 8002384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	33b8      	adds	r3, #184	; 0xb8
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	4413      	add	r3, r2
 8002392:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800239c:	429a      	cmp	r2, r3
 800239e:	d30d      	bcc.n	80023bc <config_task_func+0x234>
 80023a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	33b8      	adds	r3, #184	; 0xb8
 80023a8:	f107 0210 	add.w	r2, r7, #16
 80023ac:	4413      	add	r3, r2
 80023ae:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d93b      	bls.n	8002434 <config_task_func+0x2ac>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <config_task_func+0x280>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80023c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023c8:	2200      	movs	r2, #0
 80023ca:	f00e f887 	bl	80104dc <osMessageQueuePut>
 80023ce:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			if (estado == osOK)
 80023d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <config_task_func+0x25a>
				printf("Enviado valor erroneo\r\n");
 80023da:	4814      	ldr	r0, [pc, #80]	; (800242c <config_task_func+0x2a4>)
 80023dc:	f012 f910 	bl	8014600 <puts>
 80023e0:	e037      	b.n	8002452 <config_task_func+0x2ca>
			else
				printf("Algo no va bien\r\n");
 80023e2:	4813      	ldr	r0, [pc, #76]	; (8002430 <config_task_func+0x2a8>)
 80023e4:	f012 f90c 	bl	8014600 <puts>
			if (estado == osOK)
 80023e8:	e033      	b.n	8002452 <config_task_func+0x2ca>
 80023ea:	bf00      	nop
 80023ec:	0801698c 	.word	0x0801698c
 80023f0:	080169ac 	.word	0x080169ac
 80023f4:	08016aa0 	.word	0x08016aa0
 80023f8:	08016abc 	.word	0x08016abc
 80023fc:	08016cc0 	.word	0x08016cc0
 8002400:	08016a30 	.word	0x08016a30
 8002404:	08016b0c 	.word	0x08016b0c
 8002408:	20000908 	.word	0x20000908
 800240c:	08016b20 	.word	0x08016b20
 8002410:	2000090c 	.word	0x2000090c
 8002414:	08016b44 	.word	0x08016b44
 8002418:	08016b58 	.word	0x08016b58
 800241c:	08016b6c 	.word	0x08016b6c
 8002420:	08016b80 	.word	0x08016b80
 8002424:	08016b88 	.word	0x08016b88
 8002428:	08016a14 	.word	0x08016a14
 800242c:	08016b98 	.word	0x08016b98
 8002430:	08016bb0 	.word	0x08016bb0
		}else{
			to_change[i]=num_usuario;
 8002434:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002438:	b2d9      	uxtb	r1, r3
 800243a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800243e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002442:	4413      	add	r3, r2
 8002444:	460a      	mov	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
			i++;
 8002448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800244c:	3301      	adds	r3, #1
 800244e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	for (i=0;i<6;){
 8002452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002456:	2b05      	cmp	r3, #5
 8002458:	f77f aecc 	ble.w	80021f4 <config_task_func+0x6c>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 800245c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38

	sTime.Hours = to_change[0];
 8002470:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8002474:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	sTime.Minutes = to_change[1];
 8002478:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800247c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	sTime.Seconds = to_change[2];
 8002480:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002484:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800248c:	2200      	movs	r2, #0
 800248e:	4619      	mov	r1, r3
 8002490:	48ba      	ldr	r0, [pc, #744]	; (800277c <config_task_func+0x5f4>)
 8002492:	f004 fc8e 	bl	8006db2 <HAL_RTC_SetTime>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <config_task_func+0x318>
	  {
	    Error_Handler();
 800249c:	f000 fc6a 	bl	8002d74 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 80024a0:	4bb7      	ldr	r3, [pc, #732]	; (8002780 <config_task_func+0x5f8>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024ac:	2200      	movs	r2, #0
 80024ae:	f00e f815 	bl	80104dc <osMessageQueuePut>

	sDate.Date = to_change[3];
 80024b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80024b6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Month = to_change[4];
 80024ba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80024be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Year = to_change[5];
 80024c2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80024c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	printf("Anio: %d\r\n",to_change[5]);
 80024ca:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80024ce:	4619      	mov	r1, r3
 80024d0:	48ac      	ldr	r0, [pc, #688]	; (8002784 <config_task_func+0x5fc>)
 80024d2:	f012 f80f 	bl	80144f4 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80024d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	48a7      	ldr	r0, [pc, #668]	; (800277c <config_task_func+0x5f4>)
 80024e0:	f004 fd60 	bl	8006fa4 <HAL_RTC_SetDate>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <config_task_func+0x366>
	{
		Error_Handler();
 80024ea:	f000 fc43 	bl	8002d74 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80024ee:	4ba4      	ldr	r3, [pc, #656]	; (8002780 <config_task_func+0x5f8>)
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80024f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024fa:	2200      	movs	r2, #0
 80024fc:	f00d ffee 	bl	80104dc <osMessageQueuePut>

	const char* msg_wifi_conf_init = "\r\nInicio de configuración del WiFi\r\n";
 8002500:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <config_task_func+0x600>)
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
	const char* msg_wifi_connect_init = "\r\nConectando al WiFi\r\n";
 8002504:	4ba1      	ldr	r3, [pc, #644]	; (800278c <config_task_func+0x604>)
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
	const char* msg_wifi_connect_error = "No se ha podido conectar, vuelva a introducir los datos\r\n";
 8002508:	4ba1      	ldr	r3, [pc, #644]	; (8002790 <config_task_func+0x608>)
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char* msg_wifi_connect_success = "CONECTADO\r\n\r\n";
 800250c:	4ba1      	ldr	r3, [pc, #644]	; (8002794 <config_task_func+0x60c>)
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
	const char* msg_too_many_characters = "\r\nHas introducido demasiados caracteres, prueba de nuevo\r\n";
 8002510:	4ba1      	ldr	r3, [pc, #644]	; (8002798 <config_task_func+0x610>)
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
	const char* msg_introduce_ssid = "Introduce el ssid: ";
 8002514:	4ba1      	ldr	r3, [pc, #644]	; (800279c <config_task_func+0x614>)
 8002516:	623b      	str	r3, [r7, #32]
	const char* msg_introduce_psswrd = "\r\nIntroduce la contraseña: ";
 8002518:	4ba1      	ldr	r3, [pc, #644]	; (80027a0 <config_task_func+0x618>)
 800251a:	61fb      	str	r3, [r7, #28]

//	char ssid[MAX_LEN_SSID];
//	char psswrd[MAX_LEN_PSSWRD];


	osMessageQueuePut(print_queueHandle, &msg_wifi_conf_init, 0, pdMS_TO_TICKS(500));
 800251c:	4b98      	ldr	r3, [pc, #608]	; (8002780 <config_task_func+0x5f8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002524:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002528:	2200      	movs	r2, #0
 800252a:	f00d ffd7 	bl	80104dc <osMessageQueuePut>

	//bucle de conexión
	while (1){

		//configuracion ssid
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 800252e:	4b94      	ldr	r3, [pc, #592]	; (8002780 <config_task_func+0x5f8>)
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f107 0120 	add.w	r1, r7, #32
 8002536:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800253a:	2200      	movs	r2, #0
 800253c:	f00d ffce 	bl	80104dc <osMessageQueuePut>
		for (j=0; j<MAX_LEN_SSID ; ){
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002546:	e03d      	b.n	80025c4 <config_task_func+0x43c>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8002548:	4b96      	ldr	r3, [pc, #600]	; (80027a4 <config_task_func+0x61c>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002554:	18d1      	adds	r1, r2, r3
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	2200      	movs	r2, #0
 800255c:	f00e f81e 	bl	801059c <osMessageQueueGet>
 8002560:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			printf("De la cola: %c\r\n",recibido[j]);
 8002564:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	488d      	ldr	r0, [pc, #564]	; (80027a8 <config_task_func+0x620>)
 8002574:	f011 ffbe 	bl	80144f4 <iprintf>
			if(recibido[j]==13){
 8002578:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800257c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b0d      	cmp	r3, #13
 8002586:	d103      	bne.n	8002590 <config_task_func+0x408>
				printf("Ha pulsado intro\r\n");
 8002588:	4888      	ldr	r0, [pc, #544]	; (80027ac <config_task_func+0x624>)
 800258a:	f012 f839 	bl	8014600 <puts>
				break;
 800258e:	e01d      	b.n	80025cc <config_task_func+0x444>
			}
			if (recibido[j]==127){
 8002590:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002598:	4413      	add	r3, r2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b7f      	cmp	r3, #127	; 0x7f
 800259e:	d10c      	bne.n	80025ba <config_task_func+0x432>
				printf("Ha pulsado borrar\r\n");
 80025a0:	4883      	ldr	r0, [pc, #524]	; (80027b0 <config_task_func+0x628>)
 80025a2:	f012 f82d 	bl	8014600 <puts>
				if (j>0) j--;
 80025a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	dd0a      	ble.n	80025c4 <config_task_func+0x43c>
 80025ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b8:	e004      	b.n	80025c4 <config_task_func+0x43c>
			}else{
				j++;
 80025ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (j=0; j<MAX_LEN_SSID ; ){
 80025c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	ddbd      	ble.n	8002548 <config_task_func+0x3c0>
			}
		}
		if (j==MAX_LEN_SSID){
 80025cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d0:	2b0a      	cmp	r3, #10
 80025d2:	d109      	bne.n	80025e8 <config_task_func+0x460>
			osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <config_task_func+0x5f8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80025dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025e0:	2200      	movs	r2, #0
 80025e2:	f00d ff7b 	bl	80104dc <osMessageQueuePut>
 80025e6:	e7a2      	b.n	800252e <config_task_func+0x3a6>
		}else{
 80025e8:	466b      	mov	r3, sp
 80025ea:	461d      	mov	r5, r3
//			printf("Guardamos el ssid\r\n");
			char ssid[j];
 80025ec:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80025f0:	1e4b      	subs	r3, r1, #1
 80025f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025f6:	460a      	mov	r2, r1
 80025f8:	2300      	movs	r3, #0
 80025fa:	4690      	mov	r8, r2
 80025fc:	4699      	mov	r9, r3
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002612:	460a      	mov	r2, r1
 8002614:	2300      	movs	r3, #0
 8002616:	4692      	mov	sl, r2
 8002618:	469b      	mov	fp, r3
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002626:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800262a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800262e:	460b      	mov	r3, r1
 8002630:	3307      	adds	r3, #7
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	ebad 0d03 	sub.w	sp, sp, r3
 800263a:	466b      	mov	r3, sp
 800263c:	3300      	adds	r3, #0
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//			printf("j: %d\r\n",j);
			for (m=0 ; m<j ; m++){
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002648:	e011      	b.n	800266e <config_task_func+0x4e6>
//				printf("m: %d\r\n",m);
//				printf("caracter: %c\r\n",recibido[m]);
				ssid[m] = recibido[m];
 800264a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800264e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002652:	4413      	add	r3, r2
 8002654:	7819      	ldrb	r1, [r3, #0]
 8002656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800265a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265e:	4413      	add	r3, r2
 8002660:	460a      	mov	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
			for (m=0 ; m<j ; m++){
 8002664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002668:	3301      	adds	r3, #1
 800266a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800266e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002676:	429a      	cmp	r2, r3
 8002678:	dbe7      	blt.n	800264a <config_task_func+0x4c2>
//			printf("ssid: %s\r\n",ssid);
//			printf("longitud del ssid: %d\r\n",strlen(ssid));


			//configuracion contraseña
			osMessageQueuePut(print_queueHandle, &msg_introduce_psswrd, 0, pdMS_TO_TICKS(500));
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <config_task_func+0x5f8>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f107 011c 	add.w	r1, r7, #28
 8002682:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002686:	2200      	movs	r2, #0
 8002688:	f00d ff28 	bl	80104dc <osMessageQueuePut>

			for (j=0; j<MAX_LEN_PSSWRD ; ){
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002692:	e02c      	b.n	80026ee <config_task_func+0x566>
				estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <config_task_func+0x61c>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a0:	18d1      	adds	r1, r2, r3
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	2200      	movs	r2, #0
 80026a8:	f00d ff78 	bl	801059c <osMessageQueueGet>
 80026ac:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
//				printf("De la cola: %c\r\n",recibido[j]);
				if(recibido[j]==13){
 80026b0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b0d      	cmp	r3, #13
 80026be:	d01b      	beq.n	80026f8 <config_task_func+0x570>
//					printf("Ha pulsado intro\r\n");
					break;
				}
				if (recibido[j]==127){
 80026c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b7f      	cmp	r3, #127	; 0x7f
 80026ce:	d109      	bne.n	80026e4 <config_task_func+0x55c>
//					printf("Ha pulsado borrar\r\n");
					if (j>0) j--;
 80026d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dd0a      	ble.n	80026ee <config_task_func+0x566>
 80026d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026dc:	3b01      	subs	r3, #1
 80026de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026e2:	e004      	b.n	80026ee <config_task_func+0x566>
				}else{
					j++;
 80026e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e8:	3301      	adds	r3, #1
 80026ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (j=0; j<MAX_LEN_PSSWRD ; ){
 80026ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f2:	2b13      	cmp	r3, #19
 80026f4:	ddce      	ble.n	8002694 <config_task_func+0x50c>
 80026f6:	e000      	b.n	80026fa <config_task_func+0x572>
					break;
 80026f8:	bf00      	nop
				}
			}
			if (j==MAX_LEN_PSSWRD){
 80026fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fe:	2b14      	cmp	r3, #20
 8002700:	d109      	bne.n	8002716 <config_task_func+0x58e>
				osMessageQueuePut(print_queueHandle, &msg_too_many_characters, 0, pdMS_TO_TICKS(500));
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <config_task_func+0x5f8>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800270a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800270e:	2200      	movs	r2, #0
 8002710:	f00d fee4 	bl	80104dc <osMessageQueuePut>
 8002714:	e096      	b.n	8002844 <config_task_func+0x6bc>
			}else{
 8002716:	466b      	mov	r3, sp
 8002718:	461c      	mov	r4, r3
//				printf("Guardamos el psswrd\r\n");
				char psswrd[j];
 800271a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800271e:	1e4b      	subs	r3, r1, #1
 8002720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002724:	460a      	mov	r2, r1
 8002726:	2300      	movs	r3, #0
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	00c3      	lsls	r3, r0, #3
 8002738:	68b8      	ldr	r0, [r7, #8]
 800273a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800273e:	68b8      	ldr	r0, [r7, #8]
 8002740:	00c2      	lsls	r2, r0, #3
 8002742:	460a      	mov	r2, r1
 8002744:	2300      	movs	r3, #0
 8002746:	603a      	str	r2, [r7, #0]
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	00c3      	lsls	r3, r0, #3
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	00c2      	lsls	r2, r0, #3
 8002760:	460b      	mov	r3, r1
 8002762:	3307      	adds	r3, #7
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	ebad 0d03 	sub.w	sp, sp, r3
 800276c:	466b      	mov	r3, sp
 800276e:	3300      	adds	r3, #0
 8002770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
//				printf("j: %d\r\n",j);
				for (m=0 ; m<j ; m++){
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800277a:	e02d      	b.n	80027d8 <config_task_func+0x650>
 800277c:	2000030c 	.word	0x2000030c
 8002780:	20000908 	.word	0x20000908
 8002784:	08016a24 	.word	0x08016a24
 8002788:	08016bc4 	.word	0x08016bc4
 800278c:	08016bec 	.word	0x08016bec
 8002790:	08016c04 	.word	0x08016c04
 8002794:	08016c40 	.word	0x08016c40
 8002798:	08016c50 	.word	0x08016c50
 800279c:	08016c8c 	.word	0x08016c8c
 80027a0:	08016ca0 	.word	0x08016ca0
 80027a4:	2000090c 	.word	0x2000090c
 80027a8:	08016b44 	.word	0x08016b44
 80027ac:	08016b58 	.word	0x08016b58
 80027b0:	08016b6c 	.word	0x08016b6c
//					printf("m: %d\r\n",m);
//					printf("caracter: %c\r\n",recibido[m]);
					psswrd[m] = recibido[m];
 80027b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027bc:	4413      	add	r3, r2
 80027be:	7819      	ldrb	r1, [r3, #0]
 80027c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c8:	4413      	add	r3, r2
 80027ca:	460a      	mov	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
				for (m=0 ; m<j ; m++){
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d2:	3301      	adds	r3, #1
 80027d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbe7      	blt.n	80027b4 <config_task_func+0x62c>

				//datos_wifi[i] = recibido[0];
//				printf("psswrd: %s\r\n",psswrd);
//				printf("longitud del psswrd: %d\r\n",strlen(psswrd));

				osMessageQueuePut(print_queueHandle, &msg_wifi_connect_init, 0, pdMS_TO_TICKS(500));
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <config_task_func+0x6cc>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80027ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027f0:	2200      	movs	r2, #0
 80027f2:	f00d fe73 	bl	80104dc <osMessageQueuePut>

				if (wifi_connect(ssid,psswrd) != 0){
 80027f6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80027fa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80027fe:	f7ff f951 	bl	8001aa4 <wifi_connect>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <config_task_func+0x696>
					osMessageQueuePut(print_queueHandle, &msg_wifi_connect_error, 0, pdMS_TO_TICKS(500));
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <config_task_func+0x6cc>)
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002810:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002814:	2200      	movs	r2, #0
 8002816:	f00d fe61 	bl	80104dc <osMessageQueuePut>
 800281a:	46a5      	mov	sp, r4
 800281c:	e012      	b.n	8002844 <config_task_func+0x6bc>
				}
				else{
					break;
 800281e:	bf00      	nop
 8002820:	46a5      	mov	sp, r4
 8002822:	46ad      	mov	sp, r5
		}


	}

	osMessageQueuePut(print_queueHandle, &msg_wifi_connect_success, 0, pdMS_TO_TICKS(500));
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <config_task_func+0x6cc>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800282c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002830:	2200      	movs	r2, #0
 8002832:	f00d fe53 	bl	80104dc <osMessageQueuePut>


	osThreadFlagsSet(clientMQTTHandle,0x0001U);
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <config_task_func+0x6d0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f00d fcef 	bl	8010220 <osThreadFlagsSet>
 8002842:	e001      	b.n	8002848 <config_task_func+0x6c0>
 8002844:	46ad      	mov	sp, r5
		osMessageQueuePut(print_queueHandle, &msg_introduce_ssid, 0, pdMS_TO_TICKS(500));
 8002846:	e672      	b.n	800252e <config_task_func+0x3a6>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 8002848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800284c:	f00d fdb7 	bl	80103be <osDelay>
 8002850:	e7fa      	b.n	8002848 <config_task_func+0x6c0>
 8002852:	bf00      	nop
 8002854:	20000908 	.word	0x20000908
 8002858:	20000904 	.word	0x20000904

0800285c <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b0cf      	sub	sp, #316	; 0x13c
 8002860:	af0a      	add	r7, sp, #40	; 0x28
 8002862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800286a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 800286c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	char mensaje_params[100];
	char* p_mensaje_params = mensaje_params;
 8002874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint16_t milisegundos = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	uint32_t return_wait = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8002894:	487f      	ldr	r0, [pc, #508]	; (8002a94 <readAccel_func+0x238>)
 8002896:	f011 feb3 	bl	8014600 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0008U, osFlagsWaitAll, osWaitForever);
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	2101      	movs	r1, #1
 80028a0:	2008      	movs	r0, #8
 80028a2:	f00d fd0b 	bl	80102bc <osThreadFlagsWait>
 80028a6:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 80028aa:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <readAccel_func+0x23c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00d fcb5 	bl	8010220 <osThreadFlagsSet>


	printf("ReadAccel task se inicia\r\n");
 80028b6:	4879      	ldr	r0, [pc, #484]	; (8002a9c <readAccel_func+0x240>)
 80028b8:	f011 fea2 	bl	8014600 <puts>
	if (return_wait == osFlagsErrorTimeout)
	  printf("Tiempo agotadoM\r\n");
	else if(return_wait == 0x0001U)
	  printf("Recibido notificacion\r\n");
	  */
	const char* msg_read_normal = "\r\nLectura en modo normal\r\n";
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <readAccel_func+0x244>)
 80028be:	61bb      	str	r3, [r7, #24]
	const char* msg_read_continuous = "\r\nLectura en modo continuo\r\n";
 80028c0:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <readAccel_func+0x248>)
 80028c2:	617b      	str	r3, [r7, #20]


	/* Infinite loop */
	for(;;)
	{
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	2100      	movs	r1, #0
 80028ca:	2006      	movs	r0, #6
 80028cc:	f00d fcf6 	bl	80102bc <osThreadFlagsWait>
 80028d0:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		if(return_wait == osFlagsErrorTimeout){
 80028d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80028d8:	f113 0f02 	cmn.w	r3, #2
 80028dc:	d103      	bne.n	80028e6 <readAccel_func+0x8a>
			printf("Ha pasado media hora\r\n");
 80028de:	4872      	ldr	r0, [pc, #456]	; (8002aa8 <readAccel_func+0x24c>)
 80028e0:	f011 fe8e 	bl	8014600 <puts>
 80028e4:	e006      	b.n	80028f4 <readAccel_func+0x98>
		}
		else {
			printf("El usuario quiere enviar aceleraciones, modo continuo = %d\r\n",modo_continuo);
 80028e6:	4b71      	ldr	r3, [pc, #452]	; (8002aac <readAccel_func+0x250>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	4870      	ldr	r0, [pc, #448]	; (8002ab0 <readAccel_func+0x254>)
 80028f0:	f011 fe00 	bl	80144f4 <iprintf>
		}

		if (modo_continuo){
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <readAccel_func+0x250>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <readAccel_func+0xbe>
			max_iter = MUESTRAS_CONTINUO;
 80028fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002902:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			osMessageQueuePut(print_queueHandle, &msg_read_continuous, 0, pdMS_TO_TICKS(500));
 8002906:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <readAccel_func+0x258>)
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f107 0114 	add.w	r1, r7, #20
 800290e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002912:	2200      	movs	r2, #0
 8002914:	f00d fde2 	bl	80104dc <osMessageQueuePut>
 8002918:	e00b      	b.n	8002932 <readAccel_func+0xd6>
			//osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
		}else{
			max_iter = MUESTRAS_NORMAL;
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			osMessageQueuePut(print_queueHandle, &msg_read_normal, 0, pdMS_TO_TICKS(500));
 8002920:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <readAccel_func+0x258>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f107 0118 	add.w	r1, r7, #24
 8002928:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800292c:	2200      	movs	r2, #0
 800292e:	f00d fdd5 	bl	80104dc <osMessageQueuePut>
			//osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
		}

		snprintf(mensaje_params, 100, "Publicadas: %d muestras, frec_muestreo: %dHz",max_iter,frec_muestreo_actual);
 8002932:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8002936:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <readAccel_func+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	4a5e      	ldr	r2, [pc, #376]	; (8002abc <readAccel_func+0x260>)
 8002944:	2164      	movs	r1, #100	; 0x64
 8002946:	f011 fedd 	bl	8014704 <sniprintf>

		for (iter=0 ; iter<max_iter ; iter++){
 800294a:	2300      	movs	r3, #0
 800294c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8002950:	e08b      	b.n	8002a6a <readAccel_func+0x20e>
			osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	2100      	movs	r1, #0
 8002958:	2001      	movs	r0, #1
 800295a:	f00d fcaf 	bl	80102bc <osThreadFlagsWait>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800295e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002962:	f008 f871 	bl	800aa48 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8002966:	2200      	movs	r2, #0
 8002968:	4955      	ldr	r1, [pc, #340]	; (8002ac0 <readAccel_func+0x264>)
 800296a:	4856      	ldr	r0, [pc, #344]	; (8002ac4 <readAccel_func+0x268>)
 800296c:	f004 fabe 	bl	8006eec <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <readAccel_func+0x264>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			minutos = GetTime.Minutes;
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <readAccel_func+0x264>)
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			segundos = GetTime.Seconds;
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <readAccel_func+0x264>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			milisegundos = (uint16_t)1000*((float)(GetTime.SecondFraction-GetTime.SubSeconds)) / ((float)(GetTime.SecondFraction+1));
 8002988:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <readAccel_func+0x264>)
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <readAccel_func+0x264>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002ac8 <readAccel_func+0x26c>
 800299e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <readAccel_func+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	3301      	adds	r3, #1
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b8:	ee17 3a90 	vmov	r3, s15
 80029bc:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80029c0:	2200      	movs	r2, #0
 80029c2:	4942      	ldr	r1, [pc, #264]	; (8002acc <readAccel_func+0x270>)
 80029c4:	483f      	ldr	r0, [pc, #252]	; (8002ac4 <readAccel_func+0x268>)
 80029c6:	f004 fb74 	bl	80070b2 <HAL_RTC_GetDate>
			anio = GetDate.Year;
 80029ca:	4b40      	ldr	r3, [pc, #256]	; (8002acc <readAccel_func+0x270>)
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			dia = GetDate.Date;
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <readAccel_func+0x270>)
 80029d4:	789b      	ldrb	r3, [r3, #2]
 80029d6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
			mes = GetDate.Month;
 80029da:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <readAccel_func+0x270>)
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb


			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			snprintf(mensaje,100,"%d/%d/%d %d:%d:%d:%d %d,%d,%d",dia,mes,anio+2000,horas,minutos,segundos,milisegundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 80029e2:	f897 c0fc 	ldrb.w	ip, [r7, #252]	; 0xfc
 80029e6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 80029f0:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80029f4:	f897 10ff 	ldrb.w	r1, [r7, #255]	; 0xff
 80029f8:	f897 00fe 	ldrb.w	r0, [r7, #254]	; 0xfe
 80029fc:	f897 40fd 	ldrb.w	r4, [r7, #253]	; 0xfd
 8002a00:	f8b7 5104 	ldrh.w	r5, [r7, #260]	; 0x104
 8002a04:	f9b7 601c 	ldrsh.w	r6, [r7, #28]
 8002a08:	607e      	str	r6, [r7, #4]
 8002a0a:	f9b7 601e 	ldrsh.w	r6, [r7, #30]
 8002a0e:	603e      	str	r6, [r7, #0]
 8002a10:	f9b7 6020 	ldrsh.w	r6, [r7, #32]
 8002a14:	4633      	mov	r3, r6
 8002a16:	f107 0690 	add.w	r6, r7, #144	; 0x90
 8002a1a:	9308      	str	r3, [sp, #32]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	9307      	str	r3, [sp, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9306      	str	r3, [sp, #24]
 8002a24:	9505      	str	r5, [sp, #20]
 8002a26:	9404      	str	r4, [sp, #16]
 8002a28:	9003      	str	r0, [sp, #12]
 8002a2a:	9102      	str	r1, [sp, #8]
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4663      	mov	r3, ip
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <readAccel_func+0x274>)
 8002a36:	2164      	movs	r1, #100	; 0x64
 8002a38:	4630      	mov	r0, r6
 8002a3a:	f011 fe63 	bl	8014704 <sniprintf>
//			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			printf("iter: %d\r\n",iter);
 8002a3e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002a42:	4619      	mov	r1, r3
 8002a44:	4823      	ldr	r0, [pc, #140]	; (8002ad4 <readAccel_func+0x278>)
 8002a46:	f011 fd55 	bl	80144f4 <iprintf>


			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(publish_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <readAccel_func+0x27c>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002a52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a56:	2200      	movs	r2, #0
 8002a58:	f00d fd40 	bl	80104dc <osMessageQueuePut>
 8002a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
		for (iter=0 ; iter<max_iter ; iter++){
 8002a60:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8002a6a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8002a6e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f4ff af6d 	bcc.w	8002952 <readAccel_func+0xf6>


//		if (iter==MUESTRAS_NORMAL) osMessageQueuePut(publish_queueHandle, &msg_pub_normal, 0, pdMS_TO_TICKS(500));
//		else osMessageQueuePut(publish_queueHandle, &msg_pub_continuous, 0, pdMS_TO_TICKS(500));

		osMessageQueuePut(publish_queueHandle, &p_mensaje_params, 0, pdMS_TO_TICKS(500));
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <readAccel_func+0x27c>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a84:	2200      	movs	r2, #0
 8002a86:	f00d fd29 	bl	80104dc <osMessageQueuePut>
		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 8002a8a:	4814      	ldr	r0, [pc, #80]	; (8002adc <readAccel_func+0x280>)
 8002a8c:	f011 fdb8 	bl	8014600 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8002a90:	e718      	b.n	80028c4 <readAccel_func+0x68>
 8002a92:	bf00      	nop
 8002a94:	08016cd8 	.word	0x08016cd8
 8002a98:	20000900 	.word	0x20000900
 8002a9c:	08016cf4 	.word	0x08016cf4
 8002aa0:	08016d10 	.word	0x08016d10
 8002aa4:	08016d2c 	.word	0x08016d2c
 8002aa8:	08016d4c 	.word	0x08016d4c
 8002aac:	2000092d 	.word	0x2000092d
 8002ab0:	08016d64 	.word	0x08016d64
 8002ab4:	20000908 	.word	0x20000908
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	08016da4 	.word	0x08016da4
 8002ac0:	20000918 	.word	0x20000918
 8002ac4:	2000030c 	.word	0x2000030c
 8002ac8:	447a0000 	.word	0x447a0000
 8002acc:	20000914 	.word	0x20000914
 8002ad0:	08016dd4 	.word	0x08016dd4
 8002ad4:	08016df4 	.word	0x08016df4
 8002ad8:	20000910 	.word	0x20000910
 8002adc:	08016e00 	.word	0x08016e00

08002ae0 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <printTask_func+0x58>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	f107 0108 	add.w	r1, r7, #8
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	2200      	movs	r2, #0
 8002af6:	f00d fd51 	bl	801059c <osMessageQueueGet>
 8002afa:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	461c      	mov	r4, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fb61 	bl	80001d0 <strlen>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	230a      	movs	r3, #10
 8002b14:	4621      	mov	r1, r4
 8002b16:	4809      	ldr	r0, [pc, #36]	; (8002b3c <printTask_func+0x5c>)
 8002b18:	f006 fab4 	bl	8009084 <HAL_UART_Transmit>
 8002b1c:	e7e4      	b.n	8002ae8 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f113 0f02 	cmn.w	r3, #2
 8002b24:	d103      	bne.n	8002b2e <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 8002b26:	4806      	ldr	r0, [pc, #24]	; (8002b40 <printTask_func+0x60>)
 8002b28:	f011 fd6a 	bl	8014600 <puts>
 8002b2c:	e7dc      	b.n	8002ae8 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <printTask_func+0x64>)
 8002b30:	f011 fd66 	bl	8014600 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8002b34:	e7d8      	b.n	8002ae8 <printTask_func+0x8>
 8002b36:	bf00      	nop
 8002b38:	20000908 	.word	0x20000908
 8002b3c:	200003e0 	.word	0x200003e0
 8002b40:	08016e60 	.word	0x08016e60
 8002b44:	08016e74 	.word	0x08016e74

08002b48 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f00d fbae 	bl	80102bc <osThreadFlagsWait>
 8002b60:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <tarea_UART_func+0x40>)
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	23c8      	movs	r3, #200	; 0xc8
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <tarea_UART_func+0x44>)
 8002b6c:	f00d fcb6 	bl	80104dc <osMessageQueuePut>
 8002b70:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <tarea_UART_func+0x48>)
 8002b7a:	f011 fd41 	bl	8014600 <puts>
 8002b7e:	e7e9      	b.n	8002b54 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 8002b80:	4804      	ldr	r0, [pc, #16]	; (8002b94 <tarea_UART_func+0x4c>)
 8002b82:	f011 fd3d 	bl	8014600 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8002b86:	e7e5      	b.n	8002b54 <tarea_UART_func+0xc>
 8002b88:	2000090c 	.word	0x2000090c
 8002b8c:	20000938 	.word	0x20000938
 8002b90:	08016e90 	.word	0x08016e90
 8002b94:	08016bb0 	.word	0x08016bb0

08002b98 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f00d fb88 	bl	80102bc <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <temporizador_func+0x30>)
 8002bae:	f011 fd27 	bl	8014600 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1800000)); //Periodo en ms con el que se mandan las aceleraciones
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <temporizador_func+0x34>)
 8002bb4:	f00d fc03 	bl	80103be <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <temporizador_func+0x38>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00d fb2e 	bl	8010220 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1800000)); //Periodo en ms con el que se mandan las aceleraciones
 8002bc4:	e7f5      	b.n	8002bb2 <temporizador_func+0x1a>
 8002bc6:	bf00      	nop
 8002bc8:	08016e9c 	.word	0x08016e9c
 8002bcc:	001b7740 	.word	0x001b7740
 8002bd0:	200008f4 	.word	0x200008f4

08002bd4 <clientMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_clientMQTT_func */
void clientMQTT_func(void *argument)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0a4      	sub	sp, #144	; 0x90
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN clientMQTT_func */
	uint32_t return_wait = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint16_t max_iter;

	char payLoad[16];


	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	2100      	movs	r1, #0
 8002be8:	2001      	movs	r0, #1
 8002bea:	f00d fb67 	bl	80102bc <osThreadFlagsWait>

	const uint32_t ulMaxPublishCount = 5UL;
 8002bee:	2305      	movs	r3, #5
 8002bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	NetworkContext_t xNetworkContext = { 0 };
 8002bf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext, SOCKET );
 8002bfe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f8bb 	bl	8002d80 <prvConnectToServer>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	printf("Mitad de la definicion mqtt\r\n");
 8002c10:	4840      	ldr	r0, [pc, #256]	; (8002d14 <clientMQTT_func+0x140>)
 8002c12:	f011 fcf5 	bl	8014600 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8002c16:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d00a      	beq.n	8002c34 <clientMQTT_func+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c30:	bf00      	nop
 8002c32:	e7fe      	b.n	8002c32 <clientMQTT_func+0x5e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8002c34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f8ea 	bl	8002e18 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4933      	ldr	r1, [pc, #204]	; (8002d18 <clientMQTT_func+0x144>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f98e 	bl	8002f6c <prvMQTTSubscribeToTopic>
	prvMQTTSubscribeToTopic(&xMQTTContext,rtcConfTopic);
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4931      	ldr	r1, [pc, #196]	; (8002d1c <clientMQTT_func+0x148>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f988 	bl	8002f6c <prvMQTTSubscribeToTopic>
	prvMQTTSubscribeToTopic(&xMQTTContext,accelConfTopic);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	492f      	ldr	r1, [pc, #188]	; (8002d20 <clientMQTT_func+0x14c>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f982 	bl	8002f6c <prvMQTTSubscribeToTopic>

	printf("Contexto mqtt inicializado\r\n");
 8002c68:	482e      	ldr	r0, [pc, #184]	; (8002d24 <clientMQTT_func+0x150>)
 8002c6a:	f011 fcc9 	bl	8014600 <puts>

	osThreadFlagsSet(readAccelHandle,0x0008U);
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <clientMQTT_func+0x154>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2108      	movs	r1, #8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00d fad3 	bl	8010220 <osThreadFlagsSet>
	//osThreadFlagsSet(temp_subHandle, 0x0001U);

	const char* msg_modo_continuo = "Modo continuo\r\n";
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <clientMQTT_func+0x158>)
 8002c7c:	60fb      	str	r3, [r7, #12]
	const char* msg_modo_normal = "Modo normal\r\n";
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <clientMQTT_func+0x15c>)
 8002c80:	60bb      	str	r3, [r7, #8]


  /* Infinite loop */
	for(;;)
	{
		estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000)); //Minimo la mitad de tiempo de lo que tarda en actualizar el valor el otro nodo
 8002c82:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <clientMQTT_func+0x160>)
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002c8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f00d fc84 	bl	801059c <osMessageQueueGet>
 8002c94:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

		 if (estado == osOK)
 8002c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <clientMQTT_func+0xec>
		 {
		  //printf("Publicamos: %s",(char*)mensaje);
			 sprintf(payLoad,"%s",mensaje);
 8002ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ca2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ca6:	4924      	ldr	r1, [pc, #144]	; (8002d38 <clientMQTT_func+0x164>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f011 fd5f 	bl	801476c <siprintf>
			 prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 8002cae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4921      	ldr	r1, [pc, #132]	; (8002d3c <clientMQTT_func+0x168>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f929 	bl	8002f10 <prvMQTTPublishToTopic>
 8002cbe:	e7e0      	b.n	8002c82 <clientMQTT_func+0xae>
		 }
		 else if (estado == osErrorTimeout)
 8002cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc4:	f113 0f02 	cmn.w	r3, #2
 8002cc8:	d120      	bne.n	8002d0c <clientMQTT_func+0x138>
		 {
			 printf("Procesamos subscripcion\r\n");
 8002cca:	481d      	ldr	r0, [pc, #116]	; (8002d40 <clientMQTT_func+0x16c>)
 8002ccc:	f011 fc98 	bl	8014600 <puts>
			 MQTT_ProcessLoop(&xMQTTContext);
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00b f960 	bl	800df9a <MQTT_ProcessLoop>
			 if (modo_continuo) osMessageQueuePut(print_queueHandle, &msg_modo_continuo, 0, pdMS_TO_TICKS(500));
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <clientMQTT_func+0x170>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <clientMQTT_func+0x124>
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <clientMQTT_func+0x174>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	f107 010c 	add.w	r1, r7, #12
 8002cec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f00d fbf3 	bl	80104dc <osMessageQueuePut>
 8002cf6:	e7c4      	b.n	8002c82 <clientMQTT_func+0xae>
			 else osMessageQueuePut(print_queueHandle, &msg_modo_normal, 0, pdMS_TO_TICKS(500));
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <clientMQTT_func+0x174>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	f107 0108 	add.w	r1, r7, #8
 8002d00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d04:	2200      	movs	r2, #0
 8002d06:	f00d fbe9 	bl	80104dc <osMessageQueuePut>
 8002d0a:	e7ba      	b.n	8002c82 <clientMQTT_func+0xae>


		 }
		 else
		 {
			 printf("Error en la tarea sendMQTT\r\n");
 8002d0c:	480f      	ldr	r0, [pc, #60]	; (8002d4c <clientMQTT_func+0x178>)
 8002d0e:	f011 fc77 	bl	8014600 <puts>
		estado = osMessageQueueGet(publish_queueHandle, &mensaje, NULL, pdMS_TO_TICKS(5000)); //Minimo la mitad de tiempo de lo que tarda en actualizar el valor el otro nodo
 8002d12:	e7b6      	b.n	8002c82 <clientMQTT_func+0xae>
 8002d14:	08016eb4 	.word	0x08016eb4
 8002d18:	08016a4c 	.word	0x08016a4c
 8002d1c:	08016a68 	.word	0x08016a68
 8002d20:	08016a84 	.word	0x08016a84
 8002d24:	08016ed4 	.word	0x08016ed4
 8002d28:	200008f4 	.word	0x200008f4
 8002d2c:	08016ef0 	.word	0x08016ef0
 8002d30:	08016f00 	.word	0x08016f00
 8002d34:	20000910 	.word	0x20000910
 8002d38:	08016f10 	.word	0x08016f10
 8002d3c:	08016f14 	.word	0x08016f14
 8002d40:	08016f2c 	.word	0x08016f2c
 8002d44:	2000092d 	.word	0x2000092d
 8002d48:	20000908 	.word	0x20000908
 8002d4c:	08016f48 	.word	0x08016f48

08002d50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d62:	f000 fecd 	bl	8003b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40001000 	.word	0x40001000

08002d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <Error_Handler+0x8>
	...

08002d80 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext, uint8_t socket )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <prvConnectToServer+0x84>)
 8002d8e:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 8002d90:	f240 725b 	movw	r2, #1883	; 0x75b
 8002d94:	491c      	ldr	r1, [pc, #112]	; (8002e08 <prvConnectToServer+0x88>)
 8002d96:	481d      	ldr	r0, [pc, #116]	; (8002e0c <prvConnectToServer+0x8c>)
 8002d98:	f011 fbac 	bl	80144f4 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8002d9c:	78f8      	ldrb	r0, [r7, #3]
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	2200      	movs	r2, #0
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	f240 725b 	movw	r2, #1883	; 0x75b
 8002daa:	9200      	str	r2, [sp, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <prvConnectToServer+0x90>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	f009 fb08 	bl	800c3c4 <WIFI_OpenClientConnection>
 8002db4:	4603      	mov	r3, r0
 8002db6:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <prvConnectToServer+0x52>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4814      	ldr	r0, [pc, #80]	; (8002e14 <prvConnectToServer+0x94>)
 8002dc4:	f011 fb96 	bl	80144f4 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8002dc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002dcc:	f00d faf7 	bl	80103be <osDelay>
 8002dd0:	e00f      	b.n	8002df2 <prvConnectToServer+0x72>
		} else {
	        pxNetworkContext->socket = socket;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3302      	adds	r3, #2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f240 725b 	movw	r2, #1883	; 0x75b
 8002dec:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d1cb      	bne.n	8002d90 <prvConnectToServer+0x10>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	5e5d795b 	.word	0x5e5d795b
 8002e08:	08016f7c 	.word	0x08016f7c
 8002e0c:	08016f90 	.word	0x08016f90
 8002e10:	08016fb4 	.word	0x08016fb4
 8002e14:	08016fbc 	.word	0x08016fbc

08002e18 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	; 0x50
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	7818      	ldrb	r0, [r3, #0]
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	f00d f8b1 	bl	800ff94 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8002e32:	f107 010c 	add.w	r1, r7, #12
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <prvCreateMQTTConnectionWithBroker+0xe4>)
 8002e3c:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f00a fede 	bl	800dc00 <MQTT_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8002e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8002e68:	4826      	ldr	r0, [pc, #152]	; (8002f04 <prvCreateMQTTConnectionWithBroker+0xec>)
 8002e6a:	f011 fbc9 	bl	8014600 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8002e6e:	f107 0320 	add.w	r3, r7, #32
 8002e72:	221c      	movs	r2, #28
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f010 fcdb 	bl	8013832 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8002e86:	230f      	movs	r3, #15
 8002e88:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd f99e 	bl	80001d0 <strlen>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd f996 	bl	80001d0 <strlen>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8002eaa:	233c      	movs	r3, #60	; 0x3c
 8002eac:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8002eae:	f107 0120 	add.w	r1, r7, #32
 8002eb2:	f107 031f 	add.w	r3, r7, #31
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f00a fef3 	bl	800dcaa <MQTT_Connect>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8002eca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8002ee8:	4808      	ldr	r0, [pc, #32]	; (8002f0c <prvCreateMQTTConnectionWithBroker+0xf4>)
 8002eea:	f011 fb89 	bl	8014600 <puts>

}
 8002eee:	bf00      	nop
 8002ef0:	3748      	adds	r7, #72	; 0x48
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	08003051 	.word	0x08003051
 8002f00:	08003021 	.word	0x08003021
 8002f04:	08016fe4 	.word	0x08016fe4
 8002f08:	08016ff8 	.word	0x08016ff8
 8002f0c:	08017008 	.word	0x08017008

08002f10 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	2214      	movs	r2, #20
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f010 fc84 	bl	8013832 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8002f36:	68b8      	ldr	r0, [r7, #8]
 8002f38:	f7fd f94a 	bl	80001d0 <strlen>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd f942 	bl	80001d0 <strlen>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	2200      	movs	r2, #0
 8002f56:	4619      	mov	r1, r3
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f00a ff51 	bl	800de00 <MQTT_Publish>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	220c      	movs	r2, #12
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f010 fc53 	bl	8013832 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f00b f824 	bl	800dfda <MQTT_GetPacketId>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <prvMQTTSubscribeToTopic+0xa4>)
 8002f98:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f7fd f914 	bl	80001d0 <strlen>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <prvMQTTSubscribeToTopic+0xa4>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	f107 0108 	add.w	r1, r7, #8
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f00a feee 	bl	800dd9a <MQTT_Subscribe>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <prvMQTTSubscribeToTopic+0x6a>
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	4811      	ldr	r0, [pc, #68]	; (8003014 <prvMQTTSubscribeToTopic+0xa8>)
 8002fd0:	f011 fa90 	bl	80144f4 <iprintf>
 8002fd4:	e005      	b.n	8002fe2 <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	480e      	ldr	r0, [pc, #56]	; (8003018 <prvMQTTSubscribeToTopic+0xac>)
 8002fde:	f011 fa89 	bl	80144f4 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f00a ffd9 	bl	800df9a <MQTT_ProcessLoop>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8002fec:	2300      	movs	r3, #0
 8002fee:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <prvMQTTSubscribeToTopic+0xb0>)
 8002ff2:	791b      	ldrb	r3, [r3, #4]
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d102      	bne.n	8002ffe <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8002ffc:	e003      	b.n	8003006 <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1d4      	bne.n	8002fae <prvMQTTSubscribeToTopic+0x42>
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000d24 	.word	0x20000d24
 8003014:	08017024 	.word	0x08017024
 8003018:	08017050 	.word	0x08017050
 800301c:	2000000c 	.word	0x2000000c

08003020 <prvGetTimeMs>:
//	//if (buffer1 == "prueba")
//
//}

uint32_t prvGetTimeMs( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 800302e:	f00e fcaf 	bl	8011990 <xTaskGetTickCount>
 8003032:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <prvGetTimeMs+0x2c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8003042:	683b      	ldr	r3, [r7, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000d28 	.word	0x20000d28

08003050 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003064:	2b30      	cmp	r3, #48	; 0x30
 8003066:	d104      	bne.n	8003072 <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fd67 	bl	8001b40 <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_MspInit+0x4c>)
 8003084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <HAL_MspInit+0x4c>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6613      	str	r3, [r2, #96]	; 0x60
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_MspInit+0x4c>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_MspInit+0x4c>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	210f      	movs	r1, #15
 80030b6:	f06f 0001 	mvn.w	r0, #1
 80030ba:	f000 fe41 	bl	8003d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000

080030cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0ac      	sub	sp, #176	; 0xb0
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2288      	movs	r2, #136	; 0x88
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f010 fba0 	bl	8013832 <memset>
  if(DFSDM1_Init == 0)
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d142      	bne.n	8003180 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80030fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4618      	mov	r0, r3
 800310c:	f003 f90a 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003116:	f7ff fe2d 	bl	8002d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003124:	6613      	str	r3, [r2, #96]	; 0x60
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003138:	f043 0310 	orr.w	r3, r3, #16
 800313c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800314a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800314e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003164:	2306      	movs	r3, #6
 8003166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800316a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800316e:	4619      	mov	r1, r3
 8003170:	4807      	ldr	r0, [pc, #28]	; (8003190 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003172:	f000 ffa9 	bl	80040c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	4a02      	ldr	r2, [pc, #8]	; (8003188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800317e:	6013      	str	r3, [r2, #0]
  }

}
 8003180:	bf00      	nop
 8003182:	37b0      	adds	r7, #176	; 0xb0
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000d2c 	.word	0x20000d2c
 800318c:	40021000 	.word	0x40021000
 8003190:	48001000 	.word	0x48001000

08003194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0ac      	sub	sp, #176	; 0xb0
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2288      	movs	r2, #136	; 0x88
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f010 fb3c 	bl	8013832 <memset>
  if(hi2c->Instance==I2C2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_I2C_MspInit+0xb0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d13b      	bne.n	800323c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f8a7 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80031dc:	f7ff fdca 	bl	8002d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80031f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003200:	2312      	movs	r3, #18
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003206:	2301      	movs	r3, #1
 8003208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003212:	2304      	movs	r3, #4
 8003214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800321c:	4619      	mov	r1, r3
 800321e:	480b      	ldr	r0, [pc, #44]	; (800324c <HAL_I2C_MspInit+0xb8>)
 8003220:	f000 ff52 	bl	80040c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 800322a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_I2C_MspInit+0xb4>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	37b0      	adds	r7, #176	; 0xb0
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40005800 	.word	0x40005800
 8003248:	40021000 	.word	0x40021000
 800324c:	48000400 	.word	0x48000400

08003250 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_I2C_MspDeInit+0x3c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10f      	bne.n	8003282 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_I2C_MspDeInit+0x40>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_I2C_MspDeInit+0x40>)
 8003268:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800326e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003272:	4808      	ldr	r0, [pc, #32]	; (8003294 <HAL_I2C_MspDeInit+0x44>)
 8003274:	f001 f8d2 	bl	800441c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800327c:	4805      	ldr	r0, [pc, #20]	; (8003294 <HAL_I2C_MspDeInit+0x44>)
 800327e:	f001 f8cd 	bl	800441c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40005800 	.word	0x40005800
 8003290:	40021000 	.word	0x40021000
 8003294:	48000400 	.word	0x48000400

08003298 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_QSPI_MspInit+0x7c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d128      	bne.n	800330c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6513      	str	r3, [r2, #80]	; 0x50
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_QSPI_MspInit+0x80>)
 80032e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80032ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80032ee:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032fc:	230a      	movs	r3, #10
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	4805      	ldr	r0, [pc, #20]	; (800331c <HAL_QSPI_MspInit+0x84>)
 8003308:	f000 fede 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	a0001000 	.word	0xa0001000
 8003318:	40021000 	.word	0x40021000
 800331c:	48001000 	.word	0x48001000

08003320 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0a4      	sub	sp, #144	; 0x90
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	2288      	movs	r2, #136	; 0x88
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f010 fa7e 	bl	8013832 <memset>
  if(hrtc->Instance==RTC)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <HAL_RTC_MspInit+0x5c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d118      	bne.n	8003372 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334e:	f107 0308 	add.w	r3, r7, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f002 ffe6 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800335e:	f7ff fd09 	bl	8002d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_RTC_MspInit+0x60>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_RTC_MspInit+0x60>)
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003372:	bf00      	nop
 8003374:	3790      	adds	r7, #144	; 0x90
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40002800 	.word	0x40002800
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_SPI_MspInit+0x8c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d130      	bne.n	8003408 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_SPI_MspInit+0x90>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80033d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033e8:	2306      	movs	r3, #6
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4619      	mov	r1, r3
 80033f2:	4809      	ldr	r0, [pc, #36]	; (8003418 <HAL_SPI_MspInit+0x94>)
 80033f4:	f000 fe68 	bl	80040c8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	2105      	movs	r1, #5
 80033fc:	2033      	movs	r0, #51	; 0x33
 80033fe:	f000 fc9f 	bl	8003d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003402:	2033      	movs	r0, #51	; 0x33
 8003404:	f000 fcb8 	bl	8003d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003408:	bf00      	nop
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40003c00 	.word	0x40003c00
 8003414:	40021000 	.word	0x40021000
 8003418:	48000800 	.word	0x48000800

0800341c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <HAL_SPI_MspDeInit+0x38>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_SPI_MspDeInit+0x3c>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_SPI_MspDeInit+0x3c>)
 8003434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800343a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <HAL_SPI_MspDeInit+0x40>)
 8003440:	f000 ffec 	bl	800441c <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8003444:	2033      	movs	r0, #51	; 0x33
 8003446:	f000 fca5 	bl	8003d94 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40003c00 	.word	0x40003c00
 8003458:	40021000 	.word	0x40021000
 800345c:	48000800 	.word	0x48000800

08003460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_TIM_Base_MspInit+0x44>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d113      	bne.n	800349a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_TIM_Base_MspInit+0x48>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_TIM_Base_MspInit+0x48>)
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_TIM_Base_MspInit+0x48>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2105      	movs	r1, #5
 800348e:	2037      	movs	r0, #55	; 0x37
 8003490:	f000 fc56 	bl	8003d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003494:	2037      	movs	r0, #55	; 0x37
 8003496:	f000 fc6f 	bl	8003d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40001400 	.word	0x40001400
 80034a8:	40021000 	.word	0x40021000

080034ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0ae      	sub	sp, #184	; 0xb8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	2288      	movs	r2, #136	; 0x88
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f010 f9b0 	bl	8013832 <memset>
  if(huart->Instance==USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a46      	ldr	r2, [pc, #280]	; (80035f0 <HAL_UART_MspInit+0x144>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d143      	bne.n	8003564 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034dc:	2301      	movs	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034e0:	2300      	movs	r3, #0
 80034e2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 ff1b 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034f4:	f7ff fc3e 	bl	8002d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034f8:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_UART_MspInit+0x148>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <HAL_UART_MspInit+0x148>)
 80034fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003502:	6613      	str	r3, [r2, #96]	; 0x60
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_UART_MspInit+0x148>)
 8003506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003510:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <HAL_UART_MspInit+0x148>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <HAL_UART_MspInit+0x148>)
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351c:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_UART_MspInit+0x148>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003528:	23c0      	movs	r3, #192	; 0xc0
 800352a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003540:	2307      	movs	r3, #7
 8003542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800354a:	4619      	mov	r1, r3
 800354c:	482a      	ldr	r0, [pc, #168]	; (80035f8 <HAL_UART_MspInit+0x14c>)
 800354e:	f000 fdbb 	bl	80040c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2105      	movs	r1, #5
 8003556:	2025      	movs	r0, #37	; 0x25
 8003558:	f000 fbf2 	bl	8003d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800355c:	2025      	movs	r0, #37	; 0x25
 800355e:	f000 fc0b 	bl	8003d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003562:	e040      	b.n	80035e6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <HAL_UART_MspInit+0x150>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d13b      	bne.n	80035e6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800356e:	2304      	movs	r3, #4
 8003570:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003572:	2300      	movs	r3, #0
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fed2 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8003586:	f7ff fbf5 	bl	8002d74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_UART_MspInit+0x148>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_UART_MspInit+0x148>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_UART_MspInit+0x148>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_UART_MspInit+0x148>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <HAL_UART_MspInit+0x148>)
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_UART_MspInit+0x148>)
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80035ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035d4:	2307      	movs	r3, #7
 80035d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035de:	4619      	mov	r1, r3
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <HAL_UART_MspInit+0x154>)
 80035e2:	f000 fd71 	bl	80040c8 <HAL_GPIO_Init>
}
 80035e6:	bf00      	nop
 80035e8:	37b8      	adds	r7, #184	; 0xb8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	48000400 	.word	0x48000400
 80035fc:	40004800 	.word	0x40004800
 8003600:	48000c00 	.word	0x48000c00

08003604 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ac      	sub	sp, #176	; 0xb0
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2288      	movs	r2, #136	; 0x88
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f010 f904 	bl	8013832 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003632:	d17c      	bne.n	800372e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003638:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800363a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800363e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003642:	2301      	movs	r3, #1
 8003644:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800364a:	2318      	movs	r3, #24
 800364c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800364e:	2307      	movs	r3, #7
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003652:	2302      	movs	r3, #2
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003656:	2302      	movs	r3, #2
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800365a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800365e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fe5d 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003670:	f7ff fb80 	bl	8002d74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003674:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_PCD_MspInit+0x134>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	4a2f      	ldr	r2, [pc, #188]	; (8003738 <HAL_PCD_MspInit+0x134>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_PCD_MspInit+0x134>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800368c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036a4:	4619      	mov	r1, r3
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036aa:	f000 fd0d 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80036ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80036b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036c8:	230a      	movs	r3, #10
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d2:	4619      	mov	r1, r3
 80036d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d8:	f000 fcf6 	bl	80040c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_PCD_MspInit+0x134>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	4a15      	ldr	r2, [pc, #84]	; (8003738 <HAL_PCD_MspInit+0x134>)
 80036e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_PCD_MspInit+0x134>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_PCD_MspInit+0x134>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d114      	bne.n	800372a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_PCD_MspInit+0x134>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_PCD_MspInit+0x134>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	; 0x58
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_PCD_MspInit+0x134>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003718:	f001 ff18 	bl	800554c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_PCD_MspInit+0x134>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4a05      	ldr	r2, [pc, #20]	; (8003738 <HAL_PCD_MspInit+0x134>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003728:	e001      	b.n	800372e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800372a:	f001 ff0f 	bl	800554c <HAL_PWREx_EnableVddUSB>
}
 800372e:	bf00      	nop
 8003730:	37b0      	adds	r7, #176	; 0xb0
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_InitTick+0xe0>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_InitTick+0xe0>)
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
 8003756:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_InitTick+0xe0>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003762:	f107 0210 	add.w	r2, r7, #16
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fd47 	bl	8006200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800377c:	f002 fd14 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8003780:	6378      	str	r0, [r7, #52]	; 0x34
 8003782:	e004      	b.n	800378e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003784:	f002 fd10 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8003788:	4603      	mov	r3, r0
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	4a23      	ldr	r2, [pc, #140]	; (8003820 <HAL_InitTick+0xe4>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	3b01      	subs	r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_InitTick+0xe8>)
 800379e:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_InitTick+0xec>)
 80037a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_InitTick+0xe8>)
 80037a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_InitTick+0xe8>)
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_InitTick+0xe8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_InitTick+0xe8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_InitTick+0xe8>)
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80037c2:	4818      	ldr	r0, [pc, #96]	; (8003824 <HAL_InitTick+0xe8>)
 80037c4:	f005 f8c1 	bl	800894a <HAL_TIM_Base_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80037ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11b      	bne.n	800380e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037d6:	4813      	ldr	r0, [pc, #76]	; (8003824 <HAL_InitTick+0xe8>)
 80037d8:	f005 f90e 	bl	80089f8 <HAL_TIM_Base_Start_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80037e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d111      	bne.n	800380e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037ea:	2036      	movs	r0, #54	; 0x36
 80037ec:	f000 fac4 	bl	8003d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d808      	bhi.n	8003808 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80037f6:	2200      	movs	r2, #0
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	2036      	movs	r0, #54	; 0x36
 80037fc:	f000 faa0 	bl	8003d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_InitTick+0xf0>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e002      	b.n	800380e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800380e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003812:	4618      	mov	r0, r3
 8003814:	3738      	adds	r7, #56	; 0x38
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	431bde83 	.word	0x431bde83
 8003824:	20000d30 	.word	0x20000d30
 8003828:	40001000 	.word	0x40001000
 800382c:	20000018 	.word	0x20000018

08003830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003834:	e7fe      	b.n	8003834 <NMI_Handler+0x4>

08003836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <HardFault_Handler+0x4>

0800383c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <MemManage_Handler+0x4>

08003842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <BusFault_Handler+0x4>

08003848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <UsageFault_Handler+0x4>

0800384e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8003860:	2002      	movs	r0, #2
 8003862:	f000 feff 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}

0800386a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800386e:	2020      	movs	r0, #32
 8003870:	f000 fef8 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003874:	2040      	movs	r0, #64	; 0x40
 8003876:	f000 fef5 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800387a:	2080      	movs	r0, #128	; 0x80
 800387c:	f000 fef2 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003880:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003884:	f000 feee 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <USART1_IRQHandler+0x10>)
 8003892:	f005 fccf 	bl	8009234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200003e0 	.word	0x200003e0

080038a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80038a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038a8:	f000 fedc 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80038ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038b0:	f000 fed8 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80038b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038b8:	f000 fed4 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80038bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038c0:	f000 fed0 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80038c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80038c8:	f000 fecc 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM6_DAC_IRQHandler+0x10>)
 80038d6:	f005 f8ff 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000d30 	.word	0x20000d30

080038e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <TIM7_IRQHandler+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a03      	ldr	r2, [pc, #12]	; (80038fc <TIM7_IRQHandler+0x18>)
 80038f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80038f2:	4803      	ldr	r0, [pc, #12]	; (8003900 <TIM7_IRQHandler+0x1c>)
 80038f4:	f005 f8f0 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000934 	.word	0x20000934
 8003900:	20000394 	.word	0x20000394

08003904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_kill>:

int _kill(int pid, int sig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800391e:	f00f fe1b 	bl	8013558 <__errno>
 8003922:	4603      	mov	r3, r0
 8003924:	2216      	movs	r2, #22
 8003926:	601a      	str	r2, [r3, #0]
  return -1;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_exit>:

void _exit (int status)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003946:	e7fe      	b.n	8003946 <_exit+0x12>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	4601      	mov	r1, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	b2ca      	uxtb	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_read+0x12>
  }

  return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039aa:	605a      	str	r2, [r3, #4]
  return 0;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_isatty>:

int _isatty(int file)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <_sbrk+0x5c>)
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <_sbrk+0x60>)
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <_sbrk+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <_sbrk+0x64>)
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <_sbrk+0x68>)
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <_sbrk+0x64>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d207      	bcs.n	8003a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a1c:	f00f fd9c 	bl	8013558 <__errno>
 8003a20:	4603      	mov	r3, r0
 8003a22:	220c      	movs	r2, #12
 8003a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	e009      	b.n	8003a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <_sbrk+0x64>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <_sbrk+0x64>)
 8003a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20018000 	.word	0x20018000
 8003a4c:	00000400 	.word	0x00000400
 8003a50:	20000d7c 	.word	0x20000d7c
 8003a54:	20005098 	.word	0x20005098

08003a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <SystemInit+0x20>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <SystemInit+0x20>)
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a80:	f7ff ffea 	bl	8003a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a84:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a86:	490d      	ldr	r1, [pc, #52]	; (8003abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <LoopForever+0xe>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ac8 <LoopForever+0x16>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aaa:	f00f fe63 	bl	8013774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aae:	f7fd fa3f 	bl	8000f30 <main>

08003ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ab2:	e7fe      	b.n	8003ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003abc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003ac0:	08018968 	.word	0x08018968
  ldr r2, =_sbss
 8003ac4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003ac8:	20005098 	.word	0x20005098

08003acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003acc:	e7fe      	b.n	8003acc <ADC1_2_IRQHandler>

08003ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad8:	2003      	movs	r0, #3
 8003ada:	f000 f926 	bl	8003d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ade:	200f      	movs	r0, #15
 8003ae0:	f7ff fe2c 	bl	800373c <HAL_InitTick>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	71fb      	strb	r3, [r7, #7]
 8003aee:	e001      	b.n	8003af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003af0:	f7ff fac4 	bl	800307c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003af4:	79fb      	ldrb	r3, [r7, #7]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_IncTick+0x20>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_IncTick+0x24>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_IncTick+0x24>)
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000001c 	.word	0x2000001c
 8003b24:	20000d80 	.word	0x20000d80

08003b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_GetTick+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000d80 	.word	0x20000d80

08003b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff ffee 	bl	8003b28 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d005      	beq.n	8003b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_Delay+0x44>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b66:	bf00      	nop
 8003b68:	f7ff ffde 	bl	8003b28 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d8f7      	bhi.n	8003b68 <HAL_Delay+0x28>
  {
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000001c 	.word	0x2000001c

08003b88 <__NVIC_SetPriorityGrouping>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <__NVIC_SetPriorityGrouping+0x44>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <__NVIC_SetPriorityGrouping+0x44>)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	60d3      	str	r3, [r2, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <__NVIC_GetPriorityGrouping>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f003 0307 	and.w	r3, r3, #7
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_EnableIRQ>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	db0b      	blt.n	8003c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	4907      	ldr	r1, [pc, #28]	; (8003c24 <__NVIC_EnableIRQ+0x38>)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	e000e100 	.word	0xe000e100

08003c28 <__NVIC_DisableIRQ>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db12      	blt.n	8003c60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	490a      	ldr	r1, [pc, #40]	; (8003c6c <__NVIC_DisableIRQ+0x44>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	3320      	adds	r3, #32
 8003c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c54:	f3bf 8f4f 	dsb	sy
}
 8003c58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c5a:	f3bf 8f6f 	isb	sy
}
 8003c5e:	bf00      	nop
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100

08003c70 <__NVIC_SetPriority>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db0a      	blt.n	8003c9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	490c      	ldr	r1, [pc, #48]	; (8003cbc <__NVIC_SetPriority+0x4c>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	0112      	lsls	r2, r2, #4
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	440b      	add	r3, r1
 8003c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c98:	e00a      	b.n	8003cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4908      	ldr	r1, [pc, #32]	; (8003cc0 <__NVIC_SetPriority+0x50>)
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3b04      	subs	r3, #4
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	440b      	add	r3, r1
 8003cae:	761a      	strb	r2, [r3, #24]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000e100 	.word	0xe000e100
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <NVIC_EncodePriority>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f1c3 0307 	rsb	r3, r3, #7
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	bf28      	it	cs
 8003ce2:	2304      	movcs	r3, #4
 8003ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d902      	bls.n	8003cf4 <NVIC_EncodePriority+0x30>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3b03      	subs	r3, #3
 8003cf2:	e000      	b.n	8003cf6 <NVIC_EncodePriority+0x32>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	401a      	ands	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	43d9      	mvns	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d1c:	4313      	orrs	r3, r2
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	; 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff28 	bl	8003b88 <__NVIC_SetPriorityGrouping>
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d52:	f7ff ff3d 	bl	8003bd0 <__NVIC_GetPriorityGrouping>
 8003d56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	f7ff ffb1 	bl	8003cc4 <NVIC_EncodePriority>
 8003d62:	4602      	mov	r2, r0
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff80 	bl	8003c70 <__NVIC_SetPriority>
}
 8003d70:	bf00      	nop
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff30 	bl	8003bec <__NVIC_EnableIRQ>
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff40 	bl	8003c28 <__NVIC_DisableIRQ>
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0ac      	b.n	8003f1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f8b2 	bl	8003f30 <DFSDM_GetChannelFromInstance>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4a55      	ldr	r2, [pc, #340]	; (8003f24 <HAL_DFSDM_ChannelInit+0x174>)
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09f      	b.n	8003f1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff f975 	bl	80030cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_DFSDM_ChannelInit+0x178>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a4f      	ldr	r2, [pc, #316]	; (8003f28 <HAL_DFSDM_ChannelInit+0x178>)
 8003dea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003dec:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_DFSDM_ChannelInit+0x178>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d125      	bne.n	8003e40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003df4:	4b4d      	ldr	r3, [pc, #308]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dfe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4948      	ldr	r1, [pc, #288]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a46      	ldr	r2, [pc, #280]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003e18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	791b      	ldrb	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003e22:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	493f      	ldr	r1, [pc, #252]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003e34:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003e4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003e5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003e64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 020f 	bic.w	r2, r2, #15
 8003e7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003ea4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f002 0207 	and.w	r2, r2, #7
 8003ed0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003efc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f810 	bl	8003f30 <DFSDM_GetChannelFromInstance>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4904      	ldr	r1, [pc, #16]	; (8003f24 <HAL_DFSDM_ChannelInit+0x174>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000d88 	.word	0x20000d88
 8003f28:	20000d84 	.word	0x20000d84
 8003f2c:	40016000 	.word	0x40016000

08003f30 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <DFSDM_GetChannelFromInstance+0x7c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d102      	bne.n	8003f46 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e02b      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <DFSDM_GetChannelFromInstance+0x80>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d102      	bne.n	8003f54 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e024      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <DFSDM_GetChannelFromInstance+0x84>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d102      	bne.n	8003f62 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e01d      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <DFSDM_GetChannelFromInstance+0x88>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d102      	bne.n	8003f70 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e016      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <DFSDM_GetChannelFromInstance+0x8c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d102      	bne.n	8003f7e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003f78:	2305      	movs	r3, #5
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e00f      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <DFSDM_GetChannelFromInstance+0x90>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d102      	bne.n	8003f8c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003f86:	2306      	movs	r3, #6
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e008      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <DFSDM_GetChannelFromInstance+0x94>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003f94:	2307      	movs	r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40016000 	.word	0x40016000
 8003fb0:	40016020 	.word	0x40016020
 8003fb4:	40016040 	.word	0x40016040
 8003fb8:	40016080 	.word	0x40016080
 8003fbc:	400160a0 	.word	0x400160a0
 8003fc0:	400160c0 	.word	0x400160c0
 8003fc4:	400160e0 	.word	0x400160e0

08003fc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d008      	beq.n	8003ff2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e022      	b.n	8004038 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 020e 	bic.w	r2, r2, #14
 8004000:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f003 021c 	and.w	r2, r3, #28
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d005      	beq.n	8004068 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	e029      	b.n	80040bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 020e 	bic.w	r2, r2, #14
 8004076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f003 021c 	and.w	r2, r3, #28
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f202 	lsl.w	r2, r1, r2
 800409a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
    }
  }
  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d6:	e17f      	b.n	80043d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2101      	movs	r1, #1
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8171 	beq.w	80043d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d00b      	beq.n	8004110 <HAL_GPIO_Init+0x48>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d007      	beq.n	8004110 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004104:	2b11      	cmp	r3, #17
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b12      	cmp	r3, #18
 800410e:	d130      	bne.n	8004172 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004146:	2201      	movs	r2, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0201 	and.w	r2, r3, #1
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b03      	cmp	r3, #3
 800417c:	d118      	bne.n	80041b0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004184:	2201      	movs	r2, #1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f003 0201 	and.w	r2, r3, #1
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x128>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d123      	bne.n	8004238 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	08da      	lsrs	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3208      	adds	r2, #8
 80041f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	220f      	movs	r2, #15
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	08da      	lsrs	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3208      	adds	r2, #8
 8004232:	6939      	ldr	r1, [r7, #16]
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80ac 	beq.w	80043d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427a:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <HAL_GPIO_Init+0x330>)
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <HAL_GPIO_Init+0x330>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6613      	str	r3, [r2, #96]	; 0x60
 8004286:	4b5c      	ldr	r3, [pc, #368]	; (80043f8 <HAL_GPIO_Init+0x330>)
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004292:	4a5a      	ldr	r2, [pc, #360]	; (80043fc <HAL_GPIO_Init+0x334>)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	3302      	adds	r3, #2
 800429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	220f      	movs	r2, #15
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042bc:	d025      	beq.n	800430a <HAL_GPIO_Init+0x242>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_GPIO_Init+0x338>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01f      	beq.n	8004306 <HAL_GPIO_Init+0x23e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_GPIO_Init+0x33c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d019      	beq.n	8004302 <HAL_GPIO_Init+0x23a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_GPIO_Init+0x340>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_GPIO_Init+0x236>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4c      	ldr	r2, [pc, #304]	; (800440c <HAL_GPIO_Init+0x344>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00d      	beq.n	80042fa <HAL_GPIO_Init+0x232>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4b      	ldr	r2, [pc, #300]	; (8004410 <HAL_GPIO_Init+0x348>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <HAL_GPIO_Init+0x22e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <HAL_GPIO_Init+0x34c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_GPIO_Init+0x22a>
 80042ee:	2306      	movs	r3, #6
 80042f0:	e00c      	b.n	800430c <HAL_GPIO_Init+0x244>
 80042f2:	2307      	movs	r3, #7
 80042f4:	e00a      	b.n	800430c <HAL_GPIO_Init+0x244>
 80042f6:	2305      	movs	r3, #5
 80042f8:	e008      	b.n	800430c <HAL_GPIO_Init+0x244>
 80042fa:	2304      	movs	r3, #4
 80042fc:	e006      	b.n	800430c <HAL_GPIO_Init+0x244>
 80042fe:	2303      	movs	r3, #3
 8004300:	e004      	b.n	800430c <HAL_GPIO_Init+0x244>
 8004302:	2302      	movs	r3, #2
 8004304:	e002      	b.n	800430c <HAL_GPIO_Init+0x244>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_GPIO_Init+0x244>
 800430a:	2300      	movs	r3, #0
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	f002 0203 	and.w	r2, r2, #3
 8004312:	0092      	lsls	r2, r2, #2
 8004314:	4093      	lsls	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800431c:	4937      	ldr	r1, [pc, #220]	; (80043fc <HAL_GPIO_Init+0x334>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_GPIO_Init+0x350>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800434e:	4a32      	ldr	r2, [pc, #200]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <HAL_GPIO_Init+0x350>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043cc:	4a12      	ldr	r2, [pc, #72]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f47f ae78 	bne.w	80040d8 <HAL_GPIO_Init+0x10>
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40010000 	.word	0x40010000
 8004400:	48000400 	.word	0x48000400
 8004404:	48000800 	.word	0x48000800
 8004408:	48000c00 	.word	0x48000c00
 800440c:	48001000 	.word	0x48001000
 8004410:	48001400 	.word	0x48001400
 8004414:	48001800 	.word	0x48001800
 8004418:	40010400 	.word	0x40010400

0800441c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800442a:	e0cd      	b.n	80045c8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800442c:	2201      	movs	r2, #1
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80c0 	beq.w	80045c2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004442:	4a68      	ldr	r2, [pc, #416]	; (80045e4 <HAL_GPIO_DeInit+0x1c8>)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	3302      	adds	r3, #2
 800444a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	220f      	movs	r2, #15
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800446a:	d025      	beq.n	80044b8 <HAL_GPIO_DeInit+0x9c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a5e      	ldr	r2, [pc, #376]	; (80045e8 <HAL_GPIO_DeInit+0x1cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01f      	beq.n	80044b4 <HAL_GPIO_DeInit+0x98>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <HAL_GPIO_DeInit+0x1d0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d019      	beq.n	80044b0 <HAL_GPIO_DeInit+0x94>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a5c      	ldr	r2, [pc, #368]	; (80045f0 <HAL_GPIO_DeInit+0x1d4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_GPIO_DeInit+0x90>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <HAL_GPIO_DeInit+0x1d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00d      	beq.n	80044a8 <HAL_GPIO_DeInit+0x8c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a5a      	ldr	r2, [pc, #360]	; (80045f8 <HAL_GPIO_DeInit+0x1dc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <HAL_GPIO_DeInit+0x88>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a59      	ldr	r2, [pc, #356]	; (80045fc <HAL_GPIO_DeInit+0x1e0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_GPIO_DeInit+0x84>
 800449c:	2306      	movs	r3, #6
 800449e:	e00c      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044a0:	2307      	movs	r3, #7
 80044a2:	e00a      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044a4:	2305      	movs	r3, #5
 80044a6:	e008      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044a8:	2304      	movs	r3, #4
 80044aa:	e006      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044ac:	2303      	movs	r3, #3
 80044ae:	e004      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e002      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_GPIO_DeInit+0x9e>
 80044b8:	2300      	movs	r3, #0
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	f002 0203 	and.w	r2, r2, #3
 80044c0:	0092      	lsls	r2, r2, #2
 80044c2:	4093      	lsls	r3, r2
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d132      	bne.n	8004530 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	494b      	ldr	r1, [pc, #300]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80044d8:	4b49      	ldr	r3, [pc, #292]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	4947      	ldr	r1, [pc, #284]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	4944      	ldr	r1, [pc, #272]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	4940      	ldr	r1, [pc, #256]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	220f      	movs	r2, #15
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004512:	4a34      	ldr	r2, [pc, #208]	; (80045e4 <HAL_GPIO_DeInit+0x1c8>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43da      	mvns	r2, r3
 8004522:	4830      	ldr	r0, [pc, #192]	; (80045e4 <HAL_GPIO_DeInit+0x1c8>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	400a      	ands	r2, r1
 800452a:	3302      	adds	r3, #2
 800452c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2103      	movs	r1, #3
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3208      	adds	r2, #8
 800454c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	08d2      	lsrs	r2, r2, #3
 8004564:	4019      	ands	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2103      	movs	r1, #3
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	2101      	movs	r1, #1
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2103      	movs	r1, #3
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	2101      	movs	r1, #1
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	401a      	ands	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	3301      	adds	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af2b 	bne.w	800442c <HAL_GPIO_DeInit+0x10>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40010000 	.word	0x40010000
 80045e8:	48000400 	.word	0x48000400
 80045ec:	48000800 	.word	0x48000800
 80045f0:	48000c00 	.word	0x48000c00
 80045f4:	48001000 	.word	0x48001000
 80045f8:	48001400 	.word	0x48001400
 80045fc:	48001800 	.word	0x48001800
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004650:	e002      	b.n	8004658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd f994 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e081      	b.n	80047aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe fd6a 	bl	8003194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d107      	bne.n	800470e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	e006      	b.n	800471c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800471a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d104      	bne.n	800472e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800472c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	ea42 0103 	orr.w	r1, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e021      	b.n	8004808 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fe fd37 	bl	8003250 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4603      	mov	r3, r0
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	460b      	mov	r3, r1
 8004824:	813b      	strh	r3, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	f040 80f9 	bne.w	8004a2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_I2C_Mem_Write+0x34>
 800483e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0ed      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_I2C_Mem_Write+0x4e>
 800485a:	2302      	movs	r3, #2
 800485c:	e0e6      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004866:	f7ff f95f 	bl	8003b28 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2319      	movs	r3, #25
 8004872:	2201      	movs	r2, #1
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fac3 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0d1      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048b0:	88f8      	ldrh	r0, [r7, #6]
 80048b2:	893a      	ldrh	r2, [r7, #8]
 80048b4:	8979      	ldrh	r1, [r7, #10]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4603      	mov	r3, r0
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9d3 	bl	8004c6c <I2C_RequestMemoryWrite>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0a9      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2bff      	cmp	r3, #255	; 0xff
 80048e0:	d90e      	bls.n	8004900 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	8979      	ldrh	r1, [r7, #10]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fba5 	bl	8005048 <I2C_TransferConfig>
 80048fe:	e00f      	b.n	8004920 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	b2da      	uxtb	r2, r3
 8004910:	8979      	ldrh	r1, [r7, #10]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fb94 	bl	8005048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 faad 	bl	8004e84 <I2C_WaitOnTXISFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e07b      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d034      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x1c8>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d130      	bne.n	80049d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fa3f 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e04d      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2bff      	cmp	r3, #255	; 0xff
 8004998:	d90e      	bls.n	80049b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	22ff      	movs	r2, #255	; 0xff
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	8979      	ldrh	r1, [r7, #10]
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fb49 	bl	8005048 <I2C_TransferConfig>
 80049b6:	e00f      	b.n	80049d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	8979      	ldrh	r1, [r7, #10]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fb38 	bl	8005048 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d19e      	bne.n	8004920 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fa8c 	bl	8004f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e01a      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2220      	movs	r2, #32
 80049fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_I2C_Mem_Write+0x224>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	fe00e800 	.word	0xfe00e800

08004a38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	813b      	strh	r3, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	f040 80fd 	bne.w	8004c5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x34>
 8004a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0f1      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_I2C_Mem_Read+0x4e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e0ea      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a8e:	f7ff f84b 	bl	8003b28 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2319      	movs	r3, #25
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f9af 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0d5      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2222      	movs	r2, #34	; 0x22
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ad8:	88f8      	ldrh	r0, [r7, #6]
 8004ada:	893a      	ldrh	r2, [r7, #8]
 8004adc:	8979      	ldrh	r1, [r7, #10]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f913 	bl	8004d14 <I2C_RequestMemoryRead>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0ad      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d90e      	bls.n	8004b28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	4b52      	ldr	r3, [pc, #328]	; (8004c64 <HAL_I2C_Mem_Read+0x22c>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa91 	bl	8005048 <I2C_TransferConfig>
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	8979      	ldrh	r1, [r7, #10]
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_I2C_Mem_Read+0x22c>)
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa80 	bl	8005048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2104      	movs	r1, #4
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f956 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07c      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d034      	beq.n	8004c08 <HAL_I2C_Mem_Read+0x1d0>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d130      	bne.n	8004c08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f927 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04d      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2bff      	cmp	r3, #255	; 0xff
 8004bc8:	d90e      	bls.n	8004be8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa31 	bl	8005048 <I2C_TransferConfig>
 8004be6:	e00f      	b.n	8004c08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	8979      	ldrh	r1, [r7, #10]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fa20 	bl	8005048 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d19a      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f974 	bl	8004f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e01a      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_I2C_Mem_Read+0x230>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	80002400 	.word	0x80002400
 8004c68:	fe00e800 	.word	0xfe00e800

08004c6c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	817b      	strh	r3, [r7, #10]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	813b      	strh	r3, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <I2C_RequestMemoryWrite+0xa4>)
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f9d7 	bl	8005048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8f0 	bl	8004e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e02c      	b.n	8004d08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbe:	e015      	b.n	8004cec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc0:	893b      	ldrh	r3, [r7, #8]
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8d6 	bl	8004e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e012      	b.n	8004d08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce2:	893b      	ldrh	r3, [r7, #8]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f884 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	80002000 	.word	0x80002000

08004d14 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	817b      	strh	r3, [r7, #10]
 8004d26:	460b      	mov	r3, r1
 8004d28:	813b      	strh	r3, [r7, #8]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <I2C_RequestMemoryRead+0xa4>)
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f984 	bl	8005048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f89d 	bl	8004e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e02c      	b.n	8004dae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d5a:	893b      	ldrh	r3, [r7, #8]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
 8004d64:	e015      	b.n	8004d92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d66:	893b      	ldrh	r3, [r7, #8]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	69b9      	ldr	r1, [r7, #24]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f883 	bl	8004e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e012      	b.n	8004dae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2140      	movs	r1, #64	; 0x40
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f831 	bl	8004e04 <I2C_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	80002000 	.word	0x80002000

08004dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d103      	bne.n	8004dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d007      	beq.n	8004df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	619a      	str	r2, [r3, #24]
  }
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e14:	e022      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d01e      	beq.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1e:	f7fe fe83 	bl	8003b28 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d113      	bne.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e00f      	b.n	8004e7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d0cd      	beq.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e90:	e02c      	b.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f870 	bl	8004f7c <I2C_IsAcknowledgeFailed>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e02a      	b.n	8004efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d01e      	beq.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eae:	f7fe fe3b 	bl	8003b28 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d302      	bcc.n	8004ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d113      	bne.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d1cb      	bne.n	8004e92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f10:	e028      	b.n	8004f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f830 	bl	8004f7c <I2C_IsAcknowledgeFailed>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e026      	b.n	8004f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fe fdff 	bl	8003b28 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d113      	bne.n	8004f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e007      	b.n	8004f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d1cf      	bne.n	8004f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d151      	bne.n	800503a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f96:	e022      	b.n	8004fde <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d01e      	beq.n	8004fde <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7fe fdc2 	bl	8003b28 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <I2C_IsAcknowledgeFailed+0x3a>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e02e      	b.n	800503c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d1d5      	bne.n	8004f98 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff fedd 	bl	8004dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <I2C_IsAcknowledgeFailed+0xc8>)
 800500e:	400b      	ands	r3, r1
 8005010:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	fe00e800 	.word	0xfe00e800

08005048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	4613      	mov	r3, r2
 8005058:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	0d5b      	lsrs	r3, r3, #21
 8005064:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <I2C_TransferConfig+0x58>)
 800506a:	430b      	orrs	r3, r1
 800506c:	43db      	mvns	r3, r3
 800506e:	ea02 0103 	and.w	r1, r2, r3
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005078:	7a7b      	ldrb	r3, [r7, #9]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	431a      	orrs	r2, r3
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	03ff63ff 	.word	0x03ff63ff

080050a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d138      	bne.n	800512c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e032      	b.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	; 0x24
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	d139      	bne.n	80051c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800515a:	2302      	movs	r3, #2
 800515c:	e033      	b.n	80051c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2224      	movs	r2, #36	; 0x24
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800518c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d4:	b08f      	sub	sp, #60	; 0x3c
 80051d6:	af0a      	add	r7, sp, #40	; 0x28
 80051d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e116      	b.n	8005412 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fe fa00 	bl	8003604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2203      	movs	r2, #3
 8005208:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f005 f83e 	bl	800a2a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	687e      	ldr	r6, [r7, #4]
 8005230:	466d      	mov	r5, sp
 8005232:	f106 0410 	add.w	r4, r6, #16
 8005236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005242:	e885 0003 	stmia.w	r5, {r0, r1}
 8005246:	1d33      	adds	r3, r6, #4
 8005248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800524a:	6838      	ldr	r0, [r7, #0]
 800524c:	f004 fffe 	bl	800a24c <USB_CoreInit>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0d7      	b.n	8005412 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f005 f82c 	bl	800a2c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	e04a      	b.n	800530a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	333d      	adds	r3, #61	; 0x3d
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	333c      	adds	r3, #60	; 0x3c
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	b298      	uxth	r0, r3
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3342      	adds	r3, #66	; 0x42
 80052b0:	4602      	mov	r2, r0
 80052b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	333f      	adds	r3, #63	; 0x3f
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3344      	adds	r3, #68	; 0x44
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3348      	adds	r3, #72	; 0x48
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3350      	adds	r3, #80	; 0x50
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3301      	adds	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d3af      	bcc.n	8005274 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e044      	b.n	80053a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005388:	7bfa      	ldrb	r2, [r7, #15]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	3301      	adds	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	7bfa      	ldrb	r2, [r7, #15]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3b5      	bcc.n	800531a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	687e      	ldr	r6, [r7, #4]
 80053b6:	466d      	mov	r5, sp
 80053b8:	f106 0410 	add.w	r4, r6, #16
 80053bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80053cc:	1d33      	adds	r3, r6, #4
 80053ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	f004 ffa3 	bl	800a31c <USB_DevInit>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e014      	b.n	8005412 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d102      	bne.n	8005406 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f80a 	bl	800541a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f005 f933 	bl	800a676 <USB_DevDisconnect>

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800541a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	f043 0303 	orr.w	r3, r3, #3
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40007000 	.word	0x40007000

08005484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <HAL_PWREx_GetVoltageRange+0x18>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40007000 	.word	0x40007000

080054a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ae:	d130      	bne.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b0:	4b23      	ldr	r3, [pc, #140]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d038      	beq.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054c6:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2232      	movs	r2, #50	; 0x32
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0c9b      	lsrs	r3, r3, #18
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e4:	e002      	b.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f8:	d102      	bne.n	8005500 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f2      	bne.n	80054e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d110      	bne.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d007      	beq.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005520:	4b07      	ldr	r3, [pc, #28]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005528:	4a05      	ldr	r2, [pc, #20]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800552a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800552e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40007000 	.word	0x40007000
 8005544:	20000014 	.word	0x20000014
 8005548:	431bde83 	.word	0x431bde83

0800554c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800555a:	6053      	str	r3, [r2, #4]
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40007000 	.word	0x40007000

0800556c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005574:	f7fe fad8 	bl	8003b28 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e063      	b.n	800564c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fd fe7d 	bl	8003298 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800559e:	f241 3188 	movw	r1, #5000	; 0x1388
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f858 	bl	8005658 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2120      	movs	r1, #32
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f850 	bl	8005674 <QSPI_WaitFlagStateUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80055d8:	7afb      	ldrb	r3, [r7, #11]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d131      	bne.n	8005642 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6852      	ldr	r2, [r2, #4]
 80055f0:	0611      	lsls	r1, r2, #24
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_QSPI_Init+0xe8>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6912      	ldr	r2, [r2, #16]
 800560e:	0411      	lsls	r1, r2, #16
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6952      	ldr	r2, [r2, #20]
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6992      	ldr	r2, [r2, #24]
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	430b      	orrs	r3, r1
 8005622:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800564a:	7afb      	ldrb	r3, [r7, #11]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	ffe0f8fe 	.word	0xffe0f8fe

08005658 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005684:	e01a      	b.n	80056bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d016      	beq.n	80056bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fe fa4b 	bl	8003b28 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e00e      	b.n	80056da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bf14      	ite	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	2300      	moveq	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1d6      	bne.n	8005686 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e3d8      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056f6:	4b97      	ldr	r3, [pc, #604]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005700:	4b94      	ldr	r3, [pc, #592]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80e4 	beq.w	80058e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_RCC_OscConfig+0x4a>
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	f040 808b 	bne.w	800583c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 8087 	bne.w	800583c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800572e:	4b89      	ldr	r3, [pc, #548]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_RCC_OscConfig+0x62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e3b0      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	4b82      	ldr	r3, [pc, #520]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <HAL_RCC_OscConfig+0x7c>
 8005756:	4b7f      	ldr	r3, [pc, #508]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575e:	e005      	b.n	800576c <HAL_RCC_OscConfig+0x88>
 8005760:	4b7c      	ldr	r3, [pc, #496]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576c:	4293      	cmp	r3, r2
 800576e:	d223      	bcs.n	80057b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fd75 	bl	8006264 <RCC_SetFlashLatencyFromMSIRange>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e391      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005784:	4b73      	ldr	r3, [pc, #460]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a72      	ldr	r2, [pc, #456]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800578a:	f043 0308 	orr.w	r3, r3, #8
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b70      	ldr	r3, [pc, #448]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	496d      	ldr	r1, [pc, #436]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a2:	4b6c      	ldr	r3, [pc, #432]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	4968      	ldr	r1, [pc, #416]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
 80057b6:	e025      	b.n	8005804 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057b8:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a65      	ldr	r2, [pc, #404]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057be:	f043 0308 	orr.w	r3, r3, #8
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	4960      	ldr	r1, [pc, #384]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	495b      	ldr	r1, [pc, #364]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fd35 	bl	8006264 <RCC_SetFlashLatencyFromMSIRange>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e351      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005804:	f000 fc38 	bl	8006078 <HAL_RCC_GetSysClockFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b52      	ldr	r3, [pc, #328]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	4950      	ldr	r1, [pc, #320]	; (8005958 <HAL_RCC_OscConfig+0x274>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	4a4e      	ldr	r2, [pc, #312]	; (800595c <HAL_RCC_OscConfig+0x278>)
 8005822:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005824:	4b4e      	ldr	r3, [pc, #312]	; (8005960 <HAL_RCC_OscConfig+0x27c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fd ff87 	bl	800373c <HAL_InitTick>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d052      	beq.n	80058de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	e335      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d032      	beq.n	80058aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005844:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a42      	ldr	r2, [pc, #264]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005850:	f7fe f96a 	bl	8003b28 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005858:	f7fe f966 	bl	8003b28 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e31e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800586a:	4b3a      	ldr	r3, [pc, #232]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a36      	ldr	r2, [pc, #216]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4931      	ldr	r1, [pc, #196]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005894:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	492c      	ldr	r1, [pc, #176]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	e01a      	b.n	80058e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a29      	ldr	r2, [pc, #164]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058b6:	f7fe f937 	bl	8003b28 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058be:	f7fe f933 	bl	8003b28 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e2eb      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x1da>
 80058dc:	e000      	b.n	80058e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d074      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d005      	beq.n	80058fe <HAL_RCC_OscConfig+0x21a>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d10e      	bne.n	8005916 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d10b      	bne.n	8005916 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d064      	beq.n	80059d4 <HAL_RCC_OscConfig+0x2f0>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d160      	bne.n	80059d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e2c8      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x24a>
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	e026      	b.n	800597c <HAL_RCC_OscConfig+0x298>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005936:	d115      	bne.n	8005964 <HAL_RCC_OscConfig+0x280>
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a05      	ldr	r2, [pc, #20]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800593e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a02      	ldr	r2, [pc, #8]	; (8005954 <HAL_RCC_OscConfig+0x270>)
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e014      	b.n	800597c <HAL_RCC_OscConfig+0x298>
 8005952:	bf00      	nop
 8005954:	40021000 	.word	0x40021000
 8005958:	080181fc 	.word	0x080181fc
 800595c:	20000014 	.word	0x20000014
 8005960:	20000018 	.word	0x20000018
 8005964:	4ba0      	ldr	r3, [pc, #640]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a9f      	ldr	r2, [pc, #636]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 800596a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4b9d      	ldr	r3, [pc, #628]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a9c      	ldr	r2, [pc, #624]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe f8d0 	bl	8003b28 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598c:	f7fe f8cc 	bl	8003b28 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e284      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800599e:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x2a8>
 80059aa:	e014      	b.n	80059d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fe f8bc 	bl	8003b28 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fe f8b8 	bl	8003b28 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	; 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e270      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059c6:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2d0>
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d060      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_OscConfig+0x310>
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b0c      	cmp	r3, #12
 80059ec:	d119      	bne.n	8005a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d116      	bne.n	8005a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f4:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_OscConfig+0x328>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e24d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0c:	4b76      	ldr	r3, [pc, #472]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	4973      	ldr	r1, [pc, #460]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a20:	e040      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d023      	beq.n	8005a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a2a:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a6e      	ldr	r2, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fe f877 	bl	8003b28 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fe f873 	bl	8003b28 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e22b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a50:	4b65      	ldr	r3, [pc, #404]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5c:	4b62      	ldr	r3, [pc, #392]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	495f      	ldr	r1, [pc, #380]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	604b      	str	r3, [r1, #4]
 8005a70:	e018      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a72:	4b5d      	ldr	r3, [pc, #372]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a5c      	ldr	r2, [pc, #368]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fe f853 	bl	8003b28 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fe f84f 	bl	8003b28 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e207      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a98:	4b53      	ldr	r3, [pc, #332]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d03c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01c      	beq.n	8005af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005abe:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac8:	f7fe f82e 	bl	8003b28 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad0:	f7fe f82a 	bl	8003b28 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e1e2      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ae2:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ef      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x3ec>
 8005af0:	e01b      	b.n	8005b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af2:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af8:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fe f811 	bl	8003b28 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0a:	f7fe f80d 	bl	8003b28 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e1c5      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ef      	bne.n	8005b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a6 	beq.w	8005c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b3c:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b48:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6593      	str	r3, [r2, #88]	; 0x58
 8005b54:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b60:	2301      	movs	r3, #1
 8005b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <HAL_RCC_OscConfig+0x508>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d118      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b70:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <HAL_RCC_OscConfig+0x508>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <HAL_RCC_OscConfig+0x508>)
 8005b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b7c:	f7fd ffd4 	bl	8003b28 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b84:	f7fd ffd0 	bl	8003b28 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e188      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <HAL_RCC_OscConfig+0x508>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d108      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4d8>
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bba:	e029      	b.n	8005c10 <HAL_RCC_OscConfig+0x52c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d115      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x50c>
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bcc:	f043 0304 	orr.w	r3, r3, #4
 8005bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	4a03      	ldr	r2, [pc, #12]	; (8005be8 <HAL_RCC_OscConfig+0x504>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005be4:	e014      	b.n	8005c10 <HAL_RCC_OscConfig+0x52c>
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	4b91      	ldr	r3, [pc, #580]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	4a90      	ldr	r2, [pc, #576]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c00:	4b8d      	ldr	r3, [pc, #564]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	4a8c      	ldr	r2, [pc, #560]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d016      	beq.n	8005c46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd ff86 	bl	8003b28 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd ff82 	bl	8003b28 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e138      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c36:	4b80      	ldr	r3, [pc, #512]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ed      	beq.n	8005c20 <HAL_RCC_OscConfig+0x53c>
 8005c44:	e015      	b.n	8005c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fd ff6f 	bl	8003b28 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fd ff6b 	bl	8003b28 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e121      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c64:	4b74      	ldr	r3, [pc, #464]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ed      	bne.n	8005c4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c78:	4b6f      	ldr	r3, [pc, #444]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	4a6e      	ldr	r2, [pc, #440]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 810c 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	f040 80d4 	bne.w	8005e40 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c98:	4b67      	ldr	r3, [pc, #412]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 0203 	and.w	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d130      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d127      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d11f      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cd8:	2a07      	cmp	r2, #7
 8005cda:	bf14      	ite	ne
 8005cdc:	2201      	movne	r2, #1
 8005cde:	2200      	moveq	r2, #0
 8005ce0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d113      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	3b01      	subs	r3, #1
 8005d08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d06e      	beq.n	8005dec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d069      	beq.n	8005de8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d14:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d20:	4b45      	ldr	r3, [pc, #276]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0bb      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d30:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a40      	ldr	r2, [pc, #256]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d3c:	f7fd fef4 	bl	8003b28 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fef0 	bl	8003b28 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0a8      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d56:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d62:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <HAL_RCC_OscConfig+0x758>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d72:	3a01      	subs	r2, #1
 8005d74:	0112      	lsls	r2, r2, #4
 8005d76:	4311      	orrs	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d7c:	0212      	lsls	r2, r2, #8
 8005d7e:	4311      	orrs	r1, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d84:	0852      	lsrs	r2, r2, #1
 8005d86:	3a01      	subs	r2, #1
 8005d88:	0552      	lsls	r2, r2, #21
 8005d8a:	4311      	orrs	r1, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d90:	0852      	lsrs	r2, r2, #1
 8005d92:	3a01      	subs	r2, #1
 8005d94:	0652      	lsls	r2, r2, #25
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d9c:	0912      	lsrs	r2, r2, #4
 8005d9e:	0452      	lsls	r2, r2, #17
 8005da0:	430a      	orrs	r2, r1
 8005da2:	4925      	ldr	r1, [pc, #148]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005da8:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005db4:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dc0:	f7fd feb2 	bl	8003b28 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fd feae 	bl	8003b28 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e066      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005de6:	e05e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e05d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dec:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d156      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005df8:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e10:	f7fd fe8a 	bl	8003b28 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e18:	f7fd fe86 	bl	8003b28 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e03e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2a:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_RCC_OscConfig+0x754>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x734>
 8005e36:	e036      	b.n	8005ea6 <HAL_RCC_OscConfig+0x7c2>
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d02d      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e46:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005e52:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e64:	f023 0303 	bic.w	r3, r3, #3
 8005e68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fd fe55 	bl	8003b28 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e82:	f7fd fe51 	bl	8003b28 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e009      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCC_OscConfig+0x7cc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCC_OscConfig+0x79e>
 8005ea0:	e001      	b.n	8005ea6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000

08005eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0c8      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d910      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b63      	ldr	r3, [pc, #396]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f023 0207 	bic.w	r2, r3, #7
 8005ede:	4961      	ldr	r1, [pc, #388]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b5f      	ldr	r3, [pc, #380]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0b0      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d04c      	beq.n	8005f9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0c:	4b56      	ldr	r3, [pc, #344]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d121      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e09e      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f24:	4b50      	ldr	r3, [pc, #320]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d115      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e092      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e086      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4c:	4b46      	ldr	r3, [pc, #280]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e07e      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f5c:	4b42      	ldr	r3, [pc, #264]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 0203 	bic.w	r2, r3, #3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	493f      	ldr	r1, [pc, #252]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6e:	f7fd fddb 	bl	8003b28 <HAL_GetTick>
 8005f72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f74:	e00a      	b.n	8005f8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f76:	f7fd fdd7 	bl	8003b28 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e066      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8c:	4b36      	ldr	r3, [pc, #216]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 020c 	and.w	r2, r3, #12
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d1eb      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	492c      	ldr	r1, [pc, #176]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b29      	ldr	r3, [pc, #164]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d210      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b26      	ldr	r3, [pc, #152]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 0207 	bic.w	r2, r3, #7
 8005fd2:	4924      	ldr	r1, [pc, #144]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b22      	ldr	r3, [pc, #136]	; (8006064 <HAL_RCC_ClockConfig+0x1b0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e036      	b.n	800605a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4918      	ldr	r1, [pc, #96]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4910      	ldr	r1, [pc, #64]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800602a:	f000 f825 	bl	8006078 <HAL_RCC_GetSysClockFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <HAL_RCC_ClockConfig+0x1b4>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	490c      	ldr	r1, [pc, #48]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 800603c:	5ccb      	ldrb	r3, [r1, r3]
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	fa22 f303 	lsr.w	r3, r2, r3
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fb74 	bl	800373c <HAL_InitTick>
 8006054:	4603      	mov	r3, r0
 8006056:	72fb      	strb	r3, [r7, #11]

  return status;
 8006058:	7afb      	ldrb	r3, [r7, #11]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40022000 	.word	0x40022000
 8006068:	40021000 	.word	0x40021000
 800606c:	080181fc 	.word	0x080181fc
 8006070:	20000014 	.word	0x20000014
 8006074:	20000018 	.word	0x20000018

08006078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006086:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006090:	4b3b      	ldr	r3, [pc, #236]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x34>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d121      	bne.n	80060ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d11e      	bne.n	80060ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060ac:	4b34      	ldr	r3, [pc, #208]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060b8:	4b31      	ldr	r3, [pc, #196]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	e005      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060c8:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060d4:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10d      	bne.n	8006100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d102      	bne.n	80060f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <HAL_RCC_GetSysClockFreq+0x110>)
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	e004      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060fc:	4b23      	ldr	r3, [pc, #140]	; (800618c <HAL_RCC_GetSysClockFreq+0x114>)
 80060fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d134      	bne.n	8006170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006106:	4b1e      	ldr	r3, [pc, #120]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d003      	beq.n	800611e <HAL_RCC_GetSysClockFreq+0xa6>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b03      	cmp	r3, #3
 800611a:	d003      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0xac>
 800611c:	e005      	b.n	800612a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <HAL_RCC_GetSysClockFreq+0x110>)
 8006120:	617b      	str	r3, [r7, #20]
      break;
 8006122:	e005      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_RCC_GetSysClockFreq+0x114>)
 8006126:	617b      	str	r3, [r7, #20]
      break;
 8006128:	e002      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	617b      	str	r3, [r7, #20]
      break;
 800612e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	3301      	adds	r3, #1
 800613c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	fb03 f202 	mul.w	r2, r3, r2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCC_GetSysClockFreq+0x108>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	0e5b      	lsrs	r3, r3, #25
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	3301      	adds	r3, #1
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006170:	69bb      	ldr	r3, [r7, #24]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000
 8006184:	08018214 	.word	0x08018214
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200

08006190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000014 	.word	0x20000014

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0801820c 	.word	0x0801820c

080061d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061d8:	f7ff ffda 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0adb      	lsrs	r3, r3, #11
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4904      	ldr	r1, [pc, #16]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	0801820c 	.word	0x0801820c

08006200 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	220f      	movs	r2, #15
 800620e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0203 	and.w	r2, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006242:	4b07      	ldr	r3, [pc, #28]	; (8006260 <HAL_RCC_GetClockConfig+0x60>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	601a      	str	r2, [r3, #0]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000
 8006260:	40022000 	.word	0x40022000

08006264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006270:	4b2a      	ldr	r3, [pc, #168]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800627c:	f7ff f902 	bl	8005484 <HAL_PWREx_GetVoltageRange>
 8006280:	6178      	str	r0, [r7, #20]
 8006282:	e014      	b.n	80062ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006284:	4b25      	ldr	r3, [pc, #148]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006288:	4a24      	ldr	r2, [pc, #144]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628e:	6593      	str	r3, [r2, #88]	; 0x58
 8006290:	4b22      	ldr	r3, [pc, #136]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800629c:	f7ff f8f2 	bl	8005484 <HAL_PWREx_GetVoltageRange>
 80062a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b4:	d10b      	bne.n	80062ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d919      	bls.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2ba0      	cmp	r3, #160	; 0xa0
 80062c0:	d902      	bls.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062c2:	2302      	movs	r3, #2
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e013      	b.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062c8:	2301      	movs	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	e010      	b.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d902      	bls.n	80062da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062d4:	2303      	movs	r3, #3
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	e00a      	b.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d102      	bne.n	80062e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062e0:	2302      	movs	r3, #2
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	e004      	b.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b70      	cmp	r3, #112	; 0x70
 80062ea:	d101      	bne.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062ec:	2301      	movs	r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f023 0207 	bic.w	r2, r3, #7
 80062f8:	4909      	ldr	r1, [pc, #36]	; (8006320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	429a      	cmp	r2, r3
 800630c:	d001      	beq.n	8006312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40021000 	.word	0x40021000
 8006320:	40022000 	.word	0x40022000

08006324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800632c:	2300      	movs	r3, #0
 800632e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006330:	2300      	movs	r3, #0
 8006332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633c:	2b00      	cmp	r3, #0
 800633e:	d041      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006344:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006348:	d02a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800634a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800634e:	d824      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006350:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006354:	d008      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800635a:	d81e      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006364:	d010      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006366:	e018      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006368:	4b86      	ldr	r3, [pc, #536]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a85      	ldr	r2, [pc, #532]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006372:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006374:	e015      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f000 facb 	bl	8006918 <RCCEx_PLLSAI1_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006386:	e00c      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3320      	adds	r3, #32
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fbb6 	bl	8006b00 <RCCEx_PLLSAI2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	74fb      	strb	r3, [r7, #19]
      break;
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80063a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063a8:	4b76      	ldr	r3, [pc, #472]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b6:	4973      	ldr	r1, [pc, #460]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063be:	e001      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d041      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063d8:	d02a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80063da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063de:	d824      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e4:	d008      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ea:	d81e      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80063f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f4:	d010      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063f6:	e018      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063f8:	4b62      	ldr	r3, [pc, #392]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4a61      	ldr	r2, [pc, #388]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006402:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006404:	e015      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa83 	bl	8006918 <RCCEx_PLLSAI1_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006416:	e00c      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3320      	adds	r3, #32
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fb6e 	bl	8006b00 <RCCEx_PLLSAI2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	74fb      	strb	r3, [r7, #19]
      break;
 800642e:	e000      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006438:	4b52      	ldr	r3, [pc, #328]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006446:	494f      	ldr	r1, [pc, #316]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800644e:	e001      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	7cfb      	ldrb	r3, [r7, #19]
 8006452:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a0 	beq.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006466:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647c:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	4a40      	ldr	r2, [pc, #256]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006486:	6593      	str	r3, [r2, #88]	; 0x58
 8006488:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006494:	2301      	movs	r3, #1
 8006496:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006498:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3a      	ldr	r2, [pc, #232]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a4:	f7fd fb40 	bl	8003b28 <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064aa:	e009      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7fd fb3c 	bl	8003b28 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d902      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	74fb      	strb	r3, [r7, #19]
        break;
 80064be:	e005      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064c0:	4b31      	ldr	r3, [pc, #196]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ef      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d15c      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064d2:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01f      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d019      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064f0:	4b24      	ldr	r3, [pc, #144]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	4a20      	ldr	r2, [pc, #128]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	4a1c      	ldr	r2, [pc, #112]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fd fafb 	bl	8003b28 <HAL_GetTick>
 8006532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006534:	e00b      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006536:	f7fd faf7 	bl	8003b28 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f241 3288 	movw	r2, #5000	; 0x1388
 8006544:	4293      	cmp	r3, r2
 8006546:	d902      	bls.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	74fb      	strb	r3, [r7, #19]
            break;
 800654c:	e006      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0ec      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	4904      	ldr	r1, [pc, #16]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800657a:	e009      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	74bb      	strb	r3, [r7, #18]
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
 8006588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006590:	7c7b      	ldrb	r3, [r7, #17]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d105      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006596:	4b9e      	ldr	r3, [pc, #632]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659a:	4a9d      	ldr	r2, [pc, #628]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065ae:	4b98      	ldr	r3, [pc, #608]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f023 0203 	bic.w	r2, r3, #3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	4994      	ldr	r1, [pc, #592]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065d0:	4b8f      	ldr	r3, [pc, #572]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f023 020c 	bic.w	r2, r3, #12
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	498c      	ldr	r1, [pc, #560]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065f2:	4b87      	ldr	r3, [pc, #540]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	4983      	ldr	r1, [pc, #524]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006614:	4b7e      	ldr	r3, [pc, #504]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006622:	497b      	ldr	r1, [pc, #492]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006644:	4972      	ldr	r1, [pc, #456]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006658:	4b6d      	ldr	r3, [pc, #436]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	496a      	ldr	r1, [pc, #424]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800667a:	4b65      	ldr	r3, [pc, #404]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	4961      	ldr	r1, [pc, #388]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066aa:	4959      	ldr	r1, [pc, #356]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066be:	4b54      	ldr	r3, [pc, #336]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	4950      	ldr	r1, [pc, #320]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	4948      	ldr	r1, [pc, #288]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006702:	4b43      	ldr	r3, [pc, #268]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006710:	493f      	ldr	r1, [pc, #252]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d028      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006724:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006732:	4937      	ldr	r1, [pc, #220]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006742:	d106      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006744:	4b32      	ldr	r3, [pc, #200]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	4a31      	ldr	r2, [pc, #196]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800674e:	60d3      	str	r3, [r2, #12]
 8006750:	e011      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006756:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800675a:	d10c      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3304      	adds	r3, #4
 8006760:	2101      	movs	r1, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f8d8 	bl	8006918 <RCCEx_PLLSAI1_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800676c:	7cfb      	ldrb	r3, [r7, #19]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006772:	7cfb      	ldrb	r3, [r7, #19]
 8006774:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d028      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	491f      	ldr	r1, [pc, #124]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a0:	d106      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ac:	60d3      	str	r3, [r2, #12]
 80067ae:	e011      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	2101      	movs	r1, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f8a9 	bl	8006918 <RCCEx_PLLSAI1_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067ca:	7cfb      	ldrb	r3, [r7, #19]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02b      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ee:	4908      	ldr	r1, [pc, #32]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067fe:	d109      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006800:	4b03      	ldr	r3, [pc, #12]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4a02      	ldr	r2, [pc, #8]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800680a:	60d3      	str	r3, [r2, #12]
 800680c:	e014      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800681c:	d10c      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	2101      	movs	r1, #1
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f877 	bl	8006918 <RCCEx_PLLSAI1_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800682e:	7cfb      	ldrb	r3, [r7, #19]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006834:	7cfb      	ldrb	r3, [r7, #19]
 8006836:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006844:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006852:	4928      	ldr	r1, [pc, #160]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006862:	d10d      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	2102      	movs	r1, #2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f854 	bl	8006918 <RCCEx_PLLSAI1_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006874:	7cfb      	ldrb	r3, [r7, #19]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800687a:	7cfb      	ldrb	r3, [r7, #19]
 800687c:	74bb      	strb	r3, [r7, #18]
 800687e:	e011      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006888:	d10c      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3320      	adds	r3, #32
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f000 f935 	bl	8006b00 <RCCEx_PLLSAI2_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800689a:	7cfb      	ldrb	r3, [r7, #19]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80068a0:	7cfb      	ldrb	r3, [r7, #19]
 80068a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068b0:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	490d      	ldr	r1, [pc, #52]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e2:	4904      	ldr	r1, [pc, #16]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40021000 	.word	0x40021000

080068f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a04      	ldr	r2, [pc, #16]	; (8006914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	6013      	str	r3, [r2, #0]
}
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000

08006918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006926:	4b75      	ldr	r3, [pc, #468]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006932:	4b72      	ldr	r3, [pc, #456]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0203 	and.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d10d      	bne.n	800695e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
       ||
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800694a:	4b6c      	ldr	r3, [pc, #432]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
       ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d047      	beq.n	80069ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	e044      	b.n	80069ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d018      	beq.n	800699e <RCCEx_PLLSAI1_Config+0x86>
 800696c:	2b03      	cmp	r3, #3
 800696e:	d825      	bhi.n	80069bc <RCCEx_PLLSAI1_Config+0xa4>
 8006970:	2b01      	cmp	r3, #1
 8006972:	d002      	beq.n	800697a <RCCEx_PLLSAI1_Config+0x62>
 8006974:	2b02      	cmp	r3, #2
 8006976:	d009      	beq.n	800698c <RCCEx_PLLSAI1_Config+0x74>
 8006978:	e020      	b.n	80069bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800697a:	4b60      	ldr	r3, [pc, #384]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11d      	bne.n	80069c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800698a:	e01a      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800698c:	4b5b      	ldr	r3, [pc, #364]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d116      	bne.n	80069c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800699c:	e013      	b.n	80069c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800699e:	4b57      	ldr	r3, [pc, #348]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10f      	bne.n	80069ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069aa:	4b54      	ldr	r3, [pc, #336]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ba:	e006      	b.n	80069ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
      break;
 80069c0:	e004      	b.n	80069cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069d2:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	430b      	orrs	r3, r1
 80069e8:	4944      	ldr	r1, [pc, #272]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d17d      	bne.n	8006af0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069f4:	4b41      	ldr	r3, [pc, #260]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a40      	ldr	r2, [pc, #256]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a00:	f7fd f892 	bl	8003b28 <HAL_GetTick>
 8006a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a06:	e009      	b.n	8006a1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a08:	f7fd f88e 	bl	8003b28 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d902      	bls.n	8006a1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	73fb      	strb	r3, [r7, #15]
        break;
 8006a1a:	e005      	b.n	8006a28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a1c:	4b37      	ldr	r3, [pc, #220]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ef      	bne.n	8006a08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d160      	bne.n	8006af0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d111      	bne.n	8006a58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a34:	4b31      	ldr	r3, [pc, #196]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6892      	ldr	r2, [r2, #8]
 8006a44:	0211      	lsls	r1, r2, #8
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	68d2      	ldr	r2, [r2, #12]
 8006a4a:	0912      	lsrs	r2, r2, #4
 8006a4c:	0452      	lsls	r2, r2, #17
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	492a      	ldr	r1, [pc, #168]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	610b      	str	r3, [r1, #16]
 8006a56:	e027      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d112      	bne.n	8006a84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6892      	ldr	r2, [r2, #8]
 8006a6e:	0211      	lsls	r1, r2, #8
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6912      	ldr	r2, [r2, #16]
 8006a74:	0852      	lsrs	r2, r2, #1
 8006a76:	3a01      	subs	r2, #1
 8006a78:	0552      	lsls	r2, r2, #21
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	491f      	ldr	r1, [pc, #124]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	610b      	str	r3, [r1, #16]
 8006a82:	e011      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6892      	ldr	r2, [r2, #8]
 8006a94:	0211      	lsls	r1, r2, #8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6952      	ldr	r2, [r2, #20]
 8006a9a:	0852      	lsrs	r2, r2, #1
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	0652      	lsls	r2, r2, #25
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	4916      	ldr	r1, [pc, #88]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fd f838 	bl	8003b28 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aba:	e009      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006abc:	f7fd f834 	bl	8003b28 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ace:	e005      	b.n	8006adc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ef      	beq.n	8006abc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4904      	ldr	r1, [pc, #16]	; (8006afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000

08006b00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b0e:	4b6a      	ldr	r3, [pc, #424]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b1a:	4b67      	ldr	r3, [pc, #412]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0203 	and.w	r2, r3, #3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d10d      	bne.n	8006b46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b32:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	091b      	lsrs	r3, r3, #4
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
       ||
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d047      	beq.n	8006bd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
 8006b4a:	e044      	b.n	8006bd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d018      	beq.n	8006b86 <RCCEx_PLLSAI2_Config+0x86>
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d825      	bhi.n	8006ba4 <RCCEx_PLLSAI2_Config+0xa4>
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d002      	beq.n	8006b62 <RCCEx_PLLSAI2_Config+0x62>
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d009      	beq.n	8006b74 <RCCEx_PLLSAI2_Config+0x74>
 8006b60:	e020      	b.n	8006ba4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b62:	4b55      	ldr	r3, [pc, #340]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d11d      	bne.n	8006baa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b72:	e01a      	b.n	8006baa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b74:	4b50      	ldr	r3, [pc, #320]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d116      	bne.n	8006bae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b84:	e013      	b.n	8006bae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b86:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10f      	bne.n	8006bb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b92:	4b49      	ldr	r3, [pc, #292]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ba2:	e006      	b.n	8006bb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba8:	e004      	b.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10d      	bne.n	8006bd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bba:	4b3f      	ldr	r3, [pc, #252]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6819      	ldr	r1, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	4939      	ldr	r1, [pc, #228]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d167      	bne.n	8006cac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a35      	ldr	r2, [pc, #212]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be8:	f7fc ff9e 	bl	8003b28 <HAL_GetTick>
 8006bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bee:	e009      	b.n	8006c04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bf0:	f7fc ff9a 	bl	8003b28 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d902      	bls.n	8006c04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	73fb      	strb	r3, [r7, #15]
        break;
 8006c02:	e005      	b.n	8006c10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c04:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ef      	bne.n	8006bf0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d14a      	bne.n	8006cac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d111      	bne.n	8006c40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6892      	ldr	r2, [r2, #8]
 8006c2c:	0211      	lsls	r1, r2, #8
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	0912      	lsrs	r2, r2, #4
 8006c34:	0452      	lsls	r2, r2, #17
 8006c36:	430a      	orrs	r2, r1
 8006c38:	491f      	ldr	r1, [pc, #124]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	614b      	str	r3, [r1, #20]
 8006c3e:	e011      	b.n	8006c64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6892      	ldr	r2, [r2, #8]
 8006c50:	0211      	lsls	r1, r2, #8
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6912      	ldr	r2, [r2, #16]
 8006c56:	0852      	lsrs	r2, r2, #1
 8006c58:	3a01      	subs	r2, #1
 8006c5a:	0652      	lsls	r2, r2, #25
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	4916      	ldr	r1, [pc, #88]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c64:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c70:	f7fc ff5a 	bl	8003b28 <HAL_GetTick>
 8006c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c76:	e009      	b.n	8006c8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c78:	f7fc ff56 	bl	8003b28 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d902      	bls.n	8006c8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	73fb      	strb	r3, [r7, #15]
          break;
 8006c8a:	e005      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0ef      	beq.n	8006c78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4904      	ldr	r1, [pc, #16]	; (8006cb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40021000 	.word	0x40021000

08006cbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d06c      	beq.n	8006da8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fc fb1c 	bl	8003320 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	22ca      	movs	r2, #202	; 0xca
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2253      	movs	r2, #83	; 0x53
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fa49 	bl	8007198 <RTC_EnterInitMode>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d14b      	bne.n	8006da8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d22:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6899      	ldr	r1, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68d2      	ldr	r2, [r2, #12]
 8006d4a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6919      	ldr	r1, [r3, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	041a      	lsls	r2, r3, #16
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa4d 	bl	8007200 <RTC_ExitInitMode>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11b      	bne.n	8006da8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0203 	bic.w	r2, r2, #3
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	22ff      	movs	r2, #255	; 0xff
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006db2:	b590      	push	{r4, r7, lr}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_RTC_SetTime+0x1a>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e08b      	b.n	8006ee4 <HAL_RTC_SetTime+0x132>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	22ca      	movs	r2, #202	; 0xca
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2253      	movs	r2, #83	; 0x53
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f9d3 	bl	8007198 <RTC_EnterInitMode>
 8006df2:	4603      	mov	r3, r0
 8006df4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006df6:	7cfb      	ldrb	r3, [r7, #19]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d163      	bne.n	8006ec4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d126      	bne.n	8006e50 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fa2e 	bl	800727c <RTC_ByteToBcd2>
 8006e20:	4603      	mov	r3, r0
 8006e22:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fa27 	bl	800727c <RTC_ByteToBcd2>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e32:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	789b      	ldrb	r3, [r3, #2]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fa1f 	bl	800727c <RTC_ByteToBcd2>
 8006e3e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e40:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	78db      	ldrb	r3, [r3, #3]
 8006e48:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e018      	b.n	8006e82 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e70:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006e76:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	78db      	ldrb	r3, [r3, #3]
 8006e7c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ea0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6899      	ldr	r1, [r3, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f9a0 	bl	8007200 <RTC_ExitInitMode>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006ee2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd90      	pop	{r4, r7, pc}

08006eec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	0d9b      	lsrs	r3, r3, #22
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f9a7 	bl	80072bc <RTC_Bcd2ToByte>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f99e 	bl	80072bc <RTC_Bcd2ToByte>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	789b      	ldrb	r3, [r3, #2]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 f995 	bl	80072bc <RTC_Bcd2ToByte>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_RTC_SetDate+0x1a>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e075      	b.n	80070aa <HAL_RTC_SetDate+0x106>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10e      	bne.n	8006ff2 <HAL_RTC_SetDate+0x4e>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	330a      	adds	r3, #10
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d11c      	bne.n	8007032 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	78db      	ldrb	r3, [r3, #3]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f93d 	bl	800727c <RTC_ByteToBcd2>
 8007002:	4603      	mov	r3, r0
 8007004:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f936 	bl	800727c <RTC_ByteToBcd2>
 8007010:	4603      	mov	r3, r0
 8007012:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007014:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	789b      	ldrb	r3, [r3, #2]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f92e 	bl	800727c <RTC_ByteToBcd2>
 8007020:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007022:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e00e      	b.n	8007050 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800703e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007044:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	22ca      	movs	r2, #202	; 0xca
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2253      	movs	r2, #83	; 0x53
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f899 	bl	8007198 <RTC_EnterInitMode>
 8007066:	4603      	mov	r3, r0
 8007068:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10c      	bne.n	800708a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800707e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f8bd 	bl	8007200 <RTC_ExitInitMode>
 8007086:	4603      	mov	r3, r0
 8007088:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007092:	7cfb      	ldrb	r3, [r7, #19]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80070a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd90      	pop	{r4, r7, pc}

080070b2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	0c1b      	lsrs	r3, r3, #16
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	0a1b      	lsrs	r3, r3, #8
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	0b5b      	lsrs	r3, r3, #13
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11a      	bne.n	8007142 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	78db      	ldrb	r3, [r3, #3]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f8d3 	bl	80072bc <RTC_Bcd2ToByte>
 8007116:	4603      	mov	r3, r0
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f8ca 	bl	80072bc <RTC_Bcd2ToByte>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	789b      	ldrb	r3, [r3, #2]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f8c1 	bl	80072bc <RTC_Bcd2ToByte>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007162:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007164:	f7fc fce0 	bl	8003b28 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800716a:	e009      	b.n	8007180 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800716c:	f7fc fcdc 	bl	8003b28 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800717a:	d901      	bls.n	8007180 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e007      	b.n	8007190 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0ee      	beq.n	800716c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d120      	bne.n	80071f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071bc:	f7fc fcb4 	bl	8003b28 <HAL_GetTick>
 80071c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071c2:	e00d      	b.n	80071e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071c4:	f7fc fcb0 	bl	8003b28 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071d2:	d905      	bls.n	80071e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2203      	movs	r2, #3
 80071dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <RTC_EnterInitMode+0x5c>
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d1e7      	bne.n	80071c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <RTC_ExitInitMode+0x78>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <RTC_ExitInitMode+0x78>)
 8007212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007216:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <RTC_ExitInitMode+0x78>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10c      	bne.n	800723e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ff91 	bl	800714c <HAL_RTC_WaitForSynchro>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01e      	beq.n	800726e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2203      	movs	r2, #3
 8007234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
 800723c:	e017      	b.n	800726e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800723e:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <RTC_ExitInitMode+0x78>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <RTC_ExitInitMode+0x78>)
 8007244:	f023 0320 	bic.w	r3, r3, #32
 8007248:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ff7e 	bl	800714c <HAL_RTC_WaitForSynchro>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <RTC_ExitInitMode+0x78>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4a04      	ldr	r2, [pc, #16]	; (8007278 <RTC_ExitInitMode+0x78>)
 8007268:	f043 0320 	orr.w	r3, r3, #32
 800726c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40002800 	.word	0x40002800

0800727c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800728e:	e005      	b.n	800729c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	3b0a      	subs	r3, #10
 800729a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800729c:	7afb      	ldrb	r3, [r7, #11]
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d8f6      	bhi.n	8007290 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b2db      	uxtb	r3, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	0092      	lsls	r2, r2, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	4413      	add	r3, r2
 80072e2:	b2db      	uxtb	r3, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e095      	b.n	800742e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d108      	bne.n	800731c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007312:	d009      	beq.n	8007328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	61da      	str	r2, [r3, #28]
 800731a:	e005      	b.n	8007328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fc f81e 	bl	8003384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800735e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007368:	d902      	bls.n	8007370 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e002      	b.n	8007376 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007374:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800737e:	d007      	beq.n	8007390 <HAL_SPI_Init+0xa0>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007388:	d002      	beq.n	8007390 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	ea42 0103 	orr.w	r1, r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f003 0204 	and.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800740c:	ea42 0103 	orr.w	r1, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e01a      	b.n	800747e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fb ffdb 	bl	800341c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b088      	sub	sp, #32
 800748a:	af02      	add	r7, sp, #8
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a2:	d112      	bne.n	80074ca <HAL_SPI_Receive+0x44>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10e      	bne.n	80074ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2204      	movs	r2, #4
 80074b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4613      	mov	r3, r2
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f910 	bl	80076e6 <HAL_SPI_TransmitReceive>
 80074c6:	4603      	mov	r3, r0
 80074c8:	e109      	b.n	80076de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_SPI_Receive+0x52>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e102      	b.n	80076de <HAL_SPI_Receive+0x258>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e0:	f7fc fb22 	bl	8003b28 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074f2:	2302      	movs	r3, #2
 80074f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074f6:	e0e9      	b.n	80076cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_SPI_Receive+0x7e>
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007508:	e0e0      	b.n	80076cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2204      	movs	r2, #4
 800750e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007554:	d908      	bls.n	8007568 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	e007      	b.n	8007578 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007580:	d10f      	bne.n	80075a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d007      	beq.n	80075c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075c8:	d867      	bhi.n	800769a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075ca:	e030      	b.n	800762e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d117      	bne.n	800760a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f103 020c 	add.w	r2, r3, #12
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007608:	e011      	b.n	800762e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760a:	f7fc fa8d 	bl	8003b28 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d803      	bhi.n	8007622 <HAL_SPI_Receive+0x19c>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d102      	bne.n	8007628 <HAL_SPI_Receive+0x1a2>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800762c:	e04e      	b.n	80076cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1c8      	bne.n	80075cc <HAL_SPI_Receive+0x146>
 800763a:	e034      	b.n	80076a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d115      	bne.n	8007676 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	b292      	uxth	r2, r2
 8007656:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	1c9a      	adds	r2, r3, #2
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007674:	e011      	b.n	800769a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007676:	f7fc fa57 	bl	8003b28 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d803      	bhi.n	800768e <HAL_SPI_Receive+0x208>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d102      	bne.n	8007694 <HAL_SPI_Receive+0x20e>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007698:	e018      	b.n	80076cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1ca      	bne.n	800763c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fffe 	bl	80086ac <SPI_EndRxTransaction>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]
 80076c8:	e000      	b.n	80076cc <HAL_SPI_Receive+0x246>
  }

error :
 80076ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08a      	sub	sp, #40	; 0x28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076f4:	2301      	movs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_SPI_TransmitReceive+0x26>
 8007708:	2302      	movs	r3, #2
 800770a:	e1fb      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x41e>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007714:	f7fc fa08 	bl	8003b28 <HAL_GetTick>
 8007718:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007720:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007728:	887b      	ldrh	r3, [r7, #2]
 800772a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007730:	7efb      	ldrb	r3, [r7, #27]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d00e      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x6e>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773c:	d106      	bne.n	800774c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <HAL_SPI_TransmitReceive+0x66>
 8007746:	7efb      	ldrb	r3, [r7, #27]
 8007748:	2b04      	cmp	r3, #4
 800774a:	d003      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800774c:	2302      	movs	r3, #2
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007752:	e1cd      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x80>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x80>
 8007760:	887b      	ldrh	r3, [r7, #2]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800776c:	e1c0      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b04      	cmp	r3, #4
 8007778:	d003      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2205      	movs	r2, #5
 800777e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	887a      	ldrh	r2, [r7, #2]
 8007792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	887a      	ldrh	r2, [r7, #2]
 80077ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077c4:	d802      	bhi.n	80077cc <HAL_SPI_TransmitReceive+0xe6>
 80077c6:	8a3b      	ldrh	r3, [r7, #16]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d908      	bls.n	80077de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077da:	605a      	str	r2, [r3, #4]
 80077dc:	e007      	b.n	80077ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d007      	beq.n	800780c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007814:	d97c      	bls.n	8007910 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_SPI_TransmitReceive+0x13e>
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d169      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	1c9a      	adds	r2, r3, #2
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007848:	e056      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d11b      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x1aa>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x1aa>
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	2b01      	cmp	r3, #1
 8007866:	d113      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	1c9a      	adds	r2, r3, #2
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b01      	cmp	r3, #1
 800789c:	d11c      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x1f2>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d016      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	b292      	uxth	r2, r2
 80078b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	1c9a      	adds	r2, r3, #2
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078d4:	2301      	movs	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078d8:	f7fc f926 	bl	8003b28 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d807      	bhi.n	80078f8 <HAL_SPI_TransmitReceive+0x212>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d003      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078f6:	e0fb      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1a3      	bne.n	800784a <HAL_SPI_TransmitReceive+0x164>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d19d      	bne.n	800784a <HAL_SPI_TransmitReceive+0x164>
 800790e:	e0df      	b.n	8007ad0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_SPI_TransmitReceive+0x23a>
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	2b01      	cmp	r3, #1
 800791c:	f040 80cb 	bne.w	8007ab6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d912      	bls.n	8007950 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	1c9a      	adds	r2, r3, #2
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b02      	subs	r3, #2
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800794e:	e0b2      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007976:	e09e      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b02      	cmp	r3, #2
 8007984:	d134      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x30a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d02f      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x30a>
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	2b01      	cmp	r3, #1
 8007994:	d12c      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799a:	b29b      	uxth	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d912      	bls.n	80079c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	881a      	ldrh	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	1c9a      	adds	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b02      	subs	r3, #2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c4:	e012      	b.n	80079ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d148      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x3aa>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d042      	beq.n	8007a90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d923      	bls.n	8007a5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	b292      	uxth	r2, r2
 8007a22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b02      	subs	r3, #2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d81f      	bhi.n	8007a8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a5a:	605a      	str	r2, [r3, #4]
 8007a5c:	e016      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f103 020c 	add.w	r2, r3, #12
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a90:	f7fc f84a 	bl	8003b28 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d803      	bhi.n	8007aa8 <HAL_SPI_TransmitReceive+0x3c2>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d102      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x3c8>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007ab4:	e01c      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f47f af5b 	bne.w	8007978 <HAL_SPI_TransmitReceive+0x292>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f47f af54 	bne.w	8007978 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fe41 	bl	800875c <SPI_EndRxTxTransaction>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
 8007aec:	e000      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007aee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3728      	adds	r7, #40	; 0x28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_SPI_Transmit_IT+0x20>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e072      	b.n	8007c12 <HAL_SPI_Transmit_IT+0x106>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_Transmit_IT+0x34>
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b44:	e060      	b.n	8007c08 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
 8007b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b56:	e057      	b.n	8007c08 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	88fa      	ldrh	r2, [r7, #6]
 8007b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b9c:	d903      	bls.n	8007ba6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <HAL_SPI_Transmit_IT+0x114>)
 8007ba2:	651a      	str	r2, [r3, #80]	; 0x50
 8007ba4:	e002      	b.n	8007bac <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <HAL_SPI_Transmit_IT+0x118>)
 8007baa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb4:	d10f      	bne.n	8007bd6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007be4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d008      	beq.n	8007c06 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e000      	b.n	8007c08 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8007c06:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	08008433 	.word	0x08008433
 8007c24:	080083ed 	.word	0x080083ed

08007c28 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d110      	bne.n	8007c64 <HAL_SPI_Receive_IT+0x3c>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4a:	d10b      	bne.n	8007c64 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	68b9      	ldr	r1, [r7, #8]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 f894 	bl	8007d88 <HAL_SPI_TransmitReceive_IT>
 8007c60:	4603      	mov	r3, r0
 8007c62:	e089      	b.n	8007d78 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_SPI_Receive_IT+0x4a>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e082      	b.n	8007d78 <HAL_SPI_Receive_IT+0x150>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d002      	beq.n	8007c8c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
 8007c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c8a:	e070      	b.n	8007d6e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_SPI_Receive_IT+0x70>
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c9c:	e067      	b.n	8007d6e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	88fa      	ldrh	r2, [r7, #6]
 8007cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ce2:	d90b      	bls.n	8007cfc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cf2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <HAL_SPI_Receive_IT+0x158>)
 8007cf8:	64da      	str	r2, [r3, #76]	; 0x4c
 8007cfa:	e00a      	b.n	8007d12 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <HAL_SPI_Receive_IT+0x15c>)
 8007d10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1a:	d10f      	bne.n	8007d3c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d3a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007d4a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d008      	beq.n	8007d6c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e000      	b.n	8007d6e <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007d6c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	080083a1 	.word	0x080083a1
 8007d84:	08008351 	.word	0x08008351

08007d88 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_SPI_TransmitReceive_IT+0x20>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e091      	b.n	8007ecc <HAL_SPI_TransmitReceive_IT+0x144>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007db6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dbe:	7dbb      	ldrb	r3, [r7, #22]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d00d      	beq.n	8007de0 <HAL_SPI_TransmitReceive_IT+0x58>
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dca:	d106      	bne.n	8007dda <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <HAL_SPI_TransmitReceive_IT+0x52>
 8007dd4:	7dbb      	ldrb	r3, [r7, #22]
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d002      	beq.n	8007de0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dde:	e070      	b.n	8007ec2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007dec:	887b      	ldrh	r3, [r7, #2]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007df6:	e064      	b.n	8007ec2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d003      	beq.n	8007e0c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2205      	movs	r2, #5
 8007e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	887a      	ldrh	r2, [r7, #2]
 8007e1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	887a      	ldrh	r2, [r7, #2]
 8007e22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	887a      	ldrh	r2, [r7, #2]
 8007e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	887a      	ldrh	r2, [r7, #2]
 8007e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e42:	d906      	bls.n	8007e52 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a24      	ldr	r2, [pc, #144]	; (8007ed8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007e48:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a23      	ldr	r2, [pc, #140]	; (8007edc <HAL_SPI_TransmitReceive_IT+0x154>)
 8007e4e:	651a      	str	r2, [r3, #80]	; 0x50
 8007e50:	e005      	b.n	8007e5e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007e56:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4a22      	ldr	r2, [pc, #136]	; (8007ee4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007e5c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e66:	d802      	bhi.n	8007e6e <HAL_SPI_TransmitReceive_IT+0xe6>
 8007e68:	887b      	ldrh	r3, [r7, #2]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d908      	bls.n	8007e80 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	e007      	b.n	8007e90 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e8e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d008      	beq.n	8007ec0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e000      	b.n	8007ec2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007ec0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	0800828b 	.word	0x0800828b
 8007edc:	080082f1 	.word	0x080082f1
 8007ee0:	0800813b 	.word	0x0800813b
 8007ee4:	080081f9 	.word	0x080081f9

08007ee8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10f      	bne.n	8007f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	099b      	lsrs	r3, r3, #6
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
    return;
 8007f2a:	e0d7      	b.n	80080dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <HAL_SPI_IRQHandler+0x66>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	09db      	lsrs	r3, r3, #7
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
    return;
 8007f4c:	e0c6      	b.n	80080dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10c      	bne.n	8007f74 <HAL_SPI_IRQHandler+0x8c>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	099b      	lsrs	r3, r3, #6
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80b4 	beq.w	80080dc <HAL_SPI_IRQHandler+0x1f4>
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80ad 	beq.w	80080dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	099b      	lsrs	r3, r3, #6
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d023      	beq.n	8007fd6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d011      	beq.n	8007fbe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9e:	f043 0204 	orr.w	r2, r3, #4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	e00b      	b.n	8007fd6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	693b      	ldr	r3, [r7, #16]
        return;
 8007fd4:	e082      	b.n	80080dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d014      	beq.n	800800c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe6:	f043 0201 	orr.w	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801c:	f043 0208 	orr.w	r2, r3, #8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008036:	2b00      	cmp	r3, #0
 8008038:	d04f      	beq.n	80080da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008048:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <HAL_SPI_IRQHandler+0x17e>
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d034      	beq.n	80080d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0203 	bic.w	r2, r2, #3
 8008074:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807a:	2b00      	cmp	r3, #0
 800807c:	d011      	beq.n	80080a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <HAL_SPI_IRQHandler+0x1fc>)
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808a:	4618      	mov	r0, r3
 800808c:	f7fb ffda 	bl	8004044 <HAL_DMA_Abort_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d016      	beq.n	80080d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <HAL_SPI_IRQHandler+0x1fc>)
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fb ffc4 	bl	8004044 <HAL_DMA_Abort_IT>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80080ce:	e003      	b.n	80080d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f813 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080d6:	e000      	b.n	80080da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80080d8:	bf00      	nop
    return;
 80080da:	bf00      	nop
  }
}
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	08008111 	.word	0x08008111

080080e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff ffe5 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d923      	bls.n	8008196 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	b292      	uxth	r2, r2
 800815a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	1c9a      	adds	r2, r3, #2
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800816c:	b29b      	uxth	r3, r3
 800816e:	3b02      	subs	r3, #2
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	d11f      	bne.n	80081c4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008192:	605a      	str	r2, [r3, #4]
 8008194:	e016      	b.n	80081c4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f103 020c 	add.w	r2, r3, #12
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10f      	bne.n	80081f0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80081de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fafc 	bl	80087e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b01      	cmp	r3, #1
 8008208:	d912      	bls.n	8008230 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	881a      	ldrh	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	1c9a      	adds	r2, r3, #2
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b02      	subs	r3, #2
 8008228:	b29a      	uxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800822e:	e012      	b.n	8008256 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d110      	bne.n	8008282 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800826e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fab3 	bl	80087e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	b292      	uxth	r2, r2
 800829e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10f      	bne.n	80082e8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa80 	bl	80087e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	881a      	ldrh	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d110      	bne.n	8008348 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008334:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa50 	bl	80087e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f103 020c 	add.w	r2, r3, #12
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa6a 	bl	800886c <SPI_CloseRx_ISR>
  }
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	b292      	uxth	r2, r2
 80083b4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	1c9a      	adds	r2, r3, #2
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa44 	bl	800886c <SPI_CloseRx_ISR>
  }
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa51 	bl	80088cc <SPI_CloseTx_ISR>
  }
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	881a      	ldrh	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	1c9a      	adds	r2, r3, #2
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa2f 	bl	80088cc <SPI_CloseTx_ISR>
  }
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008488:	f7fb fb4e 	bl	8003b28 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4413      	add	r3, r2
 8008496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008498:	f7fb fb46 	bl	8003b28 <HAL_GetTick>
 800849c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800849e:	4b39      	ldr	r3, [pc, #228]	; (8008584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	015b      	lsls	r3, r3, #5
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ae:	e054      	b.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d050      	beq.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084b8:	f7fb fb36 	bl	8003b28 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d902      	bls.n	80084ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13d      	bne.n	800854a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084e6:	d111      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f0:	d004      	beq.n	80084fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084fa:	d107      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008514:	d10f      	bne.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e017      	b.n	800857a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d19b      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000014 	.word	0x20000014

08008588 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008596:	f7fb fac7 	bl	8003b28 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	4413      	add	r3, r2
 80085a4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085a6:	f7fb fabf 	bl	8003b28 <HAL_GetTick>
 80085aa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085ac:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	00da      	lsls	r2, r3, #3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	0d1b      	lsrs	r3, r3, #20
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80085c4:	e062      	b.n	800868c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085cc:	d109      	bne.n	80085e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80085e0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d050      	beq.n	800868c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085ea:	f7fb fa9d 	bl	8003b28 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d902      	bls.n	8008600 <SPI_WaitFifoStateUntilTimeout+0x78>
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d13d      	bne.n	800867c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800860e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008618:	d111      	bne.n	800863e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008622:	d004      	beq.n	800862e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862c:	d107      	bne.n	800863e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800863c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008646:	d10f      	bne.n	8008668 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e010      	b.n	800869e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	3b01      	subs	r3, #1
 800868a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4013      	ands	r3, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d194      	bne.n	80085c6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000014 	.word	0x20000014

080086ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086c0:	d111      	bne.n	80086e6 <SPI_EndRxTransaction+0x3a>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ca:	d004      	beq.n	80086d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d4:	d107      	bne.n	80086e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	2180      	movs	r1, #128	; 0x80
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fec1 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e023      	b.n	8008754 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008714:	d11d      	bne.n	8008752 <SPI_EndRxTransaction+0xa6>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871e:	d004      	beq.n	800872a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008728:	d113      	bne.n	8008752 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff ff26 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008746:	f043 0220 	orr.w	r2, r3, #32
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e000      	b.n	8008754 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff ff07 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e027      	b.n	80087e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	2180      	movs	r1, #128	; 0x80
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fe6c 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087aa:	f043 0220 	orr.w	r2, r3, #32
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e014      	b.n	80087e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fee0 	bl	8008588 <SPI_WaitFifoStateUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e000      	b.n	80087e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f0:	f7fb f99a 	bl	8003b28 <HAL_GetTick>
 80087f4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0220 	bic.w	r2, r2, #32
 8008804:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	2164      	movs	r1, #100	; 0x64
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ffa6 	bl	800875c <SPI_EndRxTxTransaction>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881a:	f043 0220 	orr.w	r2, r3, #32
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008826:	2b00      	cmp	r3, #0
 8008828:	d115      	bne.n	8008856 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b04      	cmp	r3, #4
 8008834:	d107      	bne.n	8008846 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f003 fd08 	bl	800c254 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008844:	e00e      	b.n	8008864 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fc4a 	bl	80080e8 <HAL_SPI_TxRxCpltCallback>
}
 8008854:	e006      	b.n	8008864 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fc4c 	bl	80080fc <HAL_SPI_ErrorCallback>
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008882:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008884:	f7fb f950 	bl	8003b28 <HAL_GetTick>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	2164      	movs	r1, #100	; 0x64
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff ff0c 	bl	80086ac <SPI_EndRxTransaction>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f003 fccc 	bl	800c254 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80088bc:	e002      	b.n	80088c4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff fc1c 	bl	80080fc <HAL_SPI_ErrorCallback>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088d4:	f7fb f928 	bl	8003b28 <HAL_GetTick>
 80088d8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	2164      	movs	r1, #100	; 0x64
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ff34 	bl	800875c <SPI_EndRxTxTransaction>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fe:	f043 0220 	orr.w	r2, r3, #32
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	60bb      	str	r3, [r7, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fbe1 	bl	80080fc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800893a:	e002      	b.n	8008942 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f003 fc9d 	bl	800c27c <HAL_SPI_TxCpltCallback>
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e049      	b.n	80089f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7fa fd75 	bl	8003460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f000 f9ed 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d001      	beq.n	8008a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e04f      	b.n	8008ab0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a23      	ldr	r2, [pc, #140]	; (8008abc <HAL_TIM_Base_Start_IT+0xc4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3a:	d018      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1f      	ldr	r2, [pc, #124]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1c      	ldr	r2, [pc, #112]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <HAL_TIM_Base_Start_IT+0xd4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIM_Base_Start_IT+0x76>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d115      	bne.n	8008a9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b06      	cmp	r3, #6
 8008a7e:	d015      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0xb4>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a86:	d011      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0201 	orr.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	e008      	b.n	8008aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0201 	orr.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e000      	b.n	8008aae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800
 8008ac8:	40000c00 	.word	0x40000c00
 8008acc:	40013400 	.word	0x40013400
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	00010007 	.word	0x00010007

08008ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d122      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d11b      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f06f 0202 	mvn.w	r2, #2
 8008b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f905 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008b20:	e005      	b.n	8008b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8f7 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f908 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d122      	bne.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d11b      	bne.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0204 	mvn.w	r2, #4
 8008b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8db 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f8cd 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f8de 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d122      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0208 	mvn.w	r2, #8
 8008bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2204      	movs	r2, #4
 8008bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f8b1 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008bc8:	e005      	b.n	8008bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f8a3 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f8b4 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d122      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	d11b      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0210 	mvn.w	r2, #16
 8008c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2208      	movs	r2, #8
 8008c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f887 	bl	8008d2a <HAL_TIM_IC_CaptureCallback>
 8008c1c:	e005      	b.n	8008c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f879 	bl	8008d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f88a 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d10e      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d107      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0201 	mvn.w	r2, #1
 8008c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fa f87a 	bl	8002d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b80      	cmp	r3, #128	; 0x80
 8008c68:	d10e      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d107      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f99c 	bl	8008fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c96:	d10e      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d107      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f98f 	bl	8008fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d10e      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d107      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f838 	bl	8008d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d10e      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d107      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f06f 0220 	mvn.w	r2, #32
 8008d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f94f 	bl	8008fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a40      	ldr	r2, [pc, #256]	; (8008e7c <TIM_Base_SetConfig+0x114>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d86:	d00f      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a3d      	ldr	r2, [pc, #244]	; (8008e80 <TIM_Base_SetConfig+0x118>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00b      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a3c      	ldr	r2, [pc, #240]	; (8008e84 <TIM_Base_SetConfig+0x11c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a3b      	ldr	r2, [pc, #236]	; (8008e88 <TIM_Base_SetConfig+0x120>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a3a      	ldr	r2, [pc, #232]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d108      	bne.n	8008dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a2f      	ldr	r2, [pc, #188]	; (8008e7c <TIM_Base_SetConfig+0x114>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01f      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc8:	d01b      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a2c      	ldr	r2, [pc, #176]	; (8008e80 <TIM_Base_SetConfig+0x118>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d017      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a2b      	ldr	r2, [pc, #172]	; (8008e84 <TIM_Base_SetConfig+0x11c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d013      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a2a      	ldr	r2, [pc, #168]	; (8008e88 <TIM_Base_SetConfig+0x120>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00f      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a29      	ldr	r2, [pc, #164]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a28      	ldr	r2, [pc, #160]	; (8008e90 <TIM_Base_SetConfig+0x128>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d007      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a27      	ldr	r2, [pc, #156]	; (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d003      	beq.n	8008e02 <TIM_Base_SetConfig+0x9a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a26      	ldr	r2, [pc, #152]	; (8008e98 <TIM_Base_SetConfig+0x130>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d108      	bne.n	8008e14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <TIM_Base_SetConfig+0x114>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d00f      	beq.n	8008e60 <TIM_Base_SetConfig+0xf8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a12      	ldr	r2, [pc, #72]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00b      	beq.n	8008e60 <TIM_Base_SetConfig+0xf8>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a11      	ldr	r2, [pc, #68]	; (8008e90 <TIM_Base_SetConfig+0x128>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d007      	beq.n	8008e60 <TIM_Base_SetConfig+0xf8>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a10      	ldr	r2, [pc, #64]	; (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_Base_SetConfig+0xf8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a0f      	ldr	r2, [pc, #60]	; (8008e98 <TIM_Base_SetConfig+0x130>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d103      	bne.n	8008e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	615a      	str	r2, [r3, #20]
}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	40012c00 	.word	0x40012c00
 8008e80:	40000400 	.word	0x40000400
 8008e84:	40000800 	.word	0x40000800
 8008e88:	40000c00 	.word	0x40000c00
 8008e8c:	40013400 	.word	0x40013400
 8008e90:	40014000 	.word	0x40014000
 8008e94:	40014400 	.word	0x40014400
 8008e98:	40014800 	.word	0x40014800

08008e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e068      	b.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2e      	ldr	r2, [pc, #184]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a2d      	ldr	r2, [pc, #180]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d108      	bne.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d01d      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f26:	d018      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d013      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00e      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a18      	ldr	r2, [pc, #96]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d009      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d004      	beq.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a14      	ldr	r2, [pc, #80]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d10c      	bne.n	8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40012c00 	.word	0x40012c00
 8008f98:	40013400 	.word	0x40013400
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40014000 	.word	0x40014000

08008fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e040      	b.n	800907c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fa fa4e 	bl	80034ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2224      	movs	r2, #36	; 0x24
 8009014:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fb26 	bl	8009678 <UART_SetConfig>
 800902c:	4603      	mov	r3, r0
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e022      	b.n	800907c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fdd4 	bl	8009bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fe5b 	bl	8009d30 <UART_CheckIdleState>
 800907a:	4603      	mov	r3, r0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	; 0x28
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4613      	mov	r3, r2
 8009092:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009098:	2b20      	cmp	r3, #32
 800909a:	f040 8082 	bne.w	80091a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <HAL_UART_Transmit+0x26>
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e07a      	b.n	80091a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_UART_Transmit+0x38>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e073      	b.n	80091a4 <HAL_UART_Transmit+0x120>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2221      	movs	r2, #33	; 0x21
 80090d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090d2:	f7fa fd29 	bl	8003b28 <HAL_GetTick>
 80090d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	88fa      	ldrh	r2, [r7, #6]
 80090dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	88fa      	ldrh	r2, [r7, #6]
 80090e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f0:	d108      	bne.n	8009104 <HAL_UART_Transmit+0x80>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	e003      	b.n	800910c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009108:	2300      	movs	r3, #0
 800910a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009114:	e02d      	b.n	8009172 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2200      	movs	r2, #0
 800911e:	2180      	movs	r1, #128	; 0x80
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fe4e 	bl	8009dc2 <UART_WaitOnFlagUntilTimeout>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e039      	b.n	80091a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	881a      	ldrh	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009142:	b292      	uxth	r2, r2
 8009144:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3302      	adds	r3, #2
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	e008      	b.n	8009160 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	b292      	uxth	r2, r2
 8009158:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	3301      	adds	r3, #1
 800915e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009166:	b29b      	uxth	r3, r3
 8009168:	3b01      	subs	r3, #1
 800916a:	b29a      	uxth	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1cb      	bne.n	8009116 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2200      	movs	r2, #0
 8009186:	2140      	movs	r1, #64	; 0x40
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 fe1a 	bl	8009dc2 <UART_WaitOnFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e005      	b.n	80091a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2220      	movs	r2, #32
 800919c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e000      	b.n	80091a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80091a2:	2302      	movs	r3, #2
  }
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3720      	adds	r7, #32
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d131      	bne.n	8009226 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_UART_Receive_IT+0x22>
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e02a      	b.n	8009228 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_UART_Receive_IT+0x34>
 80091dc:	2302      	movs	r3, #2
 80091de:	e023      	b.n	8009228 <HAL_UART_Receive_IT+0x7c>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a0f      	ldr	r2, [pc, #60]	; (8009230 <HAL_UART_Receive_IT+0x84>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009214:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	461a      	mov	r2, r3
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fe4d 	bl	8009ebc <UART_Start_Receive_IT>
 8009222:	4603      	mov	r3, r0
 8009224:	e000      	b.n	8009228 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8009226:	2302      	movs	r3, #2
  }
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40008000 	.word	0x40008000

08009234 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	f640 030f 	movw	r3, #2063	; 0x80f
 800925a:	4013      	ands	r3, r2
 800925c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d113      	bne.n	800928c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00e      	beq.n	800928c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 81cf 	beq.w	8009620 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      }
      return;
 800928a:	e1c9      	b.n	8009620 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80e8 	beq.w	8009464 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	4b6e      	ldr	r3, [pc, #440]	; (800945c <HAL_UART_IRQHandler+0x228>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80dd 	beq.w	8009464 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d010      	beq.n	80092d6 <HAL_UART_IRQHandler+0xa2>
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2201      	movs	r2, #1
 80092c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092cc:	f043 0201 	orr.w	r2, r3, #1
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d010      	beq.n	8009302 <HAL_UART_IRQHandler+0xce>
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2202      	movs	r2, #2
 80092f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092f8:	f043 0204 	orr.w	r2, r3, #4
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <HAL_UART_IRQHandler+0xfa>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00b      	beq.n	800932e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2204      	movs	r2, #4
 800931c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009324:	f043 0202 	orr.w	r2, r3, #2
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b00      	cmp	r3, #0
 8009336:	d015      	beq.n	8009364 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2208      	movs	r2, #8
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935a:	f043 0208 	orr.w	r2, r3, #8
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <HAL_UART_IRQHandler+0x15e>
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009388:	f043 0220 	orr.w	r2, r3, #32
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8143 	beq.w	8009624 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	d004      	beq.n	80093e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d031      	beq.n	8009446 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fdf2 	bl	8009fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b40      	cmp	r3, #64	; 0x40
 80093f4:	d123      	bne.n	800943e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009404:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	2b00      	cmp	r3, #0
 800940c:	d013      	beq.n	8009436 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	4a13      	ldr	r2, [pc, #76]	; (8009460 <HAL_UART_IRQHandler+0x22c>)
 8009414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941a:	4618      	mov	r0, r3
 800941c:	f7fa fe12 	bl	8004044 <HAL_DMA_Abort_IT>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009434:	e00f      	b.n	8009456 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f908 	bl	800964c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	e00b      	b.n	8009456 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f904 	bl	800964c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009444:	e007      	b.n	8009456 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f900 	bl	800964c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009454:	e0e6      	b.n	8009624 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009456:	bf00      	nop
    return;
 8009458:	e0e4      	b.n	8009624 <HAL_UART_IRQHandler+0x3f0>
 800945a:	bf00      	nop
 800945c:	04000120 	.word	0x04000120
 8009460:	0800a02b 	.word	0x0800a02b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009468:	2b01      	cmp	r3, #1
 800946a:	f040 80a5 	bne.w	80095b8 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f003 0310 	and.w	r3, r3, #16
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 809f 	beq.w	80095b8 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8099 	beq.w	80095b8 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2210      	movs	r2, #16
 800948c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b40      	cmp	r3, #64	; 0x40
 800949a:	d154      	bne.n	8009546 <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80bd 	beq.w	8009628 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094b4:	893a      	ldrh	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	f080 80b6 	bcs.w	8009628 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	893a      	ldrh	r2, [r7, #8]
 80094c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d12a      	bne.n	800952a <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689a      	ldr	r2, [r3, #8]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0201 	bic.w	r2, r2, #1
 80094f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689a      	ldr	r2, [r3, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009502:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0210 	bic.w	r2, r2, #16
 800951e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009524:	4618      	mov	r0, r3
 8009526:	f7fa fd4f 	bl	8003fc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009536:	b29b      	uxth	r3, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	b29b      	uxth	r3, r3
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f88e 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009544:	e070      	b.n	8009628 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009552:	b29b      	uxth	r3, r3
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800955e:	b29b      	uxth	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d063      	beq.n	800962c <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8009564:	897b      	ldrh	r3, [r7, #10]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d060      	beq.n	800962c <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009578:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 0201 	bic.w	r2, r2, #1
 8009588:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0210 	bic.w	r2, r2, #16
 80095aa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095ac:	897b      	ldrh	r3, [r7, #10]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f855 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80095b6:	e039      	b.n	800962c <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <HAL_UART_IRQHandler+0x3aa>
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80095d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fe2e 	bl	800a238 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095dc:	e029      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d008      	beq.n	8009604 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01a      	beq.n	8009630 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
    }
    return;
 8009602:	e015      	b.n	8009630 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d011      	beq.n	8009632 <HAL_UART_IRQHandler+0x3fe>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00c      	beq.n	8009632 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fd1c 	bl	800a056 <UART_EndTransmit_IT>
    return;
 800961e:	e008      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
      return;
 8009620:	bf00      	nop
 8009622:	e006      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
    return;
 8009624:	bf00      	nop
 8009626:	e004      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
      return;
 8009628:	bf00      	nop
 800962a:	e002      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
      return;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <HAL_UART_IRQHandler+0x3fe>
    return;
 8009630:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800967c:	b08a      	sub	sp, #40	; 0x28
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	431a      	orrs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	431a      	orrs	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	4313      	orrs	r3, r2
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4ba4      	ldr	r3, [pc, #656]	; (8009938 <UART_SetConfig+0x2c0>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a99      	ldr	r2, [pc, #612]	; (800993c <UART_SetConfig+0x2c4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e0:	4313      	orrs	r3, r2
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f4:	430a      	orrs	r2, r1
 80096f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a90      	ldr	r2, [pc, #576]	; (8009940 <UART_SetConfig+0x2c8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d126      	bne.n	8009750 <UART_SetConfig+0xd8>
 8009702:	4b90      	ldr	r3, [pc, #576]	; (8009944 <UART_SetConfig+0x2cc>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	2b03      	cmp	r3, #3
 800970e:	d81b      	bhi.n	8009748 <UART_SetConfig+0xd0>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0xa0>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009729 	.word	0x08009729
 800971c:	08009739 	.word	0x08009739
 8009720:	08009731 	.word	0x08009731
 8009724:	08009741 	.word	0x08009741
 8009728:	2301      	movs	r3, #1
 800972a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800972e:	e116      	b.n	800995e <UART_SetConfig+0x2e6>
 8009730:	2302      	movs	r3, #2
 8009732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009736:	e112      	b.n	800995e <UART_SetConfig+0x2e6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800973e:	e10e      	b.n	800995e <UART_SetConfig+0x2e6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009746:	e10a      	b.n	800995e <UART_SetConfig+0x2e6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800974e:	e106      	b.n	800995e <UART_SetConfig+0x2e6>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a7c      	ldr	r2, [pc, #496]	; (8009948 <UART_SetConfig+0x2d0>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d138      	bne.n	80097cc <UART_SetConfig+0x154>
 800975a:	4b7a      	ldr	r3, [pc, #488]	; (8009944 <UART_SetConfig+0x2cc>)
 800975c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009760:	f003 030c 	and.w	r3, r3, #12
 8009764:	2b0c      	cmp	r3, #12
 8009766:	d82d      	bhi.n	80097c4 <UART_SetConfig+0x14c>
 8009768:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <UART_SetConfig+0xf8>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080097c5 	.word	0x080097c5
 8009778:	080097c5 	.word	0x080097c5
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097b5 	.word	0x080097b5
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097ad 	.word	0x080097ad
 8009794:	080097c5 	.word	0x080097c5
 8009798:	080097c5 	.word	0x080097c5
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097bd 	.word	0x080097bd
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097aa:	e0d8      	b.n	800995e <UART_SetConfig+0x2e6>
 80097ac:	2302      	movs	r3, #2
 80097ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097b2:	e0d4      	b.n	800995e <UART_SetConfig+0x2e6>
 80097b4:	2304      	movs	r3, #4
 80097b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ba:	e0d0      	b.n	800995e <UART_SetConfig+0x2e6>
 80097bc:	2308      	movs	r3, #8
 80097be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c2:	e0cc      	b.n	800995e <UART_SetConfig+0x2e6>
 80097c4:	2310      	movs	r3, #16
 80097c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ca:	e0c8      	b.n	800995e <UART_SetConfig+0x2e6>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a5e      	ldr	r2, [pc, #376]	; (800994c <UART_SetConfig+0x2d4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d125      	bne.n	8009822 <UART_SetConfig+0x1aa>
 80097d6:	4b5b      	ldr	r3, [pc, #364]	; (8009944 <UART_SetConfig+0x2cc>)
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097e0:	2b30      	cmp	r3, #48	; 0x30
 80097e2:	d016      	beq.n	8009812 <UART_SetConfig+0x19a>
 80097e4:	2b30      	cmp	r3, #48	; 0x30
 80097e6:	d818      	bhi.n	800981a <UART_SetConfig+0x1a2>
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d00a      	beq.n	8009802 <UART_SetConfig+0x18a>
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d814      	bhi.n	800981a <UART_SetConfig+0x1a2>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <UART_SetConfig+0x182>
 80097f4:	2b10      	cmp	r3, #16
 80097f6:	d008      	beq.n	800980a <UART_SetConfig+0x192>
 80097f8:	e00f      	b.n	800981a <UART_SetConfig+0x1a2>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009800:	e0ad      	b.n	800995e <UART_SetConfig+0x2e6>
 8009802:	2302      	movs	r3, #2
 8009804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009808:	e0a9      	b.n	800995e <UART_SetConfig+0x2e6>
 800980a:	2304      	movs	r3, #4
 800980c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009810:	e0a5      	b.n	800995e <UART_SetConfig+0x2e6>
 8009812:	2308      	movs	r3, #8
 8009814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009818:	e0a1      	b.n	800995e <UART_SetConfig+0x2e6>
 800981a:	2310      	movs	r3, #16
 800981c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009820:	e09d      	b.n	800995e <UART_SetConfig+0x2e6>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a4a      	ldr	r2, [pc, #296]	; (8009950 <UART_SetConfig+0x2d8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d125      	bne.n	8009878 <UART_SetConfig+0x200>
 800982c:	4b45      	ldr	r3, [pc, #276]	; (8009944 <UART_SetConfig+0x2cc>)
 800982e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009836:	2bc0      	cmp	r3, #192	; 0xc0
 8009838:	d016      	beq.n	8009868 <UART_SetConfig+0x1f0>
 800983a:	2bc0      	cmp	r3, #192	; 0xc0
 800983c:	d818      	bhi.n	8009870 <UART_SetConfig+0x1f8>
 800983e:	2b80      	cmp	r3, #128	; 0x80
 8009840:	d00a      	beq.n	8009858 <UART_SetConfig+0x1e0>
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	d814      	bhi.n	8009870 <UART_SetConfig+0x1f8>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <UART_SetConfig+0x1d8>
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d008      	beq.n	8009860 <UART_SetConfig+0x1e8>
 800984e:	e00f      	b.n	8009870 <UART_SetConfig+0x1f8>
 8009850:	2300      	movs	r3, #0
 8009852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009856:	e082      	b.n	800995e <UART_SetConfig+0x2e6>
 8009858:	2302      	movs	r3, #2
 800985a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800985e:	e07e      	b.n	800995e <UART_SetConfig+0x2e6>
 8009860:	2304      	movs	r3, #4
 8009862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009866:	e07a      	b.n	800995e <UART_SetConfig+0x2e6>
 8009868:	2308      	movs	r3, #8
 800986a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800986e:	e076      	b.n	800995e <UART_SetConfig+0x2e6>
 8009870:	2310      	movs	r3, #16
 8009872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009876:	e072      	b.n	800995e <UART_SetConfig+0x2e6>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a35      	ldr	r2, [pc, #212]	; (8009954 <UART_SetConfig+0x2dc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d12a      	bne.n	80098d8 <UART_SetConfig+0x260>
 8009882:	4b30      	ldr	r3, [pc, #192]	; (8009944 <UART_SetConfig+0x2cc>)
 8009884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009890:	d01a      	beq.n	80098c8 <UART_SetConfig+0x250>
 8009892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009896:	d81b      	bhi.n	80098d0 <UART_SetConfig+0x258>
 8009898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800989c:	d00c      	beq.n	80098b8 <UART_SetConfig+0x240>
 800989e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a2:	d815      	bhi.n	80098d0 <UART_SetConfig+0x258>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <UART_SetConfig+0x238>
 80098a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ac:	d008      	beq.n	80098c0 <UART_SetConfig+0x248>
 80098ae:	e00f      	b.n	80098d0 <UART_SetConfig+0x258>
 80098b0:	2300      	movs	r3, #0
 80098b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098b6:	e052      	b.n	800995e <UART_SetConfig+0x2e6>
 80098b8:	2302      	movs	r3, #2
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098be:	e04e      	b.n	800995e <UART_SetConfig+0x2e6>
 80098c0:	2304      	movs	r3, #4
 80098c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098c6:	e04a      	b.n	800995e <UART_SetConfig+0x2e6>
 80098c8:	2308      	movs	r3, #8
 80098ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ce:	e046      	b.n	800995e <UART_SetConfig+0x2e6>
 80098d0:	2310      	movs	r3, #16
 80098d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098d6:	e042      	b.n	800995e <UART_SetConfig+0x2e6>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a17      	ldr	r2, [pc, #92]	; (800993c <UART_SetConfig+0x2c4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d13a      	bne.n	8009958 <UART_SetConfig+0x2e0>
 80098e2:	4b18      	ldr	r3, [pc, #96]	; (8009944 <UART_SetConfig+0x2cc>)
 80098e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80098ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098f0:	d01a      	beq.n	8009928 <UART_SetConfig+0x2b0>
 80098f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098f6:	d81b      	bhi.n	8009930 <UART_SetConfig+0x2b8>
 80098f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098fc:	d00c      	beq.n	8009918 <UART_SetConfig+0x2a0>
 80098fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009902:	d815      	bhi.n	8009930 <UART_SetConfig+0x2b8>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <UART_SetConfig+0x298>
 8009908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800990c:	d008      	beq.n	8009920 <UART_SetConfig+0x2a8>
 800990e:	e00f      	b.n	8009930 <UART_SetConfig+0x2b8>
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009916:	e022      	b.n	800995e <UART_SetConfig+0x2e6>
 8009918:	2302      	movs	r3, #2
 800991a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991e:	e01e      	b.n	800995e <UART_SetConfig+0x2e6>
 8009920:	2304      	movs	r3, #4
 8009922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009926:	e01a      	b.n	800995e <UART_SetConfig+0x2e6>
 8009928:	2308      	movs	r3, #8
 800992a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992e:	e016      	b.n	800995e <UART_SetConfig+0x2e6>
 8009930:	2310      	movs	r3, #16
 8009932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009936:	e012      	b.n	800995e <UART_SetConfig+0x2e6>
 8009938:	efff69f3 	.word	0xefff69f3
 800993c:	40008000 	.word	0x40008000
 8009940:	40013800 	.word	0x40013800
 8009944:	40021000 	.word	0x40021000
 8009948:	40004400 	.word	0x40004400
 800994c:	40004800 	.word	0x40004800
 8009950:	40004c00 	.word	0x40004c00
 8009954:	40005000 	.word	0x40005000
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4aa0      	ldr	r2, [pc, #640]	; (8009be4 <UART_SetConfig+0x56c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d17a      	bne.n	8009a5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996c:	2b08      	cmp	r3, #8
 800996e:	d824      	bhi.n	80099ba <UART_SetConfig+0x342>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x300>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	0800999d 	.word	0x0800999d
 800997c:	080099bb 	.word	0x080099bb
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099bb 	.word	0x080099bb
 8009988:	080099ab 	.word	0x080099ab
 800998c:	080099bb 	.word	0x080099bb
 8009990:	080099bb 	.word	0x080099bb
 8009994:	080099bb 	.word	0x080099bb
 8009998:	080099b3 	.word	0x080099b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800999c:	f7fc fc04 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 80099a0:	61f8      	str	r0, [r7, #28]
        break;
 80099a2:	e010      	b.n	80099c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a4:	4b90      	ldr	r3, [pc, #576]	; (8009be8 <UART_SetConfig+0x570>)
 80099a6:	61fb      	str	r3, [r7, #28]
        break;
 80099a8:	e00d      	b.n	80099c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099aa:	f7fc fb65 	bl	8006078 <HAL_RCC_GetSysClockFreq>
 80099ae:	61f8      	str	r0, [r7, #28]
        break;
 80099b0:	e009      	b.n	80099c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099b6:	61fb      	str	r3, [r7, #28]
        break;
 80099b8:	e005      	b.n	80099c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80099c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80fd 	beq.w	8009bc8 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d305      	bcc.n	80099ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d903      	bls.n	80099f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80099f0:	e0ea      	b.n	8009bc8 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2200      	movs	r2, #0
 80099f6:	461c      	mov	r4, r3
 80099f8:	4615      	mov	r5, r2
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	022b      	lsls	r3, r5, #8
 8009a04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009a08:	0222      	lsls	r2, r4, #8
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	6849      	ldr	r1, [r1, #4]
 8009a0e:	0849      	lsrs	r1, r1, #1
 8009a10:	2000      	movs	r0, #0
 8009a12:	4688      	mov	r8, r1
 8009a14:	4681      	mov	r9, r0
 8009a16:	eb12 0a08 	adds.w	sl, r2, r8
 8009a1a:	eb43 0b09 	adc.w	fp, r3, r9
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	4659      	mov	r1, fp
 8009a30:	f7f7 f8ba 	bl	8000ba8 <__aeabi_uldivmod>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4613      	mov	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a42:	d308      	bcc.n	8009a56 <UART_SetConfig+0x3de>
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a4a:	d204      	bcs.n	8009a56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	60da      	str	r2, [r3, #12]
 8009a54:	e0b8      	b.n	8009bc8 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a5c:	e0b4      	b.n	8009bc8 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a66:	d15f      	bne.n	8009b28 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8009a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d828      	bhi.n	8009ac2 <UART_SetConfig+0x44a>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x400>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009aa5 	.word	0x08009aa5
 8009a80:	08009aad 	.word	0x08009aad
 8009a84:	08009ac3 	.word	0x08009ac3
 8009a88:	08009ab3 	.word	0x08009ab3
 8009a8c:	08009ac3 	.word	0x08009ac3
 8009a90:	08009ac3 	.word	0x08009ac3
 8009a94:	08009ac3 	.word	0x08009ac3
 8009a98:	08009abb 	.word	0x08009abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9c:	f7fc fb84 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8009aa0:	61f8      	str	r0, [r7, #28]
        break;
 8009aa2:	e014      	b.n	8009ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa4:	f7fc fb96 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8009aa8:	61f8      	str	r0, [r7, #28]
        break;
 8009aaa:	e010      	b.n	8009ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aac:	4b4e      	ldr	r3, [pc, #312]	; (8009be8 <UART_SetConfig+0x570>)
 8009aae:	61fb      	str	r3, [r7, #28]
        break;
 8009ab0:	e00d      	b.n	8009ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ab2:	f7fc fae1 	bl	8006078 <HAL_RCC_GetSysClockFreq>
 8009ab6:	61f8      	str	r0, [r7, #28]
        break;
 8009ab8:	e009      	b.n	8009ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009abe:	61fb      	str	r3, [r7, #28]
        break;
 8009ac0:	e005      	b.n	8009ace <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d079      	beq.n	8009bc8 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	005a      	lsls	r2, r3, #1
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	085b      	lsrs	r3, r3, #1
 8009ade:	441a      	add	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b0f      	cmp	r3, #15
 8009af0:	d916      	bls.n	8009b20 <UART_SetConfig+0x4a8>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af8:	d212      	bcs.n	8009b20 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f023 030f 	bic.w	r3, r3, #15
 8009b02:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	8afb      	ldrh	r3, [r7, #22]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	8afa      	ldrh	r2, [r7, #22]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e053      	b.n	8009bc8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b26:	e04f      	b.n	8009bc8 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d828      	bhi.n	8009b82 <UART_SetConfig+0x50a>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x4c0>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b5d 	.word	0x08009b5d
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	08009b6d 	.word	0x08009b6d
 8009b44:	08009b83 	.word	0x08009b83
 8009b48:	08009b73 	.word	0x08009b73
 8009b4c:	08009b83 	.word	0x08009b83
 8009b50:	08009b83 	.word	0x08009b83
 8009b54:	08009b83 	.word	0x08009b83
 8009b58:	08009b7b 	.word	0x08009b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b5c:	f7fc fb24 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8009b60:	61f8      	str	r0, [r7, #28]
        break;
 8009b62:	e014      	b.n	8009b8e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b64:	f7fc fb36 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8009b68:	61f8      	str	r0, [r7, #28]
        break;
 8009b6a:	e010      	b.n	8009b8e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b6c:	4b1e      	ldr	r3, [pc, #120]	; (8009be8 <UART_SetConfig+0x570>)
 8009b6e:	61fb      	str	r3, [r7, #28]
        break;
 8009b70:	e00d      	b.n	8009b8e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b72:	f7fc fa81 	bl	8006078 <HAL_RCC_GetSysClockFreq>
 8009b76:	61f8      	str	r0, [r7, #28]
        break;
 8009b78:	e009      	b.n	8009b8e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b7e:	61fb      	str	r3, [r7, #28]
        break;
 8009b80:	e005      	b.n	8009b8e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d019      	beq.n	8009bc8 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	085a      	lsrs	r2, r3, #1
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b0f      	cmp	r3, #15
 8009bae:	d908      	bls.n	8009bc2 <UART_SetConfig+0x54a>
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d204      	bcs.n	8009bc2 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	60da      	str	r2, [r3, #12]
 8009bc0:	e002      	b.n	8009bc8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009be2:	bf00      	nop
 8009be4:	40008000 	.word	0x40008000
 8009be8:	00f42400 	.word	0x00f42400

08009bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00a      	beq.n	8009c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cea:	d10a      	bne.n	8009d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	605a      	str	r2, [r3, #4]
  }
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d40:	f7f9 fef2 	bl	8003b28 <HAL_GetTick>
 8009d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d10e      	bne.n	8009d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f82d 	bl	8009dc2 <UART_WaitOnFlagUntilTimeout>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e023      	b.n	8009dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d10e      	bne.n	8009d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f817 	bl	8009dc2 <UART_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e00d      	b.n	8009dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2220      	movs	r2, #32
 8009da2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dd2:	e05e      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dda:	d05a      	beq.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ddc:	f7f9 fea4 	bl	8003b28 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	69ba      	ldr	r2, [r7, #24]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d302      	bcc.n	8009df2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11b      	bne.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0201 	bic.w	r2, r2, #1
 8009e10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2220      	movs	r2, #32
 8009e16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e043      	b.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d02c      	beq.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e46:	d124      	bne.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e50:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e60:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 0201 	bic.w	r2, r2, #1
 8009e70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2220      	movs	r2, #32
 8009e76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e00f      	b.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	bf0c      	ite	eq
 8009ea2:	2301      	moveq	r3, #1
 8009ea4:	2300      	movne	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d091      	beq.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	88fa      	ldrh	r2, [r7, #6]
 8009ed4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	88fa      	ldrh	r2, [r7, #6]
 8009edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eee:	d10e      	bne.n	8009f0e <UART_Start_Receive_IT+0x52>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <UART_Start_Receive_IT+0x48>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f02:	e02d      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	22ff      	movs	r2, #255	; 0xff
 8009f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f0c:	e028      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10d      	bne.n	8009f32 <UART_Start_Receive_IT+0x76>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <UART_Start_Receive_IT+0x6c>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	22ff      	movs	r2, #255	; 0xff
 8009f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f26:	e01b      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	227f      	movs	r2, #127	; 0x7f
 8009f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f30:	e016      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f3a:	d10d      	bne.n	8009f58 <UART_Start_Receive_IT+0x9c>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d104      	bne.n	8009f4e <UART_Start_Receive_IT+0x92>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	227f      	movs	r2, #127	; 0x7f
 8009f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f4c:	e008      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	223f      	movs	r2, #63	; 0x3f
 8009f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f56:	e003      	b.n	8009f60 <UART_Start_Receive_IT+0xa4>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2222      	movs	r2, #34	; 0x22
 8009f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 0201 	orr.w	r2, r2, #1
 8009f7c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f86:	d107      	bne.n	8009f98 <UART_Start_Receive_IT+0xdc>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <UART_Start_Receive_IT+0x108>)
 8009f94:	665a      	str	r2, [r3, #100]	; 0x64
 8009f96:	e002      	b.n	8009f9e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4a0b      	ldr	r2, [pc, #44]	; (8009fc8 <UART_Start_Receive_IT+0x10c>)
 8009f9c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009fb4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	0800a161 	.word	0x0800a161
 8009fc8:	0800a089 	.word	0x0800a089

08009fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009fe2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0201 	bic.w	r2, r2, #1
 8009ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d107      	bne.n	800a00c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 0210 	bic.w	r2, r2, #16
 800a00a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2220      	movs	r2, #32
 800a010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff faff 	bl	800964c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a06c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2220      	movs	r2, #32
 800a072:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fadc 	bl	8009638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a096:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09c:	2b22      	cmp	r3, #34	; 0x22
 800a09e:	d151      	bne.n	800a144 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a0a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a0a8:	89bb      	ldrh	r3, [r7, #12]
 800a0aa:	b2d9      	uxtb	r1, r3
 800a0ac:	89fb      	ldrh	r3, [r7, #14]
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b4:	400a      	ands	r2, r1
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d13a      	bne.n	800a158 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2220      	movs	r2, #32
 800a106:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a112:	2b01      	cmp	r3, #1
 800a114:	d10f      	bne.n	800a136 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0210 	bic.w	r2, r2, #16
 800a124:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fa96 	bl	8009660 <HAL_UARTEx_RxEventCallback>
 800a134:	e002      	b.n	800a13c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f7 fc14 	bl	8001964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a142:	e009      	b.n	800a158 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	8b1b      	ldrh	r3, [r3, #24]
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f042 0208 	orr.w	r2, r2, #8
 800a154:	b292      	uxth	r2, r2
 800a156:	831a      	strh	r2, [r3, #24]
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a16e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a174:	2b22      	cmp	r3, #34	; 0x22
 800a176:	d151      	bne.n	800a21c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a17e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a184:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a186:	89ba      	ldrh	r2, [r7, #12]
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	4013      	ands	r3, r2
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a196:	1c9a      	adds	r2, r3, #2
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d13a      	bne.n	800a230 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0201 	bic.w	r2, r2, #1
 800a1d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d10f      	bne.n	800a20e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0210 	bic.w	r2, r2, #16
 800a1fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff fa2a 	bl	8009660 <HAL_UARTEx_RxEventCallback>
 800a20c:	e002      	b.n	800a214 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f7 fba8 	bl	8001964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a21a:	e009      	b.n	800a230 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	8b1b      	ldrh	r3, [r3, #24]
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0208 	orr.w	r2, r2, #8
 800a22c:	b292      	uxth	r2, r2
 800a22e:	831a      	strh	r2, [r3, #24]
}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a24c:	b084      	sub	sp, #16
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	f107 001c 	add.w	r0, r7, #28
 800a25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa24 	bl	800a6b8 <USB_CoreReset>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	639a      	str	r2, [r3, #56]	; 0x38
 800a286:	e005      	b.n	800a294 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2a0:	b004      	add	sp, #16
 800a2a2:	4770      	bx	lr

0800a2a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f023 0201 	bic.w	r2, r3, #1
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d106      	bne.n	800a2f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60da      	str	r2, [r3, #12]
 800a2f0:	e00b      	b.n	800a30a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60da      	str	r2, [r3, #12]
 800a304:	e001      	b.n	800a30a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e003      	b.n	800a312 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a30a:	2032      	movs	r0, #50	; 0x32
 800a30c:	f7f9 fc18 	bl	8003b40 <HAL_Delay>

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a31c:	b084      	sub	sp, #16
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a32a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]
 800a33a:	e009      	b.n	800a350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	3340      	adds	r3, #64	; 0x40
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	2200      	movs	r2, #0
 800a348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	2b0e      	cmp	r3, #14
 800a354:	d9f2      	bls.n	800a33c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d11c      	bne.n	800a396 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a36a:	f043 0302 	orr.w	r3, r3, #2
 800a36e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e005      	b.n	800a3a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3bc:	461a      	mov	r2, r3
 800a3be:	680b      	ldr	r3, [r1, #0]
 800a3c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3c2:	2103      	movs	r1, #3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f93d 	bl	800a644 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3ca:	2110      	movs	r1, #16
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f8f1 	bl	800a5b4 <USB_FlushTxFifo>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f90f 	bl	800a600 <USB_FlushRxFifo>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fe:	461a      	mov	r2, r3
 800a400:	2300      	movs	r3, #0
 800a402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a40a:	461a      	mov	r2, r3
 800a40c:	2300      	movs	r3, #0
 800a40e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a410:	2300      	movs	r3, #0
 800a412:	613b      	str	r3, [r7, #16]
 800a414:	e043      	b.n	800a49e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a42c:	d118      	bne.n	800a460 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a440:	461a      	mov	r2, r3
 800a442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	e013      	b.n	800a472 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a456:	461a      	mov	r2, r3
 800a458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	e008      	b.n	800a472 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a46c:	461a      	mov	r2, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47e:	461a      	mov	r2, r3
 800a480:	2300      	movs	r3, #0
 800a482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	461a      	mov	r2, r3
 800a492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	3301      	adds	r3, #1
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d3b7      	bcc.n	800a416 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	613b      	str	r3, [r7, #16]
 800a4aa:	e043      	b.n	800a534 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4c2:	d118      	bne.n	800a4f6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	e013      	b.n	800a508 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e008      	b.n	800a508 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	461a      	mov	r2, r3
 800a504:	2300      	movs	r3, #0
 800a506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a514:	461a      	mov	r2, r3
 800a516:	2300      	movs	r3, #0
 800a518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	461a      	mov	r2, r3
 800a528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a52c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3301      	adds	r3, #1
 800a532:	613b      	str	r3, [r7, #16]
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d3b7      	bcc.n	800a4ac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a54e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a55c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f043 0210 	orr.w	r2, r3, #16
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	4b10      	ldr	r3, [pc, #64]	; (800a5b0 <USB_DevInit+0x294>)
 800a570:	4313      	orrs	r3, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f043 0208 	orr.w	r2, r3, #8
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d107      	bne.n	800a59e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a596:	f043 0304 	orr.w	r3, r3, #4
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5aa:	b004      	add	sp, #16
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	803c3800 	.word	0x803c3800

0800a5b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	019b      	lsls	r3, r3, #6
 800a5c6:	f043 0220 	orr.w	r2, r3, #32
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <USB_FlushTxFifo+0x48>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d901      	bls.n	800a5e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e006      	b.n	800a5ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d0f0      	beq.n	800a5ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	00030d40 	.word	0x00030d40

0800a600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2210      	movs	r2, #16
 800a610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3301      	adds	r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4a09      	ldr	r2, [pc, #36]	; (800a640 <USB_FlushRxFifo+0x40>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d901      	bls.n	800a624 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e006      	b.n	800a632 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b10      	cmp	r3, #16
 800a62e:	d0f0      	beq.n	800a612 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	00030d40 	.word	0x00030d40

0800a644 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	68f9      	ldr	r1, [r7, #12]
 800a660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a664:	4313      	orrs	r3, r2
 800a666:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a13      	ldr	r2, [pc, #76]	; (800a71c <USB_CoreReset+0x64>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d901      	bls.n	800a6d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e01b      	b.n	800a70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	daf2      	bge.n	800a6c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	f043 0201 	orr.w	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4a09      	ldr	r2, [pc, #36]	; (800a71c <USB_CoreReset+0x64>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d901      	bls.n	800a700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e006      	b.n	800a70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d0f0      	beq.n	800a6ee <USB_CoreReset+0x36>

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	00030d40 	.word	0x00030d40

0800a720 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a728:	4b27      	ldr	r3, [pc, #156]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72c:	4a26      	ldr	r2, [pc, #152]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a72e:	f043 0302 	orr.w	r3, r3, #2
 800a732:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a734:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a744:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a746:	2312      	movs	r3, #18
 800a748:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a74a:	2301      	movs	r3, #1
 800a74c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a74e:	2303      	movs	r3, #3
 800a750:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a752:	2304      	movs	r3, #4
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a756:	f107 0314 	add.w	r3, r7, #20
 800a75a:	4619      	mov	r1, r3
 800a75c:	481b      	ldr	r0, [pc, #108]	; (800a7cc <I2Cx_MspInit+0xac>)
 800a75e:	f7f9 fcb3 	bl	80040c8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a762:	f107 0314 	add.w	r3, r7, #20
 800a766:	4619      	mov	r1, r3
 800a768:	4818      	ldr	r0, [pc, #96]	; (800a7cc <I2Cx_MspInit+0xac>)
 800a76a:	f7f9 fcad 	bl	80040c8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a76e:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a772:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a778:	6593      	str	r3, [r2, #88]	; 0x58
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a786:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	4a0f      	ldr	r2, [pc, #60]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a78c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a790:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a792:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <I2Cx_MspInit+0xa8>)
 800a798:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a79c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	210f      	movs	r1, #15
 800a7a2:	2021      	movs	r0, #33	; 0x21
 800a7a4:	f7f9 facc 	bl	8003d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a7a8:	2021      	movs	r0, #33	; 0x21
 800a7aa:	f7f9 fae5 	bl	8003d78 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	210f      	movs	r1, #15
 800a7b2:	2022      	movs	r0, #34	; 0x22
 800a7b4:	f7f9 fac4 	bl	8003d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a7b8:	2022      	movs	r0, #34	; 0x22
 800a7ba:	f7f9 fadd 	bl	8003d78 <HAL_NVIC_EnableIRQ>
}
 800a7be:	bf00      	nop
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40021000 	.word	0x40021000
 800a7cc:	48000400 	.word	0x48000400

0800a7d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a12      	ldr	r2, [pc, #72]	; (800a824 <I2Cx_Init+0x54>)
 800a7dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a11      	ldr	r2, [pc, #68]	; (800a828 <I2Cx_Init+0x58>)
 800a7e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ff89 	bl	800a720 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7f9 ff40 	bl	8004694 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fa fc44 	bl	80050a4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	40005800 	.word	0x40005800
 800a828:	00702681 	.word	0x00702681

0800a82c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	; 0x28
 800a830:	af04      	add	r7, sp, #16
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	461a      	mov	r2, r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	72fb      	strb	r3, [r7, #11]
 800a83e:	460b      	mov	r3, r1
 800a840:	813b      	strh	r3, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	b299      	uxth	r1, r3
 800a84e:	88f8      	ldrh	r0, [r7, #6]
 800a850:	893a      	ldrh	r2, [r7, #8]
 800a852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	4603      	mov	r3, r0
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7fa f8e8 	bl	8004a38 <HAL_I2C_Mem_Read>
 800a868:	4603      	mov	r3, r0
 800a86a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	4619      	mov	r1, r3
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 f832 	bl	800a8e0 <I2Cx_Error>
  }
  return status;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b08a      	sub	sp, #40	; 0x28
 800a88a:	af04      	add	r7, sp, #16
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	461a      	mov	r2, r3
 800a894:	4603      	mov	r3, r0
 800a896:	72fb      	strb	r3, [r7, #11]
 800a898:	460b      	mov	r3, r1
 800a89a:	813b      	strh	r3, [r7, #8]
 800a89c:	4613      	mov	r3, r2
 800a89e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	b299      	uxth	r1, r3
 800a8a8:	88f8      	ldrh	r0, [r7, #6]
 800a8aa:	893a      	ldrh	r2, [r7, #8]
 800a8ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8b0:	9302      	str	r3, [sp, #8]
 800a8b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7f9 ffa7 	bl	8004810 <HAL_I2C_Mem_Write>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d004      	beq.n	800a8d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f805 	bl	800a8e0 <I2Cx_Error>
  }
  return status;
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7f9 ff60 	bl	80047b2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff ff6c 	bl	800a7d0 <I2Cx_Init>
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a904:	4802      	ldr	r0, [pc, #8]	; (800a910 <SENSOR_IO_Init+0x10>)
 800a906:	f7ff ff63 	bl	800a7d0 <I2Cx_Init>
}
 800a90a:	bf00      	nop
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000da8 	.word	0x20000da8

0800a914 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af02      	add	r7, sp, #8
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
 800a91e:	460b      	mov	r3, r1
 800a920:	71bb      	strb	r3, [r7, #6]
 800a922:	4613      	mov	r3, r2
 800a924:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a926:	79bb      	ldrb	r3, [r7, #6]
 800a928:	b29a      	uxth	r2, r3
 800a92a:	79f9      	ldrb	r1, [r7, #7]
 800a92c:	2301      	movs	r3, #1
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	1d7b      	adds	r3, r7, #5
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	2301      	movs	r3, #1
 800a936:	4803      	ldr	r0, [pc, #12]	; (800a944 <SENSOR_IO_Write+0x30>)
 800a938:	f7ff ffa5 	bl	800a886 <I2Cx_WriteMultiple>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000da8 	.word	0x20000da8

0800a948 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	4603      	mov	r3, r0
 800a950:	460a      	mov	r2, r1
 800a952:	71fb      	strb	r3, [r7, #7]
 800a954:	4613      	mov	r3, r2
 800a956:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a95c:	79bb      	ldrb	r3, [r7, #6]
 800a95e:	b29a      	uxth	r2, r3
 800a960:	79f9      	ldrb	r1, [r7, #7]
 800a962:	2301      	movs	r3, #1
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	f107 030f 	add.w	r3, r7, #15
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	2301      	movs	r3, #1
 800a96e:	4804      	ldr	r0, [pc, #16]	; (800a980 <SENSOR_IO_Read+0x38>)
 800a970:	f7ff ff5c 	bl	800a82c <I2Cx_ReadMultiple>

  return read_value;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20000da8 	.word	0x20000da8

0800a984 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af02      	add	r7, sp, #8
 800a98a:	603a      	str	r2, [r7, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	4603      	mov	r3, r0
 800a990:	71fb      	strb	r3, [r7, #7]
 800a992:	460b      	mov	r3, r1
 800a994:	71bb      	strb	r3, [r7, #6]
 800a996:	4613      	mov	r3, r2
 800a998:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a99a:	79bb      	ldrb	r3, [r7, #6]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	79f9      	ldrb	r1, [r7, #7]
 800a9a0:	88bb      	ldrh	r3, [r7, #4]
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4804      	ldr	r0, [pc, #16]	; (800a9bc <SENSOR_IO_ReadMultiple+0x38>)
 800a9ac:	f7ff ff3e 	bl	800a82c <I2Cx_ReadMultiple>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	b29b      	uxth	r3, r3
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20000da8 	.word	0x20000da8

0800a9c0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(uint8_t frec, uint8_t fs)
{  
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	460a      	mov	r2, r1
 800a9ca:	71fb      	strb	r3, [r7, #7]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	71bb      	strb	r3, [r7, #6]
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a9d8:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <BSP_ACCELERO_Init+0x80>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b6a      	cmp	r3, #106	; 0x6a
 800a9e2:	d002      	beq.n	800a9ea <BSP_ACCELERO_Init+0x2a>
  {
    ret = ACCELERO_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75fb      	strb	r3, [r7, #23]
 800a9e8:	e024      	b.n	800aa34 <BSP_ACCELERO_Init+0x74>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800a9ea:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <BSP_ACCELERO_Init+0x84>)
 800a9ec:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <BSP_ACCELERO_Init+0x80>)
 800a9ee:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = frec;
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	737b      	strb	r3, [r7, #13]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]
    LSM6DSL_InitStructure.AccFull_Scale = fs;
 800a9f8:	79bb      	ldrb	r3, [r7, #6]
 800a9fa:	74bb      	strb	r3, [r7, #18]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a9fc:	2340      	movs	r3, #64	; 0x40
 800a9fe:	743b      	strb	r3, [r7, #16]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	74fb      	strb	r3, [r7, #19]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800aa08:	7b7a      	ldrb	r2, [r7, #13]
 800aa0a:	7cbb      	ldrb	r3, [r7, #18]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800aa12:	7c3b      	ldrb	r3, [r7, #16]
 800aa14:	f043 0304 	orr.w	r3, r3, #4
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	021b      	lsls	r3, r3, #8
 800aa1c:	b21a      	sxth	r2, r3
 800aa1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	b21b      	sxth	r3, r3
 800aa26:	82bb      	strh	r3, [r7, #20]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800aa28:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <BSP_ACCELERO_Init+0x84>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	8aba      	ldrh	r2, [r7, #20]
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
  }  

  return ret;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000020 	.word	0x20000020
 800aa44:	20000df4 	.word	0x20000df4

0800aa48 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800aa50:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800aa58:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800aa62:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
    }
  }
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000df4 	.word	0x20000df4

0800aa78 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800aa86:	2110      	movs	r1, #16
 800aa88:	20d4      	movs	r0, #212	; 0xd4
 800aa8a:	f7ff ff5d 	bl	800a948 <SENSOR_IO_Read>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	f003 0303 	and.w	r3, r3, #3
 800aa9c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800aa9e:	7bba      	ldrb	r2, [r7, #14]
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	2110      	movs	r1, #16
 800aaac:	20d4      	movs	r0, #212	; 0xd4
 800aaae:	f7ff ff31 	bl	800a914 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800aab2:	2112      	movs	r1, #18
 800aab4:	20d4      	movs	r0, #212	; 0xd4
 800aab6:	f7ff ff47 	bl	800a948 <SENSOR_IO_Read>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800aabe:	88fb      	ldrh	r3, [r7, #6]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800aacc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800aace:	7bba      	ldrb	r2, [r7, #14]
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	461a      	mov	r2, r3
 800aada:	2112      	movs	r1, #18
 800aadc:	20d4      	movs	r0, #212	; 0xd4
 800aade:	f7ff ff19 	bl	800a914 <SENSOR_IO_Write>
}
 800aae2:	bf00      	nop
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800aaf4:	2110      	movs	r1, #16
 800aaf6:	20d4      	movs	r0, #212	; 0xd4
 800aaf8:	f7ff ff26 	bl	800a948 <SENSOR_IO_Read>
 800aafc:	4603      	mov	r3, r0
 800aafe:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2110      	movs	r1, #16
 800ab0e:	20d4      	movs	r0, #212	; 0xd4
 800ab10:	f7ff ff00 	bl	800a914 <SENSOR_IO_Write>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800ab20:	f7ff feee 	bl	800a900 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800ab24:	210f      	movs	r1, #15
 800ab26:	20d4      	movs	r0, #212	; 0xd4
 800ab28:	f7ff ff0e 	bl	800a948 <SENSOR_IO_Read>
 800ab2c:	4603      	mov	r3, r0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	4603      	mov	r3, r0
 800ab3a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800ab40:	2115      	movs	r1, #21
 800ab42:	20d4      	movs	r0, #212	; 0xd4
 800ab44:	f7ff ff00 	bl	800a948 <SENSOR_IO_Read>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	f023 0310 	bic.w	r3, r3, #16
 800ab52:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	f043 0310 	orr.w	r3, r3, #16
 800ab60:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	461a      	mov	r2, r3
 800ab66:	2115      	movs	r1, #21
 800ab68:	20d4      	movs	r0, #212	; 0xd4
 800ab6a:	f7ff fed3 	bl	800a914 <SENSOR_IO_Write>
}
 800ab6e:	bf00      	nop
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800ab88:	f04f 0300 	mov.w	r3, #0
 800ab8c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800ab8e:	2110      	movs	r1, #16
 800ab90:	20d4      	movs	r0, #212	; 0xd4
 800ab92:	f7ff fed9 	bl	800a948 <SENSOR_IO_Read>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800ab9a:	f107 0208 	add.w	r2, r7, #8
 800ab9e:	2306      	movs	r3, #6
 800aba0:	2128      	movs	r1, #40	; 0x28
 800aba2:	20d4      	movs	r0, #212	; 0xd4
 800aba4:	f7ff feee 	bl	800a984 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800aba8:	2300      	movs	r3, #0
 800abaa:	77fb      	strb	r3, [r7, #31]
 800abac:	e01c      	b.n	800abe8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800abae:	7ffb      	ldrb	r3, [r7, #31]
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	3301      	adds	r3, #1
 800abb4:	3320      	adds	r3, #32
 800abb6:	443b      	add	r3, r7
 800abb8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	021b      	lsls	r3, r3, #8
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	7ffb      	ldrb	r3, [r7, #31]
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	3320      	adds	r3, #32
 800abc8:	443b      	add	r3, r7
 800abca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4413      	add	r3, r2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	7ffb      	ldrb	r3, [r7, #31]
 800abd6:	b212      	sxth	r2, r2
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	3320      	adds	r3, #32
 800abdc:	443b      	add	r3, r7
 800abde:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800abe2:	7ffb      	ldrb	r3, [r7, #31]
 800abe4:	3301      	adds	r3, #1
 800abe6:	77fb      	strb	r3, [r7, #31]
 800abe8:	7ffb      	ldrb	r3, [r7, #31]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d9df      	bls.n	800abae <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	f003 030c 	and.w	r3, r3, #12
 800abf4:	2b0c      	cmp	r3, #12
 800abf6:	d829      	bhi.n	800ac4c <LSM6DSL_AccReadXYZ+0xd4>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <LSM6DSL_AccReadXYZ+0x88>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac35 	.word	0x0800ac35
 800ac04:	0800ac4d 	.word	0x0800ac4d
 800ac08:	0800ac4d 	.word	0x0800ac4d
 800ac0c:	0800ac4d 	.word	0x0800ac4d
 800ac10:	0800ac47 	.word	0x0800ac47
 800ac14:	0800ac4d 	.word	0x0800ac4d
 800ac18:	0800ac4d 	.word	0x0800ac4d
 800ac1c:	0800ac4d 	.word	0x0800ac4d
 800ac20:	0800ac3b 	.word	0x0800ac3b
 800ac24:	0800ac4d 	.word	0x0800ac4d
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac4d 	.word	0x0800ac4d
 800ac30:	0800ac41 	.word	0x0800ac41
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800ac34:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <LSM6DSL_AccReadXYZ+0x120>)
 800ac36:	61bb      	str	r3, [r7, #24]
    break;
 800ac38:	e008      	b.n	800ac4c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800ac3a:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <LSM6DSL_AccReadXYZ+0x124>)
 800ac3c:	61bb      	str	r3, [r7, #24]
    break;
 800ac3e:	e005      	b.n	800ac4c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800ac40:	4b17      	ldr	r3, [pc, #92]	; (800aca0 <LSM6DSL_AccReadXYZ+0x128>)
 800ac42:	61bb      	str	r3, [r7, #24]
    break;
 800ac44:	e002      	b.n	800ac4c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800ac46:	4b17      	ldr	r3, [pc, #92]	; (800aca4 <LSM6DSL_AccReadXYZ+0x12c>)
 800ac48:	61bb      	str	r3, [r7, #24]
    break;    
 800ac4a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	77fb      	strb	r3, [r7, #31]
 800ac50:	e01a      	b.n	800ac88 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800ac52:	7ffb      	ldrb	r3, [r7, #31]
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	3320      	adds	r3, #32
 800ac58:	443b      	add	r3, r7
 800ac5a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac66:	edd7 7a06 	vldr	s15, [r7, #24]
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	7ffb      	ldrb	r3, [r7, #31]
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac7a:	ee17 2a90 	vmov	r2, s15
 800ac7e:	b212      	sxth	r2, r2
 800ac80:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800ac82:	7ffb      	ldrb	r3, [r7, #31]
 800ac84:	3301      	adds	r3, #1
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	7ffb      	ldrb	r3, [r7, #31]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d9e1      	bls.n	800ac52 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	3d79db23 	.word	0x3d79db23
 800ac9c:	3df9db23 	.word	0x3df9db23
 800aca0:	3e79db23 	.word	0x3e79db23
 800aca4:	3ef9db23 	.word	0x3ef9db23

0800aca8 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b2f      	cmp	r3, #47	; 0x2f
 800acb6:	d906      	bls.n	800acc6 <Hex2Num+0x1e>
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b39      	cmp	r3, #57	; 0x39
 800acbc:	d803      	bhi.n	800acc6 <Hex2Num+0x1e>
        return a - '0';
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	3b30      	subs	r3, #48	; 0x30
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	e014      	b.n	800acf0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	2b60      	cmp	r3, #96	; 0x60
 800acca:	d906      	bls.n	800acda <Hex2Num+0x32>
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	2b66      	cmp	r3, #102	; 0x66
 800acd0:	d803      	bhi.n	800acda <Hex2Num+0x32>
        return (a - 'a') + 10;
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	3b57      	subs	r3, #87	; 0x57
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	e00a      	b.n	800acf0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	2b40      	cmp	r3, #64	; 0x40
 800acde:	d906      	bls.n	800acee <Hex2Num+0x46>
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b46      	cmp	r3, #70	; 0x46
 800ace4:	d803      	bhi.n	800acee <Hex2Num+0x46>
        return (a - 'A') + 10;
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	3b37      	subs	r3, #55	; 0x37
 800acea:	b2db      	uxtb	r3, r3
 800acec:	e000      	b.n	800acf0 <Hex2Num+0x48>
    }

    return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800ad0e:	e012      	b.n	800ad36 <ParseHexNumber+0x3a>
        sum <<= 4;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ffc4 	bl	800aca8 <Hex2Num>
 800ad20:	4603      	mov	r3, r0
 800ad22:	461a      	mov	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
        ptr++;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	607b      	str	r3, [r7, #4]
        i++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b2f      	cmp	r3, #47	; 0x2f
 800ad3c:	d903      	bls.n	800ad46 <ParseHexNumber+0x4a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b39      	cmp	r3, #57	; 0x39
 800ad44:	d9e4      	bls.n	800ad10 <ParseHexNumber+0x14>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b60      	cmp	r3, #96	; 0x60
 800ad4c:	d903      	bls.n	800ad56 <ParseHexNumber+0x5a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b66      	cmp	r3, #102	; 0x66
 800ad54:	d9dc      	bls.n	800ad10 <ParseHexNumber+0x14>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d903      	bls.n	800ad66 <ParseHexNumber+0x6a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b46      	cmp	r3, #70	; 0x46
 800ad64:	d9d4      	bls.n	800ad10 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <ParseHexNumber+0x76>
        *cnt = i;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	7afa      	ldrb	r2, [r7, #11]
 800ad70:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800ad72:	68fb      	ldr	r3, [r7, #12]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b2d      	cmp	r3, #45	; 0x2d
 800ad98:	d119      	bne.n	800adce <ParseNumber+0x52>
        minus = 1;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3301      	adds	r3, #1
 800ada2:	607b      	str	r3, [r7, #4]
        i++;
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	3301      	adds	r3, #1
 800ada8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800adaa:	e010      	b.n	800adce <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	461a      	mov	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	3b30      	subs	r3, #48	; 0x30
 800adbe:	4413      	add	r3, r2
 800adc0:	60bb      	str	r3, [r7, #8]
        ptr++;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3301      	adds	r3, #1
 800adc6:	607b      	str	r3, [r7, #4]
        i++;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	3301      	adds	r3, #1
 800adcc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b2f      	cmp	r3, #47	; 0x2f
 800add4:	d903      	bls.n	800adde <ParseNumber+0x62>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b39      	cmp	r3, #57	; 0x39
 800addc:	d9e6      	bls.n	800adac <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <ParseNumber+0x6e>
        *cnt = i;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	7bba      	ldrb	r2, [r7, #14]
 800ade8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <ParseNumber+0x7a>
        return 0 - sum;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	425b      	negs	r3, r3
 800adf4:	e000      	b.n	800adf8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800adf6:	68bb      	ldr	r3, [r7, #8]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800ae12:	e019      	b.n	800ae48 <ParseMAC+0x44>
    hexcnt = 1;
 800ae14:	2301      	movs	r3, #1
 800ae16:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b3a      	cmp	r3, #58	; 0x3a
 800ae1e:	d00e      	beq.n	800ae3e <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800ae20:	f107 030e 	add.w	r3, r7, #14
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff68 	bl	800acfc <ParseHexNumber>
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	73fa      	strb	r2, [r7, #15]
 800ae34:	461a      	mov	r2, r3
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	4413      	add	r3, r2
 800ae3a:	b2ca      	uxtb	r2, r1
 800ae3c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	461a      	mov	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4413      	add	r3, r2
 800ae46:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e1      	bne.n	800ae14 <ParseMAC+0x10>
  }
}
 800ae50:	bf00      	nop
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800ae68:	e019      	b.n	800ae9e <ParseIP+0x44>
    hexcnt = 1;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b2e      	cmp	r3, #46	; 0x2e
 800ae74:	d00e      	beq.n	800ae94 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800ae76:	f107 030e 	add.w	r3, r7, #14
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ff7d 	bl	800ad7c <ParseNumber>
 800ae82:	4601      	mov	r1, r0
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	73fa      	strb	r2, [r7, #15]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	4413      	add	r3, r2
 800ae90:	b2ca      	uxtb	r2, r1
 800ae92:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	461a      	mov	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e1      	bne.n	800ae6a <ParseIP+0x10>
  }
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	3302      	adds	r3, #2
 800aec2:	4934      	ldr	r1, [pc, #208]	; (800af94 <AT_ParseInfo+0xe4>)
 800aec4:	4618      	mov	r0, r3
 800aec6:	f009 fcdd 	bl	8014884 <strtok>
 800aeca:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800aecc:	e05a      	b.n	800af84 <AT_ParseInfo+0xd4>
    switch (num++) {
 800aece:	7afb      	ldrb	r3, [r7, #11]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	72fa      	strb	r2, [r7, #11]
 800aed4:	2b06      	cmp	r3, #6
 800aed6:	d84f      	bhi.n	800af78 <AT_ParseInfo+0xc8>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <AT_ParseInfo+0x30>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800aefd 	.word	0x0800aefd
 800aee4:	0800af0b 	.word	0x0800af0b
 800aee8:	0800af1b 	.word	0x0800af1b
 800aeec:	0800af2b 	.word	0x0800af2b
 800aef0:	0800af3b 	.word	0x0800af3b
 800aef4:	0800af4b 	.word	0x0800af4b
 800aef8:	0800af5f 	.word	0x0800af5f
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2220      	movs	r2, #32
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	4618      	mov	r0, r3
 800af04:	f009 fc95 	bl	8014832 <strncpy>
      break;
 800af08:	e037      	b.n	800af7a <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3320      	adds	r3, #32
 800af0e:	2218      	movs	r2, #24
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	4618      	mov	r0, r3
 800af14:	f009 fc8d 	bl	8014832 <strncpy>
      break;
 800af18:	e02f      	b.n	800af7a <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3338      	adds	r3, #56	; 0x38
 800af1e:	2210      	movs	r2, #16
 800af20:	68f9      	ldr	r1, [r7, #12]
 800af22:	4618      	mov	r0, r3
 800af24:	f009 fc85 	bl	8014832 <strncpy>
      break;
 800af28:	e027      	b.n	800af7a <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3348      	adds	r3, #72	; 0x48
 800af2e:	2210      	movs	r2, #16
 800af30:	68f9      	ldr	r1, [r7, #12]
 800af32:	4618      	mov	r0, r3
 800af34:	f009 fc7d 	bl	8014832 <strncpy>
      break;
 800af38:	e01f      	b.n	800af7a <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3358      	adds	r3, #88	; 0x58
 800af3e:	2210      	movs	r2, #16
 800af40:	68f9      	ldr	r1, [r7, #12]
 800af42:	4618      	mov	r0, r3
 800af44:	f009 fc75 	bl	8014832 <strncpy>
      break;
 800af48:	e017      	b.n	800af7a <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800af4a:	2100      	movs	r1, #0
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff ff15 	bl	800ad7c <ParseNumber>
 800af52:	4603      	mov	r3, r0
 800af54:	461a      	mov	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800af5c:	e00d      	b.n	800af7a <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800af5e:	490e      	ldr	r1, [pc, #56]	; (800af98 <AT_ParseInfo+0xe8>)
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f009 fc8f 	bl	8014884 <strtok>
 800af66:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3368      	adds	r3, #104	; 0x68
 800af6c:	2220      	movs	r2, #32
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	4618      	mov	r0, r3
 800af72:	f009 fc5e 	bl	8014832 <strncpy>
      break;
 800af76:	e000      	b.n	800af7a <AT_ParseInfo+0xca>

    default: break;
 800af78:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800af7a:	4906      	ldr	r1, [pc, #24]	; (800af94 <AT_ParseInfo+0xe4>)
 800af7c:	2000      	movs	r0, #0
 800af7e:	f009 fc81 	bl	8014884 <strtok>
 800af82:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1a1      	bne.n	800aece <AT_ParseInfo+0x1e>
  }
}
 800af8a:	bf00      	nop
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	08017164 	.word	0x08017164
 800af98:	08017168 	.word	0x08017168

0800af9c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3302      	adds	r3, #2
 800afae:	4952      	ldr	r1, [pc, #328]	; (800b0f8 <AT_ParseConnSettings+0x15c>)
 800afb0:	4618      	mov	r0, r3
 800afb2:	f009 fc67 	bl	8014884 <strtok>
 800afb6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800afb8:	e095      	b.n	800b0e6 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	73fa      	strb	r2, [r7, #15]
 800afc0:	2b0b      	cmp	r3, #11
 800afc2:	d87f      	bhi.n	800b0c4 <AT_ParseConnSettings+0x128>
 800afc4:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <AT_ParseConnSettings+0x30>)
 800afc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afca:	bf00      	nop
 800afcc:	0800affd 	.word	0x0800affd
 800afd0:	0800b00b 	.word	0x0800b00b
 800afd4:	0800b01b 	.word	0x0800b01b
 800afd8:	0800b02f 	.word	0x0800b02f
 800afdc:	0800b043 	.word	0x0800b043
 800afe0:	0800b057 	.word	0x0800b057
 800afe4:	0800b065 	.word	0x0800b065
 800afe8:	0800b073 	.word	0x0800b073
 800afec:	0800b081 	.word	0x0800b081
 800aff0:	0800b08f 	.word	0x0800b08f
 800aff4:	0800b09d 	.word	0x0800b09d
 800aff8:	0800b0b1 	.word	0x0800b0b1
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2221      	movs	r2, #33	; 0x21
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f009 fc15 	bl	8014832 <strncpy>
      break;
 800b008:	e05d      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	3321      	adds	r3, #33	; 0x21
 800b00e:	2221      	movs	r2, #33	; 0x21
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	4618      	mov	r0, r3
 800b014:	f009 fc0d 	bl	8014832 <strncpy>
      break;
 800b018:	e055      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800b01a:	2100      	movs	r1, #0
 800b01c:	68b8      	ldr	r0, [r7, #8]
 800b01e:	f7ff fead 	bl	800ad7c <ParseNumber>
 800b022:	4603      	mov	r3, r0
 800b024:	b2da      	uxtb	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800b02c:	e04b      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800b02e:	2100      	movs	r1, #0
 800b030:	68b8      	ldr	r0, [r7, #8]
 800b032:	f7ff fea3 	bl	800ad7c <ParseNumber>
 800b036:	4603      	mov	r3, r0
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800b040:	e041      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800b042:	2100      	movs	r1, #0
 800b044:	68b8      	ldr	r0, [r7, #8]
 800b046:	f7ff fe99 	bl	800ad7c <ParseNumber>
 800b04a:	4603      	mov	r3, r0
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800b054:	e037      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	3348      	adds	r3, #72	; 0x48
 800b05a:	4619      	mov	r1, r3
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	f7ff fefc 	bl	800ae5a <ParseIP>
      break;
 800b062:	e030      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	334c      	adds	r3, #76	; 0x4c
 800b068:	4619      	mov	r1, r3
 800b06a:	68b8      	ldr	r0, [r7, #8]
 800b06c:	f7ff fef5 	bl	800ae5a <ParseIP>
      break;
 800b070:	e029      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	3350      	adds	r3, #80	; 0x50
 800b076:	4619      	mov	r1, r3
 800b078:	68b8      	ldr	r0, [r7, #8]
 800b07a:	f7ff feee 	bl	800ae5a <ParseIP>
      break;
 800b07e:	e022      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	3354      	adds	r3, #84	; 0x54
 800b084:	4619      	mov	r1, r3
 800b086:	68b8      	ldr	r0, [r7, #8]
 800b088:	f7ff fee7 	bl	800ae5a <ParseIP>
      break;
 800b08c:	e01b      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	3358      	adds	r3, #88	; 0x58
 800b092:	4619      	mov	r1, r3
 800b094:	68b8      	ldr	r0, [r7, #8]
 800b096:	f7ff fee0 	bl	800ae5a <ParseIP>
      break;
 800b09a:	e014      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800b09c:	2100      	movs	r1, #0
 800b09e:	68b8      	ldr	r0, [r7, #8]
 800b0a0:	f7ff fe6c 	bl	800ad7c <ParseNumber>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800b0ae:	e00a      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	68b8      	ldr	r0, [r7, #8]
 800b0b4:	f7ff fe62 	bl	800ad7c <ParseNumber>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800b0c2:	e000      	b.n	800b0c6 <AT_ParseConnSettings+0x12a>

    default:
      break;
 800b0c4:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800b0c6:	490c      	ldr	r1, [pc, #48]	; (800b0f8 <AT_ParseConnSettings+0x15c>)
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f009 fbdb 	bl	8014884 <strtok>
 800b0ce:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <AT_ParseConnSettings+0x14a>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b2c      	cmp	r3, #44	; 0x2c
 800b0de:	d102      	bne.n	800b0e6 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f47f af66 	bne.w	800afba <AT_ParseConnSettings+0x1e>
    }
  }
}
 800b0ee:	bf00      	nop
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	08017164 	.word	0x08017164

0800b0fc <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3302      	adds	r3, #2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b31      	cmp	r3, #49	; 0x31
 800b10e:	bf0c      	ite	eq
 800b110:	2301      	moveq	r3, #1
 800b112:	2300      	movne	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	461a      	mov	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	701a      	strb	r2, [r3, #0]
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f7f5 f844 	bl	80001d0 <strlen>
 800b148:	4603      	mov	r3, r0
 800b14a:	b299      	uxth	r1, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800b152:	461a      	mov	r2, r3
 800b154:	68b8      	ldr	r0, [r7, #8]
 800b156:	47a0      	blx	r4
 800b158:	4603      	mov	r3, r0
 800b15a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dd3e      	ble.n	800b1e0 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b16e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
 800b176:	4603      	mov	r3, r0
 800b178:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800b17a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd27      	ble.n	800b1d2 <AT_ExecuteCommand+0xaa>
 800b182:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b186:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b18a:	dc22      	bgt.n	800b1d2 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800b18c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b190:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b194:	d105      	bne.n	800b1a2 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800b196:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800b1a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800b1ae:	490f      	ldr	r1, [pc, #60]	; (800b1ec <AT_ExecuteCommand+0xc4>)
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f009 fb51 	bl	8014858 <strstr>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e010      	b.n	800b1e2 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800b1c0:	490b      	ldr	r1, [pc, #44]	; (800b1f0 <AT_ExecuteCommand+0xc8>)
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f009 fb48 	bl	8014858 <strstr>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b1ce:	2305      	movs	r3, #5
 800b1d0:	e007      	b.n	800b1e2 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b1d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b1d6:	f113 0f04 	cmn.w	r3, #4
 800b1da:	d101      	bne.n	800b1e0 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800b1dc:	2306      	movs	r3, #6
 800b1de:	e000      	b.n	800b1e2 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800b1e0:	2304      	movs	r3, #4
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd90      	pop	{r4, r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	08017178 	.word	0x08017178
 800b1f0:	08017184 	.word	0x08017184

0800b1f4 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800b20e:	68b8      	ldr	r0, [r7, #8]
 800b210:	f7f4 ffde 	bl	80001d0 <strlen>
 800b214:	4603      	mov	r3, r0
 800b216:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800b218:	8a7b      	ldrh	r3, [r7, #18]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <AT_RequestSendData+0x32>
 800b222:	2302      	movs	r3, #2
 800b224:	e053      	b.n	800b2ce <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b232:	8a79      	ldrh	r1, [r7, #18]
 800b234:	68b8      	ldr	r0, [r7, #8]
 800b236:	4798      	blx	r3
 800b238:	4603      	mov	r3, r0
 800b23a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800b23c:	8a3a      	ldrh	r2, [r7, #16]
 800b23e:	8a7b      	ldrh	r3, [r7, #18]
 800b240:	429a      	cmp	r2, r3
 800b242:	d143      	bne.n	800b2cc <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b250:	8879      	ldrh	r1, [r7, #2]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	4798      	blx	r3
 800b256:	4603      	mov	r3, r0
 800b258:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800b25a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b25e:	887b      	ldrh	r3, [r7, #2]
 800b260:	429a      	cmp	r2, r3
 800b262:	d131      	bne.n	800b2c8 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b270:	2100      	movs	r1, #0
 800b272:	6a38      	ldr	r0, [r7, #32]
 800b274:	4798      	blx	r3
 800b276:	4603      	mov	r3, r0
 800b278:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800b27a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	dd19      	ble.n	800b2b6 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800b282:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b286:	6a3a      	ldr	r2, [r7, #32]
 800b288:	4413      	add	r3, r2
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800b28e:	4912      	ldr	r1, [pc, #72]	; (800b2d8 <AT_RequestSendData+0xe4>)
 800b290:	6a38      	ldr	r0, [r7, #32]
 800b292:	f009 fae1 	bl	8014858 <strstr>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	e016      	b.n	800b2ce <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800b2a0:	490e      	ldr	r1, [pc, #56]	; (800b2dc <AT_RequestSendData+0xe8>)
 800b2a2:	6a38      	ldr	r0, [r7, #32]
 800b2a4:	f009 fad8 	bl	8014858 <strstr>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b2ae:	2305      	movs	r3, #5
 800b2b0:	e00d      	b.n	800b2ce <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e00b      	b.n	800b2ce <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b2b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b2ba:	f113 0f04 	cmn.w	r3, #4
 800b2be:	d101      	bne.n	800b2c4 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800b2c0:	2306      	movs	r3, #6
 800b2c2:	e004      	b.n	800b2ce <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	e002      	b.n	800b2ce <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e000      	b.n	800b2ce <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800b2cc:	2304      	movs	r3, #4
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	08017178 	.word	0x08017178
 800b2dc:	08017184 	.word	0x08017184

0800b2e0 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b2f4:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	f7f4 ff67 	bl	80001d0 <strlen>
 800b302:	4603      	mov	r3, r0
 800b304:	b299      	uxth	r1, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800b30c:	461a      	mov	r2, r3
 800b30e:	68b8      	ldr	r0, [r7, #8]
 800b310:	47a0      	blx	r4
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd6f      	ble.n	800b3f8 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b324:	2100      	movs	r1, #0
 800b326:	6938      	ldr	r0, [r7, #16]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b0d      	cmp	r3, #13
 800b334:	d104      	bne.n	800b340 <AT_RequestReceiveData+0x60>
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3301      	adds	r3, #1
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b0a      	cmp	r3, #10
 800b33e:	d001      	beq.n	800b344 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800b340:	2304      	movs	r3, #4
 800b342:	e05a      	b.n	800b3fa <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	3b02      	subs	r3, #2
 800b348:	617b      	str	r3, [r7, #20]
    p+=2;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	3302      	adds	r3, #2
 800b34e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b07      	cmp	r3, #7
 800b354:	d94a      	bls.n	800b3ec <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800b356:	e002      	b.n	800b35e <AT_RequestReceiveData+0x7e>
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d006      	beq.n	800b372 <AT_RequestReceiveData+0x92>
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	3b01      	subs	r3, #1
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	4413      	add	r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b15      	cmp	r3, #21
 800b370:	d0f2      	beq.n	800b358 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4413      	add	r3, r2
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	3b08      	subs	r3, #8
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	4413      	add	r3, r2
 800b384:	491f      	ldr	r1, [pc, #124]	; (800b404 <AT_RequestReceiveData+0x124>)
 800b386:	4618      	mov	r0, r3
 800b388:	f009 fa66 	bl	8014858 <strstr>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d016      	beq.n	800b3c0 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b08      	subs	r3, #8
 800b398:	b29a      	uxth	r2, r3
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	887a      	ldrh	r2, [r7, #2]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d202      	bcs.n	800b3ae <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	887a      	ldrh	r2, [r7, #2]
 800b3ac:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	881b      	ldrh	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	6939      	ldr	r1, [r7, #16]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f008 fa13 	bl	80137e2 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e01c      	b.n	800b3fa <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	3b04      	subs	r3, #4
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	490f      	ldr	r1, [pc, #60]	; (800b408 <AT_RequestReceiveData+0x128>)
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f008 f9f8 	bl	80137c2 <memcmp>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d104      	bne.n	800b3e2 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	2200      	movs	r2, #0
 800b3dc:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b3de:	2305      	movs	r3, #5
 800b3e0:	e00b      	b.n	800b3fa <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b3e8:	2305      	movs	r3, #5
 800b3ea:	e006      	b.n	800b3fa <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f113 0f04 	cmn.w	r3, #4
 800b3f2:	d101      	bne.n	800b3f8 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800b3f4:	2306      	movs	r3, #6
 800b3f6:	e000      	b.n	800b3fa <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800b3f8:	2304      	movs	r3, #4
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd90      	pop	{r4, r7, pc}
 800b402:	bf00      	nop
 800b404:	08017178 	.word	0x08017178
 800b408:	0801718c 	.word	0x0801718c

0800b40c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800b414:	2302      	movs	r3, #2
 800b416:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b41e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b428:	2000      	movs	r0, #0
 800b42a:	4798      	blx	r3
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d113      	bne.n	800b45a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b438:	461a      	mov	r2, r3
 800b43a:	490a      	ldr	r1, [pc, #40]	; (800b464 <ES_WIFI_Init+0x58>)
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff fe73 	bl	800b128 <AT_ExecuteCommand>
 800b442:	4603      	mov	r3, r0
 800b444:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff fd2b 	bl	800aeb0 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	08017194 	.word	0x08017194

0800b468 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00b      	beq.n	800b494 <ES_WIFI_RegisterBusIO+0x2c>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d008      	beq.n	800b494 <ES_WIFI_RegisterBusIO+0x2c>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <ES_WIFI_RegisterBusIO+0x2c>
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <ES_WIFI_RegisterBusIO+0x2c>
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800b494:	2302      	movs	r3, #2
 800b496:	e014      	b.n	800b4c2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	69ba      	ldr	r2, [r7, #24]
 800b4ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	4932      	ldr	r1, [pc, #200]	; (800b5b0 <ES_WIFI_Connect+0xe0>)
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f009 f93f 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fe13 	bl	800b128 <AT_ExecuteCommand>
 800b502:	4603      	mov	r3, r0
 800b504:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d14b      	bne.n	800b5a4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	4927      	ldr	r1, [pc, #156]	; (800b5b4 <ES_WIFI_Connect+0xe4>)
 800b516:	4618      	mov	r0, r3
 800b518:	f009 f928 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b528:	461a      	mov	r2, r3
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fdfc 	bl	800b128 <AT_ExecuteCommand>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d134      	bne.n	800b5a4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	491b      	ldr	r1, [pc, #108]	; (800b5b8 <ES_WIFI_Connect+0xe8>)
 800b54c:	4618      	mov	r0, r3
 800b54e:	f009 f90d 	bl	801476c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b55e:	461a      	mov	r2, r3
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f7ff fde1 	bl	800b128 <AT_ExecuteCommand>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d119      	bne.n	800b5a4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b576:	4911      	ldr	r1, [pc, #68]	; (800b5bc <ES_WIFI_Connect+0xec>)
 800b578:	4618      	mov	r0, r3
 800b57a:	f009 f8f7 	bl	801476c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b58a:	461a      	mov	r2, r3
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fdcb 	bl	800b128 <AT_ExecuteCommand>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d103      	bne.n	800b5a4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	080171ac 	.word	0x080171ac
 800b5b4:	080171b4 	.word	0x080171b4
 800b5b8:	080171bc 	.word	0x080171bc
 800b5bc:	080171c4 	.word	0x080171c4

0800b5c0 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b5ce:	4911      	ldr	r1, [pc, #68]	; (800b614 <ES_WIFI_IsConnected+0x54>)
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f009 f8cb 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff fd9f 	bl	800b128 <AT_ExecuteCommand>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d108      	bne.n	800b606 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	33d2      	adds	r3, #210	; 0xd2
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7ff fd7b 	bl	800b0fc <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	080171c8 	.word	0x080171c8

0800b618 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b626:	4910      	ldr	r1, [pc, #64]	; (800b668 <ES_WIFI_GetNetworkSettings+0x50>)
 800b628:	4618      	mov	r0, r3
 800b62a:	f009 f89f 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b63a:	461a      	mov	r2, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff fd73 	bl	800b128 <AT_ExecuteCommand>
 800b642:	4603      	mov	r3, r0
 800b644:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d108      	bne.n	800b65e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	338d      	adds	r3, #141	; 0x8d
 800b656:	4619      	mov	r1, r3
 800b658:	4610      	mov	r0, r2
 800b65a:	f7ff fc9f 	bl	800af9c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	080171d0 	.word	0x080171d0

0800b66c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b67c:	4912      	ldr	r1, [pc, #72]	; (800b6c8 <ES_WIFI_GetMACAddress+0x5c>)
 800b67e:	4618      	mov	r0, r3
 800b680:	f009 f874 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b690:	461a      	mov	r2, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff fd48 	bl	800b128 <AT_ExecuteCommand>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10c      	bne.n	800b6bc <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b6a8:	3302      	adds	r3, #2
 800b6aa:	4908      	ldr	r1, [pc, #32]	; (800b6cc <ES_WIFI_GetMACAddress+0x60>)
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f009 f8e9 	bl	8014884 <strtok>
 800b6b2:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	68b8      	ldr	r0, [r7, #8]
 800b6b8:	f7ff fba4 	bl	800ae04 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08017220 	.word	0x08017220
 800b6cc:	08017224 	.word	0x08017224

0800b6d0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800b6d0:	b590      	push	{r4, r7, lr}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <ES_WIFI_StartClientConnection+0x1e>
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d105      	bne.n	800b6fa <ES_WIFI_StartClientConnection+0x2a>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <ES_WIFI_StartClientConnection+0x2a>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e0c1      	b.n	800b87e <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	785b      	ldrb	r3, [r3, #1]
 800b704:	461a      	mov	r2, r3
 800b706:	4960      	ldr	r1, [pc, #384]	; (800b888 <ES_WIFI_StartClientConnection+0x1b8>)
 800b708:	f009 f830 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b718:	461a      	mov	r2, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fd04 	bl	800b128 <AT_ExecuteCommand>
 800b720:	4603      	mov	r3, r0
 800b722:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d114      	bne.n	800b754 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	4955      	ldr	r1, [pc, #340]	; (800b88c <ES_WIFI_StartClientConnection+0x1bc>)
 800b738:	f009 f818 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b748:	461a      	mov	r2, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff fcec 	bl	800b128 <AT_ExecuteCommand>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d114      	bne.n	800b784 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	889b      	ldrh	r3, [r3, #4]
 800b764:	461a      	mov	r2, r3
 800b766:	494a      	ldr	r1, [pc, #296]	; (800b890 <ES_WIFI_StartClientConnection+0x1c0>)
 800b768:	f009 f800 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b778:	461a      	mov	r2, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff fcd4 	bl	800b128 <AT_ExecuteCommand>
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d11c      	bne.n	800b7c4 <ES_WIFI_StartClientConnection+0xf4>
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <ES_WIFI_StartClientConnection+0xca>
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b03      	cmp	r3, #3
 800b798:	d114      	bne.n	800b7c4 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	885b      	ldrh	r3, [r3, #2]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	493b      	ldr	r1, [pc, #236]	; (800b894 <ES_WIFI_StartClientConnection+0x1c4>)
 800b7a8:	f008 ffe0 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fcb4 	bl	800b128 <AT_ExecuteCommand>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d128      	bne.n	800b81c <ES_WIFI_StartClientConnection+0x14c>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <ES_WIFI_StartClientConnection+0x10a>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d120      	bne.n	800b81c <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	799b      	ldrb	r3, [r3, #6]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	79db      	ldrb	r3, [r3, #7]
 800b7ea:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b7f0:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	9200      	str	r2, [sp, #0]
 800b7fa:	4623      	mov	r3, r4
 800b7fc:	460a      	mov	r2, r1
 800b7fe:	4926      	ldr	r1, [pc, #152]	; (800b898 <ES_WIFI_StartClientConnection+0x1c8>)
 800b800:	f008 ffb4 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b810:	461a      	mov	r2, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fc88 	bl	800b128 <AT_ExecuteCommand>
 800b818:	4603      	mov	r3, r0
 800b81a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d116      	bne.n	800b850 <ES_WIFI_StartClientConnection+0x180>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b03      	cmp	r3, #3
 800b828:	d112      	bne.n	800b850 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b830:	491a      	ldr	r1, [pc, #104]	; (800b89c <ES_WIFI_StartClientConnection+0x1cc>)
 800b832:	4618      	mov	r0, r3
 800b834:	f008 ff9a 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b844:	461a      	mov	r2, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fc6e 	bl	800b128 <AT_ExecuteCommand>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d112      	bne.n	800b87c <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b85c:	4910      	ldr	r1, [pc, #64]	; (800b8a0 <ES_WIFI_StartClientConnection+0x1d0>)
 800b85e:	4618      	mov	r0, r3
 800b860:	f008 ff84 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b870:	461a      	mov	r2, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff fc58 	bl	800b128 <AT_ExecuteCommand>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	bd90      	pop	{r4, r7, pc}
 800b886:	bf00      	nop
 800b888:	08017288 	.word	0x08017288
 800b88c:	08017290 	.word	0x08017290
 800b890:	08017298 	.word	0x08017298
 800b894:	080172a0 	.word	0x080172a0
 800b898:	080172a8 	.word	0x080172a8
 800b89c:	080172b8 	.word	0x080172b8
 800b8a0:	080172c0 	.word	0x080172c0

0800b8a4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af02      	add	r7, sp, #8
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	607a      	str	r2, [r7, #4]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	72fb      	strb	r3, [r7, #11]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e001      	b.n	800b8cc <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800b8cc:	893b      	ldrh	r3, [r7, #8]
 800b8ce:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800b8d2:	d302      	bcc.n	800b8da <ES_WIFI_SendData+0x36>
 800b8d4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b8d8:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	893a      	ldrh	r2, [r7, #8]
 800b8de:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8e6:	7afa      	ldrb	r2, [r7, #11]
 800b8e8:	4942      	ldr	r1, [pc, #264]	; (800b9f4 <ES_WIFI_SendData+0x150>)
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f008 ff3e 	bl	801476c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff fc12 	bl	800b128 <AT_ExecuteCommand>
 800b904:	4603      	mov	r3, r0
 800b906:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800b908:	7cfb      	ldrb	r3, [r7, #19]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d15e      	bne.n	800b9cc <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4938      	ldr	r1, [pc, #224]	; (800b9f8 <ES_WIFI_SendData+0x154>)
 800b918:	4618      	mov	r0, r3
 800b91a:	f008 ff27 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b92a:	461a      	mov	r2, r3
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f7ff fbfb 	bl	800b128 <AT_ExecuteCommand>
 800b932:	4603      	mov	r3, r0
 800b934:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800b936:	7cfb      	ldrb	r3, [r7, #19]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d13d      	bne.n	800b9b8 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b942:	893a      	ldrh	r2, [r7, #8]
 800b944:	492d      	ldr	r1, [pc, #180]	; (800b9fc <ES_WIFI_SendData+0x158>)
 800b946:	4618      	mov	r0, r3
 800b948:	f008 ff10 	bl	801476c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b958:	893a      	ldrh	r2, [r7, #8]
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fc47 	bl	800b1f4 <AT_RequestSendData>
 800b966:	4603      	mov	r3, r0
 800b968:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800b96a:	7cfb      	ldrb	r3, [r7, #19]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d119      	bne.n	800b9a4 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b976:	4922      	ldr	r1, [pc, #136]	; (800ba00 <ES_WIFI_SendData+0x15c>)
 800b978:	4618      	mov	r0, r3
 800b97a:	f008 ff6d 	bl	8014858 <strstr>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d02c      	beq.n	800b9de <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800b984:	f640 0267 	movw	r2, #2151	; 0x867
 800b988:	491e      	ldr	r1, [pc, #120]	; (800ba04 <ES_WIFI_SendData+0x160>)
 800b98a:	481f      	ldr	r0, [pc, #124]	; (800ba08 <ES_WIFI_SendData+0x164>)
 800b98c:	f008 fdb2 	bl	80144f4 <iprintf>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b996:	4619      	mov	r1, r3
 800b998:	481c      	ldr	r0, [pc, #112]	; (800ba0c <ES_WIFI_SendData+0x168>)
 800b99a:	f008 fdab 	bl	80144f4 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800b99e:	2302      	movs	r3, #2
 800b9a0:	74fb      	strb	r3, [r7, #19]
 800b9a2:	e01c      	b.n	800b9de <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800b9a4:	f640 026d 	movw	r2, #2157	; 0x86d
 800b9a8:	4916      	ldr	r1, [pc, #88]	; (800ba04 <ES_WIFI_SendData+0x160>)
 800b9aa:	4817      	ldr	r0, [pc, #92]	; (800ba08 <ES_WIFI_SendData+0x164>)
 800b9ac:	f008 fda2 	bl	80144f4 <iprintf>
 800b9b0:	4817      	ldr	r0, [pc, #92]	; (800ba10 <ES_WIFI_SendData+0x16c>)
 800b9b2:	f008 fe25 	bl	8014600 <puts>
 800b9b6:	e012      	b.n	800b9de <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800b9b8:	f640 0272 	movw	r2, #2162	; 0x872
 800b9bc:	4911      	ldr	r1, [pc, #68]	; (800ba04 <ES_WIFI_SendData+0x160>)
 800b9be:	4812      	ldr	r0, [pc, #72]	; (800ba08 <ES_WIFI_SendData+0x164>)
 800b9c0:	f008 fd98 	bl	80144f4 <iprintf>
 800b9c4:	4813      	ldr	r0, [pc, #76]	; (800ba14 <ES_WIFI_SendData+0x170>)
 800b9c6:	f008 fe1b 	bl	8014600 <puts>
 800b9ca:	e008      	b.n	800b9de <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800b9cc:	f640 0277 	movw	r2, #2167	; 0x877
 800b9d0:	490c      	ldr	r1, [pc, #48]	; (800ba04 <ES_WIFI_SendData+0x160>)
 800b9d2:	480d      	ldr	r0, [pc, #52]	; (800ba08 <ES_WIFI_SendData+0x164>)
 800b9d4:	f008 fd8e 	bl	80144f4 <iprintf>
 800b9d8:	480f      	ldr	r0, [pc, #60]	; (800ba18 <ES_WIFI_SendData+0x174>)
 800b9da:	f008 fe11 	bl	8014600 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800b9de:	7cfb      	ldrb	r3, [r7, #19]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d102      	bne.n	800b9ea <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800b9ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	08017288 	.word	0x08017288
 800b9f8:	0801744c 	.word	0x0801744c
 800b9fc:	08017454 	.word	0x08017454
 800ba00:	08017460 	.word	0x08017460
 800ba04:	08017318 	.word	0x08017318
 800ba08:	08017340 	.word	0x08017340
 800ba0c:	08017468 	.word	0x08017468
 800ba10:	08017484 	.word	0x08017484
 800ba14:	080174a0 	.word	0x080174a0
 800ba18:	080174b4 	.word	0x080174b4

0800ba1c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	607a      	str	r2, [r7, #4]
 800ba26:	461a      	mov	r2, r3
 800ba28:	460b      	mov	r3, r1
 800ba2a:	72fb      	strb	r3, [r7, #11]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800ba30:	2302      	movs	r3, #2
 800ba32:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e001      	b.n	800ba44 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800ba44:	893b      	ldrh	r3, [r7, #8]
 800ba46:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800ba4a:	f200 808b 	bhi.w	800bb64 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba54:	7afa      	ldrb	r2, [r7, #11]
 800ba56:	4946      	ldr	r1, [pc, #280]	; (800bb70 <ES_WIFI_ReceiveData+0x154>)
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f008 fe87 	bl	801476c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f7ff fb5b 	bl	800b128 <AT_ExecuteCommand>
 800ba72:	4603      	mov	r3, r0
 800ba74:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800ba76:	7cfb      	ldrb	r3, [r7, #19]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d165      	bne.n	800bb48 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba82:	893a      	ldrh	r2, [r7, #8]
 800ba84:	493b      	ldr	r1, [pc, #236]	; (800bb74 <ES_WIFI_ReceiveData+0x158>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f008 fe70 	bl	801476c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fb44 	bl	800b128 <AT_ExecuteCommand>
 800baa0:	4603      	mov	r3, r0
 800baa2:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800baa4:	7cfb      	ldrb	r3, [r7, #19]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d141      	bne.n	800bb2e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	4931      	ldr	r1, [pc, #196]	; (800bb78 <ES_WIFI_ReceiveData+0x15c>)
 800bab4:	4618      	mov	r0, r3
 800bab6:	f008 fe59 	bl	801476c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bac6:	461a      	mov	r2, r3
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fb2d 	bl	800b128 <AT_ExecuteCommand>
 800bace:	4603      	mov	r3, r0
 800bad0:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800bad2:	7cfb      	ldrb	r3, [r7, #19]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d120      	bne.n	800bb1a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bade:	4927      	ldr	r1, [pc, #156]	; (800bb7c <ES_WIFI_ReceiveData+0x160>)
 800bae0:	4618      	mov	r0, r3
 800bae2:	f008 fe43 	bl	801476c <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800baec:	893a      	ldrh	r2, [r7, #8]
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	4613      	mov	r3, r2
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff fbf2 	bl	800b2e0 <AT_RequestReceiveData>
 800bafc:	4603      	mov	r3, r0
 800bafe:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800bb00:	7cfb      	ldrb	r3, [r7, #19]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d02e      	beq.n	800bb64 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800bb06:	f640 1208 	movw	r2, #2312	; 0x908
 800bb0a:	491d      	ldr	r1, [pc, #116]	; (800bb80 <ES_WIFI_ReceiveData+0x164>)
 800bb0c:	481d      	ldr	r0, [pc, #116]	; (800bb84 <ES_WIFI_ReceiveData+0x168>)
 800bb0e:	f008 fcf1 	bl	80144f4 <iprintf>
 800bb12:	481d      	ldr	r0, [pc, #116]	; (800bb88 <ES_WIFI_ReceiveData+0x16c>)
 800bb14:	f008 fd74 	bl	8014600 <puts>
 800bb18:	e024      	b.n	800bb64 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800bb1a:	f640 120d 	movw	r2, #2317	; 0x90d
 800bb1e:	4918      	ldr	r1, [pc, #96]	; (800bb80 <ES_WIFI_ReceiveData+0x164>)
 800bb20:	4818      	ldr	r0, [pc, #96]	; (800bb84 <ES_WIFI_ReceiveData+0x168>)
 800bb22:	f008 fce7 	bl	80144f4 <iprintf>
 800bb26:	4819      	ldr	r0, [pc, #100]	; (800bb8c <ES_WIFI_ReceiveData+0x170>)
 800bb28:	f008 fd6a 	bl	8014600 <puts>
 800bb2c:	e01a      	b.n	800bb64 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800bb2e:	f640 1212 	movw	r2, #2322	; 0x912
 800bb32:	4913      	ldr	r1, [pc, #76]	; (800bb80 <ES_WIFI_ReceiveData+0x164>)
 800bb34:	4813      	ldr	r0, [pc, #76]	; (800bb84 <ES_WIFI_ReceiveData+0x168>)
 800bb36:	f008 fcdd 	bl	80144f4 <iprintf>
 800bb3a:	4815      	ldr	r0, [pc, #84]	; (800bb90 <ES_WIFI_ReceiveData+0x174>)
 800bb3c:	f008 fd60 	bl	8014600 <puts>
        *Receivedlen = 0;
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	2200      	movs	r2, #0
 800bb44:	801a      	strh	r2, [r3, #0]
 800bb46:	e00d      	b.n	800bb64 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800bb48:	f640 1218 	movw	r2, #2328	; 0x918
 800bb4c:	490c      	ldr	r1, [pc, #48]	; (800bb80 <ES_WIFI_ReceiveData+0x164>)
 800bb4e:	480d      	ldr	r0, [pc, #52]	; (800bb84 <ES_WIFI_ReceiveData+0x168>)
 800bb50:	f008 fcd0 	bl	80144f4 <iprintf>
 800bb54:	480f      	ldr	r0, [pc, #60]	; (800bb94 <ES_WIFI_ReceiveData+0x178>)
 800bb56:	f008 fd53 	bl	8014600 <puts>
      issue15++;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <ES_WIFI_ReceiveData+0x17c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	4a0d      	ldr	r2, [pc, #52]	; (800bb98 <ES_WIFI_ReceiveData+0x17c>)
 800bb62:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800bb64:	7cfb      	ldrb	r3, [r7, #19]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	08017288 	.word	0x08017288
 800bb74:	080174d8 	.word	0x080174d8
 800bb78:	080174e0 	.word	0x080174e0
 800bb7c:	080174e8 	.word	0x080174e8
 800bb80:	08017318 	.word	0x08017318
 800bb84:	08017340 	.word	0x08017340
 800bb88:	080174ec 	.word	0x080174ec
 800bb8c:	0801750c 	.word	0x0801750c
 800bb90:	08017524 	.word	0x08017524
 800bb94:	08017544 	.word	0x08017544
 800bb98:	20000df8 	.word	0x20000df8

0800bb9c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08c      	sub	sp, #48	; 0x30
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800bba4:	4b56      	ldr	r3, [pc, #344]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba8:	4a55      	ldr	r2, [pc, #340]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbae:	6593      	str	r3, [r2, #88]	; 0x58
 800bbb0:	4b53      	ldr	r3, [pc, #332]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbb8:	61bb      	str	r3, [r7, #24]
 800bbba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbbc:	4b50      	ldr	r3, [pc, #320]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc0:	4a4f      	ldr	r2, [pc, #316]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbc2:	f043 0302 	orr.w	r3, r3, #2
 800bbc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbc8:	4b4d      	ldr	r3, [pc, #308]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbd4:	4b4a      	ldr	r3, [pc, #296]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbd8:	4a49      	ldr	r2, [pc, #292]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbda:	f043 0304 	orr.w	r3, r3, #4
 800bbde:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbe0:	4b47      	ldr	r3, [pc, #284]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	613b      	str	r3, [r7, #16]
 800bbea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bbec:	4b44      	ldr	r3, [pc, #272]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf0:	4a43      	ldr	r2, [pc, #268]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbf2:	f043 0310 	orr.w	r3, r3, #16
 800bbf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbf8:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <SPI_WIFI_MspInit+0x164>)
 800bbfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfc:	f003 0310 	and.w	r3, r3, #16
 800bc00:	60fb      	str	r3, [r7, #12]
 800bc02:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800bc04:	2200      	movs	r2, #0
 800bc06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bc0a:	483e      	ldr	r0, [pc, #248]	; (800bd04 <SPI_WIFI_MspInit+0x168>)
 800bc0c:	f7f8 fd12 	bl	8004634 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800bc10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc14:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800bc16:	2301      	movs	r3, #1
 800bc18:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800bc22:	f107 031c 	add.w	r3, r7, #28
 800bc26:	4619      	mov	r1, r3
 800bc28:	4836      	ldr	r0, [pc, #216]	; (800bd04 <SPI_WIFI_MspInit+0x168>)
 800bc2a:	f7f8 fa4d 	bl	80040c8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800bc2e:	2302      	movs	r3, #2
 800bc30:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800bc32:	4b35      	ldr	r3, [pc, #212]	; (800bd08 <SPI_WIFI_MspInit+0x16c>)
 800bc34:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800bc3e:	f107 031c 	add.w	r3, r7, #28
 800bc42:	4619      	mov	r1, r3
 800bc44:	4831      	ldr	r0, [pc, #196]	; (800bd0c <SPI_WIFI_MspInit+0x170>)
 800bc46:	f7f8 fa3f 	bl	80040c8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800bc4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc4e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800bc50:	2301      	movs	r3, #1
 800bc52:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800bc60:	f107 031c 	add.w	r3, r7, #28
 800bc64:	4619      	mov	r1, r3
 800bc66:	4829      	ldr	r0, [pc, #164]	; (800bd0c <SPI_WIFI_MspInit+0x170>)
 800bc68:	f7f8 fa2e 	bl	80040c8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	2101      	movs	r1, #1
 800bc70:	4826      	ldr	r0, [pc, #152]	; (800bd0c <SPI_WIFI_MspInit+0x170>)
 800bc72:	f7f8 fcdf 	bl	8004634 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800bc76:	2301      	movs	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bc82:	2301      	movs	r3, #1
 800bc84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800bc86:	f107 031c 	add.w	r3, r7, #28
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	481f      	ldr	r0, [pc, #124]	; (800bd0c <SPI_WIFI_MspInit+0x170>)
 800bc8e:	f7f8 fa1b 	bl	80040c8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800bc92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc96:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bca0:	2301      	movs	r3, #1
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800bca4:	2306      	movs	r3, #6
 800bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800bca8:	f107 031c 	add.w	r3, r7, #28
 800bcac:	4619      	mov	r1, r3
 800bcae:	4818      	ldr	r0, [pc, #96]	; (800bd10 <SPI_WIFI_MspInit+0x174>)
 800bcb0:	f7f8 fa0a 	bl	80040c8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800bcb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800bcba:	2302      	movs	r3, #2
 800bcbc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800bcc6:	2306      	movs	r3, #6
 800bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800bcca:	f107 031c 	add.w	r3, r7, #28
 800bcce:	4619      	mov	r1, r3
 800bcd0:	480f      	ldr	r0, [pc, #60]	; (800bd10 <SPI_WIFI_MspInit+0x174>)
 800bcd2:	f7f8 f9f9 	bl	80040c8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800bcd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcda:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800bcdc:	2302      	movs	r3, #2
 800bcde:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800bce0:	2301      	movs	r3, #1
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bce4:	2301      	movs	r3, #1
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800bce8:	2306      	movs	r3, #6
 800bcea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800bcec:	f107 031c 	add.w	r3, r7, #28
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4807      	ldr	r0, [pc, #28]	; (800bd10 <SPI_WIFI_MspInit+0x174>)
 800bcf4:	f7f8 f9e8 	bl	80040c8 <HAL_GPIO_Init>
}
 800bcf8:	bf00      	nop
 800bcfa:	3730      	adds	r7, #48	; 0x30
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	40021000 	.word	0x40021000
 800bd04:	48000400 	.word	0x48000400
 800bd08:	10110000 	.word	0x10110000
 800bd0c:	48001000 	.word	0x48001000
 800bd10:	48000800 	.word	0x48000800

0800bd14 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d145      	bne.n	800bdb4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800bd28:	4b27      	ldr	r3, [pc, #156]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd2a:	4a28      	ldr	r2, [pc, #160]	; (800bdcc <SPI_WIFI_Init+0xb8>)
 800bd2c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800bd2e:	4826      	ldr	r0, [pc, #152]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd30:	f7ff ff34 	bl	800bb9c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800bd34:	4b24      	ldr	r3, [pc, #144]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd36:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd3a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800bd3c:	4b22      	ldr	r3, [pc, #136]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800bd42:	4b21      	ldr	r3, [pc, #132]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd44:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800bd48:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800bd4a:	4b1f      	ldr	r3, [pc, #124]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800bd50:	4b1d      	ldr	r3, [pc, #116]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800bd56:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd5c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800bd5e:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd60:	2210      	movs	r2, #16
 800bd62:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800bd64:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800bd6a:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800bd70:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800bd76:	4b14      	ldr	r3, [pc, #80]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800bd7c:	4812      	ldr	r0, [pc, #72]	; (800bdc8 <SPI_WIFI_Init+0xb4>)
 800bd7e:	f7fb fab7 	bl	80072f0 <HAL_SPI_Init>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800bd88:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8c:	e018      	b.n	800bdc0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2100      	movs	r1, #0
 800bd92:	2007      	movs	r0, #7
 800bd94:	f7f7 ffd4 	bl	8003d40 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800bd98:	2007      	movs	r0, #7
 800bd9a:	f7f7 ffed 	bl	8003d78 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2100      	movs	r1, #0
 800bda2:	2033      	movs	r0, #51	; 0x33
 800bda4:	f7f7 ffcc 	bl	8003d40 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800bda8:	2033      	movs	r0, #51	; 0x33
 800bdaa:	f7f7 ffe5 	bl	8003d78 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800bdae:	200a      	movs	r0, #10
 800bdb0:	f000 f9fe 	bl	800c1b0 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800bdb4:	f000 f80c 	bl	800bdd0 <SPI_WIFI_ResetModule>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

  return rc;
 800bdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	20000dfc 	.word	0x20000dfc
 800bdcc:	40003c00 	.word	0x40003c00

0800bdd0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800bdd6:	f7f7 fea7 	bl	8003b28 <HAL_GetTick>
 800bdda:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800bde0:	2200      	movs	r2, #0
 800bde2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bde6:	4830      	ldr	r0, [pc, #192]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800bde8:	f7f8 fc24 	bl	8004634 <HAL_GPIO_WritePin>
 800bdec:	200a      	movs	r0, #10
 800bdee:	f7f7 fea7 	bl	8003b40 <HAL_Delay>
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdf8:	482b      	ldr	r0, [pc, #172]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800bdfa:	f7f8 fc1b 	bl	8004634 <HAL_GPIO_WritePin>
 800bdfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be02:	f7f7 fe9d 	bl	8003b40 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800be06:	2200      	movs	r2, #0
 800be08:	2101      	movs	r1, #1
 800be0a:	4827      	ldr	r0, [pc, #156]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800be0c:	f7f8 fc12 	bl	8004634 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800be10:	200f      	movs	r0, #15
 800be12:	f000 f9cd 	bl	800c1b0 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800be16:	e020      	b.n	800be5a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	463a      	mov	r2, r7
 800be1c:	18d1      	adds	r1, r2, r3
 800be1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be22:	2201      	movs	r2, #1
 800be24:	4821      	ldr	r0, [pc, #132]	; (800beac <SPI_WIFI_ResetModule+0xdc>)
 800be26:	f7fb fb2e 	bl	8007486 <HAL_SPI_Receive>
 800be2a:	4603      	mov	r3, r0
 800be2c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	3302      	adds	r3, #2
 800be32:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800be34:	f7f7 fe78 	bl	8003b28 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be42:	d202      	bcs.n	800be4a <SPI_WIFI_ResetModule+0x7a>
 800be44:	79fb      	ldrb	r3, [r7, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d007      	beq.n	800be5a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800be4a:	2201      	movs	r2, #1
 800be4c:	2101      	movs	r1, #1
 800be4e:	4816      	ldr	r0, [pc, #88]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800be50:	f7f8 fbf0 	bl	8004634 <HAL_GPIO_WritePin>
      return -1;
 800be54:	f04f 33ff 	mov.w	r3, #4294967295
 800be58:	e021      	b.n	800be9e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800be5a:	2102      	movs	r1, #2
 800be5c:	4812      	ldr	r0, [pc, #72]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800be5e:	f7f8 fbd1 	bl	8004604 <HAL_GPIO_ReadPin>
 800be62:	4603      	mov	r3, r0
 800be64:	2b01      	cmp	r3, #1
 800be66:	d0d7      	beq.n	800be18 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800be68:	2201      	movs	r2, #1
 800be6a:	2101      	movs	r1, #1
 800be6c:	480e      	ldr	r0, [pc, #56]	; (800bea8 <SPI_WIFI_ResetModule+0xd8>)
 800be6e:	f7f8 fbe1 	bl	8004634 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800be72:	783b      	ldrb	r3, [r7, #0]
 800be74:	2b15      	cmp	r3, #21
 800be76:	d10e      	bne.n	800be96 <SPI_WIFI_ResetModule+0xc6>
 800be78:	787b      	ldrb	r3, [r7, #1]
 800be7a:	2b15      	cmp	r3, #21
 800be7c:	d10b      	bne.n	800be96 <SPI_WIFI_ResetModule+0xc6>
 800be7e:	78bb      	ldrb	r3, [r7, #2]
 800be80:	2b0d      	cmp	r3, #13
 800be82:	d108      	bne.n	800be96 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800be84:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800be86:	2b0a      	cmp	r3, #10
 800be88:	d105      	bne.n	800be96 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800be8a:	793b      	ldrb	r3, [r7, #4]
 800be8c:	2b3e      	cmp	r3, #62	; 0x3e
 800be8e:	d102      	bne.n	800be96 <SPI_WIFI_ResetModule+0xc6>
 800be90:	797b      	ldrb	r3, [r7, #5]
 800be92:	2b20      	cmp	r3, #32
 800be94:	d002      	beq.n	800be9c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	e000      	b.n	800be9e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	48001000 	.word	0x48001000
 800beac:	20000dfc 	.word	0x20000dfc

0800beb0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800beb4:	4802      	ldr	r0, [pc, #8]	; (800bec0 <SPI_WIFI_DeInit+0x10>)
 800beb6:	f7fb fabe 	bl	8007436 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20000dfc 	.word	0x20000dfc

0800bec4 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800becc:	f7f7 fe2c 	bl	8003b28 <HAL_GetTick>
 800bed0:	4603      	mov	r3, r0
 800bed2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800bed4:	e00a      	b.n	800beec <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800bed6:	f7f7 fe27 	bl	8003b28 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	1ad2      	subs	r2, r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d902      	bls.n	800beec <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800bee6:	f04f 33ff 	mov.w	r3, #4294967295
 800beea:	e007      	b.n	800befc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800beec:	2102      	movs	r1, #2
 800beee:	4805      	ldr	r0, [pc, #20]	; (800bf04 <wait_cmddata_rdy_high+0x40>)
 800bef0:	f7f8 fb88 	bl	8004604 <HAL_GPIO_ReadPin>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d1ed      	bne.n	800bed6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	48001000 	.word	0x48001000

0800bf08 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800bf10:	f7f7 fe0a 	bl	8003b28 <HAL_GetTick>
 800bf14:	4603      	mov	r3, r0
 800bf16:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800bf18:	e00a      	b.n	800bf30 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800bf1a:	f7f7 fe05 	bl	8003b28 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	1ad2      	subs	r2, r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d902      	bls.n	800bf30 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2e:	e004      	b.n	800bf3a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <wait_cmddata_rdy_rising_event+0x3c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d0f0      	beq.n	800bf1a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800bf38:	2300      	movs	r3, #0
#endif
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000e68 	.word	0x20000e68

0800bf48 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800bf50:	f7f7 fdea 	bl	8003b28 <HAL_GetTick>
 800bf54:	4603      	mov	r3, r0
 800bf56:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800bf58:	e00a      	b.n	800bf70 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800bf5a:	f7f7 fde5 	bl	8003b28 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	1ad2      	subs	r2, r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d902      	bls.n	800bf70 <wait_spi_rx_event+0x28>
    {
      return -1;
 800bf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6e:	e004      	b.n	800bf7a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <wait_spi_rx_event+0x3c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d0f0      	beq.n	800bf5a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800bf78:	2300      	movs	r3, #0
#endif
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20000e60 	.word	0x20000e60

0800bf88 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800bf90:	f7f7 fdca 	bl	8003b28 <HAL_GetTick>
 800bf94:	4603      	mov	r3, r0
 800bf96:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800bf98:	e00a      	b.n	800bfb0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800bf9a:	f7f7 fdc5 	bl	8003b28 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	1ad2      	subs	r2, r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d902      	bls.n	800bfb0 <wait_spi_tx_event+0x28>
    {
      return -1;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295
 800bfae:	e004      	b.n	800bfba <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <wait_spi_tx_event+0x3c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d0f0      	beq.n	800bf9a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800bfb8:	2300      	movs	r3, #0
#endif
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000e64 	.word	0x20000e64

0800bfc8 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800bfda:	2201      	movs	r2, #1
 800bfdc:	2101      	movs	r1, #1
 800bfde:	4834      	ldr	r0, [pc, #208]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800bfe0:	f7f8 fb28 	bl	8004634 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800bfe4:	2003      	movs	r0, #3
 800bfe6:	f000 f8e3 	bl	800c1b0 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff ff8b 	bl	800bf08 <wait_cmddata_rdy_rising_event>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da02      	bge.n	800bffe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800bff8:	f06f 0302 	mvn.w	r3, #2
 800bffc:	e054      	b.n	800c0a8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800bffe:	2200      	movs	r2, #0
 800c000:	2101      	movs	r1, #1
 800c002:	482b      	ldr	r0, [pc, #172]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800c004:	f7f8 fb16 	bl	8004634 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800c008:	200f      	movs	r0, #15
 800c00a:	f000 f8d1 	bl	800c1b0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800c00e:	e03d      	b.n	800c08c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800c010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c014:	897b      	ldrh	r3, [r7, #10]
 800c016:	429a      	cmp	r2, r3
 800c018:	db02      	blt.n	800c020 <SPI_WIFI_ReceiveData+0x58>
 800c01a:	897b      	ldrh	r3, [r7, #10]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d13c      	bne.n	800c09a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800c020:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <SPI_WIFI_ReceiveData+0xec>)
 800c022:	2201      	movs	r2, #1
 800c024:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800c026:	f107 0314 	add.w	r3, r7, #20
 800c02a:	2201      	movs	r2, #1
 800c02c:	4619      	mov	r1, r3
 800c02e:	4822      	ldr	r0, [pc, #136]	; (800c0b8 <SPI_WIFI_ReceiveData+0xf0>)
 800c030:	f7fb fdfa 	bl	8007c28 <HAL_SPI_Receive_IT>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d007      	beq.n	800c04a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800c03a:	2201      	movs	r2, #1
 800c03c:	2101      	movs	r1, #1
 800c03e:	481c      	ldr	r0, [pc, #112]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800c040:	f7f8 faf8 	bl	8004634 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e02e      	b.n	800c0a8 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff ff7b 	bl	800bf48 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800c052:	7d3a      	ldrb	r2, [r7, #20]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3301      	adds	r3, #1
 800c05c:	7d7a      	ldrb	r2, [r7, #21]
 800c05e:	701a      	strb	r2, [r3, #0]
      length += 2;
 800c060:	8afb      	ldrh	r3, [r7, #22]
 800c062:	3302      	adds	r3, #2
 800c064:	b29b      	uxth	r3, r3
 800c066:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3302      	adds	r3, #2
 800c06c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800c06e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c072:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c076:	db09      	blt.n	800c08c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800c078:	2201      	movs	r2, #1
 800c07a:	2101      	movs	r1, #1
 800c07c:	480c      	ldr	r0, [pc, #48]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800c07e:	f7f8 fad9 	bl	8004634 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800c082:	f7ff fea5 	bl	800bdd0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800c086:	f06f 0303 	mvn.w	r3, #3
 800c08a:	e00d      	b.n	800c0a8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800c08c:	2102      	movs	r1, #2
 800c08e:	4808      	ldr	r0, [pc, #32]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800c090:	f7f8 fab8 	bl	8004604 <HAL_GPIO_ReadPin>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d0ba      	beq.n	800c010 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800c09a:	2201      	movs	r2, #1
 800c09c:	2101      	movs	r1, #1
 800c09e:	4804      	ldr	r0, [pc, #16]	; (800c0b0 <SPI_WIFI_ReceiveData+0xe8>)
 800c0a0:	f7f8 fac8 	bl	8004634 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800c0a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	48001000 	.word	0x48001000
 800c0b4:	20000e60 	.word	0x20000e60
 800c0b8:	20000dfc 	.word	0x20000dfc

0800c0bc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fef9 	bl	800bec4 <wait_cmddata_rdy_high>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	da02      	bge.n	800c0de <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800c0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0dc:	e04f      	b.n	800c17e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800c0de:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <SPI_WIFI_SendData+0xcc>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	4828      	ldr	r0, [pc, #160]	; (800c18c <SPI_WIFI_SendData+0xd0>)
 800c0ea:	f7f8 faa3 	bl	8004634 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800c0ee:	200f      	movs	r0, #15
 800c0f0:	f000 f85e 	bl	800c1b0 <SPI_WIFI_DelayUs>
  if (len > 1)
 800c0f4:	897b      	ldrh	r3, [r7, #10]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d919      	bls.n	800c12e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800c0fa:	4b25      	ldr	r3, [pc, #148]	; (800c190 <SPI_WIFI_SendData+0xd4>)
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800c100:	897b      	ldrh	r3, [r7, #10]
 800c102:	085b      	lsrs	r3, r3, #1
 800c104:	b29b      	uxth	r3, r3
 800c106:	461a      	mov	r2, r3
 800c108:	68f9      	ldr	r1, [r7, #12]
 800c10a:	4822      	ldr	r0, [pc, #136]	; (800c194 <SPI_WIFI_SendData+0xd8>)
 800c10c:	f7fb fcfe 	bl	8007b0c <HAL_SPI_Transmit_IT>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800c116:	2201      	movs	r2, #1
 800c118:	2101      	movs	r1, #1
 800c11a:	481c      	ldr	r0, [pc, #112]	; (800c18c <SPI_WIFI_SendData+0xd0>)
 800c11c:	f7f8 fa8a 	bl	8004634 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800c120:	f04f 33ff 	mov.w	r3, #4294967295
 800c124:	e02b      	b.n	800c17e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ff2d 	bl	800bf88 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800c12e:	897b      	ldrh	r3, [r7, #10]
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d020      	beq.n	800c17a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800c138:	897b      	ldrh	r3, [r7, #10]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4413      	add	r3, r2
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800c144:	230a      	movs	r3, #10
 800c146:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800c148:	4b11      	ldr	r3, [pc, #68]	; (800c190 <SPI_WIFI_SendData+0xd4>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800c14e:	f107 0314 	add.w	r3, r7, #20
 800c152:	2201      	movs	r2, #1
 800c154:	4619      	mov	r1, r3
 800c156:	480f      	ldr	r0, [pc, #60]	; (800c194 <SPI_WIFI_SendData+0xd8>)
 800c158:	f7fb fcd8 	bl	8007b0c <HAL_SPI_Transmit_IT>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d007      	beq.n	800c172 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800c162:	2201      	movs	r2, #1
 800c164:	2101      	movs	r1, #1
 800c166:	4809      	ldr	r0, [pc, #36]	; (800c18c <SPI_WIFI_SendData+0xd0>)
 800c168:	f7f8 fa64 	bl	8004634 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800c16c:	f04f 33ff 	mov.w	r3, #4294967295
 800c170:	e005      	b.n	800c17e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff ff07 	bl	800bf88 <wait_spi_tx_event>
    
  }
  return len;
 800c17a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000e68 	.word	0x20000e68
 800c18c:	48001000 	.word	0x48001000
 800c190:	20000e64 	.word	0x20000e64
 800c194:	20000dfc 	.word	0x20000dfc

0800c198 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7f7 fccd 	bl	8003b40 <HAL_Delay>
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800c1c0:	4b20      	ldr	r3, [pc, #128]	; (800c244 <SPI_WIFI_DelayUs+0x94>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d122      	bne.n	800c20e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800c1c8:	4b1f      	ldr	r3, [pc, #124]	; (800c248 <SPI_WIFI_DelayUs+0x98>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <SPI_WIFI_DelayUs+0x9c>)
 800c1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d2:	099b      	lsrs	r3, r3, #6
 800c1d4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800c1de:	f7f7 fca3 	bl	8003b28 <HAL_GetTick>
 800c1e2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800c1e4:	e002      	b.n	800c1ec <SPI_WIFI_DelayUs+0x3c>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	60bb      	str	r3, [r7, #8]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1f9      	bne.n	800c1e6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800c1f2:	f7f7 fc99 	bl	8003b28 <HAL_GetTick>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	4a11      	ldr	r2, [pc, #68]	; (800c244 <SPI_WIFI_DelayUs+0x94>)
 800c1fe:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800c200:	4b10      	ldr	r3, [pc, #64]	; (800c244 <SPI_WIFI_DelayUs+0x94>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d102      	bne.n	800c20e <SPI_WIFI_DelayUs+0x5e>
 800c208:	4b0e      	ldr	r3, [pc, #56]	; (800c244 <SPI_WIFI_DelayUs+0x94>)
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800c20e:	4b0e      	ldr	r3, [pc, #56]	; (800c248 <SPI_WIFI_DelayUs+0x98>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a0f      	ldr	r2, [pc, #60]	; (800c250 <SPI_WIFI_DelayUs+0xa0>)
 800c214:	fba2 2303 	umull	r2, r3, r2, r3
 800c218:	0c9a      	lsrs	r2, r3, #18
 800c21a:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <SPI_WIFI_DelayUs+0x94>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c222:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	fb02 f303 	mul.w	r3, r2, r3
 800c22c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800c22e:	e002      	b.n	800c236 <SPI_WIFI_DelayUs+0x86>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	3b01      	subs	r3, #1
 800c234:	60bb      	str	r3, [r7, #8]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f9      	bne.n	800c230 <SPI_WIFI_DelayUs+0x80>
  return;
 800c23c:	bf00      	nop
}
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	20000e6c 	.word	0x20000e6c
 800c248:	20000014 	.word	0x20000014
 800c24c:	10624dd3 	.word	0x10624dd3
 800c250:	431bde83 	.word	0x431bde83

0800c254 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800c25c:	4b06      	ldr	r3, [pc, #24]	; (800c278 <HAL_SPI_RxCpltCallback+0x24>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800c264:	4b04      	ldr	r3, [pc, #16]	; (800c278 <HAL_SPI_RxCpltCallback+0x24>)
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
  }
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	20000e60 	.word	0x20000e60

0800c27c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800c284:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <HAL_SPI_TxCpltCallback+0x24>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <HAL_SPI_TxCpltCallback+0x24>)
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
  }
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20000e64 	.word	0x20000e64

0800c2a4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <SPI_WIFI_ISR+0x1c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d102      	bne.n	800c2b6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800c2b0:	4b03      	ldr	r3, [pc, #12]	; (800c2c0 <SPI_WIFI_ISR+0x1c>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
   }
}
 800c2b6:	bf00      	nop
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20000e68 	.word	0x20000e68

0800c2c4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <WIFI_Init+0x40>)
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <WIFI_Init+0x44>)
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <WIFI_Init+0x48>)
 800c2d8:	4a0d      	ldr	r2, [pc, #52]	; (800c310 <WIFI_Init+0x4c>)
 800c2da:	490e      	ldr	r1, [pc, #56]	; (800c314 <WIFI_Init+0x50>)
 800c2dc:	480e      	ldr	r0, [pc, #56]	; (800c318 <WIFI_Init+0x54>)
 800c2de:	f7ff f8c3 	bl	800b468 <ES_WIFI_RegisterBusIO>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d107      	bne.n	800c2f8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c2e8:	480b      	ldr	r0, [pc, #44]	; (800c318 <WIFI_Init+0x54>)
 800c2ea:	f7ff f88f 	bl	800b40c <ES_WIFI_Init>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	0800bfc9 	.word	0x0800bfc9
 800c308:	0800c0bd 	.word	0x0800c0bd
 800c30c:	0800c199 	.word	0x0800c199
 800c310:	0800beb1 	.word	0x0800beb1
 800c314:	0800bd15 	.word	0x0800bd15
 800c318:	20000e70 	.word	0x20000e70

0800c31c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	4809      	ldr	r0, [pc, #36]	; (800c35c <WIFI_Connect+0x40>)
 800c336:	f7ff f8cb 	bl	800b4d0 <ES_WIFI_Connect>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d107      	bne.n	800c350 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c340:	4806      	ldr	r0, [pc, #24]	; (800c35c <WIFI_Connect+0x40>)
 800c342:	f7ff f969 	bl	800b618 <ES_WIFI_GetNetworkSettings>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000e70 	.word	0x20000e70

0800c360 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800c36c:	6879      	ldr	r1, [r7, #4]
 800c36e:	4806      	ldr	r0, [pc, #24]	; (800c388 <WIFI_GetMAC_Address+0x28>)
 800c370:	f7ff f97c 	bl	800b66c <ES_WIFI_GetMACAddress>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20000e70 	.word	0x20000e70

0800c38c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800c398:	4809      	ldr	r0, [pc, #36]	; (800c3c0 <WIFI_GetIP_Address+0x34>)
 800c39a:	f7ff f911 	bl	800b5c0 <ES_WIFI_IsConnected>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d107      	bne.n	800c3b4 <WIFI_GetIP_Address+0x28>
 800c3a4:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <WIFI_GetIP_Address+0x34>)
 800c3a6:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800c3aa:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20000e70 	.word	0x20000e70

0800c3c4 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800c3e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3e2:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800c3e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c3e6:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bf14      	ite	ne
 800c3ee:	2301      	movne	r3, #1
 800c3f0:	2300      	moveq	r3, #0
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	789b      	ldrb	r3, [r3, #2]
 800c406:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	78db      	ldrb	r3, [r3, #3]
 800c40c:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800c40e:	f107 0310 	add.w	r3, r7, #16
 800c412:	4619      	mov	r1, r3
 800c414:	4807      	ldr	r0, [pc, #28]	; (800c434 <WIFI_OpenClientConnection+0x70>)
 800c416:	f7ff f95b 	bl	800b6d0 <ES_WIFI_StartClientConnection>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d102      	bne.n	800c426 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800c426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3728      	adds	r7, #40	; 0x28
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20000e70 	.word	0x20000e70

0800c438 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	; 0x28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <sendMessageVector+0x2c>
 800c456:	4b64      	ldr	r3, [pc, #400]	; (800c5e8 <sendMessageVector+0x1b0>)
 800c458:	4a64      	ldr	r2, [pc, #400]	; (800c5ec <sendMessageVector+0x1b4>)
 800c45a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800c45e:	4864      	ldr	r0, [pc, #400]	; (800c5f0 <sendMessageVector+0x1b8>)
 800c460:	f007 f85c 	bl	801351c <__assert_func>
    assert( pIoVec != NULL );
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <sendMessageVector+0x40>
 800c46a:	4b62      	ldr	r3, [pc, #392]	; (800c5f4 <sendMessageVector+0x1bc>)
 800c46c:	4a5f      	ldr	r2, [pc, #380]	; (800c5ec <sendMessageVector+0x1b4>)
 800c46e:	f240 21f3 	movw	r1, #755	; 0x2f3
 800c472:	485f      	ldr	r0, [pc, #380]	; (800c5f0 <sendMessageVector+0x1b8>)
 800c474:	f007 f852 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d106      	bne.n	800c48e <sendMessageVector+0x56>
 800c480:	4b5d      	ldr	r3, [pc, #372]	; (800c5f8 <sendMessageVector+0x1c0>)
 800c482:	4a5a      	ldr	r2, [pc, #360]	; (800c5ec <sendMessageVector+0x1b4>)
 800c484:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800c488:	4859      	ldr	r0, [pc, #356]	; (800c5f0 <sendMessageVector+0x1b8>)
 800c48a:	f007 f847 	bl	801351c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d106      	bne.n	800c4a4 <sendMessageVector+0x6c>
 800c496:	4b59      	ldr	r3, [pc, #356]	; (800c5fc <sendMessageVector+0x1c4>)
 800c498:	4a54      	ldr	r2, [pc, #336]	; (800c5ec <sendMessageVector+0x1b4>)
 800c49a:	f240 21f6 	movw	r1, #758	; 0x2f6
 800c49e:	4854      	ldr	r0, [pc, #336]	; (800c5f0 <sendMessageVector+0x1b8>)
 800c4a0:	f007 f83c 	bl	801351c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	623b      	str	r3, [r7, #32]
 800c4a8:	e007      	b.n	800c4ba <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800c4aa:	6a3b      	ldr	r3, [r7, #32]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	623b      	str	r3, [r7, #32]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	6a3a      	ldr	r2, [r7, #32]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d9ed      	bls.n	800c4aa <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d6:	4798      	blx	r3
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800c4de:	3320      	adds	r3, #32
 800c4e0:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c4e2:	e073      	b.n	800c5cc <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d008      	beq.n	800c4fe <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	69d0      	ldr	r0, [r2, #28]
 800c4f4:	69fa      	ldr	r2, [r7, #28]
 800c4f6:	6a39      	ldr	r1, [r7, #32]
 800c4f8:	4798      	blx	r3
 800c4fa:	6278      	str	r0, [r7, #36]	; 0x24
 800c4fc:	e009      	b.n	800c512 <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	69d0      	ldr	r0, [r2, #28]
 800c506:	6a3a      	ldr	r2, [r7, #32]
 800c508:	6811      	ldr	r1, [r2, #0]
 800c50a:	6a3a      	ldr	r2, [r7, #32]
 800c50c:	6852      	ldr	r2, [r2, #4]
 800c50e:	4798      	blx	r3
 800c510:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd17      	ble.n	800c548 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c520:	429a      	cmp	r2, r3
 800c522:	dd06      	ble.n	800c532 <sendMessageVector+0xfa>
 800c524:	4b36      	ldr	r3, [pc, #216]	; (800c600 <sendMessageVector+0x1c8>)
 800c526:	4a31      	ldr	r2, [pc, #196]	; (800c5ec <sendMessageVector+0x1b4>)
 800c528:	f240 3117 	movw	r1, #791	; 0x317
 800c52c:	4830      	ldr	r0, [pc, #192]	; (800c5f0 <sendMessageVector+0x1b8>)
 800c52e:	f006 fff5 	bl	801351c <__assert_func>

            bytesSentOrError += sendResult;
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	4413      	add	r3, r2
 800c538:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	4798      	blx	r3
 800c540:	4602      	mov	r2, r0
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	635a      	str	r2, [r3, #52]	; 0x34
 800c546:	e004      	b.n	800c552 <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	da01      	bge.n	800c552 <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	4798      	blx	r3
 800c558:	4602      	mov	r2, r0
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d93d      	bls.n	800c5dc <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c560:	e00b      	b.n	800c57a <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800c562:	6a3b      	ldr	r3, [r7, #32]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	461a      	mov	r2, r3
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	1a9b      	subs	r3, r3, r2
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	3308      	adds	r3, #8
 800c572:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	3b01      	subs	r3, #1
 800c578:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c580:	3b01      	subs	r3, #1
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	4413      	add	r3, r2
 800c588:	6a3a      	ldr	r2, [r7, #32]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d805      	bhi.n	800c59a <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	4293      	cmp	r3, r2
 800c598:	dae3      	bge.n	800c562 <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	dd15      	ble.n	800c5cc <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800c5ae:	6a3a      	ldr	r2, [r7, #32]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d80b      	bhi.n	800c5cc <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	441a      	add	r2, r3
 800c5bc:	6a3b      	ldr	r3, [r7, #32]
 800c5be:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	da04      	bge.n	800c5de <sendMessageVector+0x1a6>
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	da84      	bge.n	800c4e4 <sendMessageVector+0xac>
 800c5da:	e000      	b.n	800c5de <sendMessageVector+0x1a6>
            break;
 800c5dc:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800c5de:	697b      	ldr	r3, [r7, #20]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3728      	adds	r7, #40	; 0x28
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	080176ec 	.word	0x080176ec
 800c5ec:	08018244 	.word	0x08018244
 800c5f0:	08017610 	.word	0x08017610
 800c5f4:	08017700 	.word	0x08017700
 800c5f8:	08017710 	.word	0x08017710
 800c5fc:	0801772c 	.word	0x0801772c
 800c600:	08017758 	.word	0x08017758

0800c604 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <sendBuffer+0x28>
 800c61e:	4b39      	ldr	r3, [pc, #228]	; (800c704 <sendBuffer+0x100>)
 800c620:	4a39      	ldr	r2, [pc, #228]	; (800c708 <sendBuffer+0x104>)
 800c622:	f240 3153 	movw	r1, #851	; 0x353
 800c626:	4839      	ldr	r0, [pc, #228]	; (800c70c <sendBuffer+0x108>)
 800c628:	f006 ff78 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <sendBuffer+0x3e>
 800c634:	4b36      	ldr	r3, [pc, #216]	; (800c710 <sendBuffer+0x10c>)
 800c636:	4a34      	ldr	r2, [pc, #208]	; (800c708 <sendBuffer+0x104>)
 800c638:	f44f 7155 	mov.w	r1, #852	; 0x354
 800c63c:	4833      	ldr	r0, [pc, #204]	; (800c70c <sendBuffer+0x108>)
 800c63e:	f006 ff6d 	bl	801351c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <sendBuffer+0x54>
 800c64a:	4b32      	ldr	r3, [pc, #200]	; (800c714 <sendBuffer+0x110>)
 800c64c:	4a2e      	ldr	r2, [pc, #184]	; (800c708 <sendBuffer+0x104>)
 800c64e:	f240 3155 	movw	r1, #853	; 0x355
 800c652:	482e      	ldr	r0, [pc, #184]	; (800c70c <sendBuffer+0x108>)
 800c654:	f006 ff62 	bl	801351c <__assert_func>
    assert( pIndex != NULL );
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <sendBuffer+0x68>
 800c65e:	4b2e      	ldr	r3, [pc, #184]	; (800c718 <sendBuffer+0x114>)
 800c660:	4a29      	ldr	r2, [pc, #164]	; (800c708 <sendBuffer+0x104>)
 800c662:	f240 3156 	movw	r1, #854	; 0x356
 800c666:	4829      	ldr	r0, [pc, #164]	; (800c70c <sendBuffer+0x108>)
 800c668:	f006 ff58 	bl	801351c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4798      	blx	r3
 800c672:	4603      	mov	r3, r0
 800c674:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800c678:	3320      	adds	r3, #32
 800c67a:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c67c:	e034      	b.n	800c6e8 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800c686:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	1a8a      	subs	r2, r1, r2
 800c68c:	69b9      	ldr	r1, [r7, #24]
 800c68e:	4798      	blx	r3
 800c690:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	dd1b      	ble.n	800c6d0 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	dd06      	ble.n	800c6b2 <sendBuffer+0xae>
 800c6a4:	4b1d      	ldr	r3, [pc, #116]	; (800c71c <sendBuffer+0x118>)
 800c6a6:	4a18      	ldr	r2, [pc, #96]	; (800c708 <sendBuffer+0x104>)
 800c6a8:	f240 3165 	movw	r1, #869	; 0x365
 800c6ac:	4817      	ldr	r0, [pc, #92]	; (800c70c <sendBuffer+0x108>)
 800c6ae:	f006 ff35 	bl	801351c <__assert_func>

            bytesSentOrError += sendResult;
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	4413      	add	r3, r2
 800c6c0:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	4798      	blx	r3
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	635a      	str	r2, [r3, #52]	; 0x34
 800c6ce:	e004      	b.n	800c6da <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	da01      	bge.n	800c6da <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	4798      	blx	r3
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d907      	bls.n	800c6f8 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	da04      	bge.n	800c6fa <sendBuffer+0xf6>
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	dac3      	bge.n	800c67e <sendBuffer+0x7a>
 800c6f6:	e000      	b.n	800c6fa <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800c6f8:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800c6fa:	69fb      	ldr	r3, [r7, #28]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	080176ec 	.word	0x080176ec
 800c708:	08018258 	.word	0x08018258
 800c70c:	08017610 	.word	0x08017610
 800c710:	08017710 	.word	0x08017710
 800c714:	0801772c 	.word	0x0801772c
 800c718:	08017798 	.word	0x08017798
 800c71c:	08017758 	.word	0x08017758

0800c720 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
    return later - start;
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	1ad3      	subs	r3, r2, r3
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800c746:	2300      	movs	r3, #0
 800c748:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	2b62      	cmp	r3, #98	; 0x62
 800c74e:	d00c      	beq.n	800c76a <getAckFromPacketType+0x2e>
 800c750:	2b62      	cmp	r3, #98	; 0x62
 800c752:	dc0d      	bgt.n	800c770 <getAckFromPacketType+0x34>
 800c754:	2b40      	cmp	r3, #64	; 0x40
 800c756:	d002      	beq.n	800c75e <getAckFromPacketType+0x22>
 800c758:	2b50      	cmp	r3, #80	; 0x50
 800c75a:	d003      	beq.n	800c764 <getAckFromPacketType+0x28>
 800c75c:	e008      	b.n	800c770 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]
            break;
 800c762:	e012      	b.n	800c78a <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800c764:	2301      	movs	r3, #1
 800c766:	73fb      	strb	r3, [r7, #15]
            break;
 800c768:	e00f      	b.n	800c78a <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800c76a:	2302      	movs	r3, #2
 800c76c:	73fb      	strb	r3, [r7, #15]
            break;
 800c76e:	e00c      	b.n	800c78a <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b70      	cmp	r3, #112	; 0x70
 800c774:	d006      	beq.n	800c784 <getAckFromPacketType+0x48>
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <getAckFromPacketType+0x58>)
 800c778:	4a07      	ldr	r2, [pc, #28]	; (800c798 <getAckFromPacketType+0x5c>)
 800c77a:	f240 31a7 	movw	r1, #935	; 0x3a7
 800c77e:	4807      	ldr	r0, [pc, #28]	; (800c79c <getAckFromPacketType+0x60>)
 800c780:	f006 fecc 	bl	801351c <__assert_func>
            ackType = MQTTPubcomp;
 800c784:	2303      	movs	r3, #3
 800c786:	73fb      	strb	r3, [r7, #15]
            break;
 800c788:	bf00      	nop
    }

    return ackType;
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	080177a8 	.word	0x080177a8
 800c798:	08018264 	.word	0x08018264
 800c79c:	08017610 	.word	0x08017610

0800c7a0 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08c      	sub	sp, #48	; 0x30
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	623b      	str	r3, [r7, #32]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d106      	bne.n	800c7de <recvExact+0x3e>
 800c7d0:	4b44      	ldr	r3, [pc, #272]	; (800c8e4 <recvExact+0x144>)
 800c7d2:	4a45      	ldr	r2, [pc, #276]	; (800c8e8 <recvExact+0x148>)
 800c7d4:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800c7d8:	4844      	ldr	r0, [pc, #272]	; (800c8ec <recvExact+0x14c>)
 800c7da:	f006 fe9f 	bl	801351c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d906      	bls.n	800c7f6 <recvExact+0x56>
 800c7e8:	4b41      	ldr	r3, [pc, #260]	; (800c8f0 <recvExact+0x150>)
 800c7ea:	4a3f      	ldr	r2, [pc, #252]	; (800c8e8 <recvExact+0x148>)
 800c7ec:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c7f0:	483e      	ldr	r0, [pc, #248]	; (800c8ec <recvExact+0x14c>)
 800c7f2:	f006 fe93 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <recvExact+0x6c>
 800c7fe:	4b3d      	ldr	r3, [pc, #244]	; (800c8f4 <recvExact+0x154>)
 800c800:	4a39      	ldr	r2, [pc, #228]	; (800c8e8 <recvExact+0x148>)
 800c802:	f240 31be 	movw	r1, #958	; 0x3be
 800c806:	4839      	ldr	r0, [pc, #228]	; (800c8ec <recvExact+0x14c>)
 800c808:	f006 fe88 	bl	801351c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <recvExact+0x82>
 800c814:	4b38      	ldr	r3, [pc, #224]	; (800c8f8 <recvExact+0x158>)
 800c816:	4a34      	ldr	r2, [pc, #208]	; (800c8e8 <recvExact+0x148>)
 800c818:	f240 31bf 	movw	r1, #959	; 0x3bf
 800c81c:	4833      	ldr	r0, [pc, #204]	; (800c8ec <recvExact+0x14c>)
 800c81e:	f006 fe7d 	bl	801351c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <recvExact+0x98>
 800c82a:	4b34      	ldr	r3, [pc, #208]	; (800c8fc <recvExact+0x15c>)
 800c82c:	4a2e      	ldr	r2, [pc, #184]	; (800c8e8 <recvExact+0x148>)
 800c82e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800c832:	482e      	ldr	r0, [pc, #184]	; (800c8ec <recvExact+0x14c>)
 800c834:	f006 fe72 	bl	801351c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	4798      	blx	r3
 800c84e:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800c850:	e039      	b.n	800c8c6 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69d8      	ldr	r0, [r3, #28]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c85c:	4798      	blx	r3
 800c85e:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	da04      	bge.n	800c870 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800c86a:	2301      	movs	r3, #1
 800c86c:	77fb      	strb	r3, [r7, #31]
 800c86e:	e02a      	b.n	800c8c6 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b00      	cmp	r3, #0
 800c874:	dd1a      	ble.n	800c8ac <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	4798      	blx	r3
 800c87a:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c880:	429a      	cmp	r2, r3
 800c882:	d206      	bcs.n	800c892 <recvExact+0xf2>
 800c884:	4b1e      	ldr	r3, [pc, #120]	; (800c900 <recvExact+0x160>)
 800c886:	4a18      	ldr	r2, [pc, #96]	; (800c8e8 <recvExact+0x148>)
 800c888:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800c88c:	4817      	ldr	r0, [pc, #92]	; (800c8ec <recvExact+0x14c>)
 800c88e:	f006 fe45 	bl	801351c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800c89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a6:	4413      	add	r3, r2
 800c8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8aa:	e00c      	b.n	800c8c6 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	4798      	blx	r3
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	6a39      	ldr	r1, [r7, #32]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff ff33 	bl	800c720 <calculateElapsedTime>
 800c8ba:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	2b09      	cmp	r3, #9
 800c8c0:	d901      	bls.n	800c8c6 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <recvExact+0x138>
 800c8cc:	7ffb      	ldrb	r3, [r7, #31]
 800c8ce:	f083 0301 	eor.w	r3, r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1bc      	bne.n	800c852 <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3730      	adds	r7, #48	; 0x30
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	080176ec 	.word	0x080176ec
 800c8e8:	0801827c 	.word	0x0801827c
 800c8ec:	08017610 	.word	0x08017610
 800c8f0:	080177d0 	.word	0x080177d0
 800c8f4:	08017710 	.word	0x08017710
 800c8f8:	080177fc 	.word	0x080177fc
 800c8fc:	08017828 	.word	0x08017828
 800c900:	08017850 	.word	0x08017850

0800c904 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b08c      	sub	sp, #48	; 0x30
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800c910:	2304      	movs	r3, #4
 800c912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800c91a:	2300      	movs	r3, #0
 800c91c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800c92e:	2300      	movs	r3, #0
 800c930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d106      	bne.n	800c948 <discardPacket+0x44>
 800c93a:	4b2f      	ldr	r3, [pc, #188]	; (800c9f8 <discardPacket+0xf4>)
 800c93c:	4a2f      	ldr	r2, [pc, #188]	; (800c9fc <discardPacket+0xf8>)
 800c93e:	f240 410b 	movw	r1, #1035	; 0x40b
 800c942:	482f      	ldr	r0, [pc, #188]	; (800ca00 <discardPacket+0xfc>)
 800c944:	f006 fdea 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d106      	bne.n	800c95e <discardPacket+0x5a>
 800c950:	4b2c      	ldr	r3, [pc, #176]	; (800ca04 <discardPacket+0x100>)
 800c952:	4a2a      	ldr	r2, [pc, #168]	; (800c9fc <discardPacket+0xf8>)
 800c954:	f240 410c 	movw	r1, #1036	; 0x40c
 800c958:	4829      	ldr	r0, [pc, #164]	; (800ca00 <discardPacket+0xfc>)
 800c95a:	f006 fddf 	bl	801351c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c962:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	4798      	blx	r3
 800c96e:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c970:	e029      	b.n	800c9c6 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d903      	bls.n	800c986 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800c986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff ff09 	bl	800c7a0 <recvExact>
 800c98e:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	429a      	cmp	r2, r3
 800c996:	d003      	beq.n	800c9a0 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c99e:	e012      	b.n	800c9c6 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a4:	4413      	add	r3, r2
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	4798      	blx	r3
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	69b9      	ldr	r1, [r7, #24]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff feb5 	bl	800c720 <calculateElapsedTime>
 800c9b6:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d302      	bcc.n	800c9c6 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800c9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d206      	bcs.n	800c9dc <discardPacket+0xd8>
 800c9ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9d2:	f083 0301 	eor.w	r3, r3, #1
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1ca      	bne.n	800c972 <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800c9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d102      	bne.n	800c9ea <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800c9e4:	2307      	movs	r3, #7
 800c9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800c9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3730      	adds	r7, #48	; 0x30
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	080176ec 	.word	0x080176ec
 800c9fc:	08018288 	.word	0x08018288
 800ca00:	08017610 	.word	0x08017610
 800ca04:	08017710 	.word	0x08017710

0800ca08 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	; 0x28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800ca12:	2304      	movs	r3, #4
 800ca14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800ca24:	2300      	movs	r3, #0
 800ca26:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <discardStoredPacket+0x38>
 800ca32:	4b34      	ldr	r3, [pc, #208]	; (800cb04 <discardStoredPacket+0xfc>)
 800ca34:	4a34      	ldr	r2, [pc, #208]	; (800cb08 <discardStoredPacket+0x100>)
 800ca36:	f240 414b 	movw	r1, #1099	; 0x44b
 800ca3a:	4834      	ldr	r0, [pc, #208]	; (800cb0c <discardStoredPacket+0x104>)
 800ca3c:	f006 fd6e 	bl	801351c <__assert_func>
    assert( pPacketInfo != NULL );
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d106      	bne.n	800ca54 <discardStoredPacket+0x4c>
 800ca46:	4b32      	ldr	r3, [pc, #200]	; (800cb10 <discardStoredPacket+0x108>)
 800ca48:	4a2f      	ldr	r2, [pc, #188]	; (800cb08 <discardStoredPacket+0x100>)
 800ca4a:	f240 414c 	movw	r1, #1100	; 0x44c
 800ca4e:	482f      	ldr	r0, [pc, #188]	; (800cb0c <discardStoredPacket+0x104>)
 800ca50:	f006 fd64 	bl	801351c <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d806      	bhi.n	800ca78 <discardStoredPacket+0x70>
 800ca6a:	4b2a      	ldr	r3, [pc, #168]	; (800cb14 <discardStoredPacket+0x10c>)
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <discardStoredPacket+0x100>)
 800ca6e:	f240 4152 	movw	r1, #1106	; 0x452
 800ca72:	4826      	ldr	r0, [pc, #152]	; (800cb0c <discardStoredPacket+0x104>)
 800ca74:	f006 fd52 	bl	801351c <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7c:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800ca88:	e019      	b.n	800cabe <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	6a3a      	ldr	r2, [r7, #32]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d903      	bls.n	800ca9e <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800ca9e:	6a39      	ldr	r1, [r7, #32]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff fe7d 	bl	800c7a0 <recvExact>
 800caa6:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	429a      	cmp	r2, r3
 800caae:	d002      	beq.n	800cab6 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800cab0:	2301      	movs	r3, #1
 800cab2:	76fb      	strb	r3, [r7, #27]
 800cab4:	e003      	b.n	800cabe <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	69fa      	ldr	r2, [r7, #28]
 800caba:	4413      	add	r3, r2
 800cabc:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800cabe:	69fa      	ldr	r2, [r7, #28]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d205      	bcs.n	800cad2 <discardStoredPacket+0xca>
 800cac6:	7efb      	ldrb	r3, [r7, #27]
 800cac8:	f083 0301 	eor.w	r3, r3, #1
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1db      	bne.n	800ca8a <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d102      	bne.n	800cae0 <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800cada:	2307      	movs	r3, #7
 800cadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a18      	ldr	r0, [r3, #32]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	461a      	mov	r2, r3
 800caea:	2100      	movs	r1, #0
 800caec:	f006 fea1 	bl	8013832 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800caf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3728      	adds	r7, #40	; 0x28
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	080176ec 	.word	0x080176ec
 800cb08:	08018298 	.word	0x08018298
 800cb0c:	08017610 	.word	0x08017610
 800cb10:	08017878 	.word	0x08017878
 800cb14:	0801788c 	.word	0x0801788c

0800cb18 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800cb18:	b084      	sub	sp, #16
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b086      	sub	sp, #24
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d106      	bne.n	800cb4a <receivePacket+0x32>
 800cb3c:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <receivePacket+0x90>)
 800cb3e:	4a1b      	ldr	r2, [pc, #108]	; (800cbac <receivePacket+0x94>)
 800cb40:	f240 418e 	movw	r1, #1166	; 0x48e
 800cb44:	481a      	ldr	r0, [pc, #104]	; (800cbb0 <receivePacket+0x98>)
 800cb46:	f006 fce9 	bl	801351c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <receivePacket+0x48>
 800cb52:	4b18      	ldr	r3, [pc, #96]	; (800cbb4 <receivePacket+0x9c>)
 800cb54:	4a15      	ldr	r2, [pc, #84]	; (800cbac <receivePacket+0x94>)
 800cb56:	f240 418f 	movw	r1, #1167	; 0x48f
 800cb5a:	4815      	ldr	r0, [pc, #84]	; (800cbb0 <receivePacket+0x98>)
 800cb5c:	f006 fcde 	bl	801351c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800cb60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d908      	bls.n	800cb7c <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fec7 	bl	800c904 <discardPacket>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]
 800cb7a:	e00c      	b.n	800cb96 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800cb80:	68f9      	ldr	r1, [r7, #12]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fe0c 	bl	800c7a0 <recvExact>
 800cb88:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d001      	beq.n	800cb96 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800cb92:	2304      	movs	r3, #4
 800cb94:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cba2:	b004      	add	sp, #16
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	080176ec 	.word	0x080176ec
 800cbac:	080182ac 	.word	0x080182ac
 800cbb0:	08017610 	.word	0x08017610
 800cbb4:	08017828 	.word	0x08017828

0800cbb8 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
 800cbc8:	3b02      	subs	r3, #2
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d816      	bhi.n	800cbfc <getAckTypeToSend+0x44>
 800cbce:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <getAckTypeToSend+0x1c>)
 800cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd4:	0800cbe5 	.word	0x0800cbe5
 800cbd8:	0800cbeb 	.word	0x0800cbeb
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf7 	.word	0x0800cbf7
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800cbe4:	2340      	movs	r3, #64	; 0x40
 800cbe6:	73fb      	strb	r3, [r7, #15]
            break;
 800cbe8:	e009      	b.n	800cbfe <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800cbea:	2350      	movs	r3, #80	; 0x50
 800cbec:	73fb      	strb	r3, [r7, #15]
            break;
 800cbee:	e006      	b.n	800cbfe <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800cbf0:	2362      	movs	r3, #98	; 0x62
 800cbf2:	73fb      	strb	r3, [r7, #15]
            break;
 800cbf4:	e003      	b.n	800cbfe <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800cbf6:	2370      	movs	r3, #112	; 0x70
 800cbf8:	73fb      	strb	r3, [r7, #15]
            break;
 800cbfa:	e000      	b.n	800cbfe <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800cbfc:	bf00      	nop
    }

    return packetTypeByte;
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	; 0x28
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	807b      	strh	r3, [r7, #2]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800cc20:	2300      	movs	r3, #0
 800cc22:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800cc32:	2304      	movs	r3, #4
 800cc34:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d106      	bne.n	800cc4a <sendPublishAcks+0x3e>
 800cc3c:	4b21      	ldr	r3, [pc, #132]	; (800ccc4 <sendPublishAcks+0xb8>)
 800cc3e:	4a22      	ldr	r2, [pc, #136]	; (800ccc8 <sendPublishAcks+0xbc>)
 800cc40:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800cc44:	4821      	ldr	r0, [pc, #132]	; (800cccc <sendPublishAcks+0xc0>)
 800cc46:	f006 fc69 	bl	801351c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800cc4a:	787b      	ldrb	r3, [r7, #1]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff ffb3 	bl	800cbb8 <getAckTypeToSend>
 800cc52:	4603      	mov	r3, r0
 800cc54:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d02d      	beq.n	800ccb8 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fd6c 	bl	800c73c <getAckFromPacketType>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800cc68:	887a      	ldrh	r2, [r7, #2]
 800cc6a:	7df9      	ldrb	r1, [r7, #23]
 800cc6c:	f107 030c 	add.w	r3, r7, #12
 800cc70:	4618      	mov	r0, r3
 800cc72:	f002 f8f1 	bl	800ee58 <MQTT_SerializeAck>
 800cc76:	4603      	mov	r3, r0
 800cc78:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800cc7a:	7ffb      	ldrb	r3, [r7, #31]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d106      	bne.n	800cc8e <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800cc80:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800cc82:	2204      	movs	r2, #4
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fcbc 	bl	800c604 <sendBuffer>
 800cc8c:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d10f      	bne.n	800ccb4 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800cc9c:	7dba      	ldrb	r2, [r7, #22]
 800cc9e:	8879      	ldrh	r1, [r7, #2]
 800cca0:	f107 0315 	add.w	r3, r7, #21
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	2300      	movs	r3, #0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f002 ffa1 	bl	800fbf0 <MQTT_UpdateStateAck>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	77fb      	strb	r3, [r7, #31]
 800ccb2:	e001      	b.n	800ccb8 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800ccb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3720      	adds	r7, #32
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	080176ec 	.word	0x080176ec
 800ccc8:	080182bc 	.word	0x080182bc
 800cccc:	08017610 	.word	0x08017610

0800ccd0 <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <handleKeepAlive+0x28>
 800ccea:	4b33      	ldr	r3, [pc, #204]	; (800cdb8 <handleKeepAlive+0xe8>)
 800ccec:	4a33      	ldr	r2, [pc, #204]	; (800cdbc <handleKeepAlive+0xec>)
 800ccee:	f240 512e 	movw	r1, #1326	; 0x52e
 800ccf2:	4833      	ldr	r0, [pc, #204]	; (800cdc0 <handleKeepAlive+0xf0>)
 800ccf4:	f006 fc12 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d106      	bne.n	800cd0e <handleKeepAlive+0x3e>
 800cd00:	4b30      	ldr	r3, [pc, #192]	; (800cdc4 <handleKeepAlive+0xf4>)
 800cd02:	4a2e      	ldr	r2, [pc, #184]	; (800cdbc <handleKeepAlive+0xec>)
 800cd04:	f240 512f 	movw	r1, #1327	; 0x52f
 800cd08:	482d      	ldr	r0, [pc, #180]	; (800cdc0 <handleKeepAlive+0xf0>)
 800cd0a:	f006 fc07 	bl	801351c <__assert_func>

    now = pContext->getTime();
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd12:	4798      	blx	r3
 800cd14:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd22:	fb02 f303 	mul.w	r3, r2, r3
 800cd26:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f247 5230 	movw	r2, #30000	; 0x7530
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d902      	bls.n	800cd38 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800cd32:	f247 5330 	movw	r3, #30000	; 0x7530
 800cd36:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00d      	beq.n	800cd5e <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd46:	4619      	mov	r1, r3
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fce9 	bl	800c720 <calculateElapsedTime>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d929      	bls.n	800cdac <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800cd58:	230a      	movs	r3, #10
 800cd5a:	75fb      	strb	r3, [r7, #23]
 800cd5c:	e026      	b.n	800cdac <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <handleKeepAlive+0xb4>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd68:	4619      	mov	r1, r3
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff fcd8 	bl	800c720 <calculateElapsedTime>
 800cd70:	4602      	mov	r2, r0
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d805      	bhi.n	800cd84 <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 f8c7 	bl	800df0c <MQTT_Ping>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	75fb      	strb	r3, [r7, #23]
 800cd82:	e013      	b.n	800cdac <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd88:	4619      	mov	r1, r3
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fcc8 	bl	800c720 <calculateElapsedTime>
 800cd90:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d009      	beq.n	800cdac <handleKeepAlive+0xdc>
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	f247 522f 	movw	r2, #29999	; 0x752f
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d904      	bls.n	800cdac <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 f8b2 	bl	800df0c <MQTT_Ping>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	080176ec 	.word	0x080176ec
 800cdbc:	080182cc 	.word	0x080182cc
 800cdc0:	08017610 	.word	0x08017610
 800cdc4:	08017710 	.word	0x08017710

0800cdc8 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08e      	sub	sp, #56	; 0x38
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800cde2:	2300      	movs	r3, #0
 800cde4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <handleIncomingPublish+0x34>
 800cdee:	4b43      	ldr	r3, [pc, #268]	; (800cefc <handleIncomingPublish+0x134>)
 800cdf0:	4a43      	ldr	r2, [pc, #268]	; (800cf00 <handleIncomingPublish+0x138>)
 800cdf2:	f240 5164 	movw	r1, #1380	; 0x564
 800cdf6:	4843      	ldr	r0, [pc, #268]	; (800cf04 <handleIncomingPublish+0x13c>)
 800cdf8:	f006 fb90 	bl	801351c <__assert_func>
    assert( pIncomingPacket != NULL );
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d106      	bne.n	800ce10 <handleIncomingPublish+0x48>
 800ce02:	4b41      	ldr	r3, [pc, #260]	; (800cf08 <handleIncomingPublish+0x140>)
 800ce04:	4a3e      	ldr	r2, [pc, #248]	; (800cf00 <handleIncomingPublish+0x138>)
 800ce06:	f240 5165 	movw	r1, #1381	; 0x565
 800ce0a:	483e      	ldr	r0, [pc, #248]	; (800cf04 <handleIncomingPublish+0x13c>)
 800ce0c:	f006 fb86 	bl	801351c <__assert_func>
    assert( pContext->appCallback != NULL );
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <handleIncomingPublish+0x5e>
 800ce18:	4b3c      	ldr	r3, [pc, #240]	; (800cf0c <handleIncomingPublish+0x144>)
 800ce1a:	4a39      	ldr	r2, [pc, #228]	; (800cf00 <handleIncomingPublish+0x138>)
 800ce1c:	f240 5166 	movw	r1, #1382	; 0x566
 800ce20:	4838      	ldr	r0, [pc, #224]	; (800cf04 <handleIncomingPublish+0x13c>)
 800ce22:	f006 fb7b 	bl	801351c <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800ce26:	f107 0214 	add.w	r2, r7, #20
 800ce2a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6838      	ldr	r0, [r7, #0]
 800ce32:	f002 f8a8 	bl	800ef86 <MQTT_DeserializePublish>
 800ce36:	4603      	mov	r3, r0
 800ce38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800ce3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d109      	bne.n	800ce58 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d105      	bne.n	800ce58 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800ce4c:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800ce52:	2304      	movs	r3, #4
 800ce54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800ce58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d122      	bne.n	800cea6 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800ce60:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800ce62:	7d3a      	ldrb	r2, [r7, #20]
 800ce64:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f002 fe4b 	bl	800fb0a <MQTT_UpdateStatePublish>
 800ce74:	4603      	mov	r3, r0
 800ce76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800ce7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d011      	beq.n	800cea6 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800ce82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	d10d      	bne.n	800cea6 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800ce90:	2301      	movs	r3, #1
 800ce92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800ce96:	7d3b      	ldrb	r3, [r7, #20]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	f002 fe06 	bl	800faac <MQTT_CalculateStatePublish>
 800cea0:	4603      	mov	r3, r0
 800cea2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800cea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d11f      	bne.n	800ceee <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800ceae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ceb0:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800ceb2:	f107 0314 	add.w	r3, r7, #20
 800ceb6:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800ceb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cebc:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800cebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cec2:	f083 0301 	eor.w	r3, r3, #1
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced0:	f107 0208 	add.w	r2, r7, #8
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800ceda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cedc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff fe92 	bl	800cc0c <sendPublishAcks>
 800cee8:	4603      	mov	r3, r0
 800ceea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800ceee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3730      	adds	r7, #48	; 0x30
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	080176ec 	.word	0x080176ec
 800cf00:	080182dc 	.word	0x080182dc
 800cf04:	08017610 	.word	0x08017610
 800cf08:	080178bc 	.word	0x080178bc
 800cf0c:	080178d4 	.word	0x080178d4

0800cf10 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af02      	add	r7, sp, #8
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800cf1a:	2305      	movs	r3, #5
 800cf1c:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <handlePublishAcks+0x26>
 800cf28:	4b2c      	ldr	r3, [pc, #176]	; (800cfdc <handlePublishAcks+0xcc>)
 800cf2a:	4a2d      	ldr	r2, [pc, #180]	; (800cfe0 <handlePublishAcks+0xd0>)
 800cf2c:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800cf30:	482c      	ldr	r0, [pc, #176]	; (800cfe4 <handlePublishAcks+0xd4>)
 800cf32:	f006 faf3 	bl	801351c <__assert_func>
    assert( pIncomingPacket != NULL );
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <handlePublishAcks+0x3a>
 800cf3c:	4b2a      	ldr	r3, [pc, #168]	; (800cfe8 <handlePublishAcks+0xd8>)
 800cf3e:	4a28      	ldr	r2, [pc, #160]	; (800cfe0 <handlePublishAcks+0xd0>)
 800cf40:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800cf44:	4827      	ldr	r0, [pc, #156]	; (800cfe4 <handlePublishAcks+0xd4>)
 800cf46:	f006 fae9 	bl	801351c <__assert_func>
    assert( pContext->appCallback != NULL );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <handlePublishAcks+0x50>
 800cf52:	4b26      	ldr	r3, [pc, #152]	; (800cfec <handlePublishAcks+0xdc>)
 800cf54:	4a22      	ldr	r2, [pc, #136]	; (800cfe0 <handlePublishAcks+0xd0>)
 800cf56:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800cf5a:	4822      	ldr	r0, [pc, #136]	; (800cfe4 <handlePublishAcks+0xd4>)
 800cf5c:	f006 fade 	bl	801351c <__assert_func>

    appCallback = pContext->appCallback;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf64:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fbe6 	bl	800c73c <getAckFromPacketType>
 800cf70:	4603      	mov	r3, r0
 800cf72:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800cf74:	f107 0314 	add.w	r3, r7, #20
 800cf78:	2200      	movs	r2, #0
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6838      	ldr	r0, [r7, #0]
 800cf7e:	f002 f832 	bl	800efe6 <MQTT_DeserializeAck>
 800cf82:	4603      	mov	r3, r0
 800cf84:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800cf8c:	8ab9      	ldrh	r1, [r7, #20]
 800cf8e:	7dfa      	ldrb	r2, [r7, #23]
 800cf90:	f107 0316 	add.w	r3, r7, #22
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	2301      	movs	r3, #1
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f002 fe29 	bl	800fbf0 <MQTT_UpdateStateAck>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d113      	bne.n	800cfd0 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800cfa8:	8abb      	ldrh	r3, [r7, #20]
 800cfaa:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800cfb4:	f107 0208 	add.w	r2, r7, #8
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800cfc0:	8abb      	ldrh	r3, [r7, #20]
 800cfc2:	7dba      	ldrb	r2, [r7, #22]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fe20 	bl	800cc0c <sendPublishAcks>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800cfd0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3720      	adds	r7, #32
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	080176ec 	.word	0x080176ec
 800cfe0:	080182f4 	.word	0x080182f4
 800cfe4:	08017610 	.word	0x08017610
 800cfe8:	080178bc 	.word	0x080178bc
 800cfec:	080178d4 	.word	0x080178d4

0800cff0 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	; 0x28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	4613      	mov	r3, r2
 800cffc:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800cffe:	2305      	movs	r3, #5
 800d000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800d004:	2300      	movs	r3, #0
 800d006:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800d008:	2300      	movs	r3, #0
 800d00a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <handleIncomingAck+0x36>
 800d018:	4b54      	ldr	r3, [pc, #336]	; (800d16c <handleIncomingAck+0x17c>)
 800d01a:	4a55      	ldr	r2, [pc, #340]	; (800d170 <handleIncomingAck+0x180>)
 800d01c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800d020:	4854      	ldr	r0, [pc, #336]	; (800d174 <handleIncomingAck+0x184>)
 800d022:	f006 fa7b 	bl	801351c <__assert_func>
    assert( pIncomingPacket != NULL );
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <handleIncomingAck+0x4a>
 800d02c:	4b52      	ldr	r3, [pc, #328]	; (800d178 <handleIncomingAck+0x188>)
 800d02e:	4a50      	ldr	r2, [pc, #320]	; (800d170 <handleIncomingAck+0x180>)
 800d030:	f240 6131 	movw	r1, #1585	; 0x631
 800d034:	484f      	ldr	r0, [pc, #316]	; (800d174 <handleIncomingAck+0x184>)
 800d036:	f006 fa71 	bl	801351c <__assert_func>
    assert( pContext->appCallback != NULL );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <handleIncomingAck+0x60>
 800d042:	4b4e      	ldr	r3, [pc, #312]	; (800d17c <handleIncomingAck+0x18c>)
 800d044:	4a4a      	ldr	r2, [pc, #296]	; (800d170 <handleIncomingAck+0x180>)
 800d046:	f240 6132 	movw	r1, #1586	; 0x632
 800d04a:	484a      	ldr	r0, [pc, #296]	; (800d174 <handleIncomingAck+0x184>)
 800d04c:	f006 fa66 	bl	801351c <__assert_func>

    appCallback = pContext->appCallback;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d054:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2bd0      	cmp	r3, #208	; 0xd0
 800d05c:	d01d      	beq.n	800d09a <handleIncomingAck+0xaa>
 800d05e:	2bd0      	cmp	r3, #208	; 0xd0
 800d060:	dc64      	bgt.n	800d12c <handleIncomingAck+0x13c>
 800d062:	2bb0      	cmp	r3, #176	; 0xb0
 800d064:	d044      	beq.n	800d0f0 <handleIncomingAck+0x100>
 800d066:	2bb0      	cmp	r3, #176	; 0xb0
 800d068:	dc60      	bgt.n	800d12c <handleIncomingAck+0x13c>
 800d06a:	2b90      	cmp	r3, #144	; 0x90
 800d06c:	d040      	beq.n	800d0f0 <handleIncomingAck+0x100>
 800d06e:	2b90      	cmp	r3, #144	; 0x90
 800d070:	dc5c      	bgt.n	800d12c <handleIncomingAck+0x13c>
 800d072:	2b70      	cmp	r3, #112	; 0x70
 800d074:	d009      	beq.n	800d08a <handleIncomingAck+0x9a>
 800d076:	2b70      	cmp	r3, #112	; 0x70
 800d078:	dc58      	bgt.n	800d12c <handleIncomingAck+0x13c>
 800d07a:	2b62      	cmp	r3, #98	; 0x62
 800d07c:	d005      	beq.n	800d08a <handleIncomingAck+0x9a>
 800d07e:	2b62      	cmp	r3, #98	; 0x62
 800d080:	dc54      	bgt.n	800d12c <handleIncomingAck+0x13c>
 800d082:	2b40      	cmp	r3, #64	; 0x40
 800d084:	d001      	beq.n	800d08a <handleIncomingAck+0x9a>
 800d086:	2b50      	cmp	r3, #80	; 0x50
 800d088:	d150      	bne.n	800d12c <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f7ff ff3f 	bl	800cf10 <handlePublishAcks>
 800d092:	4603      	mov	r3, r0
 800d094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800d098:	e04d      	b.n	800d136 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800d09a:	f107 031e 	add.w	r3, r7, #30
 800d09e:	2200      	movs	r2, #0
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	68b8      	ldr	r0, [r7, #8]
 800d0a4:	f001 ff9f 	bl	800efe6 <MQTT_DeserializeAck>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800d0ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d107      	bne.n	800d0c6 <handleIncomingAck+0xd6>
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	f083 0301 	eor.w	r3, r3, #1
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <handleIncomingAck+0xd6>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e000      	b.n	800d0c8 <handleIncomingAck+0xd8>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800d0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d129      	bne.n	800d134 <handleIncomingAck+0x144>
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d026      	beq.n	800d134 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800d0ee:	e021      	b.n	800d134 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800d0f0:	f107 031e 	add.w	r3, r7, #30
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	68b8      	ldr	r0, [r7, #8]
 800d0fa:	f001 ff74 	bl	800efe6 <MQTT_DeserializeAck>
 800d0fe:	4603      	mov	r3, r0
 800d100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800d104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d003      	beq.n	800d114 <handleIncomingAck+0x124>
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d110:	2b06      	cmp	r3, #6
 800d112:	d101      	bne.n	800d118 <handleIncomingAck+0x128>
 800d114:	2301      	movs	r3, #1
 800d116:	e000      	b.n	800d11a <handleIncomingAck+0x12a>
 800d118:	2300      	movs	r3, #0
 800d11a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d11e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800d12a:	e004      	b.n	800d136 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800d12c:	2305      	movs	r3, #5
 800d12e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d132:	e000      	b.n	800d136 <handleIncomingAck+0x146>
            break;
 800d134:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800d136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00f      	beq.n	800d15e <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800d13e:	8bfb      	ldrh	r3, [r7, #30]
 800d140:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800d142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d146:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800d148:	2300      	movs	r3, #0
 800d14a:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800d14c:	f107 0210 	add.w	r2, r7, #16
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800d158:	2300      	movs	r3, #0
 800d15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800d15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d162:	4618      	mov	r0, r3
 800d164:	3728      	adds	r7, #40	; 0x28
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	080176ec 	.word	0x080176ec
 800d170:	08018308 	.word	0x08018308
 800d174:	08017610 	.word	0x08017610
 800d178:	080178bc 	.word	0x080178bc
 800d17c:	080178d4 	.word	0x080178d4

0800d180 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b08b      	sub	sp, #44	; 0x2c
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	460b      	mov	r3, r1
 800d18a:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800d18c:	2300      	movs	r3, #0
 800d18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800d192:	f107 0308 	add.w	r3, r7, #8
 800d196:	2200      	movs	r2, #0
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	605a      	str	r2, [r3, #4]
 800d19c:	609a      	str	r2, [r3, #8]
 800d19e:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d106      	bne.n	800d1b8 <receiveSingleIteration+0x38>
 800d1aa:	4b67      	ldr	r3, [pc, #412]	; (800d348 <receiveSingleIteration+0x1c8>)
 800d1ac:	4a67      	ldr	r2, [pc, #412]	; (800d34c <receiveSingleIteration+0x1cc>)
 800d1ae:	f240 6176 	movw	r1, #1654	; 0x676
 800d1b2:	4867      	ldr	r0, [pc, #412]	; (800d350 <receiveSingleIteration+0x1d0>)
 800d1b4:	f006 f9b2 	bl	801351c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d106      	bne.n	800d1ce <receiveSingleIteration+0x4e>
 800d1c0:	4b64      	ldr	r3, [pc, #400]	; (800d354 <receiveSingleIteration+0x1d4>)
 800d1c2:	4a62      	ldr	r2, [pc, #392]	; (800d34c <receiveSingleIteration+0x1cc>)
 800d1c4:	f240 6177 	movw	r1, #1655	; 0x677
 800d1c8:	4861      	ldr	r0, [pc, #388]	; (800d350 <receiveSingleIteration+0x1d0>)
 800d1ca:	f006 f9a7 	bl	801351c <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	6a11      	ldr	r1, [r2, #32]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d1de:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800d1e8:	1a8a      	subs	r2, r1, r2
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4798      	blx	r3
 800d1ee:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	da03      	bge.n	800d1fe <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800d1f6:	2304      	movs	r3, #4
 800d1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1fc:	e020      	b.n	800d240 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d107      	bne.n	800d214 <receiveSingleIteration+0x94>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800d20c:	2307      	movs	r3, #7
 800d20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d212:	e015      	b.n	800d240 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	441a      	add	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800d228:	f107 0208 	add.w	r2, r7, #8
 800d22c:	4619      	mov	r1, r3
 800d22e:	f001 ff93 	bl	800f158 <MQTT_ProcessIncomingPacketTypeAndLength>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	4413      	add	r3, r2
 800d23e:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d112      	bne.n	800d26c <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800d246:	78fb      	ldrb	r3, [r7, #3]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00f      	beq.n	800d26c <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800d24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d250:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fd3c 	bl	800ccd0 <handleKeepAlive>
 800d258:	4603      	mov	r3, r0
 800d25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800d25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800d266:	7efb      	ldrb	r3, [r7, #27]
 800d268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800d26c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d270:	2b0b      	cmp	r3, #11
 800d272:	d01e      	beq.n	800d2b2 <receiveSingleIteration+0x132>
 800d274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d278:	2b07      	cmp	r3, #7
 800d27a:	d01a      	beq.n	800d2b2 <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800d27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d280:	2b00      	cmp	r3, #0
 800d282:	d116      	bne.n	800d2b2 <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	6a3a      	ldr	r2, [r7, #32]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d909      	bls.n	800d2a2 <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800d28e:	f107 0308 	add.w	r3, r7, #8
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff fbb7 	bl	800ca08 <discardStoredPacket>
 800d29a:	4603      	mov	r3, r0
 800d29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2a0:	e007      	b.n	800d2b2 <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a6:	6a3a      	ldr	r2, [r7, #32]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d902      	bls.n	800d2b2 <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800d2ac:	230b      	movs	r3, #11
 800d2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800d2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d138      	bne.n	800d32c <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a1a      	ldr	r2, [r3, #32]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800d2c4:	7a3b      	ldrb	r3, [r7, #8]
 800d2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2ca:	2b30      	cmp	r3, #48	; 0x30
 800d2cc:	d109      	bne.n	800d2e2 <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800d2ce:	f107 0308 	add.w	r3, r7, #8
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff fd77 	bl	800cdc8 <handleIncomingPublish>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2e0:	e009      	b.n	800d2f6 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800d2e2:	78fa      	ldrb	r2, [r7, #3]
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fe80 	bl	800cff0 <handleIncomingAck>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	1ad2      	subs	r2, r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a1a      	ldr	r2, [r3, #32]
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	461a      	mov	r2, r3
 800d314:	f006 fa73 	bl	80137fe <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800d318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d105      	bne.n	800d32c <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d324:	4798      	blx	r3
 800d326:	4602      	mov	r2, r0
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800d32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d330:	2b07      	cmp	r3, #7
 800d332:	d102      	bne.n	800d33a <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800d334:	2300      	movs	r3, #0
 800d336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800d33a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d33e:	4618      	mov	r0, r3
 800d340:	372c      	adds	r7, #44	; 0x2c
 800d342:	46bd      	mov	sp, r7
 800d344:	bd90      	pop	{r4, r7, pc}
 800d346:	bf00      	nop
 800d348:	080176ec 	.word	0x080176ec
 800d34c:	0801831c 	.word	0x0801831c
 800d350:	08017610 	.word	0x08017610
 800d354:	08017828 	.word	0x08017828

0800d358 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800d358:	b480      	push	{r7}
 800d35a:	b087      	sub	sp, #28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800d366:	2300      	movs	r3, #0
 800d368:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <validateSubscribeUnsubscribeParams+0x1e>
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d102      	bne.n	800d37c <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800d376:	2301      	movs	r3, #1
 800d378:	75fb      	strb	r3, [r7, #23]
 800d37a:	e020      	b.n	800d3be <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d102      	bne.n	800d388 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800d382:	2301      	movs	r3, #1
 800d384:	75fb      	strb	r3, [r7, #23]
 800d386:	e01a      	b.n	800d3be <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800d388:	887b      	ldrh	r3, [r7, #2]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d102      	bne.n	800d394 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800d38e:	2301      	movs	r3, #1
 800d390:	75fb      	strb	r3, [r7, #23]
 800d392:	e014      	b.n	800d3be <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d110      	bne.n	800d3be <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
 800d3a0:	e009      	b.n	800d3b6 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	75fb      	strb	r3, [r7, #23]
                    break;
 800d3ae:	e006      	b.n	800d3be <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	613b      	str	r3, [r7, #16]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d3f1      	bcc.n	800d3a2 <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	603b      	str	r3, [r7, #0]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800d3ec:	88fb      	ldrh	r3, [r7, #6]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bf0c      	ite	eq
 800d3f2:	2301      	moveq	r3, #1
 800d3f4:	2300      	movne	r3, #0
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	bf14      	ite	ne
 800d3fe:	2301      	movne	r3, #1
 800d400:	2300      	moveq	r3, #0
 800d402:	b2db      	uxtb	r3, r3
 800d404:	4053      	eors	r3, r2
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d106      	bne.n	800d41a <addEncodedStringToVector+0x4e>
 800d40c:	4b1e      	ldr	r3, [pc, #120]	; (800d488 <addEncodedStringToVector+0xbc>)
 800d40e:	4a1f      	ldr	r2, [pc, #124]	; (800d48c <addEncodedStringToVector+0xc0>)
 800d410:	f240 7139 	movw	r1, #1849	; 0x739
 800d414:	481e      	ldr	r0, [pc, #120]	; (800d490 <addEncodedStringToVector+0xc4>)
 800d416:	f006 f881 	bl	801351c <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800d41a:	88fb      	ldrh	r3, [r7, #6]
 800d41c:	0a1b      	lsrs	r3, r3, #8
 800d41e:	b29b      	uxth	r3, r3
 800d420:	b2da      	uxtb	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3301      	adds	r3, #1
 800d42a:	88fa      	ldrh	r2, [r7, #6]
 800d42c:	b2d2      	uxtb	r2, r2
 800d42e:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	3301      	adds	r3, #1
 800d440:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d011      	beq.n	800d470 <addEncodedStringToVector+0xa4>
 800d44c:	88fb      	ldrh	r3, [r7, #6]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00e      	beq.n	800d470 <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	3308      	adds	r3, #8
 800d456:	68ba      	ldr	r2, [r7, #8]
 800d458:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	3308      	adds	r3, #8
 800d45e:	88fa      	ldrh	r2, [r7, #6]
 800d460:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	3301      	adds	r3, #1
 800d466:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800d468:	88fb      	ldrh	r3, [r7, #6]
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	4413      	add	r3, r2
 800d46e:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	441a      	add	r2, r3
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800d47c:	69bb      	ldr	r3, [r7, #24]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3720      	adds	r7, #32
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	080178f4 	.word	0x080178f4
 800d48c:	08018334 	.word	0x08018334
 800d490:	08017610 	.word	0x08017610

0800d494 <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b09c      	sub	sp, #112	; 0x70
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800d4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d906      	bls.n	800d4cc <sendSubscribeWithoutCopy+0x38>
 800d4be:	4b4f      	ldr	r3, [pc, #316]	; (800d5fc <sendSubscribeWithoutCopy+0x168>)
 800d4c0:	4a4f      	ldr	r2, [pc, #316]	; (800d600 <sendSubscribeWithoutCopy+0x16c>)
 800d4c2:	f240 716c 	movw	r1, #1900	; 0x76c
 800d4c6:	484f      	ldr	r0, [pc, #316]	; (800d604 <sendSubscribeWithoutCopy+0x170>)
 800d4c8:	f006 f828 	bl	801351c <__assert_func>

    pIndex = subscribeheader;
 800d4cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800d4d2:	f107 0320 	add.w	r3, r7, #32
 800d4d6:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800d4d8:	887b      	ldrh	r3, [r7, #2]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d4de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d4e0:	f001 fc62 	bl	800eda8 <MQTT_SerializeSubscribeHeader>
 800d4e4:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800d4e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d4ec:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800d4ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4fa:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800d4fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	4413      	add	r3, r2
 800d504:	617b      	str	r3, [r7, #20]
    pIterator++;
 800d506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d508:	3308      	adds	r3, #8
 800d50a:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800d50c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d50e:	3301      	adds	r3, #1
 800d510:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800d512:	e065      	b.n	800d5e0 <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800d518:	e043      	b.n	800d5a2 <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800d51a:	f107 0218 	add.w	r2, r7, #24
 800d51e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800d524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d526:	4613      	mov	r3, r2
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	4413      	add	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	461a      	mov	r2, r3
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800d534:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800d536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d538:	4613      	mov	r3, r2
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	4413      	add	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	461a      	mov	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800d546:	891a      	ldrh	r2, [r3, #8]
 800d548:	f107 0314 	add.w	r3, r7, #20
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d550:	f7ff ff3c 	bl	800d3cc <addEncodedStringToVector>
 800d554:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800d556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d55c:	4413      	add	r3, r2
 800d55e:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800d560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d562:	4613      	mov	r3, r2
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	4413      	add	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	461a      	mov	r2, r3
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	4413      	add	r3, r2
 800d570:	461a      	mov	r2, r3
 800d572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d574:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800d576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d578:	2201      	movs	r2, #1
 800d57a:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800d57c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	4413      	add	r3, r2
 800d584:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800d586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d588:	3308      	adds	r3, #8
 800d58a:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800d58c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d58e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d590:	4413      	add	r3, r2
 800d592:	3301      	adds	r3, #1
 800d594:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800d596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d598:	3301      	adds	r3, #1
 800d59a:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800d59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d59e:	3301      	adds	r3, #1
 800d5a0:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800d5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a4:	f1c3 0304 	rsb	r3, r3, #4
 800d5a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d803      	bhi.n	800d5b6 <sendSubscribeWithoutCopy+0x122>
 800d5ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d3b1      	bcc.n	800d51a <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800d5b6:	f107 0320 	add.w	r3, r7, #32
 800d5ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5bc:	4619      	mov	r1, r3
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7fe ff3a 	bl	800c438 <sendMessageVector>
 800d5c4:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800d5c6:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d002      	beq.n	800d5d2 <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800d5d2:	f107 0320 	add.w	r3, r7, #32
 800d5d6:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800d5e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d103      	bne.n	800d5f0 <sendSubscribeWithoutCopy+0x15c>
 800d5e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d391      	bcc.n	800d514 <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800d5f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3768      	adds	r7, #104	; 0x68
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	0801791c 	.word	0x0801791c
 800d600:	08018350 	.word	0x08018350
 800d604:	08017610 	.word	0x08017610

0800d608 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b092      	sub	sp, #72	; 0x48
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d616:	2300      	movs	r3, #0
 800d618:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800d61c:	2302      	movs	r3, #2
 800d61e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	891b      	ldrh	r3, [r3, #8]
 800d636:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	891b      	ldrh	r3, [r3, #8]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	4413      	add	r3, r2
 800d642:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800d644:	2302      	movs	r3, #2
 800d646:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d021      	beq.n	800d694 <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800d650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d654:	0a1b      	lsrs	r3, r3, #8
 800d656:	b29b      	uxth	r3, r3
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800d65e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800d668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	3348      	adds	r3, #72	; 0x48
 800d66e:	443b      	add	r3, r7
 800d670:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d674:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800d678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	3348      	adds	r3, #72	; 0x48
 800d67e:	443b      	add	r3, r7
 800d680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d682:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800d686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d688:	3301      	adds	r3, #1
 800d68a:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800d68c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d690:	4413      	add	r3, r2
 800d692:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d017      	beq.n	800d6cc <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	68da      	ldr	r2, [r3, #12]
 800d6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	3348      	adds	r3, #72	; 0x48
 800d6a6:	443b      	add	r3, r7
 800d6a8:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	691a      	ldr	r2, [r3, #16]
 800d6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	3348      	adds	r3, #72	; 0x48
 800d6b6:	443b      	add	r3, r7
 800d6b8:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800d6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6be:	3301      	adds	r3, #1
 800d6c0:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6c8:	4413      	add	r3, r2
 800d6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800d6cc:	f107 0314 	add.w	r3, r7, #20
 800d6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f7fe feaf 	bl	800c438 <sendMessageVector>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d002      	beq.n	800d6e8 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800d6e2:	2303      	movs	r3, #3
 800d6e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800d6e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3748      	adds	r7, #72	; 0x48
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b0ac      	sub	sp, #176	; 0xb0
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d702:	2300      	movs	r3, #0
 800d704:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800d708:	2300      	movs	r3, #0
 800d70a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800d70e:	2300      	movs	r3, #0
 800d710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800d714:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800d71c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d007      	beq.n	800d73a <sendConnectWithoutCopy+0x46>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d103      	bne.n	800d73a <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800d732:	2301      	movs	r3, #1
 800d734:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800d738:	e0ec      	b.n	800d914 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d744:	f001 fa22 	bl	800eb8c <MQTT_SerializeConnectFixedHeader>
 800d748:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800d74c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d750:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	2b0f      	cmp	r3, #15
 800d758:	dd06      	ble.n	800d768 <sendConnectWithoutCopy+0x74>
 800d75a:	4b71      	ldr	r3, [pc, #452]	; (800d920 <sendConnectWithoutCopy+0x22c>)
 800d75c:	4a71      	ldr	r2, [pc, #452]	; (800d924 <sendConnectWithoutCopy+0x230>)
 800d75e:	f640 0172 	movw	r1, #2162	; 0x872
 800d762:	4871      	ldr	r0, [pc, #452]	; (800d928 <sendConnectWithoutCopy+0x234>)
 800d764:	f005 feda 	bl	801351c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800d768:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d76c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800d770:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800d772:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d776:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	461a      	mov	r2, r3
 800d77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d782:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800d784:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d78e:	4413      	add	r3, r2
 800d790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800d794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d798:	3308      	adds	r3, #8
 800d79a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800d79e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	6859      	ldr	r1, [r3, #4]
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	891a      	ldrh	r2, [r3, #8]
 800d7b0:	f107 0020 	add.w	r0, r7, #32
 800d7b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7be:	f7ff fe05 	bl	800d3cc <addEncodedStringToVector>
 800d7c2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800d7c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800d7d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d7da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7de:	4413      	add	r3, r2
 800d7e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d03c      	beq.n	800d864 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6859      	ldr	r1, [r3, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	891a      	ldrh	r2, [r3, #8]
 800d7f2:	f107 001c 	add.w	r0, r7, #28
 800d7f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d800:	f7ff fde4 	bl	800d3cc <addEncodedStringToVector>
 800d804:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d812:	4413      	add	r3, r2
 800d814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d818:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d81c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d820:	4413      	add	r3, r2
 800d822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800d82e:	b29a      	uxth	r2, r3
 800d830:	f107 0018 	add.w	r0, r7, #24
 800d834:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d83e:	f7ff fdc5 	bl	800d3cc <addEncodedStringToVector>
 800d842:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d84a:	00db      	lsls	r3, r3, #3
 800d84c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d850:	4413      	add	r3, r2
 800d852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d856:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d85a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d85e:	4413      	add	r3, r2
 800d860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01d      	beq.n	800d8a8 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	68d9      	ldr	r1, [r3, #12]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	8a1a      	ldrh	r2, [r3, #16]
 800d874:	f107 0014 	add.w	r0, r7, #20
 800d878:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d882:	f7ff fda3 	bl	800d3cc <addEncodedStringToVector>
 800d886:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d88a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d894:	4413      	add	r3, r2
 800d896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d89a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d89e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01d      	beq.n	800d8ec <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6959      	ldr	r1, [r3, #20]
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	8b1a      	ldrh	r2, [r3, #24]
 800d8b8:	f107 0010 	add.w	r0, r7, #16
 800d8bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8c6:	f7ff fd81 	bl	800d3cc <addEncodedStringToVector>
 800d8ca:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800d8ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d8d8:	4413      	add	r3, r2
 800d8da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800d8de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d8e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800d8ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7fe fd9e 	bl	800c438 <sendMessageVector>
 800d8fc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800d900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d904:	461a      	mov	r2, r3
 800d906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d002      	beq.n	800d914 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800d90e:	2303      	movs	r3, #3
 800d910:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800d914:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800d918:	4618      	mov	r0, r3
 800d91a:	37a8      	adds	r7, #168	; 0xa8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	08017994 	.word	0x08017994
 800d924:	0801836c 	.word	0x0801836c
 800d928:	08017610 	.word	0x08017610

0800d92c <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08c      	sub	sp, #48	; 0x30
 800d930:	af02      	add	r7, sp, #8
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	4613      	mov	r3, r2
 800d93a:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d93c:	2300      	movs	r3, #0
 800d93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800d942:	2300      	movs	r3, #0
 800d944:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]
 800d94a:	2300      	movs	r3, #0
 800d94c:	623b      	str	r3, [r7, #32]
 800d94e:	2300      	movs	r3, #0
 800d950:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800d952:	2300      	movs	r3, #0
 800d954:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d106      	bne.n	800d96e <receiveConnack+0x42>
 800d960:	4b4e      	ldr	r3, [pc, #312]	; (800da9c <receiveConnack+0x170>)
 800d962:	4a4f      	ldr	r2, [pc, #316]	; (800daa0 <receiveConnack+0x174>)
 800d964:	f640 01da 	movw	r1, #2266	; 0x8da
 800d968:	484e      	ldr	r0, [pc, #312]	; (800daa4 <receiveConnack+0x178>)
 800d96a:	f005 fdd7 	bl	801351c <__assert_func>
    assert( pIncomingPacket != NULL );
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <receiveConnack+0x56>
 800d974:	4b4c      	ldr	r3, [pc, #304]	; (800daa8 <receiveConnack+0x17c>)
 800d976:	4a4a      	ldr	r2, [pc, #296]	; (800daa0 <receiveConnack+0x174>)
 800d978:	f640 01db 	movw	r1, #2267	; 0x8db
 800d97c:	4849      	ldr	r0, [pc, #292]	; (800daa4 <receiveConnack+0x178>)
 800d97e:	f005 fdcd 	bl	801351c <__assert_func>
    assert( pContext->getTime != NULL );
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <receiveConnack+0x6c>
 800d98a:	4b48      	ldr	r3, [pc, #288]	; (800daac <receiveConnack+0x180>)
 800d98c:	4a44      	ldr	r2, [pc, #272]	; (800daa0 <receiveConnack+0x174>)
 800d98e:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800d992:	4844      	ldr	r0, [pc, #272]	; (800daa4 <receiveConnack+0x178>)
 800d994:	f005 fdc2 	bl	801351c <__assert_func>

    getTimeStamp = pContext->getTime;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	4798      	blx	r3
 800d9a2:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6918      	ldr	r0, [r3, #16]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f001 fb8c 	bl	800f0cc <MQTT_GetIncomingPacketTypeAndLength>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00e      	beq.n	800d9de <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	4798      	blx	r3
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	6979      	ldr	r1, [r7, #20]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fe fea9 	bl	800c720 <calculateElapsedTime>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	bf94      	ite	ls
 800d9d6:	2301      	movls	r3, #1
 800d9d8:	2300      	movhi	r3, #0
 800d9da:	77fb      	strb	r3, [r7, #31]
 800d9dc:	e008      	b.n	800d9f0 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800d9de:	8bbb      	ldrh	r3, [r7, #28]
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	bf8c      	ite	hi
 800d9e4:	2301      	movhi	r3, #1
 800d9e6:	2300      	movls	r3, #0
 800d9e8:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800d9ea:	8bbb      	ldrh	r3, [r7, #28]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800d9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f4:	2b07      	cmp	r3, #7
 800d9f6:	d105      	bne.n	800da04 <receiveConnack+0xd8>
 800d9f8:	7ffb      	ldrb	r3, [r7, #31]
 800d9fa:	f083 0301 	eor.w	r3, r3, #1
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1cf      	bne.n	800d9a4 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800da04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d123      	bne.n	800da54 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	4798      	blx	r3
 800da10:	4603      	mov	r3, r0
 800da12:	6979      	ldr	r1, [r7, #20]
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fe83 	bl	800c720 <calculateElapsedTime>
 800da1a:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	429a      	cmp	r2, r3
 800da22:	d203      	bcs.n	800da2c <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b20      	cmp	r3, #32
 800da32:	d10c      	bne.n	800da4e <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	6a3a      	ldr	r2, [r7, #32]
 800da38:	9201      	str	r2, [sp, #4]
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	9200      	str	r2, [sp, #0]
 800da3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff f869 	bl	800cb18 <receivePacket>
 800da46:	4603      	mov	r3, r0
 800da48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da4c:	e002      	b.n	800da54 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800da4e:	2305      	movs	r3, #5
 800da50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800da54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10b      	bne.n	800da74 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6a1a      	ldr	r2, [r3, #32]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800da64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da66:	2100      	movs	r1, #0
 800da68:	6838      	ldr	r0, [r7, #0]
 800da6a:	f001 fabc 	bl	800efe6 <MQTT_DeserializeAck>
 800da6e:	4603      	mov	r3, r0
 800da70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800da74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d109      	bne.n	800da90 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800da7c:	79fb      	ldrb	r3, [r7, #7]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d006      	beq.n	800da90 <receiveConnack+0x164>
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800da8a:	2305      	movs	r3, #5
 800da8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800da90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da94:	4618      	mov	r0, r3
 800da96:	3728      	adds	r7, #40	; 0x28
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	080176ec 	.word	0x080176ec
 800daa0:	08018384 	.word	0x08018384
 800daa4:	08017610 	.word	0x08017610
 800daa8:	080178bc 	.word	0x080178bc
 800daac:	08017710 	.word	0x08017710

0800dab0 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800dabc:	2300      	movs	r3, #0
 800dabe:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800dac0:	2300      	movs	r3, #0
 800dac2:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800dac4:	2300      	movs	r3, #0
 800dac6:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <handleSessionResumption+0x30>
 800dad2:	4b2c      	ldr	r3, [pc, #176]	; (800db84 <handleSessionResumption+0xd4>)
 800dad4:	4a2c      	ldr	r2, [pc, #176]	; (800db88 <handleSessionResumption+0xd8>)
 800dad6:	f640 1152 	movw	r1, #2386	; 0x952
 800dada:	482c      	ldr	r0, [pc, #176]	; (800db8c <handleSessionResumption+0xdc>)
 800dadc:	f005 fd1e 	bl	801351c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a18      	ldr	r0, [r3, #32]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	461a      	mov	r2, r3
 800daf0:	2100      	movs	r1, #0
 800daf2:	f005 fe9e 	bl	8013832 <memset>

    if( sessionPresent == true )
 800daf6:	78fb      	ldrb	r3, [r7, #3]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d023      	beq.n	800db44 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800dafc:	f107 020f 	add.w	r2, r7, #15
 800db00:	f107 0310 	add.w	r3, r7, #16
 800db04:	4619      	mov	r1, r3
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f002 f8ed 	bl	800fce6 <MQTT_PubrelToResend>
 800db0c:	4603      	mov	r3, r0
 800db0e:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800db10:	e011      	b.n	800db36 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800db12:	7bfa      	ldrb	r2, [r7, #15]
 800db14:	8abb      	ldrh	r3, [r7, #20]
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff f877 	bl	800cc0c <sendPublishAcks>
 800db1e:	4603      	mov	r3, r0
 800db20:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800db22:	f107 020f 	add.w	r2, r7, #15
 800db26:	f107 0310 	add.w	r3, r7, #16
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f002 f8da 	bl	800fce6 <MQTT_PubrelToResend>
 800db32:	4603      	mov	r3, r0
 800db34:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800db36:	8abb      	ldrh	r3, [r7, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d01d      	beq.n	800db78 <handleSessionResumption+0xc8>
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d0e7      	beq.n	800db12 <handleSessionResumption+0x62>
 800db42:	e019      	b.n	800db78 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d008      	beq.n	800db5e <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	461a      	mov	r2, r3
 800db58:	2100      	movs	r1, #0
 800db5a:	f005 fe6a 	bl	8013832 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d008      	beq.n	800db78 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	461a      	mov	r2, r3
 800db72:	2100      	movs	r1, #0
 800db74:	f005 fe5d 	bl	8013832 <memset>
        }
    }

    return status;
 800db78:	7dfb      	ldrb	r3, [r7, #23]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	080176ec 	.word	0x080176ec
 800db88:	08018394 	.word	0x08018394
 800db8c:	08017610 	.word	0x08017610

0800db90 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <validatePublishParams+0x1e>
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d102      	bne.n	800dbb4 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	75fb      	strb	r3, [r7, #23]
 800dbb2:	e01e      	b.n	800dbf2 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d005      	beq.n	800dbc8 <validatePublishParams+0x38>
 800dbbc:	88fb      	ldrh	r3, [r7, #6]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	75fb      	strb	r3, [r7, #23]
 800dbc6:	e014      	b.n	800dbf2 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d006      	beq.n	800dbde <validatePublishParams+0x4e>
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d102      	bne.n	800dbde <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	75fb      	strb	r3, [r7, #23]
 800dbdc:	e009      	b.n	800dbf2 <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d105      	bne.n	800dbf2 <validatePublishParams+0x62>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	371c      	adds	r7, #28
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <MQTT_Init+0x24>
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <MQTT_Init+0x24>
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800dc24:	2301      	movs	r3, #1
 800dc26:	75fb      	strb	r3, [r7, #23]
 800dc28:	e03a      	b.n	800dca0 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d102      	bne.n	800dc36 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800dc30:	2301      	movs	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
 800dc34:	e034      	b.n	800dca0 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d102      	bne.n	800dc42 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	75fb      	strb	r3, [r7, #23]
 800dc40:	e02e      	b.n	800dca0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d102      	bne.n	800dc50 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	75fb      	strb	r3, [r7, #23]
 800dc4e:	e027      	b.n	800dca0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	75fb      	strb	r3, [r7, #23]
 800dc5c:	e020      	b.n	800dca0 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800dc5e:	2250      	movs	r2, #80	; 0x50
 800dc60:	2100      	movs	r1, #0
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f005 fde5 	bl	8013832 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	f103 0410 	add.w	r4, r3, #16
 800dc78:	4613      	mov	r3, r2
 800dc7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc90:	3320      	adds	r3, #32
 800dc92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc96:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	371c      	adds	r7, #28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd90      	pop	{r4, r7, pc}

0800dcaa <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b08e      	sub	sp, #56	; 0x38
 800dcae:	af02      	add	r7, sp, #8
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800dcc6:	f107 0314 	add.w	r3, r7, #20
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
 800dcce:	605a      	str	r2, [r3, #4]
 800dcd0:	609a      	str	r2, [r3, #8]
 800dcd2:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <MQTT_Connect+0x40>
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <MQTT_Connect+0x40>
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d102      	bne.n	800dcf0 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800dcea:	2301      	movs	r3, #1
 800dcec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800dcf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800dcf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcfc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	68b8      	ldr	r0, [r7, #8]
 800dd04:	f000 ffba 	bl	800ec7c <MQTT_GetConnectPacketSize>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800dd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d108      	bne.n	800dd28 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	68b9      	ldr	r1, [r7, #8]
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff fce9 	bl	800d6f4 <sendConnectWithoutCopy>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800dd28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10d      	bne.n	800dd4c <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	781a      	ldrb	r2, [r3, #0]
 800dd34:	f107 0114 	add.w	r1, r7, #20
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff fdf3 	bl	800d92c <receiveConnack>
 800dd46:	4603      	mov	r3, r0
 800dd48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800dd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d108      	bne.n	800dd66 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fea8 	bl	800dab0 <handleSessionResumption>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10f      	bne.n	800dd8e <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	885a      	ldrh	r2, [r3, #2]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800dd8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3730      	adds	r7, #48	; 0x30
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b08a      	sub	sp, #40	; 0x28
 800dd9e:	af02      	add	r7, sp, #8
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	607a      	str	r2, [r7, #4]
 800dda6:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61bb      	str	r3, [r7, #24]
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800ddb0:	887b      	ldrh	r3, [r7, #2]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff face 	bl	800d358 <validateSubscribeUnsubscribeParams>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800ddc0:	7ffb      	ldrb	r3, [r7, #31]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800ddc6:	f107 0314 	add.w	r3, r7, #20
 800ddca:	f107 0218 	add.w	r2, r7, #24
 800ddce:	6879      	ldr	r1, [r7, #4]
 800ddd0:	68b8      	ldr	r0, [r7, #8]
 800ddd2:	f000 ffbf 	bl	800ed54 <MQTT_GetSubscribePacketSize>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800ddda:	7ffb      	ldrb	r3, [r7, #31]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	887a      	ldrh	r2, [r7, #2]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	4613      	mov	r3, r2
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7ff fb51 	bl	800d494 <sendSubscribeWithoutCopy>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800ddf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b08c      	sub	sp, #48	; 0x30
 800de04:	af02      	add	r7, sp, #8
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800de0e:	2300      	movs	r3, #0
 800de10:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800de12:	2300      	movs	r3, #0
 800de14:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800de16:	2300      	movs	r3, #0
 800de18:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800de1a:	2300      	movs	r3, #0
 800de1c:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800de24:	88fb      	ldrh	r3, [r7, #6]
 800de26:	461a      	mov	r2, r3
 800de28:	68b9      	ldr	r1, [r7, #8]
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f7ff feb0 	bl	800db90 <validatePublishParams>
 800de30:	4603      	mov	r3, r0
 800de32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800de36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10a      	bne.n	800de54 <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800de3e:	f107 0218 	add.w	r2, r7, #24
 800de42:	f107 031c 	add.w	r3, r7, #28
 800de46:	4619      	mov	r1, r3
 800de48:	68b8      	ldr	r0, [r7, #8]
 800de4a:	f000 ffd4 	bl	800edf6 <MQTT_GetPublishPacketSize>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800de54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800de5c:	69f9      	ldr	r1, [r7, #28]
 800de5e:	f107 0320 	add.w	r3, r7, #32
 800de62:	f107 0210 	add.w	r2, r7, #16
 800de66:	68b8      	ldr	r0, [r7, #8]
 800de68:	f000 f9ec 	bl	800e244 <MQTT_SerializePublishHeaderWithoutTopic>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800de72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de76:	2b00      	cmp	r3, #0
 800de78:	d11b      	bne.n	800deb2 <MQTT_Publish+0xb2>
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d017      	beq.n	800deb2 <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800de82:	2301      	movs	r3, #1
 800de84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	781a      	ldrb	r2, [r3, #0]
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	4619      	mov	r1, r3
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f001 fde1 	bl	800fa58 <MQTT_ReserveState>
 800de96:	4603      	mov	r3, r0
 800de98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800de9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dea0:	2b09      	cmp	r3, #9
 800dea2:	d106      	bne.n	800deb2 <MQTT_Publish+0xb2>
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	789b      	ldrb	r3, [r3, #2]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800deac:	2300      	movs	r3, #0
 800deae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800deb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10c      	bne.n	800ded4 <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800deba:	6a39      	ldr	r1, [r7, #32]
 800debc:	f107 0210 	add.w	r2, r7, #16
 800dec0:	88fb      	ldrh	r3, [r7, #6]
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	460b      	mov	r3, r1
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fb9d 	bl	800d608 <sendPublishWithoutCopy>
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800ded4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d111      	bne.n	800df00 <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00d      	beq.n	800df00 <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	781a      	ldrb	r2, [r3, #0]
 800dee8:	88f9      	ldrh	r1, [r7, #6]
 800deea:	f107 0317 	add.w	r3, r7, #23
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	4613      	mov	r3, r2
 800def2:	2200      	movs	r2, #0
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f001 fe08 	bl	800fb0a <MQTT_UpdateStatePublish>
 800defa:	4603      	mov	r3, r0
 800defc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800df00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df04:	4618      	mov	r0, r3
 800df06:	3728      	adds	r7, #40	; 0x28
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800df18:	2300      	movs	r3, #0
 800df1a:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800df20:	f107 0310 	add.w	r3, r7, #16
 800df24:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800df26:	2302      	movs	r3, #2
 800df28:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800df30:	2301      	movs	r3, #1
 800df32:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800df34:	7ffb      	ldrb	r3, [r7, #31]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800df3a:	f107 0314 	add.w	r3, r7, #20
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 ffdd 	bl	800eefe <MQTT_GetPingreqPacketSize>
 800df44:	4603      	mov	r3, r0
 800df46:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800df48:	7ffb      	ldrb	r3, [r7, #31]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800df4e:	f107 0308 	add.w	r3, r7, #8
 800df52:	4618      	mov	r0, r3
 800df54:	f000 ffe9 	bl	800ef2a <MQTT_SerializePingreq>
 800df58:	4603      	mov	r3, r0
 800df5a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800df5c:	7ffb      	ldrb	r3, [r7, #31]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d116      	bne.n	800df90 <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800df62:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800df64:	2202      	movs	r2, #2
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7fe fb4b 	bl	800c604 <sendBuffer>
 800df6e:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	461a      	mov	r2, r3
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	4293      	cmp	r3, r2
 800df78:	da02      	bge.n	800df80 <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800df7a:	2303      	movs	r3, #3
 800df7c:	77fb      	strb	r3, [r7, #31]
 800df7e:	e007      	b.n	800df90 <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800df90:	7ffb      	ldrb	r3, [r7, #31]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3720      	adds	r7, #32
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b084      	sub	sp, #16
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d011      	beq.n	800dfd0 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00d      	beq.n	800dfd0 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a1b      	ldr	r3, [r3, #32]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff f8da 	bl	800d180 <receiveSingleIteration>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b085      	sub	sp, #20
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d012      	beq.n	800e012 <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dff0:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d103      	bne.n	800e006 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	851a      	strh	r2, [r3, #40]	; 0x28
 800e004:	e005      	b.n	800e012 <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e00a:	3301      	adds	r3, #1
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800e012:	89fb      	ldrh	r3, [r7, #14]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b7f      	cmp	r3, #127	; 0x7f
 800e02c:	d802      	bhi.n	800e034 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800e02e:	2301      	movs	r3, #1
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	e00f      	b.n	800e054 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e03a:	d202      	bcs.n	800e042 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800e03c:	2302      	movs	r3, #2
 800e03e:	60fb      	str	r3, [r7, #12]
 800e040:	e008      	b.n	800e054 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e048:	d202      	bcs.n	800e050 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800e04a:	2303      	movs	r3, #3
 800e04c:	60fb      	str	r3, [r7, #12]
 800e04e:	e001      	b.n	800e054 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800e050:	2304      	movs	r3, #4
 800e052:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800e054:	68fb      	ldr	r3, [r7, #12]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
	...

0800e064 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <encodeRemainingLength+0x26>
 800e07c:	4b12      	ldr	r3, [pc, #72]	; (800e0c8 <encodeRemainingLength+0x64>)
 800e07e:	4a13      	ldr	r2, [pc, #76]	; (800e0cc <encodeRemainingLength+0x68>)
 800e080:	f240 11f1 	movw	r1, #497	; 0x1f1
 800e084:	4812      	ldr	r0, [pc, #72]	; (800e0d0 <encodeRemainingLength+0x6c>)
 800e086:	f005 fa49 	bl	801351c <__assert_func>

    pLengthEnd = pDestination;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e096:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	09db      	lsrs	r3, r3, #7
 800e09c:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d003      	beq.n	800e0ac <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0aa:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	7dfa      	ldrb	r2, [r7, #23]
 800e0b0:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1e7      	bne.n	800e08e <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800e0be:	693b      	ldr	r3, [r7, #16]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	08017b94 	.word	0x08017b94
 800e0cc:	080183ac 	.word	0x080183ac
 800e0d0:	08017bac 	.word	0x08017bac

0800e0d4 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d106      	bne.n	800e0fe <encodeString+0x2a>
 800e0f0:	4b15      	ldr	r3, [pc, #84]	; (800e148 <encodeString+0x74>)
 800e0f2:	4a16      	ldr	r2, [pc, #88]	; (800e14c <encodeString+0x78>)
 800e0f4:	f240 2115 	movw	r1, #533	; 0x215
 800e0f8:	4815      	ldr	r0, [pc, #84]	; (800e150 <encodeString+0x7c>)
 800e0fa:	f005 fa0f 	bl	801351c <__assert_func>

    pBuffer = pDestination;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800e102:	88fb      	ldrh	r3, [r7, #6]
 800e104:	0a1b      	lsrs	r3, r3, #8
 800e106:	b29b      	uxth	r3, r3
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	3301      	adds	r3, #1
 800e112:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	b2da      	uxtb	r2, r3
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	3301      	adds	r3, #1
 800e120:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	461a      	mov	r2, r3
 800e12c:	6939      	ldr	r1, [r7, #16]
 800e12e:	6978      	ldr	r0, [r7, #20]
 800e130:	f005 fb57 	bl	80137e2 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800e134:	88fb      	ldrh	r3, [r7, #6]
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	4413      	add	r3, r2
 800e13a:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800e13c:	697b      	ldr	r3, [r7, #20]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3718      	adds	r7, #24
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	08017b94 	.word	0x08017b94
 800e14c:	080183c4 	.word	0x080183c4
 800e150:	08017bac 	.word	0x08017bac

0800e154 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
    bool status = true;
 800e160:	2301      	movs	r3, #1
 800e162:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800e164:	2300      	movs	r3, #0
 800e166:	61bb      	str	r3, [r7, #24]
 800e168:	2300      	movs	r3, #0
 800e16a:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <calculatePublishPacketSize+0x2c>
 800e172:	4b2e      	ldr	r3, [pc, #184]	; (800e22c <calculatePublishPacketSize+0xd8>)
 800e174:	4a2e      	ldr	r2, [pc, #184]	; (800e230 <calculatePublishPacketSize+0xdc>)
 800e176:	f240 2136 	movw	r1, #566	; 0x236
 800e17a:	482e      	ldr	r0, [pc, #184]	; (800e234 <calculatePublishPacketSize+0xe0>)
 800e17c:	f005 f9ce 	bl	801351c <__assert_func>
    assert( pRemainingLength != NULL );
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d106      	bne.n	800e194 <calculatePublishPacketSize+0x40>
 800e186:	4b2c      	ldr	r3, [pc, #176]	; (800e238 <calculatePublishPacketSize+0xe4>)
 800e188:	4a29      	ldr	r2, [pc, #164]	; (800e230 <calculatePublishPacketSize+0xdc>)
 800e18a:	f240 2137 	movw	r1, #567	; 0x237
 800e18e:	4829      	ldr	r0, [pc, #164]	; (800e234 <calculatePublishPacketSize+0xe0>)
 800e190:	f005 f9c4 	bl	801351c <__assert_func>
    assert( pPacketSize != NULL );
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <calculatePublishPacketSize+0x54>
 800e19a:	4b28      	ldr	r3, [pc, #160]	; (800e23c <calculatePublishPacketSize+0xe8>)
 800e19c:	4a24      	ldr	r2, [pc, #144]	; (800e230 <calculatePublishPacketSize+0xdc>)
 800e19e:	f44f 710e 	mov.w	r1, #568	; 0x238
 800e1a2:	4824      	ldr	r0, [pc, #144]	; (800e234 <calculatePublishPacketSize+0xe0>)
 800e1a4:	f005 f9ba 	bl	801351c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	891b      	ldrh	r3, [r3, #8]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	3302      	adds	r3, #2
 800e1b4:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	3302      	adds	r3, #2
 800e1c2:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800e1c4:	69ba      	ldr	r2, [r7, #24]
 800e1c6:	4b1e      	ldr	r3, [pc, #120]	; (800e240 <calculatePublishPacketSize+0xec>)
 800e1c8:	1a9b      	subs	r3, r3, r2
 800e1ca:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	697a      	ldr	r2, [r7, #20]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d202      	bcs.n	800e1dc <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	77fb      	strb	r3, [r7, #31]
 800e1da:	e021      	b.n	800e220 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	69ba      	ldr	r2, [r7, #24]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800e1e6:	69b8      	ldr	r0, [r7, #24]
 800e1e8:	f7ff ff1a 	bl	800e020 <remainingLengthEncodedSize>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	1a9b      	subs	r3, r3, r2
 800e1f2:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	697a      	ldr	r2, [r7, #20]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d202      	bcs.n	800e204 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800e1fe:	2300      	movs	r3, #0
 800e200:	77fb      	strb	r3, [r7, #31]
 800e202:	e00d      	b.n	800e220 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800e20a:	69b8      	ldr	r0, [r7, #24]
 800e20c:	f7ff ff08 	bl	800e020 <remainingLengthEncodedSize>
 800e210:	4603      	mov	r3, r0
 800e212:	3301      	adds	r3, #1
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	4413      	add	r3, r2
 800e218:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800e220:	7ffb      	ldrb	r3, [r7, #31]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3720      	adds	r7, #32
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	08017be0 	.word	0x08017be0
 800e230:	080183d4 	.word	0x080183d4
 800e234:	08017bac 	.word	0x08017bac
 800e238:	08017bf8 	.word	0x08017bf8
 800e23c:	08017c14 	.word	0x08017c14
 800e240:	0ffffffe 	.word	0x0ffffffe

0800e244 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800e252:	2300      	movs	r3, #0
 800e254:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800e256:	2330      	movs	r3, #48	; 0x30
 800e258:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800e25e:	68b8      	ldr	r0, [r7, #8]
 800e260:	f7ff fede 	bl	800e020 <remainingLengthEncodedSize>
 800e264:	4603      	mov	r3, r0
 800e266:	3303      	adds	r3, #3
 800e268:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d104      	bne.n	800e27c <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800e272:	7ffb      	ldrb	r3, [r7, #31]
 800e274:	f043 0302 	orr.w	r3, r3, #2
 800e278:	77fb      	strb	r3, [r7, #31]
 800e27a:	e007      	b.n	800e28c <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b02      	cmp	r3, #2
 800e282:	d103      	bne.n	800e28c <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800e284:	7ffb      	ldrb	r3, [r7, #31]
 800e286:	f043 0304 	orr.w	r3, r3, #4
 800e28a:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	785b      	ldrb	r3, [r3, #1]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800e294:	7ffb      	ldrb	r3, [r7, #31]
 800e296:	f043 0301 	orr.w	r3, r3, #1
 800e29a:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	789b      	ldrb	r3, [r3, #2]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800e2a4:	7ffb      	ldrb	r3, [r7, #31]
 800e2a6:	f043 0308 	orr.w	r3, r3, #8
 800e2aa:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	7ffa      	ldrb	r2, [r7, #31]
 800e2b0:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	69b8      	ldr	r0, [r7, #24]
 800e2bc:	f7ff fed2 	bl	800e064 <encodeRemainingLength>
 800e2c0:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	891b      	ldrh	r3, [r3, #8]
 800e2c6:	0a1b      	lsrs	r3, r3, #8
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	891b      	ldrh	r3, [r3, #8]
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	601a      	str	r2, [r3, #0]

    return status;
 800e2ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b088      	sub	sp, #32
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800e300:	2300      	movs	r3, #0
 800e302:	61fb      	str	r3, [r7, #28]
 800e304:	2301      	movs	r3, #1
 800e306:	61bb      	str	r3, [r7, #24]
 800e308:	2300      	movs	r3, #0
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	2300      	movs	r3, #0
 800e30e:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e31e:	d903      	bls.n	800e328 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e324:	61fb      	str	r3, [r7, #28]
 800e326:	e01c      	b.n	800e362 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800e328:	f107 010b 	add.w	r1, r7, #11
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	6838      	ldr	r0, [r7, #0]
 800e332:	4798      	blx	r3
 800e334:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d10f      	bne.n	800e35c <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e342:	69ba      	ldr	r2, [r7, #24]
 800e344:	fb02 f303 	mul.w	r3, r2, r3
 800e348:	69fa      	ldr	r2, [r7, #28]
 800e34a:	4413      	add	r3, r2
 800e34c:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	01db      	lsls	r3, r3, #7
 800e352:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	3301      	adds	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
 800e35a:	e002      	b.n	800e362 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e35c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e360:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e368:	d004      	beq.n	800e374 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800e36a:	7afb      	ldrb	r3, [r7, #11]
 800e36c:	b25b      	sxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	dbd2      	blt.n	800e318 <getRemainingLength+0x22>
 800e372:	e000      	b.n	800e376 <getRemainingLength+0x80>
            break;
 800e374:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e37c:	d00a      	beq.n	800e394 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800e37e:	69f8      	ldr	r0, [r7, #28]
 800e380:	f7ff fe4e 	bl	800e020 <remainingLengthEncodedSize>
 800e384:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d002      	beq.n	800e394 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e38e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e392:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800e394:	69fb      	ldr	r3, [r7, #28]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b08a      	sub	sp, #40	; 0x28
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3c8:	d905      	bls.n	800e3d6 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e3ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3ce:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800e3d0:	2305      	movs	r3, #5
 800e3d2:	76bb      	strb	r3, [r7, #26]
 800e3d4:	e01d      	b.n	800e412 <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d915      	bls.n	800e40e <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800e3ee:	7efb      	ldrb	r3, [r7, #27]
 800e3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3f4:	6a3a      	ldr	r2, [r7, #32]
 800e3f6:	fb02 f303 	mul.w	r3, r2, r3
 800e3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fc:	4413      	add	r3, r2
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800e400:	6a3b      	ldr	r3, [r7, #32]
 800e402:	01db      	lsls	r3, r3, #7
 800e404:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	3301      	adds	r3, #1
 800e40a:	61fb      	str	r3, [r7, #28]
 800e40c:	e001      	b.n	800e412 <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800e40e:	230b      	movs	r3, #11
 800e410:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e418:	d006      	beq.n	800e428 <processRemainingLength+0x8a>
 800e41a:	7ebb      	ldrb	r3, [r7, #26]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d103      	bne.n	800e428 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800e420:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e424:	2b00      	cmp	r3, #0
 800e426:	dbcc      	blt.n	800e3c2 <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800e428:	7ebb      	ldrb	r3, [r7, #26]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d111      	bne.n	800e452 <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800e42e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e430:	f7ff fdf6 	bl	800e020 <remainingLengthEncodedSize>
 800e434:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800e436:	69fa      	ldr	r2, [r7, #28]
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d002      	beq.n	800e444 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800e43e:	2305      	movs	r3, #5
 800e440:	76bb      	strb	r3, [r7, #26]
 800e442:	e006      	b.n	800e452 <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e448:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800e452:	7ebb      	ldrb	r3, [r7, #26]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3728      	adds	r7, #40	; 0x28
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800e466:	2300      	movs	r3, #0
 800e468:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e470:	2bd0      	cmp	r3, #208	; 0xd0
 800e472:	d01d      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e474:	2bd0      	cmp	r3, #208	; 0xd0
 800e476:	d826      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e478:	2bb0      	cmp	r3, #176	; 0xb0
 800e47a:	d019      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e47c:	2bb0      	cmp	r3, #176	; 0xb0
 800e47e:	d822      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e480:	2b90      	cmp	r3, #144	; 0x90
 800e482:	d015      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e484:	2b90      	cmp	r3, #144	; 0x90
 800e486:	d81e      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e488:	2b70      	cmp	r3, #112	; 0x70
 800e48a:	d011      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e48c:	2b70      	cmp	r3, #112	; 0x70
 800e48e:	d81a      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e490:	2b60      	cmp	r3, #96	; 0x60
 800e492:	d010      	beq.n	800e4b6 <incomingPacketValid+0x5a>
 800e494:	2b60      	cmp	r3, #96	; 0x60
 800e496:	d816      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e498:	2b50      	cmp	r3, #80	; 0x50
 800e49a:	d009      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e49c:	2b50      	cmp	r3, #80	; 0x50
 800e49e:	d812      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e4a0:	2b40      	cmp	r3, #64	; 0x40
 800e4a2:	d005      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e4a4:	2b40      	cmp	r3, #64	; 0x40
 800e4a6:	d80e      	bhi.n	800e4c6 <incomingPacketValid+0x6a>
 800e4a8:	2b20      	cmp	r3, #32
 800e4aa:	d001      	beq.n	800e4b0 <incomingPacketValid+0x54>
 800e4ac:	2b30      	cmp	r3, #48	; 0x30
 800e4ae:	d10a      	bne.n	800e4c6 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	73fb      	strb	r3, [r7, #15]
            break;
 800e4b4:	e00a      	b.n	800e4cc <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	f003 0302 	and.w	r3, r3, #2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d004      	beq.n	800e4ca <incomingPacketValid+0x6e>
            {
                status = true;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800e4c4:	e001      	b.n	800e4ca <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800e4c6:	bf00      	nop
 800e4c8:	e000      	b.n	800e4cc <incomingPacketValid+0x70>
            break;
 800e4ca:	bf00      	nop
    }

    return status;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b087      	sub	sp, #28
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	60f8      	str	r0, [r7, #12]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	607a      	str	r2, [r7, #4]
 800e4e6:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d106      	bne.n	800e500 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d209      	bcs.n	800e50e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800e4fa:	2305      	movs	r3, #5
 800e4fc:	75fb      	strb	r3, [r7, #23]
 800e4fe:	e006      	b.n	800e50e <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3302      	adds	r3, #2
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	429a      	cmp	r2, r3
 800e508:	d201      	bcs.n	800e50e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800e50a:	2305      	movs	r3, #5
 800e50c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e510:	4618      	mov	r0, r3
 800e512:	371c      	adds	r7, #28
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	6039      	str	r1, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800e528:	2300      	movs	r3, #0
 800e52a:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <processPublishFlags+0x24>
 800e532:	4b20      	ldr	r3, [pc, #128]	; (800e5b4 <processPublishFlags+0x98>)
 800e534:	4a20      	ldr	r2, [pc, #128]	; (800e5b8 <processPublishFlags+0x9c>)
 800e536:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800e53a:	4820      	ldr	r0, [pc, #128]	; (800e5bc <processPublishFlags+0xa0>)
 800e53c:	f004 ffee 	bl	801351c <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	f003 0304 	and.w	r3, r3, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800e54a:	79fb      	ldrb	r3, [r7, #7]
 800e54c:	f003 0302 	and.w	r3, r3, #2
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800e554:	2305      	movs	r3, #5
 800e556:	73fb      	strb	r3, [r7, #15]
 800e558:	e00f      	b.n	800e57a <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2202      	movs	r2, #2
 800e55e:	701a      	strb	r2, [r3, #0]
 800e560:	e00b      	b.n	800e57a <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800e562:	79fb      	ldrb	r3, [r7, #7]
 800e564:	f003 0302 	and.w	r3, r3, #2
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2201      	movs	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	e002      	b.n	800e57a <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2200      	movs	r2, #0
 800e578:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d113      	bne.n	800e5a8 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b00      	cmp	r3, #0
 800e588:	bf14      	ite	ne
 800e58a:	2301      	movne	r3, #1
 800e58c:	2300      	moveq	r3, #0
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	f003 0308 	and.w	r3, r3, #8
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bf14      	ite	ne
 800e59e:	2301      	movne	r3, #1
 800e5a0:	2300      	moveq	r3, #0
 800e5a2:	b2da      	uxtb	r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	08017be0 	.word	0x08017be0
 800e5b8:	080183f0 	.word	0x080183f0
 800e5bc:	08017bac 	.word	0x08017bac

0800e5c0 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800e5c0:	b5b0      	push	{r4, r5, r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	; (800e5fc <logConnackResponse+0x3c>)
 800e5cc:	f107 0408 	add.w	r4, r7, #8
 800e5d0:	461d      	mov	r5, r3
 800e5d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e5da:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	d906      	bls.n	800e5f2 <logConnackResponse+0x32>
 800e5e4:	4b06      	ldr	r3, [pc, #24]	; (800e600 <logConnackResponse+0x40>)
 800e5e6:	4a07      	ldr	r2, [pc, #28]	; (800e604 <logConnackResponse+0x44>)
 800e5e8:	f240 412f 	movw	r1, #1071	; 0x42f
 800e5ec:	4806      	ldr	r0, [pc, #24]	; (800e608 <logConnackResponse+0x48>)
 800e5ee:	f004 ff95 	bl	801351c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800e5f2:	bf00      	nop
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	08017d40 	.word	0x08017d40
 800e600:	08017d2c 	.word	0x08017d2c
 800e604:	08018404 	.word	0x08018404
 800e608:	08017bac 	.word	0x08017bac

0800e60c <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e616:	2300      	movs	r3, #0
 800e618:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d106      	bne.n	800e632 <deserializeConnack+0x26>
 800e624:	4b2a      	ldr	r3, [pc, #168]	; (800e6d0 <deserializeConnack+0xc4>)
 800e626:	4a2b      	ldr	r2, [pc, #172]	; (800e6d4 <deserializeConnack+0xc8>)
 800e628:	f240 4145 	movw	r1, #1093	; 0x445
 800e62c:	482a      	ldr	r0, [pc, #168]	; (800e6d8 <deserializeConnack+0xcc>)
 800e62e:	f004 ff75 	bl	801351c <__assert_func>
    assert( pSessionPresent != NULL );
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d106      	bne.n	800e646 <deserializeConnack+0x3a>
 800e638:	4b28      	ldr	r3, [pc, #160]	; (800e6dc <deserializeConnack+0xd0>)
 800e63a:	4a26      	ldr	r2, [pc, #152]	; (800e6d4 <deserializeConnack+0xc8>)
 800e63c:	f240 4146 	movw	r1, #1094	; 0x446
 800e640:	4825      	ldr	r0, [pc, #148]	; (800e6d8 <deserializeConnack+0xcc>)
 800e642:	f004 ff6b 	bl	801351c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	2b02      	cmp	r3, #2
 800e652:	d002      	beq.n	800e65a <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800e654:	2305      	movs	r3, #5
 800e656:	73fb      	strb	r3, [r7, #15]
 800e658:	e01d      	b.n	800e696 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f043 0301 	orr.w	r3, r3, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b01      	cmp	r3, #1
 800e666:	d002      	beq.n	800e66e <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800e668:	2305      	movs	r3, #5
 800e66a:	73fb      	strb	r3, [r7, #15]
 800e66c:	e013      	b.n	800e696 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00a      	beq.n	800e690 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2201      	movs	r2, #1
 800e67e:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	3301      	adds	r3, #1
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d005      	beq.n	800e696 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800e68a:	2305      	movs	r3, #5
 800e68c:	73fb      	strb	r3, [r7, #15]
 800e68e:	e002      	b.n	800e696 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800e696:	7bfb      	ldrb	r3, [r7, #15]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d114      	bne.n	800e6c6 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b05      	cmp	r3, #5
 800e6a4:	d902      	bls.n	800e6ac <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800e6a6:	2305      	movs	r3, #5
 800e6a8:	73fb      	strb	r3, [r7, #15]
 800e6aa:	e00c      	b.n	800e6c6 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7ff ff84 	bl	800e5c0 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800e6c2:	2306      	movs	r3, #6
 800e6c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800e6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	08017d58 	.word	0x08017d58
 800e6d4:	08018418 	.word	0x08018418
 800e6d8:	08017bac 	.word	0x08017bac
 800e6dc:	08017d6c 	.word	0x08017d6c

0800e6e0 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	61bb      	str	r3, [r7, #24]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d106      	bne.n	800e70e <calculateSubscriptionPacketSize+0x2e>
 800e700:	4b3d      	ldr	r3, [pc, #244]	; (800e7f8 <calculateSubscriptionPacketSize+0x118>)
 800e702:	4a3e      	ldr	r2, [pc, #248]	; (800e7fc <calculateSubscriptionPacketSize+0x11c>)
 800e704:	f240 419b 	movw	r1, #1179	; 0x49b
 800e708:	483d      	ldr	r0, [pc, #244]	; (800e800 <calculateSubscriptionPacketSize+0x120>)
 800e70a:	f004 ff07 	bl	801351c <__assert_func>
    assert( subscriptionCount != 0U );
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d106      	bne.n	800e722 <calculateSubscriptionPacketSize+0x42>
 800e714:	4b3b      	ldr	r3, [pc, #236]	; (800e804 <calculateSubscriptionPacketSize+0x124>)
 800e716:	4a39      	ldr	r2, [pc, #228]	; (800e7fc <calculateSubscriptionPacketSize+0x11c>)
 800e718:	f240 419c 	movw	r1, #1180	; 0x49c
 800e71c:	4838      	ldr	r0, [pc, #224]	; (800e800 <calculateSubscriptionPacketSize+0x120>)
 800e71e:	f004 fefd 	bl	801351c <__assert_func>
    assert( pRemainingLength != NULL );
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d106      	bne.n	800e736 <calculateSubscriptionPacketSize+0x56>
 800e728:	4b37      	ldr	r3, [pc, #220]	; (800e808 <calculateSubscriptionPacketSize+0x128>)
 800e72a:	4a34      	ldr	r2, [pc, #208]	; (800e7fc <calculateSubscriptionPacketSize+0x11c>)
 800e72c:	f240 419d 	movw	r1, #1181	; 0x49d
 800e730:	4833      	ldr	r0, [pc, #204]	; (800e800 <calculateSubscriptionPacketSize+0x120>)
 800e732:	f004 fef3 	bl	801351c <__assert_func>
    assert( pPacketSize != NULL );
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <calculateSubscriptionPacketSize+0x6a>
 800e73c:	4b33      	ldr	r3, [pc, #204]	; (800e80c <calculateSubscriptionPacketSize+0x12c>)
 800e73e:	4a2f      	ldr	r2, [pc, #188]	; (800e7fc <calculateSubscriptionPacketSize+0x11c>)
 800e740:	f240 419e 	movw	r1, #1182	; 0x49e
 800e744:	482e      	ldr	r0, [pc, #184]	; (800e800 <calculateSubscriptionPacketSize+0x120>)
 800e746:	f004 fee9 	bl	801351c <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	3302      	adds	r3, #2
 800e74e:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800e750:	2300      	movs	r3, #0
 800e752:	61bb      	str	r3, [r7, #24]
 800e754:	e02f      	b.n	800e7b6 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	4613      	mov	r3, r2
 800e75a:	005b      	lsls	r3, r3, #1
 800e75c:	4413      	add	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	461a      	mov	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	4413      	add	r3, r2
 800e766:	891b      	ldrh	r3, [r3, #8]
 800e768:	461a      	mov	r2, r3
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	4413      	add	r3, r2
 800e76e:	3302      	adds	r3, #2
 800e770:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800e772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e776:	2b00      	cmp	r3, #0
 800e778:	d102      	bne.n	800e780 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	3301      	adds	r3, #1
 800e77e:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	4613      	mov	r3, r2
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	4413      	add	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	461a      	mov	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	891b      	ldrh	r3, [r3, #8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00a      	beq.n	800e7ac <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800e796:	69ba      	ldr	r2, [r7, #24]
 800e798:	4613      	mov	r3, r2
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	4413      	add	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	61bb      	str	r3, [r7, #24]
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d3cb      	bcc.n	800e756 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7c4:	d301      	bcc.n	800e7ca <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800e7ca:	7ffb      	ldrb	r3, [r7, #31]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10d      	bne.n	800e7ec <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	697a      	ldr	r2, [r7, #20]
 800e7d4:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800e7d6:	6978      	ldr	r0, [r7, #20]
 800e7d8:	f7ff fc22 	bl	800e020 <remainingLengthEncodedSize>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	3301      	adds	r3, #1
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800e7ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3720      	adds	r7, #32
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	08017d84 	.word	0x08017d84
 800e7fc:	0801842c 	.word	0x0801842c
 800e800:	08017bac 	.word	0x08017bac
 800e804:	08017da0 	.word	0x08017da0
 800e808:	08017bf8 	.word	0x08017bf8
 800e80c:	08017c14 	.word	0x08017c14

0800e810 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e81a:	2300      	movs	r3, #0
 800e81c:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <readSubackStatus+0x2a>
 800e82c:	4b17      	ldr	r3, [pc, #92]	; (800e88c <readSubackStatus+0x7c>)
 800e82e:	4a18      	ldr	r2, [pc, #96]	; (800e890 <readSubackStatus+0x80>)
 800e830:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800e834:	4817      	ldr	r0, [pc, #92]	; (800e894 <readSubackStatus+0x84>)
 800e836:	f004 fe71 	bl	801351c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800e83a:	2300      	movs	r3, #0
 800e83c:	613b      	str	r3, [r7, #16]
 800e83e:	e019      	b.n	800e874 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800e840:	683a      	ldr	r2, [r7, #0]
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	4413      	add	r3, r2
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	dc02      	bgt.n	800e856 <readSubackStatus+0x46>
 800e850:	2b00      	cmp	r3, #0
 800e852:	da08      	bge.n	800e866 <readSubackStatus+0x56>
 800e854:	e004      	b.n	800e860 <readSubackStatus+0x50>
 800e856:	2b80      	cmp	r3, #128	; 0x80
 800e858:	d102      	bne.n	800e860 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800e85a:	2306      	movs	r3, #6
 800e85c:	75fb      	strb	r3, [r7, #23]

                break;
 800e85e:	e003      	b.n	800e868 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800e860:	2305      	movs	r3, #5
 800e862:	75fb      	strb	r3, [r7, #23]

                break;
 800e864:	e000      	b.n	800e868 <readSubackStatus+0x58>
                break;
 800e866:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800e868:	7dfb      	ldrb	r3, [r7, #23]
 800e86a:	2b05      	cmp	r3, #5
 800e86c:	d007      	beq.n	800e87e <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	3301      	adds	r3, #1
 800e872:	613b      	str	r3, [r7, #16]
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d3e1      	bcc.n	800e840 <readSubackStatus+0x30>
 800e87c:	e000      	b.n	800e880 <readSubackStatus+0x70>
        {
            break;
 800e87e:	bf00      	nop
        }
    }

    return status;
 800e880:	7dfb      	ldrb	r3, [r7, #23]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	08017db8 	.word	0x08017db8
 800e890:	0801844c 	.word	0x0801844c
 800e894:	08017bac 	.word	0x08017bac

0800e898 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d106      	bne.n	800e8be <deserializeSuback+0x26>
 800e8b0:	4b1f      	ldr	r3, [pc, #124]	; (800e930 <deserializeSuback+0x98>)
 800e8b2:	4a20      	ldr	r2, [pc, #128]	; (800e934 <deserializeSuback+0x9c>)
 800e8b4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800e8b8:	481f      	ldr	r0, [pc, #124]	; (800e938 <deserializeSuback+0xa0>)
 800e8ba:	f004 fe2f 	bl	801351c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d106      	bne.n	800e8d2 <deserializeSuback+0x3a>
 800e8c4:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <deserializeSuback+0xa4>)
 800e8c6:	4a1b      	ldr	r2, [pc, #108]	; (800e934 <deserializeSuback+0x9c>)
 800e8c8:	f240 5121 	movw	r1, #1313	; 0x521
 800e8cc:	481a      	ldr	r0, [pc, #104]	; (800e938 <deserializeSuback+0xa0>)
 800e8ce:	f004 fe25 	bl	801351c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d802      	bhi.n	800e8ea <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800e8e4:	2305      	movs	r3, #5
 800e8e6:	75fb      	strb	r3, [r7, #23]
 800e8e8:	e01d      	b.n	800e926 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	021b      	lsls	r3, r3, #8
 800e8f0:	b21a      	sxth	r2, r3
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	b21b      	sxth	r3, r3
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	b21b      	sxth	r3, r3
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800e90c:	2305      	movs	r3, #5
 800e90e:	75fb      	strb	r3, [r7, #23]
 800e910:	e009      	b.n	800e926 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	1e9a      	subs	r2, r3, #2
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	3302      	adds	r3, #2
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7ff ff77 	bl	800e810 <readSubackStatus>
 800e922:	4603      	mov	r3, r0
 800e924:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800e926:	7dfb      	ldrb	r3, [r7, #23]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3718      	adds	r7, #24
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	08017dd0 	.word	0x08017dd0
 800e934:	08018460 	.word	0x08018460
 800e938:	08017bac 	.word	0x08017bac
 800e93c:	08017de0 	.word	0x08017de0

0800e940 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b088      	sub	sp, #32
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e94c:	2300      	movs	r3, #0
 800e94e:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800e950:	2300      	movs	r3, #0
 800e952:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <deserializePublish+0x28>
 800e95a:	4b53      	ldr	r3, [pc, #332]	; (800eaa8 <deserializePublish+0x168>)
 800e95c:	4a53      	ldr	r2, [pc, #332]	; (800eaac <deserializePublish+0x16c>)
 800e95e:	f240 5185 	movw	r1, #1413	; 0x585
 800e962:	4853      	ldr	r0, [pc, #332]	; (800eab0 <deserializePublish+0x170>)
 800e964:	f004 fdda 	bl	801351c <__assert_func>
    assert( pPacketId != NULL );
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d106      	bne.n	800e97c <deserializePublish+0x3c>
 800e96e:	4b51      	ldr	r3, [pc, #324]	; (800eab4 <deserializePublish+0x174>)
 800e970:	4a4e      	ldr	r2, [pc, #312]	; (800eaac <deserializePublish+0x16c>)
 800e972:	f240 5186 	movw	r1, #1414	; 0x586
 800e976:	484e      	ldr	r0, [pc, #312]	; (800eab0 <deserializePublish+0x170>)
 800e978:	f004 fdd0 	bl	801351c <__assert_func>
    assert( pPublishInfo != NULL );
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d106      	bne.n	800e990 <deserializePublish+0x50>
 800e982:	4b4d      	ldr	r3, [pc, #308]	; (800eab8 <deserializePublish+0x178>)
 800e984:	4a49      	ldr	r2, [pc, #292]	; (800eaac <deserializePublish+0x16c>)
 800e986:	f240 5187 	movw	r1, #1415	; 0x587
 800e98a:	4849      	ldr	r0, [pc, #292]	; (800eab0 <deserializePublish+0x170>)
 800e98c:	f004 fdc6 	bl	801351c <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <deserializePublish+0x66>
 800e998:	4b48      	ldr	r3, [pc, #288]	; (800eabc <deserializePublish+0x17c>)
 800e99a:	4a44      	ldr	r2, [pc, #272]	; (800eaac <deserializePublish+0x16c>)
 800e99c:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800e9a0:	4843      	ldr	r0, [pc, #268]	; (800eab0 <deserializePublish+0x170>)
 800e9a2:	f004 fdbb 	bl	801351c <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	f003 030f 	and.w	r3, r3, #15
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fdaf 	bl	800e51c <processPublishFlags>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800e9c2:	7ffb      	ldrb	r3, [r7, #31]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d109      	bne.n	800e9dc <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6898      	ldr	r0, [r3, #8]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2203      	movs	r2, #3
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	f7ff fd81 	bl	800e4da <checkPublishRemainingLength>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800e9dc:	7ffb      	ldrb	r3, [r7, #31]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d118      	bne.n	800ea14 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	021b      	lsls	r3, r3, #8
 800e9e8:	b21a      	sxth	r2, r3
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	b21b      	sxth	r3, r3
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	b21b      	sxth	r3, r3
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6898      	ldr	r0, [r3, #8]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800ea08:	3302      	adds	r3, #2
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	f7ff fd65 	bl	800e4da <checkPublishRemainingLength>
 800ea10:	4603      	mov	r3, r0
 800ea12:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800ea14:	7ffb      	ldrb	r3, [r7, #31]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d123      	bne.n	800ea62 <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	1c9a      	adds	r2, r3, #2
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	8912      	ldrh	r2, [r2, #8]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d015      	beq.n	800ea62 <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	021b      	lsls	r3, r3, #8
 800ea3c:	b21a      	sxth	r2, r3
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	3301      	adds	r3, #1
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	b21b      	sxth	r3, r3
 800ea46:	4313      	orrs	r3, r2
 800ea48:	b21b      	sxth	r3, r3
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3302      	adds	r3, #2
 800ea54:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	881b      	ldrh	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800ea5e:	2305      	movs	r3, #5
 800ea60:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800ea62:	7ffb      	ldrb	r3, [r7, #31]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d119      	bne.n	800ea9c <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	8912      	ldrh	r2, [r2, #8]
 800ea70:	1a9b      	subs	r3, r3, r2
 800ea72:	1e9a      	subs	r2, r3, #2
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	1e9a      	subs	r2, r3, #2
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	691b      	ldr	r3, [r3, #16]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <deserializePublish+0x156>
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	e000      	b.n	800ea98 <deserializePublish+0x158>
 800ea96:	2300      	movs	r3, #0
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800ea9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3720      	adds	r7, #32
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	08017dfc 	.word	0x08017dfc
 800eaac:	08018474 	.word	0x08018474
 800eab0:	08017bac 	.word	0x08017bac
 800eab4:	08017e14 	.word	0x08017e14
 800eab8:	08017be0 	.word	0x08017be0
 800eabc:	08017e28 	.word	0x08017e28

0800eac0 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800eaca:	2300      	movs	r3, #0
 800eacc:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d106      	bne.n	800eae2 <deserializeSimpleAck+0x22>
 800ead4:	4b18      	ldr	r3, [pc, #96]	; (800eb38 <deserializeSimpleAck+0x78>)
 800ead6:	4a19      	ldr	r2, [pc, #100]	; (800eb3c <deserializeSimpleAck+0x7c>)
 800ead8:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800eadc:	4818      	ldr	r0, [pc, #96]	; (800eb40 <deserializeSimpleAck+0x80>)
 800eade:	f004 fd1d 	bl	801351c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d106      	bne.n	800eaf6 <deserializeSimpleAck+0x36>
 800eae8:	4b16      	ldr	r3, [pc, #88]	; (800eb44 <deserializeSimpleAck+0x84>)
 800eaea:	4a14      	ldr	r2, [pc, #80]	; (800eb3c <deserializeSimpleAck+0x7c>)
 800eaec:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800eaf0:	4813      	ldr	r0, [pc, #76]	; (800eb40 <deserializeSimpleAck+0x80>)
 800eaf2:	f004 fd13 	bl	801351c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d002      	beq.n	800eb04 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800eafe:	2305      	movs	r3, #5
 800eb00:	73fb      	strb	r3, [r7, #15]
 800eb02:	e014      	b.n	800eb2e <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	021b      	lsls	r3, r3, #8
 800eb0c:	b21a      	sxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	3301      	adds	r3, #1
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	b21b      	sxth	r3, r3
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	b21b      	sxth	r3, r3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800eb2a:	2305      	movs	r3, #5
 800eb2c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08017e50 	.word	0x08017e50
 800eb3c:	08018488 	.word	0x08018488
 800eb40:	08017bac 	.word	0x08017bac
 800eb44:	08017de0 	.word	0x08017de0

0800eb48 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800eb50:	2300      	movs	r3, #0
 800eb52:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <deserializePingresp+0x20>
 800eb5a:	4b09      	ldr	r3, [pc, #36]	; (800eb80 <deserializePingresp+0x38>)
 800eb5c:	4a09      	ldr	r2, [pc, #36]	; (800eb84 <deserializePingresp+0x3c>)
 800eb5e:	f240 6105 	movw	r1, #1541	; 0x605
 800eb62:	4809      	ldr	r0, [pc, #36]	; (800eb88 <deserializePingresp+0x40>)
 800eb64:	f004 fcda 	bl	801351c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800eb70:	2305      	movs	r3, #5
 800eb72:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08017e60 	.word	0x08017e60
 800eb84:	080184a0 	.word	0x080184a0
 800eb88:	08017bac 	.word	0x08017bac

0800eb8c <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	2210      	movs	r2, #16
 800eba6:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6938      	ldr	r0, [r7, #16]
 800ebb2:	f7ff fa57 	bl	800e064 <encodeRemainingLength>
 800ebb6:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800ebb8:	2204      	movs	r2, #4
 800ebba:	492f      	ldr	r1, [pc, #188]	; (800ec78 <MQTT_SerializeConnectFixedHeader+0xec>)
 800ebbc:	6938      	ldr	r0, [r7, #16]
 800ebbe:	f7ff fa89 	bl	800e0d4 <encodeString>
 800ebc2:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	2204      	movs	r2, #4
 800ebc8:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800ebd8:	7dfb      	ldrb	r3, [r7, #23]
 800ebda:	f043 0302 	orr.w	r3, r3, #2
 800ebde:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d003      	beq.n	800ebf0 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800ebe8:	7dfb      	ldrb	r3, [r7, #23]
 800ebea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ebee:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d003      	beq.n	800ec00 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
 800ebfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfe:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d01c      	beq.n	800ec40 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	f043 0304 	orr.w	r3, r3, #4
 800ec0c:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d104      	bne.n	800ec20 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	f043 0308 	orr.w	r3, r3, #8
 800ec1c:	75fb      	strb	r3, [r7, #23]
 800ec1e:	e007      	b.n	800ec30 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	d103      	bne.n	800ec30 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800ec28:	7dfb      	ldrb	r3, [r7, #23]
 800ec2a:	f043 0310 	orr.w	r3, r3, #16
 800ec2e:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	785b      	ldrb	r3, [r3, #1]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d003      	beq.n	800ec40 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800ec38:	7dfb      	ldrb	r3, [r7, #23]
 800ec3a:	f043 0320 	orr.w	r3, r3, #32
 800ec3e:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	7dfa      	ldrb	r2, [r7, #23]
 800ec44:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	885b      	ldrh	r3, [r3, #2]
 800ec50:	0a1b      	lsrs	r3, r3, #8
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	885a      	ldrh	r2, [r3, #2]
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	3301      	adds	r3, #1
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	3302      	adds	r3, #2
 800ec6a:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800ec6c:	693b      	ldr	r3, [r7, #16]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3718      	adds	r7, #24
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	08017e74 	.word	0x08017e74

0800ec7c <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b088      	sub	sp, #32
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
 800ec88:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800ec8e:	230a      	movs	r3, #10
 800ec90:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d005      	beq.n	800eca4 <MQTT_GetConnectPacketSize+0x28>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <MQTT_GetConnectPacketSize+0x28>
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800eca4:	2301      	movs	r3, #1
 800eca6:	77fb      	strb	r3, [r7, #31]
 800eca8:	e04f      	b.n	800ed4a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	891b      	ldrh	r3, [r3, #8]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <MQTT_GetConnectPacketSize+0x3e>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d102      	bne.n	800ecc0 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	77fb      	strb	r3, [r7, #31]
 800ecbe:	e044      	b.n	800ed4a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <MQTT_GetConnectPacketSize+0x5a>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecce:	d302      	bcc.n	800ecd6 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	77fb      	strb	r3, [r7, #31]
 800ecd4:	e039      	b.n	800ed4a <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	891b      	ldrh	r3, [r3, #8]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	4413      	add	r3, r2
 800ece0:	3302      	adds	r3, #2
 800ece2:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	891b      	ldrh	r3, [r3, #8]
 800ecee:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ecf4:	441a      	add	r2, r3
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d006      	beq.n	800ed14 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8a1b      	ldrh	r3, [r3, #16]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	4413      	add	r3, r2
 800ed10:	3302      	adds	r3, #2
 800ed12:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	695b      	ldr	r3, [r3, #20]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d006      	beq.n	800ed2a <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	8b1b      	ldrh	r3, [r3, #24]
 800ed20:	461a      	mov	r2, r3
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	4413      	add	r3, r2
 800ed26:	3302      	adds	r3, #2
 800ed28:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800ed2e:	69b8      	ldr	r0, [r7, #24]
 800ed30:	f7ff f976 	bl	800e020 <remainingLengthEncodedSize>
 800ed34:	4603      	mov	r3, r0
 800ed36:	3301      	adds	r3, #1
 800ed38:	69ba      	ldr	r2, [r7, #24]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	697a      	ldr	r2, [r7, #20]
 800ed42:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800ed4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3720      	adds	r7, #32
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af02      	add	r7, sp, #8
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ed62:	2300      	movs	r3, #0
 800ed64:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <MQTT_GetSubscribePacketSize+0x24>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <MQTT_GetSubscribePacketSize+0x24>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	75fb      	strb	r3, [r7, #23]
 800ed7c:	e00f      	b.n	800ed9e <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800ed84:	2301      	movs	r3, #1
 800ed86:	75fb      	strb	r3, [r7, #23]
 800ed88:	e009      	b.n	800ed9e <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	68b9      	ldr	r1, [r7, #8]
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f7ff fca3 	bl	800e6e0 <calculateSubscriptionPacketSize>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	2282      	movs	r2, #130	; 0x82
 800edbe:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3301      	adds	r3, #1
 800edc4:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800edc6:	68f9      	ldr	r1, [r7, #12]
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f7ff f94b 	bl	800e064 <encodeRemainingLength>
 800edce:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800edd0:	88fb      	ldrh	r3, [r7, #6]
 800edd2:	0a1b      	lsrs	r3, r3, #8
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	3301      	adds	r3, #1
 800ede0:	88fa      	ldrh	r2, [r7, #6]
 800ede2:	b2d2      	uxtb	r2, r2
 800ede4:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	3302      	adds	r3, #2
 800edea:	617b      	str	r3, [r7, #20]

    return pIterator;
 800edec:	697b      	ldr	r3, [r7, #20]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b086      	sub	sp, #24
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	60f8      	str	r0, [r7, #12]
 800edfe:	60b9      	str	r1, [r7, #8]
 800ee00:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ee02:	2300      	movs	r3, #0
 800ee04:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <MQTT_GetPublishPacketSize+0x22>
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <MQTT_GetPublishPacketSize+0x22>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d102      	bne.n	800ee1e <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	75fb      	strb	r3, [r7, #23]
 800ee1c:	e017      	b.n	800ee4e <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d003      	beq.n	800ee2e <MQTT_GetPublishPacketSize+0x38>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	891b      	ldrh	r3, [r3, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	75fb      	strb	r3, [r7, #23]
 800ee32:	e00c      	b.n	800ee4e <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	68b9      	ldr	r1, [r7, #8]
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f7ff f98b 	bl	800e154 <calculatePublishPacketSize>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	f083 0301 	eor.w	r3, r3, #1
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800ee4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
 800ee64:	4613      	mov	r3, r2
 800ee66:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800ee72:	2301      	movs	r3, #1
 800ee74:	73fb      	strb	r3, [r7, #15]
 800ee76:	e03b      	b.n	800eef0 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800ee80:	2301      	movs	r3, #1
 800ee82:	73fb      	strb	r3, [r7, #15]
 800ee84:	e034      	b.n	800eef0 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	2b03      	cmp	r3, #3
 800ee8c:	d802      	bhi.n	800ee94 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800ee8e:	2302      	movs	r3, #2
 800ee90:	73fb      	strb	r3, [r7, #15]
 800ee92:	e02d      	b.n	800eef0 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800ee94:	883b      	ldrh	r3, [r7, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d102      	bne.n	800eea0 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	73fb      	strb	r3, [r7, #15]
 800ee9e:	e027      	b.n	800eef0 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800eea0:	78fb      	ldrb	r3, [r7, #3]
 800eea2:	2b70      	cmp	r3, #112	; 0x70
 800eea4:	d009      	beq.n	800eeba <MQTT_SerializeAck+0x62>
 800eea6:	2b70      	cmp	r3, #112	; 0x70
 800eea8:	dc1f      	bgt.n	800eeea <MQTT_SerializeAck+0x92>
 800eeaa:	2b62      	cmp	r3, #98	; 0x62
 800eeac:	d005      	beq.n	800eeba <MQTT_SerializeAck+0x62>
 800eeae:	2b62      	cmp	r3, #98	; 0x62
 800eeb0:	dc1b      	bgt.n	800eeea <MQTT_SerializeAck+0x92>
 800eeb2:	2b40      	cmp	r3, #64	; 0x40
 800eeb4:	d001      	beq.n	800eeba <MQTT_SerializeAck+0x62>
 800eeb6:	2b50      	cmp	r3, #80	; 0x50
 800eeb8:	d117      	bne.n	800eeea <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	78fa      	ldrb	r2, [r7, #3]
 800eec0:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	3301      	adds	r3, #1
 800eec8:	2202      	movs	r2, #2
 800eeca:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800eecc:	883b      	ldrh	r3, [r7, #0]
 800eece:	0a1b      	lsrs	r3, r3, #8
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	3302      	adds	r3, #2
 800eed8:	b2d2      	uxtb	r2, r2
 800eeda:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	3303      	adds	r3, #3
 800eee2:	883a      	ldrh	r2, [r7, #0]
 800eee4:	b2d2      	uxtb	r2, r2
 800eee6:	701a      	strb	r2, [r3, #0]
                break;
 800eee8:	e002      	b.n	800eef0 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800eeea:	2301      	movs	r3, #1
 800eeec:	73fb      	strb	r3, [r7, #15]
                break;
 800eeee:	bf00      	nop
        }
    }

    return status;
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800eefe:	b480      	push	{r7}
 800ef00:	b085      	sub	sp, #20
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ef06:	2300      	movs	r3, #0
 800ef08:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800ef10:	2301      	movs	r3, #1
 800ef12:	73fb      	strb	r3, [r7, #15]
 800ef14:	e002      	b.n	800ef1c <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2202      	movs	r2, #2
 800ef1a:	601a      	str	r2, [r3, #0]
    }

    return status;
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3714      	adds	r7, #20
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ef32:	2300      	movs	r3, #0
 800ef34:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d102      	bne.n	800ef42 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	73fb      	strb	r3, [r7, #15]
 800ef40:	e005      	b.n	800ef4e <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d101      	bne.n	800ef4e <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d105      	bne.n	800ef60 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d801      	bhi.n	800ef60 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d108      	bne.n	800ef78 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	22c0      	movs	r2, #192	; 0xc0
 800ef6c:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	2200      	movs	r2, #0
 800ef76:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b086      	sub	sp, #24
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ef92:	2300      	movs	r3, #0
 800ef94:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d005      	beq.n	800efa8 <MQTT_DeserializePublish+0x22>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <MQTT_DeserializePublish+0x22>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d102      	bne.n	800efae <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800efa8:	2301      	movs	r3, #1
 800efaa:	75fb      	strb	r3, [r7, #23]
 800efac:	e016      	b.n	800efdc <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efb6:	2b30      	cmp	r3, #48	; 0x30
 800efb8:	d002      	beq.n	800efc0 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800efba:	2301      	movs	r3, #1
 800efbc:	75fb      	strb	r3, [r7, #23]
 800efbe:	e00d      	b.n	800efdc <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800efc8:	2301      	movs	r3, #1
 800efca:	75fb      	strb	r3, [r7, #23]
 800efcc:	e006      	b.n	800efdc <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	68b9      	ldr	r1, [r7, #8]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f7ff fcb4 	bl	800e940 <deserializePublish>
 800efd8:	4603      	mov	r3, r0
 800efda:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800efdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b086      	sub	sp, #24
 800efea:	af00      	add	r7, sp, #0
 800efec:	60f8      	str	r0, [r7, #12]
 800efee:	60b9      	str	r1, [r7, #8]
 800eff0:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800effc:	2301      	movs	r3, #1
 800effe:	75fb      	strb	r3, [r7, #23]
 800f000:	e05f      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d006      	beq.n	800f01e <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800f014:	2bd0      	cmp	r3, #208	; 0xd0
 800f016:	d002      	beq.n	800f01e <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800f018:	2301      	movs	r3, #1
 800f01a:	75fb      	strb	r3, [r7, #23]
 800f01c:	e051      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d106      	bne.n	800f032 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800f028:	2b20      	cmp	r3, #32
 800f02a:	d102      	bne.n	800f032 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800f02c:	2301      	movs	r3, #1
 800f02e:	75fb      	strb	r3, [r7, #23]
 800f030:	e047      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800f03e:	2bd0      	cmp	r3, #208	; 0xd0
 800f040:	d002      	beq.n	800f048 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800f042:	2301      	movs	r3, #1
 800f044:	75fb      	strb	r3, [r7, #23]
 800f046:	e03c      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	2bd0      	cmp	r3, #208	; 0xd0
 800f04e:	d028      	beq.n	800f0a2 <MQTT_DeserializeAck+0xbc>
 800f050:	2bd0      	cmp	r3, #208	; 0xd0
 800f052:	dc33      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f054:	2bb0      	cmp	r3, #176	; 0xb0
 800f056:	d02a      	beq.n	800f0ae <MQTT_DeserializeAck+0xc8>
 800f058:	2bb0      	cmp	r3, #176	; 0xb0
 800f05a:	dc2f      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f05c:	2b90      	cmp	r3, #144	; 0x90
 800f05e:	d019      	beq.n	800f094 <MQTT_DeserializeAck+0xae>
 800f060:	2b90      	cmp	r3, #144	; 0x90
 800f062:	dc2b      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f064:	2b70      	cmp	r3, #112	; 0x70
 800f066:	d022      	beq.n	800f0ae <MQTT_DeserializeAck+0xc8>
 800f068:	2b70      	cmp	r3, #112	; 0x70
 800f06a:	dc27      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f06c:	2b62      	cmp	r3, #98	; 0x62
 800f06e:	d01e      	beq.n	800f0ae <MQTT_DeserializeAck+0xc8>
 800f070:	2b62      	cmp	r3, #98	; 0x62
 800f072:	dc23      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f074:	2b50      	cmp	r3, #80	; 0x50
 800f076:	d01a      	beq.n	800f0ae <MQTT_DeserializeAck+0xc8>
 800f078:	2b50      	cmp	r3, #80	; 0x50
 800f07a:	dc1f      	bgt.n	800f0bc <MQTT_DeserializeAck+0xd6>
 800f07c:	2b20      	cmp	r3, #32
 800f07e:	d002      	beq.n	800f086 <MQTT_DeserializeAck+0xa0>
 800f080:	2b40      	cmp	r3, #64	; 0x40
 800f082:	d014      	beq.n	800f0ae <MQTT_DeserializeAck+0xc8>
 800f084:	e01a      	b.n	800f0bc <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f7ff fabf 	bl	800e60c <deserializeConnack>
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]
                break;
 800f092:	e016      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800f094:	68b9      	ldr	r1, [r7, #8]
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff fbfe 	bl	800e898 <deserializeSuback>
 800f09c:	4603      	mov	r3, r0
 800f09e:	75fb      	strb	r3, [r7, #23]
                break;
 800f0a0:	e00f      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff fd50 	bl	800eb48 <deserializePingresp>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	75fb      	strb	r3, [r7, #23]
                break;
 800f0ac:	e009      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800f0ae:	68b9      	ldr	r1, [r7, #8]
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f7ff fd05 	bl	800eac0 <deserializeSimpleAck>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	75fb      	strb	r3, [r7, #23]
                break;
 800f0ba:	e002      	b.n	800f0c2 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800f0bc:	2305      	movs	r3, #5
 800f0be:	75fb      	strb	r3, [r7, #23]
                break;
 800f0c0:	bf00      	nop
        }
    }

    return status;
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d102      	bne.n	800f0ec <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	75fb      	strb	r3, [r7, #23]
 800f0ea:	e005      	b.n	800f0f8 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800f0ec:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	68b8      	ldr	r0, [r7, #8]
 800f0f4:	4798      	blx	r3
 800f0f6:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d119      	bne.n	800f132 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	4618      	mov	r0, r3
 800f104:	f7ff f9aa 	bl	800e45c <incomingPacketValid>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00e      	beq.n	800f12c <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800f10e:	68b9      	ldr	r1, [r7, #8]
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f7ff f8f0 	bl	800e2f6 <getRemainingLength>
 800f116:	4602      	mov	r2, r0
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f124:	d113      	bne.n	800f14e <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800f126:	2305      	movs	r3, #5
 800f128:	75fb      	strb	r3, [r7, #23]
 800f12a:	e010      	b.n	800f14e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800f12c:	2305      	movs	r3, #5
 800f12e:	75fb      	strb	r3, [r7, #23]
 800f130:	e00d      	b.n	800f14e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d005      	beq.n	800f144 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d102      	bne.n	800f144 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800f13e:	2307      	movs	r3, #7
 800f140:	75fb      	strb	r3, [r7, #23]
 800f142:	e004      	b.n	800f14e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d001      	beq.n	800f14e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800f14a:	2304      	movs	r3, #4
 800f14c:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800f14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f164:	2300      	movs	r3, #0
 800f166:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d102      	bne.n	800f174 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
 800f172:	e016      	b.n	800f1a2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d102      	bne.n	800f180 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800f17a:	2301      	movs	r3, #1
 800f17c:	75fb      	strb	r3, [r7, #23]
 800f17e:	e010      	b.n	800f1a2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d102      	bne.n	800f18c <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800f186:	2301      	movs	r3, #1
 800f188:	75fb      	strb	r3, [r7, #23]
 800f18a:	e00a      	b.n	800f1a2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d102      	bne.n	800f19a <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800f194:	2307      	movs	r3, #7
 800f196:	75fb      	strb	r3, [r7, #23]
 800f198:	e003      	b.n	800f1a2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	781a      	ldrb	r2, [r3, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d111      	bne.n	800f1cc <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7ff f955 	bl	800e45c <incomingPacketValid>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f7ff f8ee 	bl	800e39e <processRemainingLength>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	75fb      	strb	r3, [r7, #23]
 800f1c6:	e001      	b.n	800f1cc <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800f1c8:	2305      	movs	r3, #5
 800f1ca:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800f1d8:	b490      	push	{r4, r7}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	71fb      	strb	r3, [r7, #7]
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	71bb      	strb	r3, [r7, #6]
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	717b      	strb	r3, [r7, #5]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	2b07      	cmp	r3, #7
 800f1fe:	d848      	bhi.n	800f292 <validateTransitionPublish+0xba>
 800f200:	a201      	add	r2, pc, #4	; (adr r2, 800f208 <validateTransitionPublish+0x30>)
 800f202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f206:	bf00      	nop
 800f208:	0800f229 	.word	0x0800f229
 800f20c:	0800f24d 	.word	0x0800f24d
 800f210:	0800f293 	.word	0x0800f293
 800f214:	0800f293 	.word	0x0800f293
 800f218:	0800f293 	.word	0x0800f293
 800f21c:	0800f293 	.word	0x0800f293
 800f220:	0800f277 	.word	0x0800f277
 800f224:	0800f285 	.word	0x0800f285
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800f228:	797b      	ldrb	r3, [r7, #5]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d133      	bne.n	800f296 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800f22e:	79bb      	ldrb	r3, [r7, #6]
 800f230:	2b02      	cmp	r3, #2
 800f232:	d002      	beq.n	800f23a <validateTransitionPublish+0x62>
 800f234:	79bb      	ldrb	r3, [r7, #6]
 800f236:	2b03      	cmp	r3, #3
 800f238:	d101      	bne.n	800f23e <validateTransitionPublish+0x66>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e000      	b.n	800f240 <validateTransitionPublish+0x68>
 800f23e:	2300      	movs	r3, #0
 800f240:	73fb      	strb	r3, [r7, #15]
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	f003 0301 	and.w	r3, r3, #1
 800f248:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800f24a:	e024      	b.n	800f296 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800f24c:	793b      	ldrb	r3, [r7, #4]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d002      	beq.n	800f258 <validateTransitionPublish+0x80>
 800f252:	2b02      	cmp	r3, #2
 800f254:	d007      	beq.n	800f266 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800f256:	e00d      	b.n	800f274 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800f258:	79bb      	ldrb	r3, [r7, #6]
 800f25a:	2b06      	cmp	r3, #6
 800f25c:	bf0c      	ite	eq
 800f25e:	2301      	moveq	r3, #1
 800f260:	2300      	movne	r3, #0
 800f262:	73fb      	strb	r3, [r7, #15]
                    break;
 800f264:	e006      	b.n	800f274 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800f266:	79bb      	ldrb	r3, [r7, #6]
 800f268:	2b07      	cmp	r3, #7
 800f26a:	bf0c      	ite	eq
 800f26c:	2301      	moveq	r3, #1
 800f26e:	2300      	movne	r3, #0
 800f270:	73fb      	strb	r3, [r7, #15]
                    break;
 800f272:	bf00      	nop
            }

            break;
 800f274:	e010      	b.n	800f298 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800f276:	79bb      	ldrb	r3, [r7, #6]
 800f278:	2b06      	cmp	r3, #6
 800f27a:	bf0c      	ite	eq
 800f27c:	2301      	moveq	r3, #1
 800f27e:	2300      	movne	r3, #0
 800f280:	73fb      	strb	r3, [r7, #15]

            break;
 800f282:	e009      	b.n	800f298 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800f284:	79bb      	ldrb	r3, [r7, #6]
 800f286:	2b07      	cmp	r3, #7
 800f288:	bf0c      	ite	eq
 800f28a:	2301      	moveq	r3, #1
 800f28c:	2300      	movne	r3, #0
 800f28e:	73fb      	strb	r3, [r7, #15]

            break;
 800f290:	e002      	b.n	800f298 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800f292:	bf00      	nop
 800f294:	e000      	b.n	800f298 <validateTransitionPublish+0xc0>
            break;
 800f296:	bf00      	nop
    }

    return isValid;
 800f298:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bc90      	pop	{r4, r7}
 800f2a2:	4770      	bx	lr

0800f2a4 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	460a      	mov	r2, r1
 800f2ae:	71fb      	strb	r3, [r7, #7]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800f2b8:	79fb      	ldrb	r3, [r7, #7]
 800f2ba:	3b02      	subs	r3, #2
 800f2bc:	2b07      	cmp	r3, #7
 800f2be:	d85c      	bhi.n	800f37a <validateTransitionAck+0xd6>
 800f2c0:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <validateTransitionAck+0x24>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f2e9 	.word	0x0800f2e9
 800f2cc:	0800f2f7 	.word	0x0800f2f7
 800f2d0:	0800f34f 	.word	0x0800f34f
 800f2d4:	0800f323 	.word	0x0800f323
 800f2d8:	0800f2e9 	.word	0x0800f2e9
 800f2dc:	0800f341 	.word	0x0800f341
 800f2e0:	0800f305 	.word	0x0800f305
 800f2e4:	0800f35d 	.word	0x0800f35d
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800f2e8:	79bb      	ldrb	r3, [r7, #6]
 800f2ea:	2b0a      	cmp	r3, #10
 800f2ec:	bf0c      	ite	eq
 800f2ee:	2301      	moveq	r3, #1
 800f2f0:	2300      	movne	r3, #0
 800f2f2:	73fb      	strb	r3, [r7, #15]
            break;
 800f2f4:	e042      	b.n	800f37c <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800f2f6:	79bb      	ldrb	r3, [r7, #6]
 800f2f8:	2b08      	cmp	r3, #8
 800f2fa:	bf0c      	ite	eq
 800f2fc:	2301      	moveq	r3, #1
 800f2fe:	2300      	movne	r3, #0
 800f300:	73fb      	strb	r3, [r7, #15]
            break;
 800f302:	e03b      	b.n	800f37c <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800f304:	79bb      	ldrb	r3, [r7, #6]
 800f306:	2b05      	cmp	r3, #5
 800f308:	d002      	beq.n	800f310 <validateTransitionAck+0x6c>
 800f30a:	79bb      	ldrb	r3, [r7, #6]
 800f30c:	2b08      	cmp	r3, #8
 800f30e:	d101      	bne.n	800f314 <validateTransitionAck+0x70>
 800f310:	2301      	movs	r3, #1
 800f312:	e000      	b.n	800f316 <validateTransitionAck+0x72>
 800f314:	2300      	movs	r3, #0
 800f316:	73fb      	strb	r3, [r7, #15]
 800f318:	7bfb      	ldrb	r3, [r7, #15]
 800f31a:	f003 0301 	and.w	r3, r3, #1
 800f31e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800f320:	e02c      	b.n	800f37c <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800f322:	79bb      	ldrb	r3, [r7, #6]
 800f324:	2b0a      	cmp	r3, #10
 800f326:	d002      	beq.n	800f32e <validateTransitionAck+0x8a>
 800f328:	79bb      	ldrb	r3, [r7, #6]
 800f32a:	2b05      	cmp	r3, #5
 800f32c:	d101      	bne.n	800f332 <validateTransitionAck+0x8e>
 800f32e:	2301      	movs	r3, #1
 800f330:	e000      	b.n	800f334 <validateTransitionAck+0x90>
 800f332:	2300      	movs	r3, #0
 800f334:	73fb      	strb	r3, [r7, #15]
 800f336:	7bfb      	ldrb	r3, [r7, #15]
 800f338:	f003 0301 	and.w	r3, r3, #1
 800f33c:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800f33e:	e01d      	b.n	800f37c <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800f340:	79bb      	ldrb	r3, [r7, #6]
 800f342:	2b04      	cmp	r3, #4
 800f344:	bf0c      	ite	eq
 800f346:	2301      	moveq	r3, #1
 800f348:	2300      	movne	r3, #0
 800f34a:	73fb      	strb	r3, [r7, #15]
            break;
 800f34c:	e016      	b.n	800f37c <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800f34e:	79bb      	ldrb	r3, [r7, #6]
 800f350:	2b09      	cmp	r3, #9
 800f352:	bf0c      	ite	eq
 800f354:	2301      	moveq	r3, #1
 800f356:	2300      	movne	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]
            break;
 800f35a:	e00f      	b.n	800f37c <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800f35c:	79bb      	ldrb	r3, [r7, #6]
 800f35e:	2b0a      	cmp	r3, #10
 800f360:	d002      	beq.n	800f368 <validateTransitionAck+0xc4>
 800f362:	79bb      	ldrb	r3, [r7, #6]
 800f364:	2b09      	cmp	r3, #9
 800f366:	d101      	bne.n	800f36c <validateTransitionAck+0xc8>
 800f368:	2301      	movs	r3, #1
 800f36a:	e000      	b.n	800f36e <validateTransitionAck+0xca>
 800f36c:	2300      	movs	r3, #0
 800f36e:	73fb      	strb	r3, [r7, #15]
 800f370:	7bfb      	ldrb	r3, [r7, #15]
 800f372:	f003 0301 	and.w	r3, r3, #1
 800f376:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800f378:	e000      	b.n	800f37c <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800f37a:	bf00      	nop
    }

    return isValid;
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop

0800f38c <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	460a      	mov	r2, r1
 800f396:	71fb      	strb	r3, [r7, #7]
 800f398:	4613      	mov	r3, r2
 800f39a:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800f39c:	2300      	movs	r3, #0
 800f39e:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d009      	beq.n	800f3ba <isPublishOutgoing+0x2e>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	dc15      	bgt.n	800f3d6 <isPublishOutgoing+0x4a>
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	dc02      	bgt.n	800f3b4 <isPublishOutgoing+0x28>
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	da03      	bge.n	800f3ba <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800f3b2:	e010      	b.n	800f3d6 <isPublishOutgoing+0x4a>
    switch( packetType )
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d007      	beq.n	800f3c8 <isPublishOutgoing+0x3c>
            break;
 800f3b8:	e00d      	b.n	800f3d6 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800f3ba:	79bb      	ldrb	r3, [r7, #6]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	bf0c      	ite	eq
 800f3c0:	2301      	moveq	r3, #1
 800f3c2:	2300      	movne	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
            break;
 800f3c6:	e007      	b.n	800f3d8 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800f3c8:	79bb      	ldrb	r3, [r7, #6]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bf0c      	ite	eq
 800f3ce:	2301      	moveq	r3, #1
 800f3d0:	2300      	movne	r3, #0
 800f3d2:	73fb      	strb	r3, [r7, #15]
            break;
 800f3d4:	e000      	b.n	800f3d8 <isPublishOutgoing+0x4c>
            break;
 800f3d6:	bf00      	nop
    }

    return isOutgoing;
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr
	...

0800f3e8 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	603b      	str	r3, [r7, #0]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f3fc:	88fb      	ldrh	r3, [r7, #6]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d106      	bne.n	800f410 <findInRecord+0x28>
 800f402:	4b1b      	ldr	r3, [pc, #108]	; (800f470 <findInRecord+0x88>)
 800f404:	4a1b      	ldr	r2, [pc, #108]	; (800f474 <findInRecord+0x8c>)
 800f406:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800f40a:	481b      	ldr	r0, [pc, #108]	; (800f478 <findInRecord+0x90>)
 800f40c:	f004 f886 	bl	801351c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	2200      	movs	r2, #0
 800f414:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800f416:	2300      	movs	r3, #0
 800f418:	617b      	str	r3, [r7, #20]
 800f41a:	e019      	b.n	800f450 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4413      	add	r3, r2
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	88fa      	ldrh	r2, [r7, #6]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d10e      	bne.n	800f44a <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	4413      	add	r3, r2
 800f434:	789a      	ldrb	r2, [r3, #2]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	4413      	add	r3, r2
 800f442:	78da      	ldrb	r2, [r3, #3]
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	701a      	strb	r2, [r3, #0]
            break;
 800f448:	e006      	b.n	800f458 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	3301      	adds	r3, #1
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	429a      	cmp	r2, r3
 800f456:	d3e1      	bcc.n	800f41c <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d102      	bne.n	800f466 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800f460:	2300      	movs	r3, #0
 800f462:	43db      	mvns	r3, r3
 800f464:	617b      	str	r3, [r7, #20]
    }

    return index;
 800f466:	697b      	ldr	r3, [r7, #20]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	08017e94 	.word	0x08017e94
 800f474:	080184b4 	.word	0x080184b4
 800f478:	08017eb8 	.word	0x08017eb8

0800f47c <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800f48a:	2300      	movs	r3, #0
 800f48c:	43db      	mvns	r3, r3
 800f48e:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d150      	bne.n	800f538 <compactRecords+0xbc>
 800f496:	4b2d      	ldr	r3, [pc, #180]	; (800f54c <compactRecords+0xd0>)
 800f498:	4a2d      	ldr	r2, [pc, #180]	; (800f550 <compactRecords+0xd4>)
 800f49a:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800f49e:	482d      	ldr	r0, [pc, #180]	; (800f554 <compactRecords+0xd8>)
 800f4a0:	f004 f83c 	bl	801351c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d107      	bne.n	800f4c2 <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	43db      	mvns	r3, r3
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d13a      	bne.n	800f532 <compactRecords+0xb6>
            {
                emptyIndex = index;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	60bb      	str	r3, [r7, #8]
 800f4c0:	e037      	b.n	800f532 <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	43db      	mvns	r3, r3
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d032      	beq.n	800f532 <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	441a      	add	r2, r3
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	440b      	add	r3, r1
 800f4dc:	8812      	ldrh	r2, [r2, #0]
 800f4de:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	441a      	add	r2, r3
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	6879      	ldr	r1, [r7, #4]
 800f4ee:	440b      	add	r3, r1
 800f4f0:	7892      	ldrb	r2, [r2, #2]
 800f4f2:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	441a      	add	r2, r3
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	440b      	add	r3, r1
 800f504:	78d2      	ldrb	r2, [r2, #3]
 800f506:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	4413      	add	r3, r2
 800f510:	2200      	movs	r2, #0
 800f512:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	4413      	add	r3, r2
 800f51c:	2200      	movs	r2, #0
 800f51e:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	4413      	add	r3, r2
 800f528:	2200      	movs	r2, #0
 800f52a:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	3301      	adds	r3, #1
 800f530:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	3301      	adds	r3, #1
 800f536:	60fb      	str	r3, [r7, #12]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d3b1      	bcc.n	800f4a4 <compactRecords+0x28>
            }
        }
    }
}
 800f540:	bf00      	nop
 800f542:	bf00      	nop
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	08017ee8 	.word	0x08017ee8
 800f550:	080184c4 	.word	0x080184c4
 800f554:	08017eb8 	.word	0x08017eb8

0800f558 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b088      	sub	sp, #32
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	4611      	mov	r1, r2
 800f564:	461a      	mov	r2, r3
 800f566:	460b      	mov	r3, r1
 800f568:	80fb      	strh	r3, [r7, #6]
 800f56a:	4613      	mov	r3, r2
 800f56c:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800f56e:	2302      	movs	r3, #2
 800f570:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800f57a:	2300      	movs	r3, #0
 800f57c:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f57e:	88fb      	ldrh	r3, [r7, #6]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d106      	bne.n	800f592 <addRecord+0x3a>
 800f584:	4b32      	ldr	r3, [pc, #200]	; (800f650 <addRecord+0xf8>)
 800f586:	4a33      	ldr	r2, [pc, #204]	; (800f654 <addRecord+0xfc>)
 800f588:	f240 2115 	movw	r1, #533	; 0x215
 800f58c:	4832      	ldr	r0, [pc, #200]	; (800f658 <addRecord+0x100>)
 800f58e:	f003 ffc5 	bl	801351c <__assert_func>
    assert( qos != MQTTQoS0 );
 800f592:	797b      	ldrb	r3, [r7, #5]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d106      	bne.n	800f5a6 <addRecord+0x4e>
 800f598:	4b30      	ldr	r3, [pc, #192]	; (800f65c <addRecord+0x104>)
 800f59a:	4a2e      	ldr	r2, [pc, #184]	; (800f654 <addRecord+0xfc>)
 800f59c:	f240 2116 	movw	r1, #534	; 0x216
 800f5a0:	482d      	ldr	r0, [pc, #180]	; (800f658 <addRecord+0x100>)
 800f5a2:	f003 ffbb 	bl	801351c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d003      	beq.n	800f5c2 <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f7ff ff5d 	bl	800f47c <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	61bb      	str	r3, [r7, #24]
 800f5c8:	e021      	b.n	800f60e <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d108      	bne.n	800f5ea <addRecord+0x92>
        {
            if( validEntryFound == false )
 800f5d8:	7cfb      	ldrb	r3, [r7, #19]
 800f5da:	f083 0301 	eor.w	r3, r3, #1
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d011      	beq.n	800f608 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	e00e      	b.n	800f608 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	88fa      	ldrh	r2, [r7, #6]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d104      	bne.n	800f608 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800f5fe:	2309      	movs	r3, #9
 800f600:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	617b      	str	r3, [r7, #20]
                break;
 800f606:	e005      	b.n	800f614 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	61bb      	str	r3, [r7, #24]
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	2b00      	cmp	r3, #0
 800f612:	dada      	bge.n	800f5ca <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d214      	bcs.n	800f646 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	4413      	add	r3, r2
 800f624:	88fa      	ldrh	r2, [r7, #6]
 800f626:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	797a      	ldrb	r2, [r7, #5]
 800f632:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	4413      	add	r3, r2
 800f63c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f640:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800f642:	2300      	movs	r3, #0
 800f644:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800f646:	7ffb      	ldrb	r3, [r7, #31]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3720      	adds	r7, #32
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	08017e94 	.word	0x08017e94
 800f654:	080184d4 	.word	0x080184d4
 800f658:	08017eb8 	.word	0x08017eb8
 800f65c:	08017ef8 	.word	0x08017ef8

0800f660 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	4611      	mov	r1, r2
 800f66c:	461a      	mov	r2, r3
 800f66e:	460b      	mov	r3, r1
 800f670:	71fb      	strb	r3, [r7, #7]
 800f672:	4613      	mov	r3, r2
 800f674:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <updateRecord+0x2a>
 800f67c:	4b13      	ldr	r3, [pc, #76]	; (800f6cc <updateRecord+0x6c>)
 800f67e:	4a14      	ldr	r2, [pc, #80]	; (800f6d0 <updateRecord+0x70>)
 800f680:	f240 2152 	movw	r1, #594	; 0x252
 800f684:	4813      	ldr	r0, [pc, #76]	; (800f6d4 <updateRecord+0x74>)
 800f686:	f003 ff49 	bl	801351c <__assert_func>

    if( shouldDelete == true )
 800f68a:	79bb      	ldrb	r3, [r7, #6]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d012      	beq.n	800f6b6 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	4413      	add	r3, r2
 800f698:	2200      	movs	r2, #0
 800f69a:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800f6b4:	e005      	b.n	800f6c2 <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	4413      	add	r3, r2
 800f6be:	79fa      	ldrb	r2, [r7, #7]
 800f6c0:	70da      	strb	r2, [r3, #3]
}
 800f6c2:	bf00      	nop
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	08017ee8 	.word	0x08017ee8
 800f6d0:	080184e0 	.word	0x080184e0
 800f6d4:	08017eb8 	.word	0x08017eb8

0800f6d8 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b088      	sub	sp, #32
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	607a      	str	r2, [r7, #4]
 800f6e4:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d106      	bne.n	800f70a <stateSelect+0x32>
 800f6fc:	4b43      	ldr	r3, [pc, #268]	; (800f80c <stateSelect+0x134>)
 800f6fe:	4a44      	ldr	r2, [pc, #272]	; (800f810 <stateSelect+0x138>)
 800f700:	f240 216d 	movw	r1, #621	; 0x26d
 800f704:	4843      	ldr	r0, [pc, #268]	; (800f814 <stateSelect+0x13c>)
 800f706:	f003 ff09 	bl	801351c <__assert_func>
    assert( searchStates != 0U );
 800f70a:	897b      	ldrh	r3, [r7, #10]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d106      	bne.n	800f71e <stateSelect+0x46>
 800f710:	4b41      	ldr	r3, [pc, #260]	; (800f818 <stateSelect+0x140>)
 800f712:	4a3f      	ldr	r2, [pc, #252]	; (800f810 <stateSelect+0x138>)
 800f714:	f240 216e 	movw	r1, #622	; 0x26e
 800f718:	483e      	ldr	r0, [pc, #248]	; (800f814 <stateSelect+0x13c>)
 800f71a:	f003 feff 	bl	801351c <__assert_func>
    assert( pCursor != NULL );
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d106      	bne.n	800f732 <stateSelect+0x5a>
 800f724:	4b3d      	ldr	r3, [pc, #244]	; (800f81c <stateSelect+0x144>)
 800f726:	4a3a      	ldr	r2, [pc, #232]	; (800f810 <stateSelect+0x138>)
 800f728:	f240 216f 	movw	r1, #623	; 0x26f
 800f72c:	4839      	ldr	r0, [pc, #228]	; (800f814 <stateSelect+0x13c>)
 800f72e:	f003 fef5 	bl	801351c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800f732:	8bbb      	ldrh	r3, [r7, #28]
 800f734:	f043 0302 	orr.w	r3, r3, #2
 800f738:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800f73a:	8bbb      	ldrh	r3, [r7, #28]
 800f73c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f740:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800f742:	8bbb      	ldrh	r3, [r7, #28]
 800f744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f748:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800f74a:	8bbb      	ldrh	r3, [r7, #28]
 800f74c:	f043 0310 	orr.w	r3, r3, #16
 800f750:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800f752:	8bbb      	ldrh	r3, [r7, #28]
 800f754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f758:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800f75a:	8bba      	ldrh	r2, [r7, #28]
 800f75c:	897b      	ldrh	r3, [r7, #10]
 800f75e:	4013      	ands	r3, r2
 800f760:	b29b      	uxth	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d106      	bne.n	800f774 <stateSelect+0x9c>
 800f766:	4b2e      	ldr	r3, [pc, #184]	; (800f820 <stateSelect+0x148>)
 800f768:	4a29      	ldr	r2, [pc, #164]	; (800f810 <stateSelect+0x138>)
 800f76a:	f240 2179 	movw	r1, #633	; 0x279
 800f76e:	4829      	ldr	r0, [pc, #164]	; (800f814 <stateSelect+0x13c>)
 800f770:	f003 fed4 	bl	801351c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800f774:	8bbb      	ldrh	r3, [r7, #28]
 800f776:	43da      	mvns	r2, r3
 800f778:	897b      	ldrh	r3, [r7, #10]
 800f77a:	4013      	ands	r3, r2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d006      	beq.n	800f78e <stateSelect+0xb6>
 800f780:	4b28      	ldr	r3, [pc, #160]	; (800f824 <stateSelect+0x14c>)
 800f782:	4a23      	ldr	r2, [pc, #140]	; (800f810 <stateSelect+0x138>)
 800f784:	f240 217a 	movw	r1, #634	; 0x27a
 800f788:	4822      	ldr	r0, [pc, #136]	; (800f814 <stateSelect+0x13c>)
 800f78a:	f003 fec7 	bl	801351c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800f79a:	e02d      	b.n	800f7f8 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800f79c:	897a      	ldrh	r2, [r7, #10]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	69b9      	ldr	r1, [r7, #24]
 800f7a6:	440b      	add	r3, r1
 800f7a8:	78db      	ldrb	r3, [r3, #3]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	408b      	lsls	r3, r1
 800f7b0:	401a      	ands	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	69b9      	ldr	r1, [r7, #24]
 800f7ba:	440b      	add	r3, r1
 800f7bc:	78db      	ldrb	r3, [r3, #3]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	408b      	lsls	r3, r1
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	bf0c      	ite	eq
 800f7c8:	2301      	moveq	r3, #1
 800f7ca:	2300      	movne	r3, #0
 800f7cc:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00c      	beq.n	800f7ee <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	4413      	add	r3, r2
 800f7de:	881b      	ldrh	r3, [r3, #0]
 800f7e0:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	601a      	str	r2, [r3, #0]
            break;
 800f7ec:	e009      	b.n	800f802 <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d8cc      	bhi.n	800f79c <stateSelect+0xc4>
    }

    return packetId;
 800f802:	8bfb      	ldrh	r3, [r7, #30]
}
 800f804:	4618      	mov	r0, r3
 800f806:	3720      	adds	r7, #32
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	08017f08 	.word	0x08017f08
 800f810:	080184f0 	.word	0x080184f0
 800f814:	08017eb8 	.word	0x08017eb8
 800f818:	08017f20 	.word	0x08017f20
 800f81c:	08017f34 	.word	0x08017f34
 800f820:	08017f44 	.word	0x08017f44
 800f824:	08017f6c 	.word	0x08017f6c

0800f828 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	4603      	mov	r3, r0
 800f830:	71fb      	strb	r3, [r7, #7]
 800f832:	460b      	mov	r3, r1
 800f834:	71bb      	strb	r3, [r7, #6]
 800f836:	4613      	mov	r3, r2
 800f838:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800f83a:	2300      	movs	r3, #0
 800f83c:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800f83e:	797b      	ldrb	r3, [r7, #5]
 800f840:	2b02      	cmp	r3, #2
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	2b03      	cmp	r3, #3
 800f84e:	d827      	bhi.n	800f8a0 <MQTT_CalculateStateAck+0x78>
 800f850:	a201      	add	r2, pc, #4	; (adr r2, 800f858 <MQTT_CalculateStateAck+0x30>)
 800f852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f856:	bf00      	nop
 800f858:	0800f869 	.word	0x0800f869
 800f85c:	0800f87b 	.word	0x0800f87b
 800f860:	0800f88b 	.word	0x0800f88b
 800f864:	0800f89b 	.word	0x0800f89b
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800f868:	797b      	ldrb	r3, [r7, #5]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	bf0c      	ite	eq
 800f86e:	2301      	moveq	r3, #1
 800f870:	2300      	movne	r3, #0
 800f872:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800f874:	230a      	movs	r3, #10
 800f876:	73fb      	strb	r3, [r7, #15]
            break;
 800f878:	e013      	b.n	800f8a2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800f87a:	79bb      	ldrb	r3, [r7, #6]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d101      	bne.n	800f884 <MQTT_CalculateStateAck+0x5c>
 800f880:	2308      	movs	r3, #8
 800f882:	e000      	b.n	800f886 <MQTT_CalculateStateAck+0x5e>
 800f884:	2304      	movs	r3, #4
 800f886:	73fb      	strb	r3, [r7, #15]
            break;
 800f888:	e00b      	b.n	800f8a2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800f88a:	79bb      	ldrb	r3, [r7, #6]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <MQTT_CalculateStateAck+0x6c>
 800f890:	2309      	movs	r3, #9
 800f892:	e000      	b.n	800f896 <MQTT_CalculateStateAck+0x6e>
 800f894:	2305      	movs	r3, #5
 800f896:	73fb      	strb	r3, [r7, #15]
            break;
 800f898:	e003      	b.n	800f8a2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800f89a:	230a      	movs	r3, #10
 800f89c:	73fb      	strb	r3, [r7, #15]
            break;
 800f89e:	e000      	b.n	800f8a2 <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800f8a0:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800f8a2:	7bbb      	ldrb	r3, [r7, #14]
 800f8a4:	f083 0301 	eor.w	r3, r3, #1
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d001      	beq.n	800f8b2 <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b088      	sub	sp, #32
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
 800f8cc:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800f8ce:	2308      	movs	r3, #8
 800f8d0:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d106      	bne.n	800f8ee <updateStateAck+0x2e>
 800f8e0:	4b22      	ldr	r3, [pc, #136]	; (800f96c <updateStateAck+0xac>)
 800f8e2:	4a23      	ldr	r2, [pc, #140]	; (800f970 <updateStateAck+0xb0>)
 800f8e4:	f240 21cf 	movw	r1, #719	; 0x2cf
 800f8e8:	4822      	ldr	r0, [pc, #136]	; (800f974 <updateStateAck+0xb4>)
 800f8ea:	f003 fe17 	bl	801351c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800f8ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f8f2:	2b0a      	cmp	r3, #10
 800f8f4:	d003      	beq.n	800f8fe <updateStateAck+0x3e>
 800f8f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f8fa:	2b04      	cmp	r3, #4
 800f8fc:	d101      	bne.n	800f902 <updateStateAck+0x42>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e000      	b.n	800f904 <updateStateAck+0x44>
 800f902:	2300      	movs	r3, #0
 800f904:	75bb      	strb	r3, [r7, #22]
 800f906:	7dbb      	ldrb	r3, [r7, #22]
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800f90e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f912:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f916:	4611      	mov	r1, r2
 800f918:	4618      	mov	r0, r3
 800f91a:	f7ff fcc3 	bl	800f2a4 <validateTransitionAck>
 800f91e:	4603      	mov	r3, r0
 800f920:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800f922:	7d7b      	ldrb	r3, [r7, #21]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d01c      	beq.n	800f962 <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800f928:	2300      	movs	r3, #0
 800f92a:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800f92c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f934:	429a      	cmp	r2, r3
 800f936:	d014      	beq.n	800f962 <updateStateAck+0xa2>
        {
            updateRecord( records,
 800f938:	7dbb      	ldrb	r3, [r7, #22]
 800f93a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7ff fe8d 	bl	800f660 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800f946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	d109      	bne.n	800f962 <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800f94e:	887a      	ldrh	r2, [r7, #2]
 800f950:	2304      	movs	r3, #4
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	2302      	movs	r3, #2
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f7ff fdfd 	bl	800f558 <addRecord>
 800f95e:	4603      	mov	r3, r0
 800f960:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800f962:	7dfb      	ldrb	r3, [r7, #23]
}
 800f964:	4618      	mov	r0, r3
 800f966:	3718      	adds	r7, #24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	08017ee8 	.word	0x08017ee8
 800f970:	080184fc 	.word	0x080184fc
 800f974:	08017eb8 	.word	0x08017eb8

0800f978 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800f978:	b590      	push	{r4, r7, lr}
 800f97a:	b089      	sub	sp, #36	; 0x24
 800f97c:	af02      	add	r7, sp, #8
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	4611      	mov	r1, r2
 800f984:	461a      	mov	r2, r3
 800f986:	460b      	mov	r3, r1
 800f988:	80fb      	strh	r3, [r7, #6]
 800f98a:	4613      	mov	r3, r2
 800f98c:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800f98e:	2300      	movs	r3, #0
 800f990:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800f992:	2300      	movs	r3, #0
 800f994:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <updateStatePublish+0x32>
 800f99c:	4b29      	ldr	r3, [pc, #164]	; (800fa44 <updateStatePublish+0xcc>)
 800f99e:	4a2a      	ldr	r2, [pc, #168]	; (800fa48 <updateStatePublish+0xd0>)
 800f9a0:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800f9a4:	4829      	ldr	r0, [pc, #164]	; (800fa4c <updateStatePublish+0xd4>)
 800f9a6:	f003 fdb9 	bl	801351c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f9aa:	88fb      	ldrh	r3, [r7, #6]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <updateStatePublish+0x46>
 800f9b0:	4b27      	ldr	r3, [pc, #156]	; (800fa50 <updateStatePublish+0xd8>)
 800f9b2:	4a25      	ldr	r2, [pc, #148]	; (800fa48 <updateStatePublish+0xd0>)
 800f9b4:	f240 310d 	movw	r1, #781	; 0x30d
 800f9b8:	4824      	ldr	r0, [pc, #144]	; (800fa4c <updateStatePublish+0xd4>)
 800f9ba:	f003 fdaf 	bl	801351c <__assert_func>
    assert( qos != MQTTQoS0 );
 800f9be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <updateStatePublish+0x5c>
 800f9c6:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <updateStatePublish+0xdc>)
 800f9c8:	4a1f      	ldr	r2, [pc, #124]	; (800fa48 <updateStatePublish+0xd0>)
 800f9ca:	f240 310e 	movw	r1, #782	; 0x30e
 800f9ce:	481f      	ldr	r0, [pc, #124]	; (800fa4c <updateStatePublish+0xd4>)
 800f9d0:	f003 fda4 	bl	801351c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800f9d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f9d8:	797a      	ldrb	r2, [r7, #5]
 800f9da:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800f9de:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800f9e2:	f7ff fbf9 	bl	800f1d8 <validateTransitionPublish>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800f9ea:	7dbb      	ldrb	r3, [r7, #22]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d021      	beq.n	800fa34 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800f9f0:	797b      	ldrb	r3, [r7, #5]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d10f      	bne.n	800fa16 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6858      	ldr	r0, [r3, #4]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	68d9      	ldr	r1, [r3, #12]
 800f9fe:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800fa02:	88fa      	ldrh	r2, [r7, #6]
 800fa04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	4623      	mov	r3, r4
 800fa0c:	f7ff fda4 	bl	800f558 <addRecord>
 800fa10:	4603      	mov	r3, r0
 800fa12:	75fb      	strb	r3, [r7, #23]
 800fa14:	e010      	b.n	800fa38 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800fa16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fa1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d00a      	beq.n	800fa38 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	68b9      	ldr	r1, [r7, #8]
 800fa2e:	f7ff fe17 	bl	800f660 <updateRecord>
 800fa32:	e001      	b.n	800fa38 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800fa34:	2308      	movs	r3, #8
 800fa36:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	08017f08 	.word	0x08017f08
 800fa48:	0801850c 	.word	0x0801850c
 800fa4c:	08017eb8 	.word	0x08017eb8
 800fa50:	08017e94 	.word	0x08017e94
 800fa54:	08017ef8 	.word	0x08017ef8

0800fa58 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800fa58:	b590      	push	{r4, r7, lr}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	460b      	mov	r3, r1
 800fa62:	807b      	strh	r3, [r7, #2]
 800fa64:	4613      	mov	r3, r2
 800fa66:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800fa6c:	787b      	ldrb	r3, [r7, #1]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d102      	bne.n	800fa78 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
 800fa76:	e014      	b.n	800faa2 <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800fa78:	887b      	ldrh	r3, [r7, #2]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <MQTT_ReserveState+0x2c>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d102      	bne.n	800fa8a <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800fa84:	2301      	movs	r3, #1
 800fa86:	73fb      	strb	r3, [r7, #15]
 800fa88:	e00b      	b.n	800faa2 <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6899      	ldr	r1, [r3, #8]
 800fa92:	787b      	ldrb	r3, [r7, #1]
 800fa94:	887a      	ldrh	r2, [r7, #2]
 800fa96:	2401      	movs	r4, #1
 800fa98:	9400      	str	r4, [sp, #0]
 800fa9a:	f7ff fd5d 	bl	800f558 <addRecord>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd90      	pop	{r4, r7, pc}

0800faac <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	4603      	mov	r3, r0
 800fab4:	460a      	mov	r2, r1
 800fab6:	71fb      	strb	r3, [r7, #7]
 800fab8:	4613      	mov	r3, r2
 800faba:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800fabc:	2300      	movs	r3, #0
 800fabe:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800fac0:	79bb      	ldrb	r3, [r7, #6]
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d011      	beq.n	800faea <MQTT_CalculateStatePublish+0x3e>
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	dc17      	bgt.n	800fafa <MQTT_CalculateStatePublish+0x4e>
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <MQTT_CalculateStatePublish+0x28>
 800face:	2b01      	cmp	r3, #1
 800fad0:	d003      	beq.n	800fada <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800fad2:	e012      	b.n	800fafa <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800fad4:	230a      	movs	r3, #10
 800fad6:	73fb      	strb	r3, [r7, #15]
            break;
 800fad8:	e010      	b.n	800fafc <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <MQTT_CalculateStatePublish+0x38>
 800fae0:	2306      	movs	r3, #6
 800fae2:	e000      	b.n	800fae6 <MQTT_CalculateStatePublish+0x3a>
 800fae4:	2302      	movs	r3, #2
 800fae6:	73fb      	strb	r3, [r7, #15]
            break;
 800fae8:	e008      	b.n	800fafc <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <MQTT_CalculateStatePublish+0x48>
 800faf0:	2307      	movs	r3, #7
 800faf2:	e000      	b.n	800faf6 <MQTT_CalculateStatePublish+0x4a>
 800faf4:	2303      	movs	r3, #3
 800faf6:	73fb      	strb	r3, [r7, #15]
            break;
 800faf8:	e000      	b.n	800fafc <MQTT_CalculateStatePublish+0x50>
            break;
 800fafa:	bf00      	nop
    }

    return calculatedState;
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800fb0a:	b590      	push	{r4, r7, lr}
 800fb0c:	b08b      	sub	sp, #44	; 0x2c
 800fb0e:	af04      	add	r7, sp, #16
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	4608      	mov	r0, r1
 800fb14:	4611      	mov	r1, r2
 800fb16:	461a      	mov	r2, r3
 800fb18:	4603      	mov	r3, r0
 800fb1a:	807b      	strh	r3, [r7, #2]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	707b      	strb	r3, [r7, #1]
 800fb20:	4613      	mov	r3, r2
 800fb22:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800fb24:	2300      	movs	r3, #0
 800fb26:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800fb30:	2300      	movs	r3, #0
 800fb32:	43db      	mvns	r3, r3
 800fb34:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <MQTT_UpdateStatePublish+0x3c>
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d102      	bne.n	800fb4c <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800fb46:	2301      	movs	r3, #1
 800fb48:	75fb      	strb	r3, [r7, #23]
 800fb4a:	e028      	b.n	800fb9e <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800fb4c:	783b      	ldrb	r3, [r7, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d103      	bne.n	800fb5a <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	220a      	movs	r2, #10
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	e021      	b.n	800fb9e <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800fb5a:	887b      	ldrh	r3, [r7, #2]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d102      	bne.n	800fb66 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800fb60:	2301      	movs	r3, #1
 800fb62:	75fb      	strb	r3, [r7, #23]
 800fb64:	e01b      	b.n	800fb9e <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800fb66:	787b      	ldrb	r3, [r7, #1]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d118      	bne.n	800fb9e <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6818      	ldr	r0, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6899      	ldr	r1, [r3, #8]
 800fb74:	f107 040d 	add.w	r4, r7, #13
 800fb78:	887a      	ldrh	r2, [r7, #2]
 800fb7a:	f107 030e 	add.w	r3, r7, #14
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	4623      	mov	r3, r4
 800fb82:	f7ff fc31 	bl	800f3e8 <findInRecord>
 800fb86:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800fb88:	2300      	movs	r3, #0
 800fb8a:	43db      	mvns	r3, r3
 800fb8c:	693a      	ldr	r2, [r7, #16]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d003      	beq.n	800fb9a <MQTT_UpdateStatePublish+0x90>
 800fb92:	7b7b      	ldrb	r3, [r7, #13]
 800fb94:	783a      	ldrb	r2, [r7, #0]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d001      	beq.n	800fb9e <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800fb9e:	783b      	ldrb	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d020      	beq.n	800fbe6 <MQTT_UpdateStatePublish+0xdc>
 800fba4:	7dfb      	ldrb	r3, [r7, #23]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d11d      	bne.n	800fbe6 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800fbaa:	783a      	ldrb	r2, [r7, #0]
 800fbac:	787b      	ldrb	r3, [r7, #1]
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff ff7b 	bl	800faac <MQTT_CalculateStatePublish>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800fbba:	7bbb      	ldrb	r3, [r7, #14]
 800fbbc:	7878      	ldrb	r0, [r7, #1]
 800fbbe:	8879      	ldrh	r1, [r7, #2]
 800fbc0:	7bfa      	ldrb	r2, [r7, #15]
 800fbc2:	9202      	str	r2, [sp, #8]
 800fbc4:	9301      	str	r3, [sp, #4]
 800fbc6:	783b      	ldrb	r3, [r7, #0]
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	4603      	mov	r3, r0
 800fbcc:	460a      	mov	r2, r1
 800fbce:	6939      	ldr	r1, [r7, #16]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7ff fed1 	bl	800f978 <updateStatePublish>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d102      	bne.n	800fbe6 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800fbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe2:	7bfa      	ldrb	r2, [r7, #15]
 800fbe4:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	371c      	adds	r7, #28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd90      	pop	{r4, r7, pc}

0800fbf0 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b08a      	sub	sp, #40	; 0x28
 800fbf4:	af02      	add	r7, sp, #8
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4603      	mov	r3, r0
 800fc00:	807b      	strh	r3, [r7, #2]
 800fc02:	460b      	mov	r3, r1
 800fc04:	707b      	strb	r3, [r7, #1]
 800fc06:	4613      	mov	r3, r2
 800fc08:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800fc12:	783a      	ldrb	r2, [r7, #0]
 800fc14:	787b      	ldrb	r3, [r7, #1]
 800fc16:	4611      	mov	r1, r2
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7ff fbb7 	bl	800f38c <isPublishOutgoing>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800fc26:	2300      	movs	r3, #0
 800fc28:	43db      	mvns	r3, r3
 800fc2a:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	43db      	mvns	r3, r3
 800fc30:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800fc36:	2305      	movs	r3, #5
 800fc38:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <MQTT_UpdateStateAck+0x56>
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d102      	bne.n	800fc4c <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800fc46:	2301      	movs	r3, #1
 800fc48:	74fb      	strb	r3, [r7, #19]
 800fc4a:	e027      	b.n	800fc9c <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800fc4c:	887b      	ldrh	r3, [r7, #2]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800fc52:	2301      	movs	r3, #1
 800fc54:	74fb      	strb	r3, [r7, #19]
 800fc56:	e021      	b.n	800fc9c <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800fc58:	787b      	ldrb	r3, [r7, #1]
 800fc5a:	2b03      	cmp	r3, #3
 800fc5c:	d902      	bls.n	800fc64 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	74fb      	strb	r3, [r7, #19]
 800fc62:	e01b      	b.n	800fc9c <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800fc64:	7c7b      	ldrb	r3, [r7, #17]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d006      	beq.n	800fc78 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	61fb      	str	r3, [r7, #28]
 800fc76:	e005      	b.n	800fc84 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800fc84:	f107 010f 	add.w	r1, r7, #15
 800fc88:	887a      	ldrh	r2, [r7, #2]
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	460b      	mov	r3, r1
 800fc92:	69f9      	ldr	r1, [r7, #28]
 800fc94:	6978      	ldr	r0, [r7, #20]
 800fc96:	f7ff fba7 	bl	800f3e8 <findInRecord>
 800fc9a:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	43db      	mvns	r3, r3
 800fca0:	69ba      	ldr	r2, [r7, #24]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d01a      	beq.n	800fcdc <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800fca6:	7bfa      	ldrb	r2, [r7, #15]
 800fca8:	7839      	ldrb	r1, [r7, #0]
 800fcaa:	787b      	ldrb	r3, [r7, #1]
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7ff fdbb 	bl	800f828 <MQTT_CalculateStateAck>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800fcb6:	7c3b      	ldrb	r3, [r7, #16]
 800fcb8:	8879      	ldrh	r1, [r7, #2]
 800fcba:	7cba      	ldrb	r2, [r7, #18]
 800fcbc:	9201      	str	r2, [sp, #4]
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	69ba      	ldr	r2, [r7, #24]
 800fcc4:	69f9      	ldr	r1, [r7, #28]
 800fcc6:	6978      	ldr	r0, [r7, #20]
 800fcc8:	f7ff fdfa 	bl	800f8c0 <updateStateAck>
 800fccc:	4603      	mov	r3, r0
 800fcce:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800fcd0:	7cfb      	ldrb	r3, [r7, #19]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d102      	bne.n	800fcdc <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	7cba      	ldrb	r2, [r7, #18]
 800fcda:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800fcdc:	7cfb      	ldrb	r3, [r7, #19]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3720      	adds	r7, #32
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b086      	sub	sp, #24
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	60f8      	str	r0, [r7, #12]
 800fcee:	60b9      	str	r1, [r7, #8]
 800fcf0:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d01b      	beq.n	800fd38 <MQTT_PubrelToResend+0x52>
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d018      	beq.n	800fd38 <MQTT_PubrelToResend+0x52>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d015      	beq.n	800fd38 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800fd0c:	8abb      	ldrh	r3, [r7, #20]
 800fd0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd12:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800fd14:	8abb      	ldrh	r3, [r7, #20]
 800fd16:	f043 0310 	orr.w	r3, r3, #16
 800fd1a:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800fd1c:	8abb      	ldrh	r3, [r7, #20]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	4619      	mov	r1, r3
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fcd8 	bl	800f6d8 <stateSelect>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800fd2c:	8afb      	ldrh	r3, [r7, #22]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d002      	beq.n	800fd38 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2204      	movs	r2, #4
 800fd36:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800fd38:	8afb      	ldrh	r3, [r7, #22]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3718      	adds	r7, #24
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
	...

0800fd44 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800fd4a:	af02      	add	r7, sp, #8
 800fd4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd50:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fd54:	6018      	str	r0, [r3, #0]
 800fd56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd5a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800fd5e:	6019      	str	r1, [r3, #0]
 800fd60:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd64:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800fd68:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800fd70:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd74:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	781a      	ldrb	r2, [r3, #0]
 800fd7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd80:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fd84:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800fd86:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd8a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	88da      	ldrh	r2, [r3, #6]
 800fd92:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fd96:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fd9a:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800fd9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fda0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fda4:	2200      	movs	r2, #0
 800fda6:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800fda8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdac:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800fdb4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdb8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	789a      	ldrb	r2, [r3, #2]
 800fdc0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdc4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fdc8:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800fdca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdce:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	78da      	ldrb	r2, [r3, #3]
 800fdd6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdda:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fdde:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800fde0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fde4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	791a      	ldrb	r2, [r3, #4]
 800fdec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdf0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fdf4:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800fdf6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fdfa:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	795a      	ldrb	r2, [r3, #5]
 800fe02:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe06:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fe0a:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800fe0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe10:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	785b      	ldrb	r3, [r3, #1]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d115      	bne.n	800fe48 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800fe1c:	f107 0314 	add.w	r3, r7, #20
 800fe20:	4619      	mov	r1, r3
 800fe22:	482a      	ldr	r0, [pc, #168]	; (800fecc <transport_recv+0x188>)
 800fe24:	f7fb fc54 	bl	800b6d0 <ES_WIFI_StartClientConnection>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800fe2e:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d001      	beq.n	800fe3a <transport_recv+0xf6>
			return 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	e042      	b.n	800fec0 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800fe3a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe3e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2201      	movs	r2, #1
 800fe46:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800fe48:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe4c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	7819      	ldrb	r1, [r3, #0]
 800fe54:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe58:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	b298      	uxth	r0, r3
 800fe60:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe64:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800fe68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4603      	mov	r3, r0
 800fe76:	6812      	ldr	r2, [r2, #0]
 800fe78:	4814      	ldr	r0, [pc, #80]	; (800fecc <transport_recv+0x188>)
 800fe7a:	f7fb fdcf 	bl	800ba1c <ES_WIFI_ReceiveData>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800fe84:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00a      	beq.n	800fea2 <transport_recv+0x15e>
		socketStatus=0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800fe92:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fe96:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	705a      	strb	r2, [r3, #1]
 800fea0:	e00c      	b.n	800febc <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800fea2:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800fea6:	461a      	mov	r2, r3
 800fea8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800feac:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800feb0:	2100      	movs	r1, #0
 800feb2:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800feb4:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800feb8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800febc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	20000e70 	.word	0x20000e70

0800fed0 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08e      	sub	sp, #56	; 0x38
 800fed4:	af02      	add	r7, sp, #8
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800fedc:	2300      	movs	r3, #0
 800fede:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	88db      	ldrh	r3, [r3, #6]
 800feea:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800feec:	2300      	movs	r3, #0
 800feee:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800fef0:	2300      	movs	r3, #0
 800fef2:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	789b      	ldrb	r3, [r3, #2]
 800fef8:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	78db      	ldrb	r3, [r3, #3]
 800fefe:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	791b      	ldrb	r3, [r3, #4]
 800ff04:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	795b      	ldrb	r3, [r3, #5]
 800ff0a:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	785b      	ldrb	r3, [r3, #1]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d111      	bne.n	800ff38 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800ff14:	f107 0314 	add.w	r3, r7, #20
 800ff18:	4619      	mov	r1, r3
 800ff1a:	481c      	ldr	r0, [pc, #112]	; (800ff8c <transport_send+0xbc>)
 800ff1c:	f7fb fbd8 	bl	800b6d0 <ES_WIFI_StartClientConnection>
 800ff20:	4603      	mov	r3, r0
 800ff22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800ff26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <transport_send+0x62>
			return 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	e027      	b.n	800ff82 <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2201      	movs	r2, #1
 800ff36:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	7819      	ldrb	r1, [r3, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	4613      	mov	r3, r2
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	480e      	ldr	r0, [pc, #56]	; (800ff8c <transport_send+0xbc>)
 800ff52:	f7fb fca7 	bl	800b8a4 <ES_WIFI_SendData>
 800ff56:	4603      	mov	r3, r0
 800ff58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800ff5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00a      	beq.n	800ff7a <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2200      	movs	r2, #0
 800ff68:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800ff6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4807      	ldr	r0, [pc, #28]	; (800ff90 <transport_send+0xc0>)
 800ff72:	f004 fabf 	bl	80144f4 <iprintf>
		return 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	e003      	b.n	800ff82 <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800ff7a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ff7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800ff80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3730      	adds	r7, #48	; 0x30
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000e70 	.word	0x20000e70
 800ff90:	0801806c 	.word	0x0801806c

0800ff94 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60ba      	str	r2, [r7, #8]
 800ff9c:	607b      	str	r3, [r7, #4]
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73fb      	strb	r3, [r7, #15]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	7bfa      	ldrb	r2, [r7, #15]
 800ffaa:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	7bba      	ldrb	r2, [r7, #14]
 800ffb0:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	4a08      	ldr	r2, [pc, #32]	; (800ffd8 <init_transport_from_socket+0x44>)
 800ffb6:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a08      	ldr	r2, [pc, #32]	; (800ffdc <init_transport_from_socket+0x48>)
 800ffbc:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	60da      	str	r2, [r3, #12]
}
 800ffca:	bf00      	nop
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	0800fd45 	.word	0x0800fd45
 800ffdc:	0800fed1 	.word	0x0800fed1

0800ffe0 <__NVIC_SetPriority>:
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	6039      	str	r1, [r7, #0]
 800ffea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	db0a      	blt.n	801000a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	b2da      	uxtb	r2, r3
 800fff8:	490c      	ldr	r1, [pc, #48]	; (801002c <__NVIC_SetPriority+0x4c>)
 800fffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fffe:	0112      	lsls	r2, r2, #4
 8010000:	b2d2      	uxtb	r2, r2
 8010002:	440b      	add	r3, r1
 8010004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010008:	e00a      	b.n	8010020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	b2da      	uxtb	r2, r3
 801000e:	4908      	ldr	r1, [pc, #32]	; (8010030 <__NVIC_SetPriority+0x50>)
 8010010:	79fb      	ldrb	r3, [r7, #7]
 8010012:	f003 030f 	and.w	r3, r3, #15
 8010016:	3b04      	subs	r3, #4
 8010018:	0112      	lsls	r2, r2, #4
 801001a:	b2d2      	uxtb	r2, r2
 801001c:	440b      	add	r3, r1
 801001e:	761a      	strb	r2, [r3, #24]
}
 8010020:	bf00      	nop
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	e000e100 	.word	0xe000e100
 8010030:	e000ed00 	.word	0xe000ed00

08010034 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010038:	4b05      	ldr	r3, [pc, #20]	; (8010050 <SysTick_Handler+0x1c>)
 801003a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801003c:	f002 f804 	bl	8012048 <xTaskGetSchedulerState>
 8010040:	4603      	mov	r3, r0
 8010042:	2b01      	cmp	r3, #1
 8010044:	d001      	beq.n	801004a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010046:	f002 ffef 	bl	8013028 <xPortSysTickHandler>
  }
}
 801004a:	bf00      	nop
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	e000e010 	.word	0xe000e010

08010054 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010054:	b580      	push	{r7, lr}
 8010056:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010058:	2100      	movs	r1, #0
 801005a:	f06f 0004 	mvn.w	r0, #4
 801005e:	f7ff ffbf 	bl	800ffe0 <__NVIC_SetPriority>
#endif
}
 8010062:	bf00      	nop
 8010064:	bd80      	pop	{r7, pc}
	...

08010068 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801006e:	f3ef 8305 	mrs	r3, IPSR
 8010072:	603b      	str	r3, [r7, #0]
  return(result);
 8010074:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010076:	2b00      	cmp	r3, #0
 8010078:	d003      	beq.n	8010082 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801007a:	f06f 0305 	mvn.w	r3, #5
 801007e:	607b      	str	r3, [r7, #4]
 8010080:	e00c      	b.n	801009c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010082:	4b0a      	ldr	r3, [pc, #40]	; (80100ac <osKernelInitialize+0x44>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d105      	bne.n	8010096 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801008a:	4b08      	ldr	r3, [pc, #32]	; (80100ac <osKernelInitialize+0x44>)
 801008c:	2201      	movs	r2, #1
 801008e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010090:	2300      	movs	r3, #0
 8010092:	607b      	str	r3, [r7, #4]
 8010094:	e002      	b.n	801009c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010096:	f04f 33ff 	mov.w	r3, #4294967295
 801009a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801009c:	687b      	ldr	r3, [r7, #4]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	20001770 	.word	0x20001770

080100b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100b6:	f3ef 8305 	mrs	r3, IPSR
 80100ba:	603b      	str	r3, [r7, #0]
  return(result);
 80100bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d003      	beq.n	80100ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80100c2:	f06f 0305 	mvn.w	r3, #5
 80100c6:	607b      	str	r3, [r7, #4]
 80100c8:	e010      	b.n	80100ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80100ca:	4b0b      	ldr	r3, [pc, #44]	; (80100f8 <osKernelStart+0x48>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d109      	bne.n	80100e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80100d2:	f7ff ffbf 	bl	8010054 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80100d6:	4b08      	ldr	r3, [pc, #32]	; (80100f8 <osKernelStart+0x48>)
 80100d8:	2202      	movs	r2, #2
 80100da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80100dc:	f001 fb3a 	bl	8011754 <vTaskStartScheduler>
      stat = osOK;
 80100e0:	2300      	movs	r3, #0
 80100e2:	607b      	str	r3, [r7, #4]
 80100e4:	e002      	b.n	80100ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80100e6:	f04f 33ff 	mov.w	r3, #4294967295
 80100ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80100ec:	687b      	ldr	r3, [r7, #4]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20001770 	.word	0x20001770

080100fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08e      	sub	sp, #56	; 0x38
 8010100:	af04      	add	r7, sp, #16
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010108:	2300      	movs	r3, #0
 801010a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801010c:	f3ef 8305 	mrs	r3, IPSR
 8010110:	617b      	str	r3, [r7, #20]
  return(result);
 8010112:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010114:	2b00      	cmp	r3, #0
 8010116:	d17e      	bne.n	8010216 <osThreadNew+0x11a>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d07b      	beq.n	8010216 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801011e:	2380      	movs	r3, #128	; 0x80
 8010120:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010122:	2318      	movs	r3, #24
 8010124:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010126:	2300      	movs	r3, #0
 8010128:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801012a:	f04f 33ff 	mov.w	r3, #4294967295
 801012e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d045      	beq.n	80101c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <osThreadNew+0x48>
        name = attr->name;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	699b      	ldr	r3, [r3, #24]
 8010150:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d008      	beq.n	801016a <osThreadNew+0x6e>
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	2b38      	cmp	r3, #56	; 0x38
 801015c:	d805      	bhi.n	801016a <osThreadNew+0x6e>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <osThreadNew+0x72>
        return (NULL);
 801016a:	2300      	movs	r3, #0
 801016c:	e054      	b.n	8010218 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d003      	beq.n	801017e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	695b      	ldr	r3, [r3, #20]
 801017a:	089b      	lsrs	r3, r3, #2
 801017c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00e      	beq.n	80101a4 <osThreadNew+0xa8>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	2bbf      	cmp	r3, #191	; 0xbf
 801018c:	d90a      	bls.n	80101a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010192:	2b00      	cmp	r3, #0
 8010194:	d006      	beq.n	80101a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d002      	beq.n	80101a4 <osThreadNew+0xa8>
        mem = 1;
 801019e:	2301      	movs	r3, #1
 80101a0:	61bb      	str	r3, [r7, #24]
 80101a2:	e010      	b.n	80101c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d10c      	bne.n	80101c6 <osThreadNew+0xca>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d108      	bne.n	80101c6 <osThreadNew+0xca>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d104      	bne.n	80101c6 <osThreadNew+0xca>
          mem = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	61bb      	str	r3, [r7, #24]
 80101c0:	e001      	b.n	80101c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d110      	bne.n	80101ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101d4:	9202      	str	r2, [sp, #8]
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	6a3a      	ldr	r2, [r7, #32]
 80101e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f001 f8c6 	bl	8011374 <xTaskCreateStatic>
 80101e8:	4603      	mov	r3, r0
 80101ea:	613b      	str	r3, [r7, #16]
 80101ec:	e013      	b.n	8010216 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d110      	bne.n	8010216 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80101f4:	6a3b      	ldr	r3, [r7, #32]
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	f107 0310 	add.w	r3, r7, #16
 80101fc:	9301      	str	r3, [sp, #4]
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f001 f911 	bl	801142e <xTaskCreate>
 801020c:	4603      	mov	r3, r0
 801020e:	2b01      	cmp	r3, #1
 8010210:	d001      	beq.n	8010216 <osThreadNew+0x11a>
            hTask = NULL;
 8010212:	2300      	movs	r3, #0
 8010214:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010216:	693b      	ldr	r3, [r7, #16]
}
 8010218:	4618      	mov	r0, r3
 801021a:	3728      	adds	r7, #40	; 0x28
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af02      	add	r7, sp, #8
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <osThreadFlagsSet+0x1a>
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	da03      	bge.n	8010242 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801023a:	f06f 0303 	mvn.w	r3, #3
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	e035      	b.n	80102ae <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8010242:	f04f 33ff 	mov.w	r3, #4294967295
 8010246:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010248:	f3ef 8305 	mrs	r3, IPSR
 801024c:	613b      	str	r3, [r7, #16]
  return(result);
 801024e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8010250:	2b00      	cmp	r3, #0
 8010252:	d01f      	beq.n	8010294 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8010254:	2300      	movs	r3, #0
 8010256:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8010258:	f107 0308 	add.w	r3, r7, #8
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	2300      	movs	r3, #0
 8010260:	2201      	movs	r2, #1
 8010262:	6839      	ldr	r1, [r7, #0]
 8010264:	6978      	ldr	r0, [r7, #20]
 8010266:	f002 f899 	bl	801239c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801026a:	f107 030c 	add.w	r3, r7, #12
 801026e:	2200      	movs	r2, #0
 8010270:	9200      	str	r2, [sp, #0]
 8010272:	2200      	movs	r2, #0
 8010274:	2100      	movs	r1, #0
 8010276:	6978      	ldr	r0, [r7, #20]
 8010278:	f002 f890 	bl	801239c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d015      	beq.n	80102ae <osThreadFlagsSet+0x8e>
 8010282:	4b0d      	ldr	r3, [pc, #52]	; (80102b8 <osThreadFlagsSet+0x98>)
 8010284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	e00c      	b.n	80102ae <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8010294:	2300      	movs	r3, #0
 8010296:	2201      	movs	r2, #1
 8010298:	6839      	ldr	r1, [r7, #0]
 801029a:	6978      	ldr	r0, [r7, #20]
 801029c:	f001 ffc0 	bl	8012220 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80102a0:	f107 030c 	add.w	r3, r7, #12
 80102a4:	2200      	movs	r2, #0
 80102a6:	2100      	movs	r1, #0
 80102a8:	6978      	ldr	r0, [r7, #20]
 80102aa:	f001 ffb9 	bl	8012220 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80102ae:	68fb      	ldr	r3, [r7, #12]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3718      	adds	r7, #24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	e000ed04 	.word	0xe000ed04

080102bc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08c      	sub	sp, #48	; 0x30
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102c8:	f3ef 8305 	mrs	r3, IPSR
 80102cc:	617b      	str	r3, [r7, #20]
  return(result);
 80102ce:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d003      	beq.n	80102dc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80102d4:	f06f 0305 	mvn.w	r3, #5
 80102d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102da:	e06b      	b.n	80103b4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	da03      	bge.n	80102ea <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80102e2:	f06f 0303 	mvn.w	r3, #3
 80102e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102e8:	e064      	b.n	80103b4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <osThreadFlagsWait+0x3e>
      clear = 0U;
 80102f4:	2300      	movs	r3, #0
 80102f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80102f8:	e001      	b.n	80102fe <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80102fe:	2300      	movs	r3, #0
 8010300:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8010306:	f001 fb43 	bl	8011990 <xTaskGetTickCount>
 801030a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 801030c:	f107 0210 	add.w	r2, r7, #16
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010314:	2000      	movs	r0, #0
 8010316:	f001 ff23 	bl	8012160 <xTaskNotifyWait>
 801031a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	2b01      	cmp	r3, #1
 8010320:	d137      	bne.n	8010392 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8010322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4013      	ands	r3, r2
 8010328:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801032e:	4313      	orrs	r3, r2
 8010330:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d00c      	beq.n	8010356 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010340:	4013      	ands	r3, r2
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	429a      	cmp	r2, r3
 8010346:	d032      	beq.n	80103ae <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10f      	bne.n	801036e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 801034e:	f06f 0302 	mvn.w	r3, #2
 8010352:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8010354:	e02e      	b.n	80103b4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8010356:	68fa      	ldr	r2, [r7, #12]
 8010358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035a:	4013      	ands	r3, r2
 801035c:	2b00      	cmp	r3, #0
 801035e:	d128      	bne.n	80103b2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d103      	bne.n	801036e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8010366:	f06f 0302 	mvn.w	r3, #2
 801036a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 801036c:	e022      	b.n	80103b4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801036e:	f001 fb0f 	bl	8011990 <xTaskGetTickCount>
 8010372:	4602      	mov	r2, r0
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 801037a:	69ba      	ldr	r2, [r7, #24]
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	429a      	cmp	r2, r3
 8010380:	d902      	bls.n	8010388 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	627b      	str	r3, [r7, #36]	; 0x24
 8010386:	e00e      	b.n	80103a6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8010388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	627b      	str	r3, [r7, #36]	; 0x24
 8010390:	e009      	b.n	80103a6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d103      	bne.n	80103a0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8010398:	f06f 0302 	mvn.w	r3, #2
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801039e:	e002      	b.n	80103a6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80103a0:	f06f 0301 	mvn.w	r3, #1
 80103a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1af      	bne.n	801030c <osThreadFlagsWait+0x50>
 80103ac:	e002      	b.n	80103b4 <osThreadFlagsWait+0xf8>
            break;
 80103ae:	bf00      	nop
 80103b0:	e000      	b.n	80103b4 <osThreadFlagsWait+0xf8>
            break;
 80103b2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3730      	adds	r7, #48	; 0x30
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103c6:	f3ef 8305 	mrs	r3, IPSR
 80103ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80103cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <osDelay+0x1c>
    stat = osErrorISR;
 80103d2:	f06f 0305 	mvn.w	r3, #5
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	e007      	b.n	80103ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80103da:	2300      	movs	r3, #0
 80103dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f001 f981 	bl	80116ec <vTaskDelay>
    }
  }

  return (stat);
 80103ea:	68fb      	ldr	r3, [r7, #12]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08a      	sub	sp, #40	; 0x28
 80103f8:	af02      	add	r7, sp, #8
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010400:	2300      	movs	r3, #0
 8010402:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010404:	f3ef 8305 	mrs	r3, IPSR
 8010408:	613b      	str	r3, [r7, #16]
  return(result);
 801040a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801040c:	2b00      	cmp	r3, #0
 801040e:	d15f      	bne.n	80104d0 <osMessageQueueNew+0xdc>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d05c      	beq.n	80104d0 <osMessageQueueNew+0xdc>
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d059      	beq.n	80104d0 <osMessageQueueNew+0xdc>
    mem = -1;
 801041c:	f04f 33ff 	mov.w	r3, #4294967295
 8010420:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d029      	beq.n	801047c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d012      	beq.n	8010456 <osMessageQueueNew+0x62>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	2b4f      	cmp	r3, #79	; 0x4f
 8010436:	d90e      	bls.n	8010456 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00a      	beq.n	8010456 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	695a      	ldr	r2, [r3, #20]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68b9      	ldr	r1, [r7, #8]
 8010448:	fb01 f303 	mul.w	r3, r1, r3
 801044c:	429a      	cmp	r2, r3
 801044e:	d302      	bcc.n	8010456 <osMessageQueueNew+0x62>
        mem = 1;
 8010450:	2301      	movs	r3, #1
 8010452:	61bb      	str	r3, [r7, #24]
 8010454:	e014      	b.n	8010480 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d110      	bne.n	8010480 <osMessageQueueNew+0x8c>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10c      	bne.n	8010480 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801046a:	2b00      	cmp	r3, #0
 801046c:	d108      	bne.n	8010480 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	695b      	ldr	r3, [r3, #20]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d104      	bne.n	8010480 <osMessageQueueNew+0x8c>
          mem = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	61bb      	str	r3, [r7, #24]
 801047a:	e001      	b.n	8010480 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d10b      	bne.n	801049e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	691a      	ldr	r2, [r3, #16]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	2100      	movs	r1, #0
 8010490:	9100      	str	r1, [sp, #0]
 8010492:	68b9      	ldr	r1, [r7, #8]
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 fa2f 	bl	80108f8 <xQueueGenericCreateStatic>
 801049a:	61f8      	str	r0, [r7, #28]
 801049c:	e008      	b.n	80104b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d105      	bne.n	80104b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80104a4:	2200      	movs	r2, #0
 80104a6:	68b9      	ldr	r1, [r7, #8]
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 fa9d 	bl	80109e8 <xQueueGenericCreate>
 80104ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00c      	beq.n	80104d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d003      	beq.n	80104c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	617b      	str	r3, [r7, #20]
 80104c2:	e001      	b.n	80104c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80104c4:	2300      	movs	r3, #0
 80104c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80104c8:	6979      	ldr	r1, [r7, #20]
 80104ca:	69f8      	ldr	r0, [r7, #28]
 80104cc:	f000 fef4 	bl	80112b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80104d0:	69fb      	ldr	r3, [r7, #28]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3720      	adds	r7, #32
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b088      	sub	sp, #32
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	603b      	str	r3, [r7, #0]
 80104e8:	4613      	mov	r3, r2
 80104ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104f4:	f3ef 8305 	mrs	r3, IPSR
 80104f8:	617b      	str	r3, [r7, #20]
  return(result);
 80104fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d028      	beq.n	8010552 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d005      	beq.n	8010512 <osMessageQueuePut+0x36>
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <osMessageQueuePut+0x36>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d003      	beq.n	801051a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010512:	f06f 0303 	mvn.w	r3, #3
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	e038      	b.n	801058c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801051a:	2300      	movs	r3, #0
 801051c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801051e:	f107 0210 	add.w	r2, r7, #16
 8010522:	2300      	movs	r3, #0
 8010524:	68b9      	ldr	r1, [r7, #8]
 8010526:	69b8      	ldr	r0, [r7, #24]
 8010528:	f000 fbba 	bl	8010ca0 <xQueueGenericSendFromISR>
 801052c:	4603      	mov	r3, r0
 801052e:	2b01      	cmp	r3, #1
 8010530:	d003      	beq.n	801053a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010532:	f06f 0302 	mvn.w	r3, #2
 8010536:	61fb      	str	r3, [r7, #28]
 8010538:	e028      	b.n	801058c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d025      	beq.n	801058c <osMessageQueuePut+0xb0>
 8010540:	4b15      	ldr	r3, [pc, #84]	; (8010598 <osMessageQueuePut+0xbc>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	e01c      	b.n	801058c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <osMessageQueuePut+0x82>
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d103      	bne.n	8010566 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801055e:	f06f 0303 	mvn.w	r3, #3
 8010562:	61fb      	str	r3, [r7, #28]
 8010564:	e012      	b.n	801058c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010566:	2300      	movs	r3, #0
 8010568:	683a      	ldr	r2, [r7, #0]
 801056a:	68b9      	ldr	r1, [r7, #8]
 801056c:	69b8      	ldr	r0, [r7, #24]
 801056e:	f000 fa99 	bl	8010aa4 <xQueueGenericSend>
 8010572:	4603      	mov	r3, r0
 8010574:	2b01      	cmp	r3, #1
 8010576:	d009      	beq.n	801058c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d003      	beq.n	8010586 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801057e:	f06f 0301 	mvn.w	r3, #1
 8010582:	61fb      	str	r3, [r7, #28]
 8010584:	e002      	b.n	801058c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010586:	f06f 0302 	mvn.w	r3, #2
 801058a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801058c:	69fb      	ldr	r3, [r7, #28]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3720      	adds	r7, #32
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105b2:	f3ef 8305 	mrs	r3, IPSR
 80105b6:	617b      	str	r3, [r7, #20]
  return(result);
 80105b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d028      	beq.n	8010610 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d005      	beq.n	80105d0 <osMessageQueueGet+0x34>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <osMessageQueueGet+0x34>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d003      	beq.n	80105d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80105d0:	f06f 0303 	mvn.w	r3, #3
 80105d4:	61fb      	str	r3, [r7, #28]
 80105d6:	e037      	b.n	8010648 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80105d8:	2300      	movs	r3, #0
 80105da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80105dc:	f107 0310 	add.w	r3, r7, #16
 80105e0:	461a      	mov	r2, r3
 80105e2:	68b9      	ldr	r1, [r7, #8]
 80105e4:	69b8      	ldr	r0, [r7, #24]
 80105e6:	f000 fcd7 	bl	8010f98 <xQueueReceiveFromISR>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d003      	beq.n	80105f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80105f0:	f06f 0302 	mvn.w	r3, #2
 80105f4:	61fb      	str	r3, [r7, #28]
 80105f6:	e027      	b.n	8010648 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d024      	beq.n	8010648 <osMessageQueueGet+0xac>
 80105fe:	4b15      	ldr	r3, [pc, #84]	; (8010654 <osMessageQueueGet+0xb8>)
 8010600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	f3bf 8f6f 	isb	sy
 801060e:	e01b      	b.n	8010648 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <osMessageQueueGet+0x80>
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d103      	bne.n	8010624 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801061c:	f06f 0303 	mvn.w	r3, #3
 8010620:	61fb      	str	r3, [r7, #28]
 8010622:	e011      	b.n	8010648 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	68b9      	ldr	r1, [r7, #8]
 8010628:	69b8      	ldr	r0, [r7, #24]
 801062a:	f000 fbd5 	bl	8010dd8 <xQueueReceive>
 801062e:	4603      	mov	r3, r0
 8010630:	2b01      	cmp	r3, #1
 8010632:	d009      	beq.n	8010648 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d003      	beq.n	8010642 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801063a:	f06f 0301 	mvn.w	r3, #1
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e002      	b.n	8010648 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010642:	f06f 0302 	mvn.w	r3, #2
 8010646:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010648:	69fb      	ldr	r3, [r7, #28]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3720      	adds	r7, #32
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	4a07      	ldr	r2, [pc, #28]	; (8010684 <vApplicationGetIdleTaskMemory+0x2c>)
 8010668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	4a06      	ldr	r2, [pc, #24]	; (8010688 <vApplicationGetIdleTaskMemory+0x30>)
 801066e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2280      	movs	r2, #128	; 0x80
 8010674:	601a      	str	r2, [r3, #0]
}
 8010676:	bf00      	nop
 8010678:	3714      	adds	r7, #20
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	20001774 	.word	0x20001774
 8010688:	20001834 	.word	0x20001834

0801068c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801068c:	b480      	push	{r7}
 801068e:	b085      	sub	sp, #20
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	4a07      	ldr	r2, [pc, #28]	; (80106b8 <vApplicationGetTimerTaskMemory+0x2c>)
 801069c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	4a06      	ldr	r2, [pc, #24]	; (80106bc <vApplicationGetTimerTaskMemory+0x30>)
 80106a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80106aa:	601a      	str	r2, [r3, #0]
}
 80106ac:	bf00      	nop
 80106ae:	3714      	adds	r7, #20
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	20001a34 	.word	0x20001a34
 80106bc:	20001af4 	.word	0x20001af4

080106c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f103 0208 	add.w	r2, r3, #8
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f04f 32ff 	mov.w	r2, #4294967295
 80106d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f103 0208 	add.w	r2, r3, #8
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f103 0208 	add.w	r2, r3, #8
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801070e:	bf00      	nop
 8010710:	370c      	adds	r7, #12
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr

0801071a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801071a:	b480      	push	{r7}
 801071c:	b085      	sub	sp, #20
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	689a      	ldr	r2, [r3, #8]
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	1c5a      	adds	r2, r3, #1
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
}
 8010756:	bf00      	nop
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010762:	b480      	push	{r7}
 8010764:	b085      	sub	sp, #20
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010778:	d103      	bne.n	8010782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	691b      	ldr	r3, [r3, #16]
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	e00c      	b.n	801079c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	3308      	adds	r3, #8
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	e002      	b.n	8010790 <vListInsert+0x2e>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	429a      	cmp	r2, r3
 801079a:	d2f6      	bcs.n	801078a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	685a      	ldr	r2, [r3, #4]
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	1c5a      	adds	r2, r3, #1
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	601a      	str	r2, [r3, #0]
}
 80107c8:	bf00      	nop
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	6892      	ldr	r2, [r2, #8]
 80107ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	6852      	ldr	r2, [r2, #4]
 80107f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d103      	bne.n	8010808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	689a      	ldr	r2, [r3, #8]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	1e5a      	subs	r2, r3, #1
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10a      	bne.n	8010852 <xQueueGenericReset+0x2a>
	__asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010840:	f383 8811 	msr	BASEPRI, r3
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	60bb      	str	r3, [r7, #8]
}
 801084e:	bf00      	nop
 8010850:	e7fe      	b.n	8010850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010852:	f002 fb57 	bl	8012f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010862:	fb01 f303 	mul.w	r3, r1, r3
 8010866:	441a      	add	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2200      	movs	r2, #0
 8010870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010882:	3b01      	subs	r3, #1
 8010884:	68f9      	ldr	r1, [r7, #12]
 8010886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010888:	fb01 f303 	mul.w	r3, r1, r3
 801088c:	441a      	add	r2, r3
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	22ff      	movs	r2, #255	; 0xff
 8010896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	22ff      	movs	r2, #255	; 0xff
 801089e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d114      	bne.n	80108d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d01a      	beq.n	80108e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	3310      	adds	r3, #16
 80108b4:	4618      	mov	r0, r3
 80108b6:	f001 fa05 	bl	8011cc4 <xTaskRemoveFromEventList>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d012      	beq.n	80108e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80108c0:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <xQueueGenericReset+0xcc>)
 80108c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108c6:	601a      	str	r2, [r3, #0]
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	e009      	b.n	80108e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	3310      	adds	r3, #16
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7ff fef2 	bl	80106c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	3324      	adds	r3, #36	; 0x24
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff feed 	bl	80106c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80108e6:	f002 fb3d 	bl	8012f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80108ea:	2301      	movs	r3, #1
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	e000ed04 	.word	0xe000ed04

080108f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b08e      	sub	sp, #56	; 0x38
 80108fc:	af02      	add	r7, sp, #8
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10a      	bne.n	8010922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010910:	f383 8811 	msr	BASEPRI, r3
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801091e:	bf00      	nop
 8010920:	e7fe      	b.n	8010920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d10a      	bne.n	801093e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092c:	f383 8811 	msr	BASEPRI, r3
 8010930:	f3bf 8f6f 	isb	sy
 8010934:	f3bf 8f4f 	dsb	sy
 8010938:	627b      	str	r3, [r7, #36]	; 0x24
}
 801093a:	bf00      	nop
 801093c:	e7fe      	b.n	801093c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <xQueueGenericCreateStatic+0x52>
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <xQueueGenericCreateStatic+0x56>
 801094a:	2301      	movs	r3, #1
 801094c:	e000      	b.n	8010950 <xQueueGenericCreateStatic+0x58>
 801094e:	2300      	movs	r3, #0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10a      	bne.n	801096a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	623b      	str	r3, [r7, #32]
}
 8010966:	bf00      	nop
 8010968:	e7fe      	b.n	8010968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d102      	bne.n	8010976 <xQueueGenericCreateStatic+0x7e>
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <xQueueGenericCreateStatic+0x82>
 8010976:	2301      	movs	r3, #1
 8010978:	e000      	b.n	801097c <xQueueGenericCreateStatic+0x84>
 801097a:	2300      	movs	r3, #0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d10a      	bne.n	8010996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	61fb      	str	r3, [r7, #28]
}
 8010992:	bf00      	nop
 8010994:	e7fe      	b.n	8010994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010996:	2350      	movs	r3, #80	; 0x50
 8010998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	2b50      	cmp	r3, #80	; 0x50
 801099e:	d00a      	beq.n	80109b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80109a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	61bb      	str	r3, [r7, #24]
}
 80109b2:	bf00      	nop
 80109b4:	e7fe      	b.n	80109b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80109b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00d      	beq.n	80109de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80109c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80109ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	4613      	mov	r3, r2
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f000 f83f 	bl	8010a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80109de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3730      	adds	r7, #48	; 0x30
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	; 0x28
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	4613      	mov	r3, r2
 80109f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10a      	bne.n	8010a12 <xQueueGenericCreate+0x2a>
	__asm volatile
 80109fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	613b      	str	r3, [r7, #16]
}
 8010a0e:	bf00      	nop
 8010a10:	e7fe      	b.n	8010a10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	68ba      	ldr	r2, [r7, #8]
 8010a16:	fb02 f303 	mul.w	r3, r2, r3
 8010a1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	3350      	adds	r3, #80	; 0x50
 8010a20:	4618      	mov	r0, r3
 8010a22:	f002 fb91 	bl	8013148 <pvPortMalloc>
 8010a26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d011      	beq.n	8010a52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	3350      	adds	r3, #80	; 0x50
 8010a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010a40:	79fa      	ldrb	r2, [r7, #7]
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	4613      	mov	r3, r2
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	68b9      	ldr	r1, [r7, #8]
 8010a4c:	68f8      	ldr	r0, [r7, #12]
 8010a4e:	f000 f805 	bl	8010a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a52:	69bb      	ldr	r3, [r7, #24]
	}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3720      	adds	r7, #32
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
 8010a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a70:	69bb      	ldr	r3, [r7, #24]
 8010a72:	69ba      	ldr	r2, [r7, #24]
 8010a74:	601a      	str	r2, [r3, #0]
 8010a76:	e002      	b.n	8010a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	69b8      	ldr	r0, [r7, #24]
 8010a8e:	f7ff fecb 	bl	8010828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	78fa      	ldrb	r2, [r7, #3]
 8010a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a9a:	bf00      	nop
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
	...

08010aa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08e      	sub	sp, #56	; 0x38
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10a      	bne.n	8010ad6 <xQueueGenericSend+0x32>
	__asm volatile
 8010ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac4:	f383 8811 	msr	BASEPRI, r3
 8010ac8:	f3bf 8f6f 	isb	sy
 8010acc:	f3bf 8f4f 	dsb	sy
 8010ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010ad2:	bf00      	nop
 8010ad4:	e7fe      	b.n	8010ad4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d103      	bne.n	8010ae4 <xQueueGenericSend+0x40>
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d101      	bne.n	8010ae8 <xQueueGenericSend+0x44>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	e000      	b.n	8010aea <xQueueGenericSend+0x46>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10a      	bne.n	8010b04 <xQueueGenericSend+0x60>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d103      	bne.n	8010b12 <xQueueGenericSend+0x6e>
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d101      	bne.n	8010b16 <xQueueGenericSend+0x72>
 8010b12:	2301      	movs	r3, #1
 8010b14:	e000      	b.n	8010b18 <xQueueGenericSend+0x74>
 8010b16:	2300      	movs	r3, #0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10a      	bne.n	8010b32 <xQueueGenericSend+0x8e>
	__asm volatile
 8010b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	623b      	str	r3, [r7, #32]
}
 8010b2e:	bf00      	nop
 8010b30:	e7fe      	b.n	8010b30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b32:	f001 fa89 	bl	8012048 <xTaskGetSchedulerState>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d102      	bne.n	8010b42 <xQueueGenericSend+0x9e>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <xQueueGenericSend+0xa2>
 8010b42:	2301      	movs	r3, #1
 8010b44:	e000      	b.n	8010b48 <xQueueGenericSend+0xa4>
 8010b46:	2300      	movs	r3, #0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d10a      	bne.n	8010b62 <xQueueGenericSend+0xbe>
	__asm volatile
 8010b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	61fb      	str	r3, [r7, #28]
}
 8010b5e:	bf00      	nop
 8010b60:	e7fe      	b.n	8010b60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b62:	f002 f9cf 	bl	8012f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d302      	bcc.n	8010b78 <xQueueGenericSend+0xd4>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d129      	bne.n	8010bcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	68b9      	ldr	r1, [r7, #8]
 8010b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b7e:	f000 fa8b 	bl	8011098 <prvCopyDataToQueue>
 8010b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d010      	beq.n	8010bae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8e:	3324      	adds	r3, #36	; 0x24
 8010b90:	4618      	mov	r0, r3
 8010b92:	f001 f897 	bl	8011cc4 <xTaskRemoveFromEventList>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d013      	beq.n	8010bc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b9c:	4b3f      	ldr	r3, [pc, #252]	; (8010c9c <xQueueGenericSend+0x1f8>)
 8010b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	e00a      	b.n	8010bc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010bb4:	4b39      	ldr	r3, [pc, #228]	; (8010c9c <xQueueGenericSend+0x1f8>)
 8010bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010bc4:	f002 f9ce 	bl	8012f64 <vPortExitCritical>
				return pdPASS;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e063      	b.n	8010c94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d103      	bne.n	8010bda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bd2:	f002 f9c7 	bl	8012f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e05c      	b.n	8010c94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d106      	bne.n	8010bee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010be0:	f107 0314 	add.w	r3, r7, #20
 8010be4:	4618      	mov	r0, r3
 8010be6:	f001 f8d1 	bl	8011d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bea:	2301      	movs	r3, #1
 8010bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bee:	f002 f9b9 	bl	8012f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bf2:	f000 fe21 	bl	8011838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bf6:	f002 f985 	bl	8012f04 <vPortEnterCritical>
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d103      	bne.n	8010c10 <xQueueGenericSend+0x16c>
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1c:	d103      	bne.n	8010c26 <xQueueGenericSend+0x182>
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c26:	f002 f99d 	bl	8012f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c2a:	1d3a      	adds	r2, r7, #4
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4611      	mov	r1, r2
 8010c32:	4618      	mov	r0, r3
 8010c34:	f001 f8c0 	bl	8011db8 <xTaskCheckForTimeOut>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d124      	bne.n	8010c88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c40:	f000 fb22 	bl	8011288 <prvIsQueueFull>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d018      	beq.n	8010c7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	3310      	adds	r3, #16
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 ffe6 	bl	8011c24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c5a:	f000 faad 	bl	80111b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c5e:	f000 fdf9 	bl	8011854 <xTaskResumeAll>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	f47f af7c 	bne.w	8010b62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010c6a:	4b0c      	ldr	r3, [pc, #48]	; (8010c9c <xQueueGenericSend+0x1f8>)
 8010c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	f3bf 8f4f 	dsb	sy
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	e772      	b.n	8010b62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c7e:	f000 fa9b 	bl	80111b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c82:	f000 fde7 	bl	8011854 <xTaskResumeAll>
 8010c86:	e76c      	b.n	8010b62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c8a:	f000 fa95 	bl	80111b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c8e:	f000 fde1 	bl	8011854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3738      	adds	r7, #56	; 0x38
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	e000ed04 	.word	0xe000ed04

08010ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b090      	sub	sp, #64	; 0x40
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10a      	bne.n	8010cce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010cca:	bf00      	nop
 8010ccc:	e7fe      	b.n	8010ccc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d103      	bne.n	8010cdc <xQueueGenericSendFromISR+0x3c>
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d101      	bne.n	8010ce0 <xQueueGenericSendFromISR+0x40>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e000      	b.n	8010ce2 <xQueueGenericSendFromISR+0x42>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10a      	bne.n	8010cfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cea:	f383 8811 	msr	BASEPRI, r3
 8010cee:	f3bf 8f6f 	isb	sy
 8010cf2:	f3bf 8f4f 	dsb	sy
 8010cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010cf8:	bf00      	nop
 8010cfa:	e7fe      	b.n	8010cfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	d103      	bne.n	8010d0a <xQueueGenericSendFromISR+0x6a>
 8010d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d101      	bne.n	8010d0e <xQueueGenericSendFromISR+0x6e>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e000      	b.n	8010d10 <xQueueGenericSendFromISR+0x70>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10a      	bne.n	8010d2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d18:	f383 8811 	msr	BASEPRI, r3
 8010d1c:	f3bf 8f6f 	isb	sy
 8010d20:	f3bf 8f4f 	dsb	sy
 8010d24:	623b      	str	r3, [r7, #32]
}
 8010d26:	bf00      	nop
 8010d28:	e7fe      	b.n	8010d28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d2a:	f002 f9cd 	bl	80130c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8010d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d36:	f383 8811 	msr	BASEPRI, r3
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	61fa      	str	r2, [r7, #28]
 8010d44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010d46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d302      	bcc.n	8010d5c <xQueueGenericSendFromISR+0xbc>
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d12f      	bne.n	8010dbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d6c:	683a      	ldr	r2, [r7, #0]
 8010d6e:	68b9      	ldr	r1, [r7, #8]
 8010d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d72:	f000 f991 	bl	8011098 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d7e:	d112      	bne.n	8010da6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d016      	beq.n	8010db6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8a:	3324      	adds	r3, #36	; 0x24
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 ff99 	bl	8011cc4 <xTaskRemoveFromEventList>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00e      	beq.n	8010db6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00b      	beq.n	8010db6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	e007      	b.n	8010db6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010daa:	3301      	adds	r3, #1
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	b25a      	sxtb	r2, r3
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010db6:	2301      	movs	r3, #1
 8010db8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010dba:	e001      	b.n	8010dc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010dca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3740      	adds	r7, #64	; 0x40
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
	...

08010dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08c      	sub	sp, #48	; 0x30
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010de4:	2300      	movs	r3, #0
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10a      	bne.n	8010e08 <xQueueReceive+0x30>
	__asm volatile
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	f383 8811 	msr	BASEPRI, r3
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	623b      	str	r3, [r7, #32]
}
 8010e04:	bf00      	nop
 8010e06:	e7fe      	b.n	8010e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d103      	bne.n	8010e16 <xQueueReceive+0x3e>
 8010e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d101      	bne.n	8010e1a <xQueueReceive+0x42>
 8010e16:	2301      	movs	r3, #1
 8010e18:	e000      	b.n	8010e1c <xQueueReceive+0x44>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10a      	bne.n	8010e36 <xQueueReceive+0x5e>
	__asm volatile
 8010e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e24:	f383 8811 	msr	BASEPRI, r3
 8010e28:	f3bf 8f6f 	isb	sy
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	61fb      	str	r3, [r7, #28]
}
 8010e32:	bf00      	nop
 8010e34:	e7fe      	b.n	8010e34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e36:	f001 f907 	bl	8012048 <xTaskGetSchedulerState>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d102      	bne.n	8010e46 <xQueueReceive+0x6e>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <xQueueReceive+0x72>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e000      	b.n	8010e4c <xQueueReceive+0x74>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10a      	bne.n	8010e66 <xQueueReceive+0x8e>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	61bb      	str	r3, [r7, #24]
}
 8010e62:	bf00      	nop
 8010e64:	e7fe      	b.n	8010e64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e66:	f002 f84d 	bl	8012f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d01f      	beq.n	8010eb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e76:	68b9      	ldr	r1, [r7, #8]
 8010e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e7a:	f000 f977 	bl	801116c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	1e5a      	subs	r2, r3, #1
 8010e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00f      	beq.n	8010eae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	3310      	adds	r3, #16
 8010e92:	4618      	mov	r0, r3
 8010e94:	f000 ff16 	bl	8011cc4 <xTaskRemoveFromEventList>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d007      	beq.n	8010eae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e9e:	4b3d      	ldr	r3, [pc, #244]	; (8010f94 <xQueueReceive+0x1bc>)
 8010ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	f3bf 8f4f 	dsb	sy
 8010eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010eae:	f002 f859 	bl	8012f64 <vPortExitCritical>
				return pdPASS;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e069      	b.n	8010f8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d103      	bne.n	8010ec4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ebc:	f002 f852 	bl	8012f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	e062      	b.n	8010f8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010eca:	f107 0310 	add.w	r3, r7, #16
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f000 ff5c 	bl	8011d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ed8:	f002 f844 	bl	8012f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010edc:	f000 fcac 	bl	8011838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ee0:	f002 f810 	bl	8012f04 <vPortEnterCritical>
 8010ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010eea:	b25b      	sxtb	r3, r3
 8010eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ef0:	d103      	bne.n	8010efa <xQueueReceive+0x122>
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f00:	b25b      	sxtb	r3, r3
 8010f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f06:	d103      	bne.n	8010f10 <xQueueReceive+0x138>
 8010f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f10:	f002 f828 	bl	8012f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f14:	1d3a      	adds	r2, r7, #4
 8010f16:	f107 0310 	add.w	r3, r7, #16
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f000 ff4b 	bl	8011db8 <xTaskCheckForTimeOut>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d123      	bne.n	8010f70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f2a:	f000 f997 	bl	801125c <prvIsQueueEmpty>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d017      	beq.n	8010f64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f36:	3324      	adds	r3, #36	; 0x24
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f000 fe71 	bl	8011c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f44:	f000 f938 	bl	80111b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f48:	f000 fc84 	bl	8011854 <xTaskResumeAll>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d189      	bne.n	8010e66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010f52:	4b10      	ldr	r3, [pc, #64]	; (8010f94 <xQueueReceive+0x1bc>)
 8010f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f58:	601a      	str	r2, [r3, #0]
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	e780      	b.n	8010e66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f66:	f000 f927 	bl	80111b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f6a:	f000 fc73 	bl	8011854 <xTaskResumeAll>
 8010f6e:	e77a      	b.n	8010e66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f72:	f000 f921 	bl	80111b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f76:	f000 fc6d 	bl	8011854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f7c:	f000 f96e 	bl	801125c <prvIsQueueEmpty>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f43f af6f 	beq.w	8010e66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3730      	adds	r7, #48	; 0x30
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	e000ed04 	.word	0xe000ed04

08010f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b08e      	sub	sp, #56	; 0x38
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	623b      	str	r3, [r7, #32]
}
 8010fc0:	bf00      	nop
 8010fc2:	e7fe      	b.n	8010fc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d103      	bne.n	8010fd2 <xQueueReceiveFromISR+0x3a>
 8010fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <xQueueReceiveFromISR+0x3e>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e000      	b.n	8010fd8 <xQueueReceiveFromISR+0x40>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	61fb      	str	r3, [r7, #28]
}
 8010fee:	bf00      	nop
 8010ff0:	e7fe      	b.n	8010ff0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ff2:	f002 f869 	bl	80130c8 <vPortValidateInterruptPriority>
	__asm volatile
 8010ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	61ba      	str	r2, [r7, #24]
 801100c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801100e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101a:	2b00      	cmp	r3, #0
 801101c:	d02f      	beq.n	801107e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011028:	68b9      	ldr	r1, [r7, #8]
 801102a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801102c:	f000 f89e 	bl	801116c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011032:	1e5a      	subs	r2, r3, #1
 8011034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011036:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011040:	d112      	bne.n	8011068 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	691b      	ldr	r3, [r3, #16]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d016      	beq.n	8011078 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104c:	3310      	adds	r3, #16
 801104e:	4618      	mov	r0, r3
 8011050:	f000 fe38 	bl	8011cc4 <xTaskRemoveFromEventList>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00e      	beq.n	8011078 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d00b      	beq.n	8011078 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2201      	movs	r2, #1
 8011064:	601a      	str	r2, [r3, #0]
 8011066:	e007      	b.n	8011078 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801106c:	3301      	adds	r3, #1
 801106e:	b2db      	uxtb	r3, r3
 8011070:	b25a      	sxtb	r2, r3
 8011072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011078:	2301      	movs	r3, #1
 801107a:	637b      	str	r3, [r7, #52]	; 0x34
 801107c:	e001      	b.n	8011082 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801107e:	2300      	movs	r3, #0
 8011080:	637b      	str	r3, [r7, #52]	; 0x34
 8011082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011084:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	f383 8811 	msr	BASEPRI, r3
}
 801108c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011090:	4618      	mov	r0, r3
 8011092:	3738      	adds	r7, #56	; 0x38
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b086      	sub	sp, #24
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80110a4:	2300      	movs	r3, #0
 80110a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10d      	bne.n	80110d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d14d      	bne.n	801115a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f000 ffde 	bl	8012084 <xTaskPriorityDisinherit>
 80110c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2200      	movs	r2, #0
 80110ce:	609a      	str	r2, [r3, #8]
 80110d0:	e043      	b.n	801115a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d119      	bne.n	801110c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6858      	ldr	r0, [r3, #4]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e0:	461a      	mov	r2, r3
 80110e2:	68b9      	ldr	r1, [r7, #8]
 80110e4:	f002 fb7d 	bl	80137e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	685a      	ldr	r2, [r3, #4]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f0:	441a      	add	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	685a      	ldr	r2, [r3, #4]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	689b      	ldr	r3, [r3, #8]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d32b      	bcc.n	801115a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	605a      	str	r2, [r3, #4]
 801110a:	e026      	b.n	801115a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	68d8      	ldr	r0, [r3, #12]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011114:	461a      	mov	r2, r3
 8011116:	68b9      	ldr	r1, [r7, #8]
 8011118:	f002 fb63 	bl	80137e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	68da      	ldr	r2, [r3, #12]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011124:	425b      	negs	r3, r3
 8011126:	441a      	add	r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	68da      	ldr	r2, [r3, #12]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	429a      	cmp	r2, r3
 8011136:	d207      	bcs.n	8011148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	689a      	ldr	r2, [r3, #8]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011140:	425b      	negs	r3, r3
 8011142:	441a      	add	r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b02      	cmp	r3, #2
 801114c:	d105      	bne.n	801115a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d002      	beq.n	801115a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	3b01      	subs	r3, #1
 8011158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	1c5a      	adds	r2, r3, #1
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011162:	697b      	ldr	r3, [r7, #20]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3718      	adds	r7, #24
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117a:	2b00      	cmp	r3, #0
 801117c:	d018      	beq.n	80111b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68da      	ldr	r2, [r3, #12]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011186:	441a      	add	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68da      	ldr	r2, [r3, #12]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	429a      	cmp	r2, r3
 8011196:	d303      	bcc.n	80111a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	68d9      	ldr	r1, [r3, #12]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a8:	461a      	mov	r2, r3
 80111aa:	6838      	ldr	r0, [r7, #0]
 80111ac:	f002 fb19 	bl	80137e2 <memcpy>
	}
}
 80111b0:	bf00      	nop
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80111c0:	f001 fea0 	bl	8012f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111cc:	e011      	b.n	80111f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d012      	beq.n	80111fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3324      	adds	r3, #36	; 0x24
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 fd72 	bl	8011cc4 <xTaskRemoveFromEventList>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80111e6:	f000 fe49 	bl	8011e7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dce9      	bgt.n	80111ce <prvUnlockQueue+0x16>
 80111fa:	e000      	b.n	80111fe <prvUnlockQueue+0x46>
					break;
 80111fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	22ff      	movs	r2, #255	; 0xff
 8011202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011206:	f001 fead 	bl	8012f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801120a:	f001 fe7b 	bl	8012f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011216:	e011      	b.n	801123c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	691b      	ldr	r3, [r3, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d012      	beq.n	8011246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	3310      	adds	r3, #16
 8011224:	4618      	mov	r0, r3
 8011226:	f000 fd4d 	bl	8011cc4 <xTaskRemoveFromEventList>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d001      	beq.n	8011234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011230:	f000 fe24 	bl	8011e7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011234:	7bbb      	ldrb	r3, [r7, #14]
 8011236:	3b01      	subs	r3, #1
 8011238:	b2db      	uxtb	r3, r3
 801123a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801123c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011240:	2b00      	cmp	r3, #0
 8011242:	dce9      	bgt.n	8011218 <prvUnlockQueue+0x60>
 8011244:	e000      	b.n	8011248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	22ff      	movs	r2, #255	; 0xff
 801124c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011250:	f001 fe88 	bl	8012f64 <vPortExitCritical>
}
 8011254:	bf00      	nop
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011264:	f001 fe4e 	bl	8012f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011270:	2301      	movs	r3, #1
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	e001      	b.n	801127a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011276:	2300      	movs	r3, #0
 8011278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801127a:	f001 fe73 	bl	8012f64 <vPortExitCritical>

	return xReturn;
 801127e:	68fb      	ldr	r3, [r7, #12]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011290:	f001 fe38 	bl	8012f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801129c:	429a      	cmp	r2, r3
 801129e:	d102      	bne.n	80112a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80112a0:	2301      	movs	r3, #1
 80112a2:	60fb      	str	r3, [r7, #12]
 80112a4:	e001      	b.n	80112aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80112a6:	2300      	movs	r3, #0
 80112a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112aa:	f001 fe5b 	bl	8012f64 <vPortExitCritical>

	return xReturn;
 80112ae:	68fb      	ldr	r3, [r7, #12]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112c2:	2300      	movs	r3, #0
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	e014      	b.n	80112f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80112c8:	4a0f      	ldr	r2, [pc, #60]	; (8011308 <vQueueAddToRegistry+0x50>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10b      	bne.n	80112ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80112d4:	490c      	ldr	r1, [pc, #48]	; (8011308 <vQueueAddToRegistry+0x50>)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	683a      	ldr	r2, [r7, #0]
 80112da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80112de:	4a0a      	ldr	r2, [pc, #40]	; (8011308 <vQueueAddToRegistry+0x50>)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	4413      	add	r3, r2
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80112ea:	e006      	b.n	80112fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3301      	adds	r3, #1
 80112f0:	60fb      	str	r3, [r7, #12]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	2b07      	cmp	r3, #7
 80112f6:	d9e7      	bls.n	80112c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80112f8:	bf00      	nop
 80112fa:	bf00      	nop
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	20001ef4 	.word	0x20001ef4

0801130c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	60b9      	str	r1, [r7, #8]
 8011316:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801131c:	f001 fdf2 	bl	8012f04 <vPortEnterCritical>
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011326:	b25b      	sxtb	r3, r3
 8011328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132c:	d103      	bne.n	8011336 <vQueueWaitForMessageRestricted+0x2a>
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	2200      	movs	r2, #0
 8011332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801133c:	b25b      	sxtb	r3, r3
 801133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011342:	d103      	bne.n	801134c <vQueueWaitForMessageRestricted+0x40>
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	2200      	movs	r2, #0
 8011348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801134c:	f001 fe0a 	bl	8012f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	3324      	adds	r3, #36	; 0x24
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	68b9      	ldr	r1, [r7, #8]
 8011360:	4618      	mov	r0, r3
 8011362:	f000 fc83 	bl	8011c6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011366:	6978      	ldr	r0, [r7, #20]
 8011368:	f7ff ff26 	bl	80111b8 <prvUnlockQueue>
	}
 801136c:	bf00      	nop
 801136e:	3718      	adds	r7, #24
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08e      	sub	sp, #56	; 0x38
 8011378:	af04      	add	r7, sp, #16
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
 8011380:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10a      	bne.n	801139e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801138c:	f383 8811 	msr	BASEPRI, r3
 8011390:	f3bf 8f6f 	isb	sy
 8011394:	f3bf 8f4f 	dsb	sy
 8011398:	623b      	str	r3, [r7, #32]
}
 801139a:	bf00      	nop
 801139c:	e7fe      	b.n	801139c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d10a      	bne.n	80113ba <xTaskCreateStatic+0x46>
	__asm volatile
 80113a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a8:	f383 8811 	msr	BASEPRI, r3
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	61fb      	str	r3, [r7, #28]
}
 80113b6:	bf00      	nop
 80113b8:	e7fe      	b.n	80113b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80113ba:	23c0      	movs	r3, #192	; 0xc0
 80113bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	2bc0      	cmp	r3, #192	; 0xc0
 80113c2:	d00a      	beq.n	80113da <xTaskCreateStatic+0x66>
	__asm volatile
 80113c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c8:	f383 8811 	msr	BASEPRI, r3
 80113cc:	f3bf 8f6f 	isb	sy
 80113d0:	f3bf 8f4f 	dsb	sy
 80113d4:	61bb      	str	r3, [r7, #24]
}
 80113d6:	bf00      	nop
 80113d8:	e7fe      	b.n	80113d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80113da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80113dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d01e      	beq.n	8011420 <xTaskCreateStatic+0xac>
 80113e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d01b      	beq.n	8011420 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80113ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	2202      	movs	r2, #2
 80113f6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80113fa:	2300      	movs	r3, #0
 80113fc:	9303      	str	r3, [sp, #12]
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	9302      	str	r3, [sp, #8]
 8011402:	f107 0314 	add.w	r3, r7, #20
 8011406:	9301      	str	r3, [sp, #4]
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	68b9      	ldr	r1, [r7, #8]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f000 f850 	bl	80114b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801141a:	f000 f8f7 	bl	801160c <prvAddNewTaskToReadyList>
 801141e:	e001      	b.n	8011424 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011420:	2300      	movs	r3, #0
 8011422:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011424:	697b      	ldr	r3, [r7, #20]
	}
 8011426:	4618      	mov	r0, r3
 8011428:	3728      	adds	r7, #40	; 0x28
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}

0801142e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801142e:	b580      	push	{r7, lr}
 8011430:	b08c      	sub	sp, #48	; 0x30
 8011432:	af04      	add	r7, sp, #16
 8011434:	60f8      	str	r0, [r7, #12]
 8011436:	60b9      	str	r1, [r7, #8]
 8011438:	603b      	str	r3, [r7, #0]
 801143a:	4613      	mov	r3, r2
 801143c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801143e:	88fb      	ldrh	r3, [r7, #6]
 8011440:	009b      	lsls	r3, r3, #2
 8011442:	4618      	mov	r0, r3
 8011444:	f001 fe80 	bl	8013148 <pvPortMalloc>
 8011448:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00e      	beq.n	801146e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011450:	20c0      	movs	r0, #192	; 0xc0
 8011452:	f001 fe79 	bl	8013148 <pvPortMalloc>
 8011456:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	697a      	ldr	r2, [r7, #20]
 8011462:	631a      	str	r2, [r3, #48]	; 0x30
 8011464:	e005      	b.n	8011472 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011466:	6978      	ldr	r0, [r7, #20]
 8011468:	f001 ff3a 	bl	80132e0 <vPortFree>
 801146c:	e001      	b.n	8011472 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801146e:	2300      	movs	r3, #0
 8011470:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d017      	beq.n	80114a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	2200      	movs	r2, #0
 801147c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	2300      	movs	r3, #0
 8011484:	9303      	str	r3, [sp, #12]
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	9302      	str	r3, [sp, #8]
 801148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148c:	9301      	str	r3, [sp, #4]
 801148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	68b9      	ldr	r1, [r7, #8]
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f000 f80e 	bl	80114b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801149c:	69f8      	ldr	r0, [r7, #28]
 801149e:	f000 f8b5 	bl	801160c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114a2:	2301      	movs	r3, #1
 80114a4:	61bb      	str	r3, [r7, #24]
 80114a6:	e002      	b.n	80114ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114a8:	f04f 33ff 	mov.w	r3, #4294967295
 80114ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80114ae:	69bb      	ldr	r3, [r7, #24]
	}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3720      	adds	r7, #32
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b088      	sub	sp, #32
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
 80114c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80114c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	461a      	mov	r2, r3
 80114d0:	21a5      	movs	r1, #165	; 0xa5
 80114d2:	f002 f9ae 	bl	8013832 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80114d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114e0:	3b01      	subs	r3, #1
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	f023 0307 	bic.w	r3, r3, #7
 80114ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	f003 0307 	and.w	r3, r3, #7
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00a      	beq.n	8011510 <prvInitialiseNewTask+0x58>
	__asm volatile
 80114fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fe:	f383 8811 	msr	BASEPRI, r3
 8011502:	f3bf 8f6f 	isb	sy
 8011506:	f3bf 8f4f 	dsb	sy
 801150a:	617b      	str	r3, [r7, #20]
}
 801150c:	bf00      	nop
 801150e:	e7fe      	b.n	801150e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d01f      	beq.n	8011556 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011516:	2300      	movs	r3, #0
 8011518:	61fb      	str	r3, [r7, #28]
 801151a:	e012      	b.n	8011542 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	4413      	add	r3, r2
 8011522:	7819      	ldrb	r1, [r3, #0]
 8011524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011526:	69fb      	ldr	r3, [r7, #28]
 8011528:	4413      	add	r3, r2
 801152a:	3334      	adds	r3, #52	; 0x34
 801152c:	460a      	mov	r2, r1
 801152e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	4413      	add	r3, r2
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d006      	beq.n	801154a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	3301      	adds	r3, #1
 8011540:	61fb      	str	r3, [r7, #28]
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	2b0f      	cmp	r3, #15
 8011546:	d9e9      	bls.n	801151c <prvInitialiseNewTask+0x64>
 8011548:	e000      	b.n	801154c <prvInitialiseNewTask+0x94>
			{
				break;
 801154a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154e:	2200      	movs	r2, #0
 8011550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011554:	e003      	b.n	801155e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	2200      	movs	r2, #0
 801155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	2b37      	cmp	r3, #55	; 0x37
 8011562:	d901      	bls.n	8011568 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011564:	2337      	movs	r3, #55	; 0x37
 8011566:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801156c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011572:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011576:	2200      	movs	r2, #0
 8011578:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	3304      	adds	r3, #4
 801157e:	4618      	mov	r0, r3
 8011580:	f7ff f8be 	bl	8010700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011586:	3318      	adds	r3, #24
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff f8b9 	bl	8010700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011592:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80115a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a6:	2200      	movs	r2, #0
 80115a8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	2200      	movs	r2, #0
 80115ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80115ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115bc:	3358      	adds	r3, #88	; 0x58
 80115be:	2260      	movs	r2, #96	; 0x60
 80115c0:	2100      	movs	r1, #0
 80115c2:	4618      	mov	r0, r3
 80115c4:	f002 f935 	bl	8013832 <memset>
 80115c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ca:	4a0d      	ldr	r2, [pc, #52]	; (8011600 <prvInitialiseNewTask+0x148>)
 80115cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	4a0c      	ldr	r2, [pc, #48]	; (8011604 <prvInitialiseNewTask+0x14c>)
 80115d2:	661a      	str	r2, [r3, #96]	; 0x60
 80115d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d6:	4a0c      	ldr	r2, [pc, #48]	; (8011608 <prvInitialiseNewTask+0x150>)
 80115d8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	68f9      	ldr	r1, [r7, #12]
 80115de:	69b8      	ldr	r0, [r7, #24]
 80115e0:	f001 fb62 	bl	8012ca8 <pxPortInitialiseStack>
 80115e4:	4602      	mov	r2, r0
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80115ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d002      	beq.n	80115f6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80115f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115f6:	bf00      	nop
 80115f8:	3720      	adds	r7, #32
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	0801857c 	.word	0x0801857c
 8011604:	0801859c 	.word	0x0801859c
 8011608:	0801855c 	.word	0x0801855c

0801160c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011614:	f001 fc76 	bl	8012f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011618:	4b2d      	ldr	r3, [pc, #180]	; (80116d0 <prvAddNewTaskToReadyList+0xc4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	3301      	adds	r3, #1
 801161e:	4a2c      	ldr	r2, [pc, #176]	; (80116d0 <prvAddNewTaskToReadyList+0xc4>)
 8011620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011622:	4b2c      	ldr	r3, [pc, #176]	; (80116d4 <prvAddNewTaskToReadyList+0xc8>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801162a:	4a2a      	ldr	r2, [pc, #168]	; (80116d4 <prvAddNewTaskToReadyList+0xc8>)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011630:	4b27      	ldr	r3, [pc, #156]	; (80116d0 <prvAddNewTaskToReadyList+0xc4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2b01      	cmp	r3, #1
 8011636:	d110      	bne.n	801165a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011638:	f000 fc44 	bl	8011ec4 <prvInitialiseTaskLists>
 801163c:	e00d      	b.n	801165a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801163e:	4b26      	ldr	r3, [pc, #152]	; (80116d8 <prvAddNewTaskToReadyList+0xcc>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d109      	bne.n	801165a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011646:	4b23      	ldr	r3, [pc, #140]	; (80116d4 <prvAddNewTaskToReadyList+0xc8>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011650:	429a      	cmp	r2, r3
 8011652:	d802      	bhi.n	801165a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011654:	4a1f      	ldr	r2, [pc, #124]	; (80116d4 <prvAddNewTaskToReadyList+0xc8>)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801165a:	4b20      	ldr	r3, [pc, #128]	; (80116dc <prvAddNewTaskToReadyList+0xd0>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3301      	adds	r3, #1
 8011660:	4a1e      	ldr	r2, [pc, #120]	; (80116dc <prvAddNewTaskToReadyList+0xd0>)
 8011662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011664:	4b1d      	ldr	r3, [pc, #116]	; (80116dc <prvAddNewTaskToReadyList+0xd0>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011670:	4b1b      	ldr	r3, [pc, #108]	; (80116e0 <prvAddNewTaskToReadyList+0xd4>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	d903      	bls.n	8011680 <prvAddNewTaskToReadyList+0x74>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801167c:	4a18      	ldr	r2, [pc, #96]	; (80116e0 <prvAddNewTaskToReadyList+0xd4>)
 801167e:	6013      	str	r3, [r2, #0]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011684:	4613      	mov	r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4413      	add	r3, r2
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	4a15      	ldr	r2, [pc, #84]	; (80116e4 <prvAddNewTaskToReadyList+0xd8>)
 801168e:	441a      	add	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	3304      	adds	r3, #4
 8011694:	4619      	mov	r1, r3
 8011696:	4610      	mov	r0, r2
 8011698:	f7ff f83f 	bl	801071a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801169c:	f001 fc62 	bl	8012f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80116a0:	4b0d      	ldr	r3, [pc, #52]	; (80116d8 <prvAddNewTaskToReadyList+0xcc>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00e      	beq.n	80116c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116a8:	4b0a      	ldr	r3, [pc, #40]	; (80116d4 <prvAddNewTaskToReadyList+0xc8>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d207      	bcs.n	80116c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80116b6:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <prvAddNewTaskToReadyList+0xdc>)
 80116b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116bc:	601a      	str	r2, [r3, #0]
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116c6:	bf00      	nop
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	20002408 	.word	0x20002408
 80116d4:	20001f34 	.word	0x20001f34
 80116d8:	20002414 	.word	0x20002414
 80116dc:	20002424 	.word	0x20002424
 80116e0:	20002410 	.word	0x20002410
 80116e4:	20001f38 	.word	0x20001f38
 80116e8:	e000ed04 	.word	0xe000ed04

080116ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80116f4:	2300      	movs	r3, #0
 80116f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d017      	beq.n	801172e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116fe:	4b13      	ldr	r3, [pc, #76]	; (801174c <vTaskDelay+0x60>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00a      	beq.n	801171c <vTaskDelay+0x30>
	__asm volatile
 8011706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170a:	f383 8811 	msr	BASEPRI, r3
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f3bf 8f4f 	dsb	sy
 8011716:	60bb      	str	r3, [r7, #8]
}
 8011718:	bf00      	nop
 801171a:	e7fe      	b.n	801171a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801171c:	f000 f88c 	bl	8011838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011720:	2100      	movs	r1, #0
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 ff1e 	bl	8012564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011728:	f000 f894 	bl	8011854 <xTaskResumeAll>
 801172c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d107      	bne.n	8011744 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011734:	4b06      	ldr	r3, [pc, #24]	; (8011750 <vTaskDelay+0x64>)
 8011736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801173a:	601a      	str	r2, [r3, #0]
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011744:	bf00      	nop
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	20002430 	.word	0x20002430
 8011750:	e000ed04 	.word	0xe000ed04

08011754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b08a      	sub	sp, #40	; 0x28
 8011758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801175a:	2300      	movs	r3, #0
 801175c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801175e:	2300      	movs	r3, #0
 8011760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011762:	463a      	mov	r2, r7
 8011764:	1d39      	adds	r1, r7, #4
 8011766:	f107 0308 	add.w	r3, r7, #8
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe ff74 	bl	8010658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	68ba      	ldr	r2, [r7, #8]
 8011776:	9202      	str	r2, [sp, #8]
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	2300      	movs	r3, #0
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	2300      	movs	r3, #0
 8011780:	460a      	mov	r2, r1
 8011782:	4925      	ldr	r1, [pc, #148]	; (8011818 <vTaskStartScheduler+0xc4>)
 8011784:	4825      	ldr	r0, [pc, #148]	; (801181c <vTaskStartScheduler+0xc8>)
 8011786:	f7ff fdf5 	bl	8011374 <xTaskCreateStatic>
 801178a:	4603      	mov	r3, r0
 801178c:	4a24      	ldr	r2, [pc, #144]	; (8011820 <vTaskStartScheduler+0xcc>)
 801178e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011790:	4b23      	ldr	r3, [pc, #140]	; (8011820 <vTaskStartScheduler+0xcc>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d002      	beq.n	801179e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011798:	2301      	movs	r3, #1
 801179a:	617b      	str	r3, [r7, #20]
 801179c:	e001      	b.n	80117a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801179e:	2300      	movs	r3, #0
 80117a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d102      	bne.n	80117ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80117a8:	f000 ff30 	bl	801260c <xTimerCreateTimerTask>
 80117ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d11d      	bne.n	80117f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	f383 8811 	msr	BASEPRI, r3
 80117bc:	f3bf 8f6f 	isb	sy
 80117c0:	f3bf 8f4f 	dsb	sy
 80117c4:	613b      	str	r3, [r7, #16]
}
 80117c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80117c8:	4b16      	ldr	r3, [pc, #88]	; (8011824 <vTaskStartScheduler+0xd0>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3358      	adds	r3, #88	; 0x58
 80117ce:	4a16      	ldr	r2, [pc, #88]	; (8011828 <vTaskStartScheduler+0xd4>)
 80117d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80117d2:	4b16      	ldr	r3, [pc, #88]	; (801182c <vTaskStartScheduler+0xd8>)
 80117d4:	f04f 32ff 	mov.w	r2, #4294967295
 80117d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80117da:	4b15      	ldr	r3, [pc, #84]	; (8011830 <vTaskStartScheduler+0xdc>)
 80117dc:	2201      	movs	r2, #1
 80117de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80117e0:	4b14      	ldr	r3, [pc, #80]	; (8011834 <vTaskStartScheduler+0xe0>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80117e6:	f7ef fb89 	bl	8000efc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80117ea:	f001 fae9 	bl	8012dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80117ee:	e00e      	b.n	801180e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f6:	d10a      	bne.n	801180e <vTaskStartScheduler+0xba>
	__asm volatile
 80117f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fc:	f383 8811 	msr	BASEPRI, r3
 8011800:	f3bf 8f6f 	isb	sy
 8011804:	f3bf 8f4f 	dsb	sy
 8011808:	60fb      	str	r3, [r7, #12]
}
 801180a:	bf00      	nop
 801180c:	e7fe      	b.n	801180c <vTaskStartScheduler+0xb8>
}
 801180e:	bf00      	nop
 8011810:	3718      	adds	r7, #24
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	0801809c 	.word	0x0801809c
 801181c:	08011e95 	.word	0x08011e95
 8011820:	2000242c 	.word	0x2000242c
 8011824:	20001f34 	.word	0x20001f34
 8011828:	20000058 	.word	0x20000058
 801182c:	20002428 	.word	0x20002428
 8011830:	20002414 	.word	0x20002414
 8011834:	2000240c 	.word	0x2000240c

08011838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011838:	b480      	push	{r7}
 801183a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801183c:	4b04      	ldr	r3, [pc, #16]	; (8011850 <vTaskSuspendAll+0x18>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	3301      	adds	r3, #1
 8011842:	4a03      	ldr	r2, [pc, #12]	; (8011850 <vTaskSuspendAll+0x18>)
 8011844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011846:	bf00      	nop
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr
 8011850:	20002430 	.word	0x20002430

08011854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801185a:	2300      	movs	r3, #0
 801185c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801185e:	2300      	movs	r3, #0
 8011860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011862:	4b42      	ldr	r3, [pc, #264]	; (801196c <xTaskResumeAll+0x118>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d10a      	bne.n	8011880 <xTaskResumeAll+0x2c>
	__asm volatile
 801186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186e:	f383 8811 	msr	BASEPRI, r3
 8011872:	f3bf 8f6f 	isb	sy
 8011876:	f3bf 8f4f 	dsb	sy
 801187a:	603b      	str	r3, [r7, #0]
}
 801187c:	bf00      	nop
 801187e:	e7fe      	b.n	801187e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011880:	f001 fb40 	bl	8012f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011884:	4b39      	ldr	r3, [pc, #228]	; (801196c <xTaskResumeAll+0x118>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	3b01      	subs	r3, #1
 801188a:	4a38      	ldr	r2, [pc, #224]	; (801196c <xTaskResumeAll+0x118>)
 801188c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801188e:	4b37      	ldr	r3, [pc, #220]	; (801196c <xTaskResumeAll+0x118>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d162      	bne.n	801195c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011896:	4b36      	ldr	r3, [pc, #216]	; (8011970 <xTaskResumeAll+0x11c>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d05e      	beq.n	801195c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801189e:	e02f      	b.n	8011900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118a0:	4b34      	ldr	r3, [pc, #208]	; (8011974 <xTaskResumeAll+0x120>)
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	3318      	adds	r3, #24
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fe ff91 	bl	80107d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	3304      	adds	r3, #4
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe ff8c 	bl	80107d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	4b2d      	ldr	r3, [pc, #180]	; (8011978 <xTaskResumeAll+0x124>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d903      	bls.n	80118d0 <xTaskResumeAll+0x7c>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118cc:	4a2a      	ldr	r2, [pc, #168]	; (8011978 <xTaskResumeAll+0x124>)
 80118ce:	6013      	str	r3, [r2, #0]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d4:	4613      	mov	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4a27      	ldr	r2, [pc, #156]	; (801197c <xTaskResumeAll+0x128>)
 80118de:	441a      	add	r2, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	3304      	adds	r3, #4
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fe ff17 	bl	801071a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f0:	4b23      	ldr	r3, [pc, #140]	; (8011980 <xTaskResumeAll+0x12c>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d302      	bcc.n	8011900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80118fa:	4b22      	ldr	r3, [pc, #136]	; (8011984 <xTaskResumeAll+0x130>)
 80118fc:	2201      	movs	r2, #1
 80118fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011900:	4b1c      	ldr	r3, [pc, #112]	; (8011974 <xTaskResumeAll+0x120>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1cb      	bne.n	80118a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d001      	beq.n	8011912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801190e:	f000 fb7b 	bl	8012008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011912:	4b1d      	ldr	r3, [pc, #116]	; (8011988 <xTaskResumeAll+0x134>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d010      	beq.n	8011940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801191e:	f000 f847 	bl	80119b0 <xTaskIncrementTick>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d002      	beq.n	801192e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011928:	4b16      	ldr	r3, [pc, #88]	; (8011984 <xTaskResumeAll+0x130>)
 801192a:	2201      	movs	r2, #1
 801192c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	3b01      	subs	r3, #1
 8011932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1f1      	bne.n	801191e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801193a:	4b13      	ldr	r3, [pc, #76]	; (8011988 <xTaskResumeAll+0x134>)
 801193c:	2200      	movs	r2, #0
 801193e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011940:	4b10      	ldr	r3, [pc, #64]	; (8011984 <xTaskResumeAll+0x130>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d009      	beq.n	801195c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011948:	2301      	movs	r3, #1
 801194a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801194c:	4b0f      	ldr	r3, [pc, #60]	; (801198c <xTaskResumeAll+0x138>)
 801194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	f3bf 8f4f 	dsb	sy
 8011958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801195c:	f001 fb02 	bl	8012f64 <vPortExitCritical>

	return xAlreadyYielded;
 8011960:	68bb      	ldr	r3, [r7, #8]
}
 8011962:	4618      	mov	r0, r3
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	20002430 	.word	0x20002430
 8011970:	20002408 	.word	0x20002408
 8011974:	200023c8 	.word	0x200023c8
 8011978:	20002410 	.word	0x20002410
 801197c:	20001f38 	.word	0x20001f38
 8011980:	20001f34 	.word	0x20001f34
 8011984:	2000241c 	.word	0x2000241c
 8011988:	20002418 	.word	0x20002418
 801198c:	e000ed04 	.word	0xe000ed04

08011990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011996:	4b05      	ldr	r3, [pc, #20]	; (80119ac <xTaskGetTickCount+0x1c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801199c:	687b      	ldr	r3, [r7, #4]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	2000240c 	.word	0x2000240c

080119b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119b6:	2300      	movs	r3, #0
 80119b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119ba:	4b4f      	ldr	r3, [pc, #316]	; (8011af8 <xTaskIncrementTick+0x148>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f040 808f 	bne.w	8011ae2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119c4:	4b4d      	ldr	r3, [pc, #308]	; (8011afc <xTaskIncrementTick+0x14c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3301      	adds	r3, #1
 80119ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80119cc:	4a4b      	ldr	r2, [pc, #300]	; (8011afc <xTaskIncrementTick+0x14c>)
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d120      	bne.n	8011a1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80119d8:	4b49      	ldr	r3, [pc, #292]	; (8011b00 <xTaskIncrementTick+0x150>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00a      	beq.n	80119f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	603b      	str	r3, [r7, #0]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <xTaskIncrementTick+0x46>
 80119f8:	4b41      	ldr	r3, [pc, #260]	; (8011b00 <xTaskIncrementTick+0x150>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60fb      	str	r3, [r7, #12]
 80119fe:	4b41      	ldr	r3, [pc, #260]	; (8011b04 <xTaskIncrementTick+0x154>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4a3f      	ldr	r2, [pc, #252]	; (8011b00 <xTaskIncrementTick+0x150>)
 8011a04:	6013      	str	r3, [r2, #0]
 8011a06:	4a3f      	ldr	r2, [pc, #252]	; (8011b04 <xTaskIncrementTick+0x154>)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	4b3e      	ldr	r3, [pc, #248]	; (8011b08 <xTaskIncrementTick+0x158>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	3301      	adds	r3, #1
 8011a12:	4a3d      	ldr	r2, [pc, #244]	; (8011b08 <xTaskIncrementTick+0x158>)
 8011a14:	6013      	str	r3, [r2, #0]
 8011a16:	f000 faf7 	bl	8012008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a1a:	4b3c      	ldr	r3, [pc, #240]	; (8011b0c <xTaskIncrementTick+0x15c>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	693a      	ldr	r2, [r7, #16]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d349      	bcc.n	8011ab8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a24:	4b36      	ldr	r3, [pc, #216]	; (8011b00 <xTaskIncrementTick+0x150>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d104      	bne.n	8011a38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a2e:	4b37      	ldr	r3, [pc, #220]	; (8011b0c <xTaskIncrementTick+0x15c>)
 8011a30:	f04f 32ff 	mov.w	r2, #4294967295
 8011a34:	601a      	str	r2, [r3, #0]
					break;
 8011a36:	e03f      	b.n	8011ab8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a38:	4b31      	ldr	r3, [pc, #196]	; (8011b00 <xTaskIncrementTick+0x150>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a48:	693a      	ldr	r2, [r7, #16]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d203      	bcs.n	8011a58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a50:	4a2e      	ldr	r2, [pc, #184]	; (8011b0c <xTaskIncrementTick+0x15c>)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a56:	e02f      	b.n	8011ab8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	3304      	adds	r3, #4
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe feb9 	bl	80107d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	3318      	adds	r3, #24
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fe feb0 	bl	80107d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a78:	4b25      	ldr	r3, [pc, #148]	; (8011b10 <xTaskIncrementTick+0x160>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d903      	bls.n	8011a88 <xTaskIncrementTick+0xd8>
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a84:	4a22      	ldr	r2, [pc, #136]	; (8011b10 <xTaskIncrementTick+0x160>)
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4a1f      	ldr	r2, [pc, #124]	; (8011b14 <xTaskIncrementTick+0x164>)
 8011a96:	441a      	add	r2, r3
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	f7fe fe3b 	bl	801071a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa8:	4b1b      	ldr	r3, [pc, #108]	; (8011b18 <xTaskIncrementTick+0x168>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d3b8      	bcc.n	8011a24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ab6:	e7b5      	b.n	8011a24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011ab8:	4b17      	ldr	r3, [pc, #92]	; (8011b18 <xTaskIncrementTick+0x168>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011abe:	4915      	ldr	r1, [pc, #84]	; (8011b14 <xTaskIncrementTick+0x164>)
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4413      	add	r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	440b      	add	r3, r1
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d901      	bls.n	8011ad4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011ad4:	4b11      	ldr	r3, [pc, #68]	; (8011b1c <xTaskIncrementTick+0x16c>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d007      	beq.n	8011aec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011adc:	2301      	movs	r3, #1
 8011ade:	617b      	str	r3, [r7, #20]
 8011ae0:	e004      	b.n	8011aec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011ae2:	4b0f      	ldr	r3, [pc, #60]	; (8011b20 <xTaskIncrementTick+0x170>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	4a0d      	ldr	r2, [pc, #52]	; (8011b20 <xTaskIncrementTick+0x170>)
 8011aea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011aec:	697b      	ldr	r3, [r7, #20]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3718      	adds	r7, #24
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	20002430 	.word	0x20002430
 8011afc:	2000240c 	.word	0x2000240c
 8011b00:	200023c0 	.word	0x200023c0
 8011b04:	200023c4 	.word	0x200023c4
 8011b08:	20002420 	.word	0x20002420
 8011b0c:	20002428 	.word	0x20002428
 8011b10:	20002410 	.word	0x20002410
 8011b14:	20001f38 	.word	0x20001f38
 8011b18:	20001f34 	.word	0x20001f34
 8011b1c:	2000241c 	.word	0x2000241c
 8011b20:	20002418 	.word	0x20002418

08011b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b2a:	4b36      	ldr	r3, [pc, #216]	; (8011c04 <vTaskSwitchContext+0xe0>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b32:	4b35      	ldr	r3, [pc, #212]	; (8011c08 <vTaskSwitchContext+0xe4>)
 8011b34:	2201      	movs	r2, #1
 8011b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b38:	e05f      	b.n	8011bfa <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8011b3a:	4b33      	ldr	r3, [pc, #204]	; (8011c08 <vTaskSwitchContext+0xe4>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011b40:	f7ef f9ea 	bl	8000f18 <getRunTimeCounterValue>
 8011b44:	4603      	mov	r3, r0
 8011b46:	4a31      	ldr	r2, [pc, #196]	; (8011c0c <vTaskSwitchContext+0xe8>)
 8011b48:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011b4a:	4b30      	ldr	r3, [pc, #192]	; (8011c0c <vTaskSwitchContext+0xe8>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	4b30      	ldr	r3, [pc, #192]	; (8011c10 <vTaskSwitchContext+0xec>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d909      	bls.n	8011b6a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8011b56:	4b2f      	ldr	r3, [pc, #188]	; (8011c14 <vTaskSwitchContext+0xf0>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011b5c:	4a2b      	ldr	r2, [pc, #172]	; (8011c0c <vTaskSwitchContext+0xe8>)
 8011b5e:	6810      	ldr	r0, [r2, #0]
 8011b60:	4a2b      	ldr	r2, [pc, #172]	; (8011c10 <vTaskSwitchContext+0xec>)
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	1a82      	subs	r2, r0, r2
 8011b66:	440a      	add	r2, r1
 8011b68:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8011b6a:	4b28      	ldr	r3, [pc, #160]	; (8011c0c <vTaskSwitchContext+0xe8>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4a28      	ldr	r2, [pc, #160]	; (8011c10 <vTaskSwitchContext+0xec>)
 8011b70:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b72:	4b29      	ldr	r3, [pc, #164]	; (8011c18 <vTaskSwitchContext+0xf4>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	60fb      	str	r3, [r7, #12]
 8011b78:	e010      	b.n	8011b9c <vTaskSwitchContext+0x78>
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10a      	bne.n	8011b96 <vTaskSwitchContext+0x72>
	__asm volatile
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	f383 8811 	msr	BASEPRI, r3
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	607b      	str	r3, [r7, #4]
}
 8011b92:	bf00      	nop
 8011b94:	e7fe      	b.n	8011b94 <vTaskSwitchContext+0x70>
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	60fb      	str	r3, [r7, #12]
 8011b9c:	491f      	ldr	r1, [pc, #124]	; (8011c1c <vTaskSwitchContext+0xf8>)
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	440b      	add	r3, r1
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0e4      	beq.n	8011b7a <vTaskSwitchContext+0x56>
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a18      	ldr	r2, [pc, #96]	; (8011c1c <vTaskSwitchContext+0xf8>)
 8011bbc:	4413      	add	r3, r2
 8011bbe:	60bb      	str	r3, [r7, #8]
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	605a      	str	r2, [r3, #4]
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	685a      	ldr	r2, [r3, #4]
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d104      	bne.n	8011be0 <vTaskSwitchContext+0xbc>
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	685a      	ldr	r2, [r3, #4]
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	605a      	str	r2, [r3, #4]
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	4a0b      	ldr	r2, [pc, #44]	; (8011c14 <vTaskSwitchContext+0xf0>)
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	4a0b      	ldr	r2, [pc, #44]	; (8011c18 <vTaskSwitchContext+0xf4>)
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bf0:	4b08      	ldr	r3, [pc, #32]	; (8011c14 <vTaskSwitchContext+0xf0>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3358      	adds	r3, #88	; 0x58
 8011bf6:	4a0a      	ldr	r2, [pc, #40]	; (8011c20 <vTaskSwitchContext+0xfc>)
 8011bf8:	6013      	str	r3, [r2, #0]
}
 8011bfa:	bf00      	nop
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20002430 	.word	0x20002430
 8011c08:	2000241c 	.word	0x2000241c
 8011c0c:	20002438 	.word	0x20002438
 8011c10:	20002434 	.word	0x20002434
 8011c14:	20001f34 	.word	0x20001f34
 8011c18:	20002410 	.word	0x20002410
 8011c1c:	20001f38 	.word	0x20001f38
 8011c20:	20000058 	.word	0x20000058

08011c24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10a      	bne.n	8011c4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c38:	f383 8811 	msr	BASEPRI, r3
 8011c3c:	f3bf 8f6f 	isb	sy
 8011c40:	f3bf 8f4f 	dsb	sy
 8011c44:	60fb      	str	r3, [r7, #12]
}
 8011c46:	bf00      	nop
 8011c48:	e7fe      	b.n	8011c48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c4a:	4b07      	ldr	r3, [pc, #28]	; (8011c68 <vTaskPlaceOnEventList+0x44>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	3318      	adds	r3, #24
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7fe fd85 	bl	8010762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c58:	2101      	movs	r1, #1
 8011c5a:	6838      	ldr	r0, [r7, #0]
 8011c5c:	f000 fc82 	bl	8012564 <prvAddCurrentTaskToDelayedList>
}
 8011c60:	bf00      	nop
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	20001f34 	.word	0x20001f34

08011c6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10a      	bne.n	8011c94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c82:	f383 8811 	msr	BASEPRI, r3
 8011c86:	f3bf 8f6f 	isb	sy
 8011c8a:	f3bf 8f4f 	dsb	sy
 8011c8e:	617b      	str	r3, [r7, #20]
}
 8011c90:	bf00      	nop
 8011c92:	e7fe      	b.n	8011c92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c94:	4b0a      	ldr	r3, [pc, #40]	; (8011cc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3318      	adds	r3, #24
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f7fe fd3c 	bl	801071a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	68b8      	ldr	r0, [r7, #8]
 8011cb2:	f000 fc57 	bl	8012564 <prvAddCurrentTaskToDelayedList>
	}
 8011cb6:	bf00      	nop
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20001f34 	.word	0x20001f34

08011cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d10a      	bne.n	8011cf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	60fb      	str	r3, [r7, #12]
}
 8011cec:	bf00      	nop
 8011cee:	e7fe      	b.n	8011cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	3318      	adds	r3, #24
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fe fd6d 	bl	80107d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cfa:	4b1e      	ldr	r3, [pc, #120]	; (8011d74 <xTaskRemoveFromEventList+0xb0>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d11d      	bne.n	8011d3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	3304      	adds	r3, #4
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fe fd64 	bl	80107d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d10:	4b19      	ldr	r3, [pc, #100]	; (8011d78 <xTaskRemoveFromEventList+0xb4>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d903      	bls.n	8011d20 <xTaskRemoveFromEventList+0x5c>
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1c:	4a16      	ldr	r2, [pc, #88]	; (8011d78 <xTaskRemoveFromEventList+0xb4>)
 8011d1e:	6013      	str	r3, [r2, #0]
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d24:	4613      	mov	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4a13      	ldr	r2, [pc, #76]	; (8011d7c <xTaskRemoveFromEventList+0xb8>)
 8011d2e:	441a      	add	r2, r3
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	3304      	adds	r3, #4
 8011d34:	4619      	mov	r1, r3
 8011d36:	4610      	mov	r0, r2
 8011d38:	f7fe fcef 	bl	801071a <vListInsertEnd>
 8011d3c:	e005      	b.n	8011d4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	3318      	adds	r3, #24
 8011d42:	4619      	mov	r1, r3
 8011d44:	480e      	ldr	r0, [pc, #56]	; (8011d80 <xTaskRemoveFromEventList+0xbc>)
 8011d46:	f7fe fce8 	bl	801071a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d4e:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <xTaskRemoveFromEventList+0xc0>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d905      	bls.n	8011d64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	; (8011d88 <xTaskRemoveFromEventList+0xc4>)
 8011d5e:	2201      	movs	r2, #1
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	e001      	b.n	8011d68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d68:	697b      	ldr	r3, [r7, #20]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	20002430 	.word	0x20002430
 8011d78:	20002410 	.word	0x20002410
 8011d7c:	20001f38 	.word	0x20001f38
 8011d80:	200023c8 	.word	0x200023c8
 8011d84:	20001f34 	.word	0x20001f34
 8011d88:	2000241c 	.word	0x2000241c

08011d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d94:	4b06      	ldr	r3, [pc, #24]	; (8011db0 <vTaskInternalSetTimeOutState+0x24>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d9c:	4b05      	ldr	r3, [pc, #20]	; (8011db4 <vTaskInternalSetTimeOutState+0x28>)
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	605a      	str	r2, [r3, #4]
}
 8011da4:	bf00      	nop
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	20002420 	.word	0x20002420
 8011db4:	2000240c 	.word	0x2000240c

08011db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b088      	sub	sp, #32
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d10a      	bne.n	8011dde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	f383 8811 	msr	BASEPRI, r3
 8011dd0:	f3bf 8f6f 	isb	sy
 8011dd4:	f3bf 8f4f 	dsb	sy
 8011dd8:	613b      	str	r3, [r7, #16]
}
 8011dda:	bf00      	nop
 8011ddc:	e7fe      	b.n	8011ddc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d10a      	bne.n	8011dfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de8:	f383 8811 	msr	BASEPRI, r3
 8011dec:	f3bf 8f6f 	isb	sy
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	60fb      	str	r3, [r7, #12]
}
 8011df6:	bf00      	nop
 8011df8:	e7fe      	b.n	8011df8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011dfa:	f001 f883 	bl	8012f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011dfe:	4b1d      	ldr	r3, [pc, #116]	; (8011e74 <xTaskCheckForTimeOut+0xbc>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	69ba      	ldr	r2, [r7, #24]
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e16:	d102      	bne.n	8011e1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	61fb      	str	r3, [r7, #28]
 8011e1c:	e023      	b.n	8011e66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	4b15      	ldr	r3, [pc, #84]	; (8011e78 <xTaskCheckForTimeOut+0xc0>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d007      	beq.n	8011e3a <xTaskCheckForTimeOut+0x82>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	69ba      	ldr	r2, [r7, #24]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d302      	bcc.n	8011e3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e34:	2301      	movs	r3, #1
 8011e36:	61fb      	str	r3, [r7, #28]
 8011e38:	e015      	b.n	8011e66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	697a      	ldr	r2, [r7, #20]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d20b      	bcs.n	8011e5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	1ad2      	subs	r2, r2, r3
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7ff ff9b 	bl	8011d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e56:	2300      	movs	r3, #0
 8011e58:	61fb      	str	r3, [r7, #28]
 8011e5a:	e004      	b.n	8011e66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e62:	2301      	movs	r3, #1
 8011e64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e66:	f001 f87d 	bl	8012f64 <vPortExitCritical>

	return xReturn;
 8011e6a:	69fb      	ldr	r3, [r7, #28]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3720      	adds	r7, #32
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	2000240c 	.word	0x2000240c
 8011e78:	20002420 	.word	0x20002420

08011e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e80:	4b03      	ldr	r3, [pc, #12]	; (8011e90 <vTaskMissedYield+0x14>)
 8011e82:	2201      	movs	r2, #1
 8011e84:	601a      	str	r2, [r3, #0]
}
 8011e86:	bf00      	nop
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr
 8011e90:	2000241c 	.word	0x2000241c

08011e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e9c:	f000 f852 	bl	8011f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ea0:	4b06      	ldr	r3, [pc, #24]	; (8011ebc <prvIdleTask+0x28>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d9f9      	bls.n	8011e9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011ea8:	4b05      	ldr	r3, [pc, #20]	; (8011ec0 <prvIdleTask+0x2c>)
 8011eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eae:	601a      	str	r2, [r3, #0]
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011eb8:	e7f0      	b.n	8011e9c <prvIdleTask+0x8>
 8011eba:	bf00      	nop
 8011ebc:	20001f38 	.word	0x20001f38
 8011ec0:	e000ed04 	.word	0xe000ed04

08011ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011eca:	2300      	movs	r3, #0
 8011ecc:	607b      	str	r3, [r7, #4]
 8011ece:	e00c      	b.n	8011eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	4413      	add	r3, r2
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	4a12      	ldr	r2, [pc, #72]	; (8011f24 <prvInitialiseTaskLists+0x60>)
 8011edc:	4413      	add	r3, r2
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fe fbee 	bl	80106c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	607b      	str	r3, [r7, #4]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b37      	cmp	r3, #55	; 0x37
 8011eee:	d9ef      	bls.n	8011ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ef0:	480d      	ldr	r0, [pc, #52]	; (8011f28 <prvInitialiseTaskLists+0x64>)
 8011ef2:	f7fe fbe5 	bl	80106c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011ef6:	480d      	ldr	r0, [pc, #52]	; (8011f2c <prvInitialiseTaskLists+0x68>)
 8011ef8:	f7fe fbe2 	bl	80106c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011efc:	480c      	ldr	r0, [pc, #48]	; (8011f30 <prvInitialiseTaskLists+0x6c>)
 8011efe:	f7fe fbdf 	bl	80106c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f02:	480c      	ldr	r0, [pc, #48]	; (8011f34 <prvInitialiseTaskLists+0x70>)
 8011f04:	f7fe fbdc 	bl	80106c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f08:	480b      	ldr	r0, [pc, #44]	; (8011f38 <prvInitialiseTaskLists+0x74>)
 8011f0a:	f7fe fbd9 	bl	80106c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f0e:	4b0b      	ldr	r3, [pc, #44]	; (8011f3c <prvInitialiseTaskLists+0x78>)
 8011f10:	4a05      	ldr	r2, [pc, #20]	; (8011f28 <prvInitialiseTaskLists+0x64>)
 8011f12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f14:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <prvInitialiseTaskLists+0x7c>)
 8011f16:	4a05      	ldr	r2, [pc, #20]	; (8011f2c <prvInitialiseTaskLists+0x68>)
 8011f18:	601a      	str	r2, [r3, #0]
}
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20001f38 	.word	0x20001f38
 8011f28:	20002398 	.word	0x20002398
 8011f2c:	200023ac 	.word	0x200023ac
 8011f30:	200023c8 	.word	0x200023c8
 8011f34:	200023dc 	.word	0x200023dc
 8011f38:	200023f4 	.word	0x200023f4
 8011f3c:	200023c0 	.word	0x200023c0
 8011f40:	200023c4 	.word	0x200023c4

08011f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f4a:	e019      	b.n	8011f80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f4c:	f000 ffda 	bl	8012f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f50:	4b10      	ldr	r3, [pc, #64]	; (8011f94 <prvCheckTasksWaitingTermination+0x50>)
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fc39 	bl	80107d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f62:	4b0d      	ldr	r3, [pc, #52]	; (8011f98 <prvCheckTasksWaitingTermination+0x54>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3b01      	subs	r3, #1
 8011f68:	4a0b      	ldr	r2, [pc, #44]	; (8011f98 <prvCheckTasksWaitingTermination+0x54>)
 8011f6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f6c:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <prvCheckTasksWaitingTermination+0x58>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	4a0a      	ldr	r2, [pc, #40]	; (8011f9c <prvCheckTasksWaitingTermination+0x58>)
 8011f74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f76:	f000 fff5 	bl	8012f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 f810 	bl	8011fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f80:	4b06      	ldr	r3, [pc, #24]	; (8011f9c <prvCheckTasksWaitingTermination+0x58>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1e1      	bne.n	8011f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f88:	bf00      	nop
 8011f8a:	bf00      	nop
 8011f8c:	3708      	adds	r7, #8
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	200023dc 	.word	0x200023dc
 8011f98:	20002408 	.word	0x20002408
 8011f9c:	200023f0 	.word	0x200023f0

08011fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3358      	adds	r3, #88	; 0x58
 8011fac:	4618      	mov	r0, r3
 8011fae:	f002 fb3d 	bl	801462c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d108      	bne.n	8011fce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f001 f98d 	bl	80132e0 <vPortFree>
				vPortFree( pxTCB );
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f001 f98a 	bl	80132e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011fcc:	e018      	b.n	8012000 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d103      	bne.n	8011fe0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f001 f981 	bl	80132e0 <vPortFree>
	}
 8011fde:	e00f      	b.n	8012000 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011fe6:	2b02      	cmp	r3, #2
 8011fe8:	d00a      	beq.n	8012000 <prvDeleteTCB+0x60>
	__asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	60fb      	str	r3, [r7, #12]
}
 8011ffc:	bf00      	nop
 8011ffe:	e7fe      	b.n	8011ffe <prvDeleteTCB+0x5e>
	}
 8012000:	bf00      	nop
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801200e:	4b0c      	ldr	r3, [pc, #48]	; (8012040 <prvResetNextTaskUnblockTime+0x38>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d104      	bne.n	8012022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012018:	4b0a      	ldr	r3, [pc, #40]	; (8012044 <prvResetNextTaskUnblockTime+0x3c>)
 801201a:	f04f 32ff 	mov.w	r2, #4294967295
 801201e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012020:	e008      	b.n	8012034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012022:	4b07      	ldr	r3, [pc, #28]	; (8012040 <prvResetNextTaskUnblockTime+0x38>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	68db      	ldr	r3, [r3, #12]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	4a04      	ldr	r2, [pc, #16]	; (8012044 <prvResetNextTaskUnblockTime+0x3c>)
 8012032:	6013      	str	r3, [r2, #0]
}
 8012034:	bf00      	nop
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr
 8012040:	200023c0 	.word	0x200023c0
 8012044:	20002428 	.word	0x20002428

08012048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801204e:	4b0b      	ldr	r3, [pc, #44]	; (801207c <xTaskGetSchedulerState+0x34>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d102      	bne.n	801205c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012056:	2301      	movs	r3, #1
 8012058:	607b      	str	r3, [r7, #4]
 801205a:	e008      	b.n	801206e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801205c:	4b08      	ldr	r3, [pc, #32]	; (8012080 <xTaskGetSchedulerState+0x38>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d102      	bne.n	801206a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012064:	2302      	movs	r3, #2
 8012066:	607b      	str	r3, [r7, #4]
 8012068:	e001      	b.n	801206e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801206a:	2300      	movs	r3, #0
 801206c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801206e:	687b      	ldr	r3, [r7, #4]
	}
 8012070:	4618      	mov	r0, r3
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr
 801207c:	20002414 	.word	0x20002414
 8012080:	20002430 	.word	0x20002430

08012084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012090:	2300      	movs	r3, #0
 8012092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d056      	beq.n	8012148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801209a:	4b2e      	ldr	r3, [pc, #184]	; (8012154 <xTaskPriorityDisinherit+0xd0>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	693a      	ldr	r2, [r7, #16]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d00a      	beq.n	80120ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80120a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	60fb      	str	r3, [r7, #12]
}
 80120b6:	bf00      	nop
 80120b8:	e7fe      	b.n	80120b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10a      	bne.n	80120d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	60bb      	str	r3, [r7, #8]
}
 80120d4:	bf00      	nop
 80120d6:	e7fe      	b.n	80120d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120dc:	1e5a      	subs	r2, r3, #1
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d02c      	beq.n	8012148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d128      	bne.n	8012148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	3304      	adds	r3, #4
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fe fb6a 	bl	80107d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012118:	4b0f      	ldr	r3, [pc, #60]	; (8012158 <xTaskPriorityDisinherit+0xd4>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	429a      	cmp	r2, r3
 801211e:	d903      	bls.n	8012128 <xTaskPriorityDisinherit+0xa4>
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012124:	4a0c      	ldr	r2, [pc, #48]	; (8012158 <xTaskPriorityDisinherit+0xd4>)
 8012126:	6013      	str	r3, [r2, #0]
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801212c:	4613      	mov	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	4413      	add	r3, r2
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	4a09      	ldr	r2, [pc, #36]	; (801215c <xTaskPriorityDisinherit+0xd8>)
 8012136:	441a      	add	r2, r3
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	3304      	adds	r3, #4
 801213c:	4619      	mov	r1, r3
 801213e:	4610      	mov	r0, r2
 8012140:	f7fe faeb 	bl	801071a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012144:	2301      	movs	r3, #1
 8012146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012148:	697b      	ldr	r3, [r7, #20]
	}
 801214a:	4618      	mov	r0, r3
 801214c:	3718      	adds	r7, #24
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	20001f34 	.word	0x20001f34
 8012158:	20002410 	.word	0x20002410
 801215c:	20001f38 	.word	0x20001f38

08012160 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801216e:	f000 fec9 	bl	8012f04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012172:	4b29      	ldr	r3, [pc, #164]	; (8012218 <xTaskNotifyWait+0xb8>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2b02      	cmp	r3, #2
 801217e:	d01c      	beq.n	80121ba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012180:	4b25      	ldr	r3, [pc, #148]	; (8012218 <xTaskNotifyWait+0xb8>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8012188:	68fa      	ldr	r2, [r7, #12]
 801218a:	43d2      	mvns	r2, r2
 801218c:	400a      	ands	r2, r1
 801218e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012192:	4b21      	ldr	r3, [pc, #132]	; (8012218 <xTaskNotifyWait+0xb8>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2201      	movs	r2, #1
 8012198:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00b      	beq.n	80121ba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80121a2:	2101      	movs	r1, #1
 80121a4:	6838      	ldr	r0, [r7, #0]
 80121a6:	f000 f9dd 	bl	8012564 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80121aa:	4b1c      	ldr	r3, [pc, #112]	; (801221c <xTaskNotifyWait+0xbc>)
 80121ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121b0:	601a      	str	r2, [r3, #0]
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80121ba:	f000 fed3 	bl	8012f64 <vPortExitCritical>

		taskENTER_CRITICAL();
 80121be:	f000 fea1 	bl	8012f04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d005      	beq.n	80121d4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80121c8:	4b13      	ldr	r3, [pc, #76]	; (8012218 <xTaskNotifyWait+0xb8>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80121d4:	4b10      	ldr	r3, [pc, #64]	; (8012218 <xTaskNotifyWait+0xb8>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d002      	beq.n	80121e8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	617b      	str	r3, [r7, #20]
 80121e6:	e00a      	b.n	80121fe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80121e8:	4b0b      	ldr	r3, [pc, #44]	; (8012218 <xTaskNotifyWait+0xb8>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80121f0:	68ba      	ldr	r2, [r7, #8]
 80121f2:	43d2      	mvns	r2, r2
 80121f4:	400a      	ands	r2, r1
 80121f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 80121fa:	2301      	movs	r3, #1
 80121fc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80121fe:	4b06      	ldr	r3, [pc, #24]	; (8012218 <xTaskNotifyWait+0xb8>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2200      	movs	r2, #0
 8012204:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8012208:	f000 feac 	bl	8012f64 <vPortExitCritical>

		return xReturn;
 801220c:	697b      	ldr	r3, [r7, #20]
	}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	20001f34 	.word	0x20001f34
 801221c:	e000ed04 	.word	0xe000ed04

08012220 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012220:	b580      	push	{r7, lr}
 8012222:	b08a      	sub	sp, #40	; 0x28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	603b      	str	r3, [r7, #0]
 801222c:	4613      	mov	r3, r2
 801222e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012230:	2301      	movs	r3, #1
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d10a      	bne.n	8012250 <xTaskGenericNotify+0x30>
	__asm volatile
 801223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223e:	f383 8811 	msr	BASEPRI, r3
 8012242:	f3bf 8f6f 	isb	sy
 8012246:	f3bf 8f4f 	dsb	sy
 801224a:	61bb      	str	r3, [r7, #24]
}
 801224c:	bf00      	nop
 801224e:	e7fe      	b.n	801224e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012254:	f000 fe56 	bl	8012f04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d004      	beq.n	8012268 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801226e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012270:	6a3b      	ldr	r3, [r7, #32]
 8012272:	2202      	movs	r2, #2
 8012274:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	2b04      	cmp	r3, #4
 801227c:	d82d      	bhi.n	80122da <xTaskGenericNotify+0xba>
 801227e:	a201      	add	r2, pc, #4	; (adr r2, 8012284 <xTaskGenericNotify+0x64>)
 8012280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012284:	080122fd 	.word	0x080122fd
 8012288:	08012299 	.word	0x08012299
 801228c:	080122ab 	.word	0x080122ab
 8012290:	080122bb 	.word	0x080122bb
 8012294:	080122c5 	.word	0x080122c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012298:	6a3b      	ldr	r3, [r7, #32]
 801229a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	431a      	orrs	r2, r3
 80122a2:	6a3b      	ldr	r3, [r7, #32]
 80122a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80122a8:	e02b      	b.n	8012302 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80122b0:	1c5a      	adds	r2, r3, #1
 80122b2:	6a3b      	ldr	r3, [r7, #32]
 80122b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80122b8:	e023      	b.n	8012302 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80122c2:	e01e      	b.n	8012302 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80122c4:	7ffb      	ldrb	r3, [r7, #31]
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d004      	beq.n	80122d4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80122ca:	6a3b      	ldr	r3, [r7, #32]
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80122d2:	e016      	b.n	8012302 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80122d4:	2300      	movs	r3, #0
 80122d6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80122d8:	e013      	b.n	8012302 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80122da:	6a3b      	ldr	r3, [r7, #32]
 80122dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80122e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e4:	d00c      	beq.n	8012300 <xTaskGenericNotify+0xe0>
	__asm volatile
 80122e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ea:	f383 8811 	msr	BASEPRI, r3
 80122ee:	f3bf 8f6f 	isb	sy
 80122f2:	f3bf 8f4f 	dsb	sy
 80122f6:	617b      	str	r3, [r7, #20]
}
 80122f8:	bf00      	nop
 80122fa:	e7fe      	b.n	80122fa <xTaskGenericNotify+0xda>
					break;
 80122fc:	bf00      	nop
 80122fe:	e000      	b.n	8012302 <xTaskGenericNotify+0xe2>

					break;
 8012300:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012302:	7ffb      	ldrb	r3, [r7, #31]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d13a      	bne.n	801237e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	3304      	adds	r3, #4
 801230c:	4618      	mov	r0, r3
 801230e:	f7fe fa61 	bl	80107d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012312:	6a3b      	ldr	r3, [r7, #32]
 8012314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012316:	4b1d      	ldr	r3, [pc, #116]	; (801238c <xTaskGenericNotify+0x16c>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	429a      	cmp	r2, r3
 801231c:	d903      	bls.n	8012326 <xTaskGenericNotify+0x106>
 801231e:	6a3b      	ldr	r3, [r7, #32]
 8012320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012322:	4a1a      	ldr	r2, [pc, #104]	; (801238c <xTaskGenericNotify+0x16c>)
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	6a3b      	ldr	r3, [r7, #32]
 8012328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232a:	4613      	mov	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	4a17      	ldr	r2, [pc, #92]	; (8012390 <xTaskGenericNotify+0x170>)
 8012334:	441a      	add	r2, r3
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	3304      	adds	r3, #4
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fe f9ec 	bl	801071a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012342:	6a3b      	ldr	r3, [r7, #32]
 8012344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012346:	2b00      	cmp	r3, #0
 8012348:	d00a      	beq.n	8012360 <xTaskGenericNotify+0x140>
	__asm volatile
 801234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234e:	f383 8811 	msr	BASEPRI, r3
 8012352:	f3bf 8f6f 	isb	sy
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	613b      	str	r3, [r7, #16]
}
 801235c:	bf00      	nop
 801235e:	e7fe      	b.n	801235e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012360:	6a3b      	ldr	r3, [r7, #32]
 8012362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012364:	4b0b      	ldr	r3, [pc, #44]	; (8012394 <xTaskGenericNotify+0x174>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236a:	429a      	cmp	r2, r3
 801236c:	d907      	bls.n	801237e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801236e:	4b0a      	ldr	r3, [pc, #40]	; (8012398 <xTaskGenericNotify+0x178>)
 8012370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012374:	601a      	str	r2, [r3, #0]
 8012376:	f3bf 8f4f 	dsb	sy
 801237a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801237e:	f000 fdf1 	bl	8012f64 <vPortExitCritical>

		return xReturn;
 8012382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012384:	4618      	mov	r0, r3
 8012386:	3728      	adds	r7, #40	; 0x28
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20002410 	.word	0x20002410
 8012390:	20001f38 	.word	0x20001f38
 8012394:	20001f34 	.word	0x20001f34
 8012398:	e000ed04 	.word	0xe000ed04

0801239c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801239c:	b580      	push	{r7, lr}
 801239e:	b08e      	sub	sp, #56	; 0x38
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	603b      	str	r3, [r7, #0]
 80123a8:	4613      	mov	r3, r2
 80123aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80123ac:	2301      	movs	r3, #1
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d10a      	bne.n	80123cc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80123b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ba:	f383 8811 	msr	BASEPRI, r3
 80123be:	f3bf 8f6f 	isb	sy
 80123c2:	f3bf 8f4f 	dsb	sy
 80123c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123c8:	bf00      	nop
 80123ca:	e7fe      	b.n	80123ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80123cc:	f000 fe7c 	bl	80130c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80123d4:	f3ef 8211 	mrs	r2, BASEPRI
 80123d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123dc:	f383 8811 	msr	BASEPRI, r3
 80123e0:	f3bf 8f6f 	isb	sy
 80123e4:	f3bf 8f4f 	dsb	sy
 80123e8:	623a      	str	r2, [r7, #32]
 80123ea:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80123ec:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d004      	beq.n	8012400 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80123f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8012406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	2202      	movs	r2, #2
 801240e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8012412:	79fb      	ldrb	r3, [r7, #7]
 8012414:	2b04      	cmp	r3, #4
 8012416:	d82f      	bhi.n	8012478 <xTaskGenericNotifyFromISR+0xdc>
 8012418:	a201      	add	r2, pc, #4	; (adr r2, 8012420 <xTaskGenericNotifyFromISR+0x84>)
 801241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801241e:	bf00      	nop
 8012420:	0801249b 	.word	0x0801249b
 8012424:	08012435 	.word	0x08012435
 8012428:	08012447 	.word	0x08012447
 801242c:	08012457 	.word	0x08012457
 8012430:	08012461 	.word	0x08012461
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	431a      	orrs	r2, r3
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8012444:	e02c      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8012454:	e024      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801245e:	e01f      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012464:	2b02      	cmp	r3, #2
 8012466:	d004      	beq.n	8012472 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012470:	e016      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8012472:	2300      	movs	r3, #0
 8012474:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012476:	e013      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012482:	d00c      	beq.n	801249e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8012484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012488:	f383 8811 	msr	BASEPRI, r3
 801248c:	f3bf 8f6f 	isb	sy
 8012490:	f3bf 8f4f 	dsb	sy
 8012494:	61bb      	str	r3, [r7, #24]
}
 8012496:	bf00      	nop
 8012498:	e7fe      	b.n	8012498 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801249a:	bf00      	nop
 801249c:	e000      	b.n	80124a0 <xTaskGenericNotifyFromISR+0x104>
					break;
 801249e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80124a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d146      	bne.n	8012536 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80124a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00a      	beq.n	80124c6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	617b      	str	r3, [r7, #20]
}
 80124c2:	bf00      	nop
 80124c4:	e7fe      	b.n	80124c4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124c6:	4b21      	ldr	r3, [pc, #132]	; (801254c <xTaskGenericNotifyFromISR+0x1b0>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d11d      	bne.n	801250a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d0:	3304      	adds	r3, #4
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fe f97e 	bl	80107d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80124d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124dc:	4b1c      	ldr	r3, [pc, #112]	; (8012550 <xTaskGenericNotifyFromISR+0x1b4>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d903      	bls.n	80124ec <xTaskGenericNotifyFromISR+0x150>
 80124e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e8:	4a19      	ldr	r2, [pc, #100]	; (8012550 <xTaskGenericNotifyFromISR+0x1b4>)
 80124ea:	6013      	str	r3, [r2, #0]
 80124ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f0:	4613      	mov	r3, r2
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	4413      	add	r3, r2
 80124f6:	009b      	lsls	r3, r3, #2
 80124f8:	4a16      	ldr	r2, [pc, #88]	; (8012554 <xTaskGenericNotifyFromISR+0x1b8>)
 80124fa:	441a      	add	r2, r3
 80124fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fe:	3304      	adds	r3, #4
 8012500:	4619      	mov	r1, r3
 8012502:	4610      	mov	r0, r2
 8012504:	f7fe f909 	bl	801071a <vListInsertEnd>
 8012508:	e005      	b.n	8012516 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250c:	3318      	adds	r3, #24
 801250e:	4619      	mov	r1, r3
 8012510:	4811      	ldr	r0, [pc, #68]	; (8012558 <xTaskGenericNotifyFromISR+0x1bc>)
 8012512:	f7fe f902 	bl	801071a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801251a:	4b10      	ldr	r3, [pc, #64]	; (801255c <xTaskGenericNotifyFromISR+0x1c0>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	429a      	cmp	r2, r3
 8012522:	d908      	bls.n	8012536 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012526:	2b00      	cmp	r3, #0
 8012528:	d002      	beq.n	8012530 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801252a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801252c:	2201      	movs	r2, #1
 801252e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012530:	4b0b      	ldr	r3, [pc, #44]	; (8012560 <xTaskGenericNotifyFromISR+0x1c4>)
 8012532:	2201      	movs	r2, #1
 8012534:	601a      	str	r2, [r3, #0]
 8012536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012538:	613b      	str	r3, [r7, #16]
	__asm volatile
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	f383 8811 	msr	BASEPRI, r3
}
 8012540:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012544:	4618      	mov	r0, r3
 8012546:	3738      	adds	r7, #56	; 0x38
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	20002430 	.word	0x20002430
 8012550:	20002410 	.word	0x20002410
 8012554:	20001f38 	.word	0x20001f38
 8012558:	200023c8 	.word	0x200023c8
 801255c:	20001f34 	.word	0x20001f34
 8012560:	2000241c 	.word	0x2000241c

08012564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801256e:	4b21      	ldr	r3, [pc, #132]	; (80125f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012574:	4b20      	ldr	r3, [pc, #128]	; (80125f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	3304      	adds	r3, #4
 801257a:	4618      	mov	r0, r3
 801257c:	f7fe f92a 	bl	80107d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012586:	d10a      	bne.n	801259e <prvAddCurrentTaskToDelayedList+0x3a>
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d007      	beq.n	801259e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801258e:	4b1a      	ldr	r3, [pc, #104]	; (80125f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	3304      	adds	r3, #4
 8012594:	4619      	mov	r1, r3
 8012596:	4819      	ldr	r0, [pc, #100]	; (80125fc <prvAddCurrentTaskToDelayedList+0x98>)
 8012598:	f7fe f8bf 	bl	801071a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801259c:	e026      	b.n	80125ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4413      	add	r3, r2
 80125a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125a6:	4b14      	ldr	r3, [pc, #80]	; (80125f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d209      	bcs.n	80125ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125b6:	4b12      	ldr	r3, [pc, #72]	; (8012600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	4b0f      	ldr	r3, [pc, #60]	; (80125f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	3304      	adds	r3, #4
 80125c0:	4619      	mov	r1, r3
 80125c2:	4610      	mov	r0, r2
 80125c4:	f7fe f8cd 	bl	8010762 <vListInsert>
}
 80125c8:	e010      	b.n	80125ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125ca:	4b0e      	ldr	r3, [pc, #56]	; (8012604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	4b0a      	ldr	r3, [pc, #40]	; (80125f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3304      	adds	r3, #4
 80125d4:	4619      	mov	r1, r3
 80125d6:	4610      	mov	r0, r2
 80125d8:	f7fe f8c3 	bl	8010762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80125dc:	4b0a      	ldr	r3, [pc, #40]	; (8012608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d202      	bcs.n	80125ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80125e6:	4a08      	ldr	r2, [pc, #32]	; (8012608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	6013      	str	r3, [r2, #0]
}
 80125ec:	bf00      	nop
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	2000240c 	.word	0x2000240c
 80125f8:	20001f34 	.word	0x20001f34
 80125fc:	200023f4 	.word	0x200023f4
 8012600:	200023c4 	.word	0x200023c4
 8012604:	200023c0 	.word	0x200023c0
 8012608:	20002428 	.word	0x20002428

0801260c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b08a      	sub	sp, #40	; 0x28
 8012610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012612:	2300      	movs	r3, #0
 8012614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012616:	f000 fb07 	bl	8012c28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801261a:	4b1c      	ldr	r3, [pc, #112]	; (801268c <xTimerCreateTimerTask+0x80>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d021      	beq.n	8012666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012622:	2300      	movs	r3, #0
 8012624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012626:	2300      	movs	r3, #0
 8012628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801262a:	1d3a      	adds	r2, r7, #4
 801262c:	f107 0108 	add.w	r1, r7, #8
 8012630:	f107 030c 	add.w	r3, r7, #12
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe f829 	bl	801068c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801263a:	6879      	ldr	r1, [r7, #4]
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	68fa      	ldr	r2, [r7, #12]
 8012640:	9202      	str	r2, [sp, #8]
 8012642:	9301      	str	r3, [sp, #4]
 8012644:	2302      	movs	r3, #2
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	2300      	movs	r3, #0
 801264a:	460a      	mov	r2, r1
 801264c:	4910      	ldr	r1, [pc, #64]	; (8012690 <xTimerCreateTimerTask+0x84>)
 801264e:	4811      	ldr	r0, [pc, #68]	; (8012694 <xTimerCreateTimerTask+0x88>)
 8012650:	f7fe fe90 	bl	8011374 <xTaskCreateStatic>
 8012654:	4603      	mov	r3, r0
 8012656:	4a10      	ldr	r2, [pc, #64]	; (8012698 <xTimerCreateTimerTask+0x8c>)
 8012658:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801265a:	4b0f      	ldr	r3, [pc, #60]	; (8012698 <xTimerCreateTimerTask+0x8c>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d001      	beq.n	8012666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012662:	2301      	movs	r3, #1
 8012664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10a      	bne.n	8012682 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	613b      	str	r3, [r7, #16]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012682:	697b      	ldr	r3, [r7, #20]
}
 8012684:	4618      	mov	r0, r3
 8012686:	3718      	adds	r7, #24
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	2000246c 	.word	0x2000246c
 8012690:	080180cc 	.word	0x080180cc
 8012694:	080127d1 	.word	0x080127d1
 8012698:	20002470 	.word	0x20002470

0801269c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b08a      	sub	sp, #40	; 0x28
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10a      	bne.n	80126ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	f383 8811 	msr	BASEPRI, r3
 80126bc:	f3bf 8f6f 	isb	sy
 80126c0:	f3bf 8f4f 	dsb	sy
 80126c4:	623b      	str	r3, [r7, #32]
}
 80126c6:	bf00      	nop
 80126c8:	e7fe      	b.n	80126c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80126ca:	4b1a      	ldr	r3, [pc, #104]	; (8012734 <xTimerGenericCommand+0x98>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d02a      	beq.n	8012728 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b05      	cmp	r3, #5
 80126e2:	dc18      	bgt.n	8012716 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80126e4:	f7ff fcb0 	bl	8012048 <xTaskGetSchedulerState>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b02      	cmp	r3, #2
 80126ec:	d109      	bne.n	8012702 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80126ee:	4b11      	ldr	r3, [pc, #68]	; (8012734 <xTimerGenericCommand+0x98>)
 80126f0:	6818      	ldr	r0, [r3, #0]
 80126f2:	f107 0110 	add.w	r1, r7, #16
 80126f6:	2300      	movs	r3, #0
 80126f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126fa:	f7fe f9d3 	bl	8010aa4 <xQueueGenericSend>
 80126fe:	6278      	str	r0, [r7, #36]	; 0x24
 8012700:	e012      	b.n	8012728 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012702:	4b0c      	ldr	r3, [pc, #48]	; (8012734 <xTimerGenericCommand+0x98>)
 8012704:	6818      	ldr	r0, [r3, #0]
 8012706:	f107 0110 	add.w	r1, r7, #16
 801270a:	2300      	movs	r3, #0
 801270c:	2200      	movs	r2, #0
 801270e:	f7fe f9c9 	bl	8010aa4 <xQueueGenericSend>
 8012712:	6278      	str	r0, [r7, #36]	; 0x24
 8012714:	e008      	b.n	8012728 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012716:	4b07      	ldr	r3, [pc, #28]	; (8012734 <xTimerGenericCommand+0x98>)
 8012718:	6818      	ldr	r0, [r3, #0]
 801271a:	f107 0110 	add.w	r1, r7, #16
 801271e:	2300      	movs	r3, #0
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	f7fe fabd 	bl	8010ca0 <xQueueGenericSendFromISR>
 8012726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801272a:	4618      	mov	r0, r3
 801272c:	3728      	adds	r7, #40	; 0x28
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	2000246c 	.word	0x2000246c

08012738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b088      	sub	sp, #32
 801273c:	af02      	add	r7, sp, #8
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012742:	4b22      	ldr	r3, [pc, #136]	; (80127cc <prvProcessExpiredTimer+0x94>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	3304      	adds	r3, #4
 8012750:	4618      	mov	r0, r3
 8012752:	f7fe f83f 	bl	80107d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801275c:	f003 0304 	and.w	r3, r3, #4
 8012760:	2b00      	cmp	r3, #0
 8012762:	d022      	beq.n	80127aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	699a      	ldr	r2, [r3, #24]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	18d1      	adds	r1, r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	6978      	ldr	r0, [r7, #20]
 8012772:	f000 f8d1 	bl	8012918 <prvInsertTimerInActiveList>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d01f      	beq.n	80127bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801277c:	2300      	movs	r3, #0
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	2300      	movs	r3, #0
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	2100      	movs	r1, #0
 8012786:	6978      	ldr	r0, [r7, #20]
 8012788:	f7ff ff88 	bl	801269c <xTimerGenericCommand>
 801278c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d113      	bne.n	80127bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	60fb      	str	r3, [r7, #12]
}
 80127a6:	bf00      	nop
 80127a8:	e7fe      	b.n	80127a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127b0:	f023 0301 	bic.w	r3, r3, #1
 80127b4:	b2da      	uxtb	r2, r3
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	6a1b      	ldr	r3, [r3, #32]
 80127c0:	6978      	ldr	r0, [r7, #20]
 80127c2:	4798      	blx	r3
}
 80127c4:	bf00      	nop
 80127c6:	3718      	adds	r7, #24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	20002464 	.word	0x20002464

080127d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80127d8:	f107 0308 	add.w	r3, r7, #8
 80127dc:	4618      	mov	r0, r3
 80127de:	f000 f857 	bl	8012890 <prvGetNextExpireTime>
 80127e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	4619      	mov	r1, r3
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f000 f803 	bl	80127f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80127ee:	f000 f8d5 	bl	801299c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80127f2:	e7f1      	b.n	80127d8 <prvTimerTask+0x8>

080127f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80127fe:	f7ff f81b 	bl	8011838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012802:	f107 0308 	add.w	r3, r7, #8
 8012806:	4618      	mov	r0, r3
 8012808:	f000 f866 	bl	80128d8 <prvSampleTimeNow>
 801280c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d130      	bne.n	8012876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10a      	bne.n	8012830 <prvProcessTimerOrBlockTask+0x3c>
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	429a      	cmp	r2, r3
 8012820:	d806      	bhi.n	8012830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012822:	f7ff f817 	bl	8011854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012826:	68f9      	ldr	r1, [r7, #12]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ff ff85 	bl	8012738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801282e:	e024      	b.n	801287a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d008      	beq.n	8012848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012836:	4b13      	ldr	r3, [pc, #76]	; (8012884 <prvProcessTimerOrBlockTask+0x90>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <prvProcessTimerOrBlockTask+0x50>
 8012840:	2301      	movs	r3, #1
 8012842:	e000      	b.n	8012846 <prvProcessTimerOrBlockTask+0x52>
 8012844:	2300      	movs	r3, #0
 8012846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012848:	4b0f      	ldr	r3, [pc, #60]	; (8012888 <prvProcessTimerOrBlockTask+0x94>)
 801284a:	6818      	ldr	r0, [r3, #0]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	683a      	ldr	r2, [r7, #0]
 8012854:	4619      	mov	r1, r3
 8012856:	f7fe fd59 	bl	801130c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801285a:	f7fe fffb 	bl	8011854 <xTaskResumeAll>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d10a      	bne.n	801287a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012864:	4b09      	ldr	r3, [pc, #36]	; (801288c <prvProcessTimerOrBlockTask+0x98>)
 8012866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801286a:	601a      	str	r2, [r3, #0]
 801286c:	f3bf 8f4f 	dsb	sy
 8012870:	f3bf 8f6f 	isb	sy
}
 8012874:	e001      	b.n	801287a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012876:	f7fe ffed 	bl	8011854 <xTaskResumeAll>
}
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20002468 	.word	0x20002468
 8012888:	2000246c 	.word	0x2000246c
 801288c:	e000ed04 	.word	0xe000ed04

08012890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012890:	b480      	push	{r7}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012898:	4b0e      	ldr	r3, [pc, #56]	; (80128d4 <prvGetNextExpireTime+0x44>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <prvGetNextExpireTime+0x16>
 80128a2:	2201      	movs	r2, #1
 80128a4:	e000      	b.n	80128a8 <prvGetNextExpireTime+0x18>
 80128a6:	2200      	movs	r2, #0
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d105      	bne.n	80128c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128b4:	4b07      	ldr	r3, [pc, #28]	; (80128d4 <prvGetNextExpireTime+0x44>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	60fb      	str	r3, [r7, #12]
 80128be:	e001      	b.n	80128c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80128c0:	2300      	movs	r3, #0
 80128c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80128c4:	68fb      	ldr	r3, [r7, #12]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	20002464 	.word	0x20002464

080128d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80128e0:	f7ff f856 	bl	8011990 <xTaskGetTickCount>
 80128e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80128e6:	4b0b      	ldr	r3, [pc, #44]	; (8012914 <prvSampleTimeNow+0x3c>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d205      	bcs.n	80128fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80128f0:	f000 f936 	bl	8012b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2201      	movs	r2, #1
 80128f8:	601a      	str	r2, [r3, #0]
 80128fa:	e002      	b.n	8012902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2200      	movs	r2, #0
 8012900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012902:	4a04      	ldr	r2, [pc, #16]	; (8012914 <prvSampleTimeNow+0x3c>)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012908:	68fb      	ldr	r3, [r7, #12]
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	20002474 	.word	0x20002474

08012918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
 8012924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012926:	2300      	movs	r3, #0
 8012928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	68ba      	ldr	r2, [r7, #8]
 801292e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	68fa      	ldr	r2, [r7, #12]
 8012934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	429a      	cmp	r2, r3
 801293c:	d812      	bhi.n	8012964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	1ad2      	subs	r2, r2, r3
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	699b      	ldr	r3, [r3, #24]
 8012948:	429a      	cmp	r2, r3
 801294a:	d302      	bcc.n	8012952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801294c:	2301      	movs	r3, #1
 801294e:	617b      	str	r3, [r7, #20]
 8012950:	e01b      	b.n	801298a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012952:	4b10      	ldr	r3, [pc, #64]	; (8012994 <prvInsertTimerInActiveList+0x7c>)
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	3304      	adds	r3, #4
 801295a:	4619      	mov	r1, r3
 801295c:	4610      	mov	r0, r2
 801295e:	f7fd ff00 	bl	8010762 <vListInsert>
 8012962:	e012      	b.n	801298a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	429a      	cmp	r2, r3
 801296a:	d206      	bcs.n	801297a <prvInsertTimerInActiveList+0x62>
 801296c:	68ba      	ldr	r2, [r7, #8]
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	429a      	cmp	r2, r3
 8012972:	d302      	bcc.n	801297a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012974:	2301      	movs	r3, #1
 8012976:	617b      	str	r3, [r7, #20]
 8012978:	e007      	b.n	801298a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801297a:	4b07      	ldr	r3, [pc, #28]	; (8012998 <prvInsertTimerInActiveList+0x80>)
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	3304      	adds	r3, #4
 8012982:	4619      	mov	r1, r3
 8012984:	4610      	mov	r0, r2
 8012986:	f7fd feec 	bl	8010762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801298a:	697b      	ldr	r3, [r7, #20]
}
 801298c:	4618      	mov	r0, r3
 801298e:	3718      	adds	r7, #24
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	20002468 	.word	0x20002468
 8012998:	20002464 	.word	0x20002464

0801299c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08e      	sub	sp, #56	; 0x38
 80129a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80129a2:	e0ca      	b.n	8012b3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	da18      	bge.n	80129dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80129aa:	1d3b      	adds	r3, r7, #4
 80129ac:	3304      	adds	r3, #4
 80129ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d10a      	bne.n	80129cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80129b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	61fb      	str	r3, [r7, #28]
}
 80129c8:	bf00      	nop
 80129ca:	e7fe      	b.n	80129ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129d2:	6850      	ldr	r0, [r2, #4]
 80129d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129d6:	6892      	ldr	r2, [r2, #8]
 80129d8:	4611      	mov	r1, r2
 80129da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f2c0 80aa 	blt.w	8012b38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80129e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d004      	beq.n	80129fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80129f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f2:	3304      	adds	r3, #4
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fd feed 	bl	80107d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80129fa:	463b      	mov	r3, r7
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff ff6b 	bl	80128d8 <prvSampleTimeNow>
 8012a02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2b09      	cmp	r3, #9
 8012a08:	f200 8097 	bhi.w	8012b3a <prvProcessReceivedCommands+0x19e>
 8012a0c:	a201      	add	r2, pc, #4	; (adr r2, 8012a14 <prvProcessReceivedCommands+0x78>)
 8012a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a12:	bf00      	nop
 8012a14:	08012a3d 	.word	0x08012a3d
 8012a18:	08012a3d 	.word	0x08012a3d
 8012a1c:	08012a3d 	.word	0x08012a3d
 8012a20:	08012ab1 	.word	0x08012ab1
 8012a24:	08012ac5 	.word	0x08012ac5
 8012a28:	08012b0f 	.word	0x08012b0f
 8012a2c:	08012a3d 	.word	0x08012a3d
 8012a30:	08012a3d 	.word	0x08012a3d
 8012a34:	08012ab1 	.word	0x08012ab1
 8012a38:	08012ac5 	.word	0x08012ac5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a42:	f043 0301 	orr.w	r3, r3, #1
 8012a46:	b2da      	uxtb	r2, r3
 8012a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a52:	699b      	ldr	r3, [r3, #24]
 8012a54:	18d1      	adds	r1, r2, r3
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a5c:	f7ff ff5c 	bl	8012918 <prvInsertTimerInActiveList>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d069      	beq.n	8012b3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d05e      	beq.n	8012b3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	699b      	ldr	r3, [r3, #24]
 8012a82:	441a      	add	r2, r3
 8012a84:	2300      	movs	r3, #0
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a8e:	f7ff fe05 	bl	801269c <xTimerGenericCommand>
 8012a92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012a94:	6a3b      	ldr	r3, [r7, #32]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d14f      	bne.n	8012b3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9e:	f383 8811 	msr	BASEPRI, r3
 8012aa2:	f3bf 8f6f 	isb	sy
 8012aa6:	f3bf 8f4f 	dsb	sy
 8012aaa:	61bb      	str	r3, [r7, #24]
}
 8012aac:	bf00      	nop
 8012aae:	e7fe      	b.n	8012aae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ab6:	f023 0301 	bic.w	r3, r3, #1
 8012aba:	b2da      	uxtb	r2, r3
 8012abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012ac2:	e03a      	b.n	8012b3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012aca:	f043 0301 	orr.w	r3, r3, #1
 8012ace:	b2da      	uxtb	r2, r3
 8012ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012ad6:	68ba      	ldr	r2, [r7, #8]
 8012ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ada:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ade:	699b      	ldr	r3, [r3, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10a      	bne.n	8012afa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	617b      	str	r3, [r7, #20]
}
 8012af6:	bf00      	nop
 8012af8:	e7fe      	b.n	8012af8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afc:	699a      	ldr	r2, [r3, #24]
 8012afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b00:	18d1      	adds	r1, r2, r3
 8012b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b08:	f7ff ff06 	bl	8012918 <prvInsertTimerInActiveList>
					break;
 8012b0c:	e015      	b.n	8012b3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b14:	f003 0302 	and.w	r3, r3, #2
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d103      	bne.n	8012b24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b1e:	f000 fbdf 	bl	80132e0 <vPortFree>
 8012b22:	e00a      	b.n	8012b3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b2a:	f023 0301 	bic.w	r3, r3, #1
 8012b2e:	b2da      	uxtb	r2, r3
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012b36:	e000      	b.n	8012b3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b3a:	4b08      	ldr	r3, [pc, #32]	; (8012b5c <prvProcessReceivedCommands+0x1c0>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	1d39      	adds	r1, r7, #4
 8012b40:	2200      	movs	r2, #0
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe f948 	bl	8010dd8 <xQueueReceive>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f47f af2a 	bne.w	80129a4 <prvProcessReceivedCommands+0x8>
	}
}
 8012b50:	bf00      	nop
 8012b52:	bf00      	nop
 8012b54:	3730      	adds	r7, #48	; 0x30
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	2000246c 	.word	0x2000246c

08012b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b088      	sub	sp, #32
 8012b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b66:	e048      	b.n	8012bfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b68:	4b2d      	ldr	r3, [pc, #180]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	68db      	ldr	r3, [r3, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b72:	4b2b      	ldr	r3, [pc, #172]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	3304      	adds	r3, #4
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fd fe27 	bl	80107d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6a1b      	ldr	r3, [r3, #32]
 8012b8a:	68f8      	ldr	r0, [r7, #12]
 8012b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b94:	f003 0304 	and.w	r3, r3, #4
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d02e      	beq.n	8012bfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	699b      	ldr	r3, [r3, #24]
 8012ba0:	693a      	ldr	r2, [r7, #16]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d90e      	bls.n	8012bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	68ba      	ldr	r2, [r7, #8]
 8012bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012bba:	4b19      	ldr	r3, [pc, #100]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	f7fd fdcc 	bl	8010762 <vListInsert>
 8012bca:	e016      	b.n	8012bfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012bcc:	2300      	movs	r3, #0
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	693a      	ldr	r2, [r7, #16]
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	68f8      	ldr	r0, [r7, #12]
 8012bd8:	f7ff fd60 	bl	801269c <xTimerGenericCommand>
 8012bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d10a      	bne.n	8012bfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be8:	f383 8811 	msr	BASEPRI, r3
 8012bec:	f3bf 8f6f 	isb	sy
 8012bf0:	f3bf 8f4f 	dsb	sy
 8012bf4:	603b      	str	r3, [r7, #0]
}
 8012bf6:	bf00      	nop
 8012bf8:	e7fe      	b.n	8012bf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012bfa:	4b09      	ldr	r3, [pc, #36]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1b1      	bne.n	8012b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012c04:	4b06      	ldr	r3, [pc, #24]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012c0a:	4b06      	ldr	r3, [pc, #24]	; (8012c24 <prvSwitchTimerLists+0xc4>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4a04      	ldr	r2, [pc, #16]	; (8012c20 <prvSwitchTimerLists+0xc0>)
 8012c10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012c12:	4a04      	ldr	r2, [pc, #16]	; (8012c24 <prvSwitchTimerLists+0xc4>)
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	6013      	str	r3, [r2, #0]
}
 8012c18:	bf00      	nop
 8012c1a:	3718      	adds	r7, #24
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	20002464 	.word	0x20002464
 8012c24:	20002468 	.word	0x20002468

08012c28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012c2e:	f000 f969 	bl	8012f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012c32:	4b15      	ldr	r3, [pc, #84]	; (8012c88 <prvCheckForValidListAndQueue+0x60>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d120      	bne.n	8012c7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012c3a:	4814      	ldr	r0, [pc, #80]	; (8012c8c <prvCheckForValidListAndQueue+0x64>)
 8012c3c:	f7fd fd40 	bl	80106c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012c40:	4813      	ldr	r0, [pc, #76]	; (8012c90 <prvCheckForValidListAndQueue+0x68>)
 8012c42:	f7fd fd3d 	bl	80106c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012c46:	4b13      	ldr	r3, [pc, #76]	; (8012c94 <prvCheckForValidListAndQueue+0x6c>)
 8012c48:	4a10      	ldr	r2, [pc, #64]	; (8012c8c <prvCheckForValidListAndQueue+0x64>)
 8012c4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012c4c:	4b12      	ldr	r3, [pc, #72]	; (8012c98 <prvCheckForValidListAndQueue+0x70>)
 8012c4e:	4a10      	ldr	r2, [pc, #64]	; (8012c90 <prvCheckForValidListAndQueue+0x68>)
 8012c50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012c52:	2300      	movs	r3, #0
 8012c54:	9300      	str	r3, [sp, #0]
 8012c56:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <prvCheckForValidListAndQueue+0x74>)
 8012c58:	4a11      	ldr	r2, [pc, #68]	; (8012ca0 <prvCheckForValidListAndQueue+0x78>)
 8012c5a:	2110      	movs	r1, #16
 8012c5c:	200a      	movs	r0, #10
 8012c5e:	f7fd fe4b 	bl	80108f8 <xQueueGenericCreateStatic>
 8012c62:	4603      	mov	r3, r0
 8012c64:	4a08      	ldr	r2, [pc, #32]	; (8012c88 <prvCheckForValidListAndQueue+0x60>)
 8012c66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012c68:	4b07      	ldr	r3, [pc, #28]	; (8012c88 <prvCheckForValidListAndQueue+0x60>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d005      	beq.n	8012c7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <prvCheckForValidListAndQueue+0x60>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	490b      	ldr	r1, [pc, #44]	; (8012ca4 <prvCheckForValidListAndQueue+0x7c>)
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7fe fb1e 	bl	80112b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c7c:	f000 f972 	bl	8012f64 <vPortExitCritical>
}
 8012c80:	bf00      	nop
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	2000246c 	.word	0x2000246c
 8012c8c:	2000243c 	.word	0x2000243c
 8012c90:	20002450 	.word	0x20002450
 8012c94:	20002464 	.word	0x20002464
 8012c98:	20002468 	.word	0x20002468
 8012c9c:	20002518 	.word	0x20002518
 8012ca0:	20002478 	.word	0x20002478
 8012ca4:	080180d4 	.word	0x080180d4

08012ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	3b04      	subs	r3, #4
 8012cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	3b04      	subs	r3, #4
 8012cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	f023 0201 	bic.w	r2, r3, #1
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	3b04      	subs	r3, #4
 8012cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012cd8:	4a0c      	ldr	r2, [pc, #48]	; (8012d0c <pxPortInitialiseStack+0x64>)
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	3b14      	subs	r3, #20
 8012ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	3b04      	subs	r3, #4
 8012cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f06f 0202 	mvn.w	r2, #2
 8012cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	3b20      	subs	r3, #32
 8012cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	08012d11 	.word	0x08012d11

08012d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d10:	b480      	push	{r7}
 8012d12:	b085      	sub	sp, #20
 8012d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d16:	2300      	movs	r3, #0
 8012d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d1a:	4b12      	ldr	r3, [pc, #72]	; (8012d64 <prvTaskExitError+0x54>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d22:	d00a      	beq.n	8012d3a <prvTaskExitError+0x2a>
	__asm volatile
 8012d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	60fb      	str	r3, [r7, #12]
}
 8012d36:	bf00      	nop
 8012d38:	e7fe      	b.n	8012d38 <prvTaskExitError+0x28>
	__asm volatile
 8012d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3e:	f383 8811 	msr	BASEPRI, r3
 8012d42:	f3bf 8f6f 	isb	sy
 8012d46:	f3bf 8f4f 	dsb	sy
 8012d4a:	60bb      	str	r3, [r7, #8]
}
 8012d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d4e:	bf00      	nop
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d0fc      	beq.n	8012d50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d56:	bf00      	nop
 8012d58:	bf00      	nop
 8012d5a:	3714      	adds	r7, #20
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr
 8012d64:	20000054 	.word	0x20000054
	...

08012d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d70:	4b07      	ldr	r3, [pc, #28]	; (8012d90 <pxCurrentTCBConst2>)
 8012d72:	6819      	ldr	r1, [r3, #0]
 8012d74:	6808      	ldr	r0, [r1, #0]
 8012d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7a:	f380 8809 	msr	PSP, r0
 8012d7e:	f3bf 8f6f 	isb	sy
 8012d82:	f04f 0000 	mov.w	r0, #0
 8012d86:	f380 8811 	msr	BASEPRI, r0
 8012d8a:	4770      	bx	lr
 8012d8c:	f3af 8000 	nop.w

08012d90 <pxCurrentTCBConst2>:
 8012d90:	20001f34 	.word	0x20001f34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d94:	bf00      	nop
 8012d96:	bf00      	nop

08012d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d98:	4808      	ldr	r0, [pc, #32]	; (8012dbc <prvPortStartFirstTask+0x24>)
 8012d9a:	6800      	ldr	r0, [r0, #0]
 8012d9c:	6800      	ldr	r0, [r0, #0]
 8012d9e:	f380 8808 	msr	MSP, r0
 8012da2:	f04f 0000 	mov.w	r0, #0
 8012da6:	f380 8814 	msr	CONTROL, r0
 8012daa:	b662      	cpsie	i
 8012dac:	b661      	cpsie	f
 8012dae:	f3bf 8f4f 	dsb	sy
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	df00      	svc	0
 8012db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012dba:	bf00      	nop
 8012dbc:	e000ed08 	.word	0xe000ed08

08012dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012dc6:	4b46      	ldr	r3, [pc, #280]	; (8012ee0 <xPortStartScheduler+0x120>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a46      	ldr	r2, [pc, #280]	; (8012ee4 <xPortStartScheduler+0x124>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d10a      	bne.n	8012de6 <xPortStartScheduler+0x26>
	__asm volatile
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	613b      	str	r3, [r7, #16]
}
 8012de2:	bf00      	nop
 8012de4:	e7fe      	b.n	8012de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012de6:	4b3e      	ldr	r3, [pc, #248]	; (8012ee0 <xPortStartScheduler+0x120>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4a3f      	ldr	r2, [pc, #252]	; (8012ee8 <xPortStartScheduler+0x128>)
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d10a      	bne.n	8012e06 <xPortStartScheduler+0x46>
	__asm volatile
 8012df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df4:	f383 8811 	msr	BASEPRI, r3
 8012df8:	f3bf 8f6f 	isb	sy
 8012dfc:	f3bf 8f4f 	dsb	sy
 8012e00:	60fb      	str	r3, [r7, #12]
}
 8012e02:	bf00      	nop
 8012e04:	e7fe      	b.n	8012e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012e06:	4b39      	ldr	r3, [pc, #228]	; (8012eec <xPortStartScheduler+0x12c>)
 8012e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	22ff      	movs	r2, #255	; 0xff
 8012e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012e20:	78fb      	ldrb	r3, [r7, #3]
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	4b31      	ldr	r3, [pc, #196]	; (8012ef0 <xPortStartScheduler+0x130>)
 8012e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012e2e:	4b31      	ldr	r3, [pc, #196]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e30:	2207      	movs	r2, #7
 8012e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e34:	e009      	b.n	8012e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012e36:	4b2f      	ldr	r3, [pc, #188]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	4a2d      	ldr	r2, [pc, #180]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e40:	78fb      	ldrb	r3, [r7, #3]
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e4a:	78fb      	ldrb	r3, [r7, #3]
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e52:	2b80      	cmp	r3, #128	; 0x80
 8012e54:	d0ef      	beq.n	8012e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e56:	4b27      	ldr	r3, [pc, #156]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f1c3 0307 	rsb	r3, r3, #7
 8012e5e:	2b04      	cmp	r3, #4
 8012e60:	d00a      	beq.n	8012e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8012e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e66:	f383 8811 	msr	BASEPRI, r3
 8012e6a:	f3bf 8f6f 	isb	sy
 8012e6e:	f3bf 8f4f 	dsb	sy
 8012e72:	60bb      	str	r3, [r7, #8]
}
 8012e74:	bf00      	nop
 8012e76:	e7fe      	b.n	8012e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e78:	4b1e      	ldr	r3, [pc, #120]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	021b      	lsls	r3, r3, #8
 8012e7e:	4a1d      	ldr	r2, [pc, #116]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e82:	4b1c      	ldr	r3, [pc, #112]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e8a:	4a1a      	ldr	r2, [pc, #104]	; (8012ef4 <xPortStartScheduler+0x134>)
 8012e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e96:	4b18      	ldr	r3, [pc, #96]	; (8012ef8 <xPortStartScheduler+0x138>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	4a17      	ldr	r2, [pc, #92]	; (8012ef8 <xPortStartScheduler+0x138>)
 8012e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ea2:	4b15      	ldr	r3, [pc, #84]	; (8012ef8 <xPortStartScheduler+0x138>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4a14      	ldr	r2, [pc, #80]	; (8012ef8 <xPortStartScheduler+0x138>)
 8012ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012eae:	f000 f8dd 	bl	801306c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012eb2:	4b12      	ldr	r3, [pc, #72]	; (8012efc <xPortStartScheduler+0x13c>)
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012eb8:	f000 f8fc 	bl	80130b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ebc:	4b10      	ldr	r3, [pc, #64]	; (8012f00 <xPortStartScheduler+0x140>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	4a0f      	ldr	r2, [pc, #60]	; (8012f00 <xPortStartScheduler+0x140>)
 8012ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012ec8:	f7ff ff66 	bl	8012d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012ecc:	f7fe fe2a 	bl	8011b24 <vTaskSwitchContext>
	prvTaskExitError();
 8012ed0:	f7ff ff1e 	bl	8012d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012ed4:	2300      	movs	r3, #0
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3718      	adds	r7, #24
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	e000ed00 	.word	0xe000ed00
 8012ee4:	410fc271 	.word	0x410fc271
 8012ee8:	410fc270 	.word	0x410fc270
 8012eec:	e000e400 	.word	0xe000e400
 8012ef0:	20002568 	.word	0x20002568
 8012ef4:	2000256c 	.word	0x2000256c
 8012ef8:	e000ed20 	.word	0xe000ed20
 8012efc:	20000054 	.word	0x20000054
 8012f00:	e000ef34 	.word	0xe000ef34

08012f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
	__asm volatile
 8012f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0e:	f383 8811 	msr	BASEPRI, r3
 8012f12:	f3bf 8f6f 	isb	sy
 8012f16:	f3bf 8f4f 	dsb	sy
 8012f1a:	607b      	str	r3, [r7, #4]
}
 8012f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012f1e:	4b0f      	ldr	r3, [pc, #60]	; (8012f5c <vPortEnterCritical+0x58>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	3301      	adds	r3, #1
 8012f24:	4a0d      	ldr	r2, [pc, #52]	; (8012f5c <vPortEnterCritical+0x58>)
 8012f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012f28:	4b0c      	ldr	r3, [pc, #48]	; (8012f5c <vPortEnterCritical+0x58>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d10f      	bne.n	8012f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012f30:	4b0b      	ldr	r3, [pc, #44]	; (8012f60 <vPortEnterCritical+0x5c>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d00a      	beq.n	8012f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8012f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	603b      	str	r3, [r7, #0]
}
 8012f4c:	bf00      	nop
 8012f4e:	e7fe      	b.n	8012f4e <vPortEnterCritical+0x4a>
	}
}
 8012f50:	bf00      	nop
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr
 8012f5c:	20000054 	.word	0x20000054
 8012f60:	e000ed04 	.word	0xe000ed04

08012f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f64:	b480      	push	{r7}
 8012f66:	b083      	sub	sp, #12
 8012f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f6a:	4b12      	ldr	r3, [pc, #72]	; (8012fb4 <vPortExitCritical+0x50>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10a      	bne.n	8012f88 <vPortExitCritical+0x24>
	__asm volatile
 8012f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f76:	f383 8811 	msr	BASEPRI, r3
 8012f7a:	f3bf 8f6f 	isb	sy
 8012f7e:	f3bf 8f4f 	dsb	sy
 8012f82:	607b      	str	r3, [r7, #4]
}
 8012f84:	bf00      	nop
 8012f86:	e7fe      	b.n	8012f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012f88:	4b0a      	ldr	r3, [pc, #40]	; (8012fb4 <vPortExitCritical+0x50>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	4a09      	ldr	r2, [pc, #36]	; (8012fb4 <vPortExitCritical+0x50>)
 8012f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f92:	4b08      	ldr	r3, [pc, #32]	; (8012fb4 <vPortExitCritical+0x50>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d105      	bne.n	8012fa6 <vPortExitCritical+0x42>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	f383 8811 	msr	BASEPRI, r3
}
 8012fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012fa6:	bf00      	nop
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop
 8012fb4:	20000054 	.word	0x20000054
	...

08012fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012fc0:	f3ef 8009 	mrs	r0, PSP
 8012fc4:	f3bf 8f6f 	isb	sy
 8012fc8:	4b15      	ldr	r3, [pc, #84]	; (8013020 <pxCurrentTCBConst>)
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	f01e 0f10 	tst.w	lr, #16
 8012fd0:	bf08      	it	eq
 8012fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fda:	6010      	str	r0, [r2, #0]
 8012fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012fe4:	f380 8811 	msr	BASEPRI, r0
 8012fe8:	f3bf 8f4f 	dsb	sy
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f7fe fd98 	bl	8011b24 <vTaskSwitchContext>
 8012ff4:	f04f 0000 	mov.w	r0, #0
 8012ff8:	f380 8811 	msr	BASEPRI, r0
 8012ffc:	bc09      	pop	{r0, r3}
 8012ffe:	6819      	ldr	r1, [r3, #0]
 8013000:	6808      	ldr	r0, [r1, #0]
 8013002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013006:	f01e 0f10 	tst.w	lr, #16
 801300a:	bf08      	it	eq
 801300c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013010:	f380 8809 	msr	PSP, r0
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	f3af 8000 	nop.w

08013020 <pxCurrentTCBConst>:
 8013020:	20001f34 	.word	0x20001f34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013024:	bf00      	nop
 8013026:	bf00      	nop

08013028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
	__asm volatile
 801302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013032:	f383 8811 	msr	BASEPRI, r3
 8013036:	f3bf 8f6f 	isb	sy
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	607b      	str	r3, [r7, #4]
}
 8013040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013042:	f7fe fcb5 	bl	80119b0 <xTaskIncrementTick>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801304c:	4b06      	ldr	r3, [pc, #24]	; (8013068 <xPortSysTickHandler+0x40>)
 801304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013052:	601a      	str	r2, [r3, #0]
 8013054:	2300      	movs	r3, #0
 8013056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	f383 8811 	msr	BASEPRI, r3
}
 801305e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	e000ed04 	.word	0xe000ed04

0801306c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801306c:	b480      	push	{r7}
 801306e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013070:	4b0b      	ldr	r3, [pc, #44]	; (80130a0 <vPortSetupTimerInterrupt+0x34>)
 8013072:	2200      	movs	r2, #0
 8013074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013076:	4b0b      	ldr	r3, [pc, #44]	; (80130a4 <vPortSetupTimerInterrupt+0x38>)
 8013078:	2200      	movs	r2, #0
 801307a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801307c:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <vPortSetupTimerInterrupt+0x3c>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a0a      	ldr	r2, [pc, #40]	; (80130ac <vPortSetupTimerInterrupt+0x40>)
 8013082:	fba2 2303 	umull	r2, r3, r2, r3
 8013086:	099b      	lsrs	r3, r3, #6
 8013088:	4a09      	ldr	r2, [pc, #36]	; (80130b0 <vPortSetupTimerInterrupt+0x44>)
 801308a:	3b01      	subs	r3, #1
 801308c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801308e:	4b04      	ldr	r3, [pc, #16]	; (80130a0 <vPortSetupTimerInterrupt+0x34>)
 8013090:	2207      	movs	r2, #7
 8013092:	601a      	str	r2, [r3, #0]
}
 8013094:	bf00      	nop
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr
 801309e:	bf00      	nop
 80130a0:	e000e010 	.word	0xe000e010
 80130a4:	e000e018 	.word	0xe000e018
 80130a8:	20000014 	.word	0x20000014
 80130ac:	10624dd3 	.word	0x10624dd3
 80130b0:	e000e014 	.word	0xe000e014

080130b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80130b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80130c4 <vPortEnableVFP+0x10>
 80130b8:	6801      	ldr	r1, [r0, #0]
 80130ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80130be:	6001      	str	r1, [r0, #0]
 80130c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80130c2:	bf00      	nop
 80130c4:	e000ed88 	.word	0xe000ed88

080130c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80130c8:	b480      	push	{r7}
 80130ca:	b085      	sub	sp, #20
 80130cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80130ce:	f3ef 8305 	mrs	r3, IPSR
 80130d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2b0f      	cmp	r3, #15
 80130d8:	d914      	bls.n	8013104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80130da:	4a17      	ldr	r2, [pc, #92]	; (8013138 <vPortValidateInterruptPriority+0x70>)
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	4413      	add	r3, r2
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80130e4:	4b15      	ldr	r3, [pc, #84]	; (801313c <vPortValidateInterruptPriority+0x74>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	7afa      	ldrb	r2, [r7, #11]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d20a      	bcs.n	8013104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80130ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	607b      	str	r3, [r7, #4]
}
 8013100:	bf00      	nop
 8013102:	e7fe      	b.n	8013102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013104:	4b0e      	ldr	r3, [pc, #56]	; (8013140 <vPortValidateInterruptPriority+0x78>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801310c:	4b0d      	ldr	r3, [pc, #52]	; (8013144 <vPortValidateInterruptPriority+0x7c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	429a      	cmp	r2, r3
 8013112:	d90a      	bls.n	801312a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013118:	f383 8811 	msr	BASEPRI, r3
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	603b      	str	r3, [r7, #0]
}
 8013126:	bf00      	nop
 8013128:	e7fe      	b.n	8013128 <vPortValidateInterruptPriority+0x60>
	}
 801312a:	bf00      	nop
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	e000e3f0 	.word	0xe000e3f0
 801313c:	20002568 	.word	0x20002568
 8013140:	e000ed0c 	.word	0xe000ed0c
 8013144:	2000256c 	.word	0x2000256c

08013148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b08a      	sub	sp, #40	; 0x28
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013150:	2300      	movs	r3, #0
 8013152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013154:	f7fe fb70 	bl	8011838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013158:	4b5b      	ldr	r3, [pc, #364]	; (80132c8 <pvPortMalloc+0x180>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013160:	f000 f920 	bl	80133a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013164:	4b59      	ldr	r3, [pc, #356]	; (80132cc <pvPortMalloc+0x184>)
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	4013      	ands	r3, r2
 801316c:	2b00      	cmp	r3, #0
 801316e:	f040 8093 	bne.w	8013298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d01d      	beq.n	80131b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013178:	2208      	movs	r2, #8
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4413      	add	r3, r2
 801317e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f003 0307 	and.w	r3, r3, #7
 8013186:	2b00      	cmp	r3, #0
 8013188:	d014      	beq.n	80131b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f023 0307 	bic.w	r3, r3, #7
 8013190:	3308      	adds	r3, #8
 8013192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f003 0307 	and.w	r3, r3, #7
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00a      	beq.n	80131b4 <pvPortMalloc+0x6c>
	__asm volatile
 801319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	617b      	str	r3, [r7, #20]
}
 80131b0:	bf00      	nop
 80131b2:	e7fe      	b.n	80131b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d06e      	beq.n	8013298 <pvPortMalloc+0x150>
 80131ba:	4b45      	ldr	r3, [pc, #276]	; (80132d0 <pvPortMalloc+0x188>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d869      	bhi.n	8013298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80131c4:	4b43      	ldr	r3, [pc, #268]	; (80132d4 <pvPortMalloc+0x18c>)
 80131c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80131c8:	4b42      	ldr	r3, [pc, #264]	; (80132d4 <pvPortMalloc+0x18c>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131ce:	e004      	b.n	80131da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80131d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d903      	bls.n	80131ec <pvPortMalloc+0xa4>
 80131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1f1      	bne.n	80131d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80131ec:	4b36      	ldr	r3, [pc, #216]	; (80132c8 <pvPortMalloc+0x180>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d050      	beq.n	8013298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80131f6:	6a3b      	ldr	r3, [r7, #32]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2208      	movs	r2, #8
 80131fc:	4413      	add	r3, r2
 80131fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	6a3b      	ldr	r3, [r7, #32]
 8013206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320a:	685a      	ldr	r2, [r3, #4]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	1ad2      	subs	r2, r2, r3
 8013210:	2308      	movs	r3, #8
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	429a      	cmp	r2, r3
 8013216:	d91f      	bls.n	8013258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4413      	add	r3, r2
 801321e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	f003 0307 	and.w	r3, r3, #7
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00a      	beq.n	8013240 <pvPortMalloc+0xf8>
	__asm volatile
 801322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322e:	f383 8811 	msr	BASEPRI, r3
 8013232:	f3bf 8f6f 	isb	sy
 8013236:	f3bf 8f4f 	dsb	sy
 801323a:	613b      	str	r3, [r7, #16]
}
 801323c:	bf00      	nop
 801323e:	e7fe      	b.n	801323e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013242:	685a      	ldr	r2, [r3, #4]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	1ad2      	subs	r2, r2, r3
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013252:	69b8      	ldr	r0, [r7, #24]
 8013254:	f000 f908 	bl	8013468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013258:	4b1d      	ldr	r3, [pc, #116]	; (80132d0 <pvPortMalloc+0x188>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	4a1b      	ldr	r2, [pc, #108]	; (80132d0 <pvPortMalloc+0x188>)
 8013264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013266:	4b1a      	ldr	r3, [pc, #104]	; (80132d0 <pvPortMalloc+0x188>)
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	4b1b      	ldr	r3, [pc, #108]	; (80132d8 <pvPortMalloc+0x190>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	429a      	cmp	r2, r3
 8013270:	d203      	bcs.n	801327a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013272:	4b17      	ldr	r3, [pc, #92]	; (80132d0 <pvPortMalloc+0x188>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	4a18      	ldr	r2, [pc, #96]	; (80132d8 <pvPortMalloc+0x190>)
 8013278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327c:	685a      	ldr	r2, [r3, #4]
 801327e:	4b13      	ldr	r3, [pc, #76]	; (80132cc <pvPortMalloc+0x184>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	431a      	orrs	r2, r3
 8013284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	2200      	movs	r2, #0
 801328c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801328e:	4b13      	ldr	r3, [pc, #76]	; (80132dc <pvPortMalloc+0x194>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3301      	adds	r3, #1
 8013294:	4a11      	ldr	r2, [pc, #68]	; (80132dc <pvPortMalloc+0x194>)
 8013296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013298:	f7fe fadc 	bl	8011854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	f003 0307 	and.w	r3, r3, #7
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00a      	beq.n	80132bc <pvPortMalloc+0x174>
	__asm volatile
 80132a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132aa:	f383 8811 	msr	BASEPRI, r3
 80132ae:	f3bf 8f6f 	isb	sy
 80132b2:	f3bf 8f4f 	dsb	sy
 80132b6:	60fb      	str	r3, [r7, #12]
}
 80132b8:	bf00      	nop
 80132ba:	e7fe      	b.n	80132ba <pvPortMalloc+0x172>
	return pvReturn;
 80132bc:	69fb      	ldr	r3, [r7, #28]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3728      	adds	r7, #40	; 0x28
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	20005070 	.word	0x20005070
 80132cc:	20005084 	.word	0x20005084
 80132d0:	20005074 	.word	0x20005074
 80132d4:	20005068 	.word	0x20005068
 80132d8:	20005078 	.word	0x20005078
 80132dc:	2000507c 	.word	0x2000507c

080132e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d04d      	beq.n	801338e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80132f2:	2308      	movs	r3, #8
 80132f4:	425b      	negs	r3, r3
 80132f6:	697a      	ldr	r2, [r7, #20]
 80132f8:	4413      	add	r3, r2
 80132fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	685a      	ldr	r2, [r3, #4]
 8013304:	4b24      	ldr	r3, [pc, #144]	; (8013398 <vPortFree+0xb8>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4013      	ands	r3, r2
 801330a:	2b00      	cmp	r3, #0
 801330c:	d10a      	bne.n	8013324 <vPortFree+0x44>
	__asm volatile
 801330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013312:	f383 8811 	msr	BASEPRI, r3
 8013316:	f3bf 8f6f 	isb	sy
 801331a:	f3bf 8f4f 	dsb	sy
 801331e:	60fb      	str	r3, [r7, #12]
}
 8013320:	bf00      	nop
 8013322:	e7fe      	b.n	8013322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d00a      	beq.n	8013342 <vPortFree+0x62>
	__asm volatile
 801332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013330:	f383 8811 	msr	BASEPRI, r3
 8013334:	f3bf 8f6f 	isb	sy
 8013338:	f3bf 8f4f 	dsb	sy
 801333c:	60bb      	str	r3, [r7, #8]
}
 801333e:	bf00      	nop
 8013340:	e7fe      	b.n	8013340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	4b14      	ldr	r3, [pc, #80]	; (8013398 <vPortFree+0xb8>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4013      	ands	r3, r2
 801334c:	2b00      	cmp	r3, #0
 801334e:	d01e      	beq.n	801338e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d11a      	bne.n	801338e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	685a      	ldr	r2, [r3, #4]
 801335c:	4b0e      	ldr	r3, [pc, #56]	; (8013398 <vPortFree+0xb8>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	43db      	mvns	r3, r3
 8013362:	401a      	ands	r2, r3
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013368:	f7fe fa66 	bl	8011838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	685a      	ldr	r2, [r3, #4]
 8013370:	4b0a      	ldr	r3, [pc, #40]	; (801339c <vPortFree+0xbc>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4413      	add	r3, r2
 8013376:	4a09      	ldr	r2, [pc, #36]	; (801339c <vPortFree+0xbc>)
 8013378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801337a:	6938      	ldr	r0, [r7, #16]
 801337c:	f000 f874 	bl	8013468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013380:	4b07      	ldr	r3, [pc, #28]	; (80133a0 <vPortFree+0xc0>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	3301      	adds	r3, #1
 8013386:	4a06      	ldr	r2, [pc, #24]	; (80133a0 <vPortFree+0xc0>)
 8013388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801338a:	f7fe fa63 	bl	8011854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801338e:	bf00      	nop
 8013390:	3718      	adds	r7, #24
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	20005084 	.word	0x20005084
 801339c:	20005074 	.word	0x20005074
 80133a0:	20005080 	.word	0x20005080

080133a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80133aa:	f642 23f8 	movw	r3, #11000	; 0x2af8
 80133ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80133b0:	4b27      	ldr	r3, [pc, #156]	; (8013450 <prvHeapInit+0xac>)
 80133b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f003 0307 	and.w	r3, r3, #7
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d00c      	beq.n	80133d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	3307      	adds	r3, #7
 80133c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f023 0307 	bic.w	r3, r3, #7
 80133ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	4a1f      	ldr	r2, [pc, #124]	; (8013450 <prvHeapInit+0xac>)
 80133d4:	4413      	add	r3, r2
 80133d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80133dc:	4a1d      	ldr	r2, [pc, #116]	; (8013454 <prvHeapInit+0xb0>)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80133e2:	4b1c      	ldr	r3, [pc, #112]	; (8013454 <prvHeapInit+0xb0>)
 80133e4:	2200      	movs	r2, #0
 80133e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	68ba      	ldr	r2, [r7, #8]
 80133ec:	4413      	add	r3, r2
 80133ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80133f0:	2208      	movs	r2, #8
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	1a9b      	subs	r3, r3, r2
 80133f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f023 0307 	bic.w	r3, r3, #7
 80133fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	4a15      	ldr	r2, [pc, #84]	; (8013458 <prvHeapInit+0xb4>)
 8013404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013406:	4b14      	ldr	r3, [pc, #80]	; (8013458 <prvHeapInit+0xb4>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2200      	movs	r2, #0
 801340c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801340e:	4b12      	ldr	r3, [pc, #72]	; (8013458 <prvHeapInit+0xb4>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2200      	movs	r2, #0
 8013414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	68fa      	ldr	r2, [r7, #12]
 801341e:	1ad2      	subs	r2, r2, r3
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013424:	4b0c      	ldr	r3, [pc, #48]	; (8013458 <prvHeapInit+0xb4>)
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	4a0a      	ldr	r2, [pc, #40]	; (801345c <prvHeapInit+0xb8>)
 8013432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	4a09      	ldr	r2, [pc, #36]	; (8013460 <prvHeapInit+0xbc>)
 801343a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801343c:	4b09      	ldr	r3, [pc, #36]	; (8013464 <prvHeapInit+0xc0>)
 801343e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013442:	601a      	str	r2, [r3, #0]
}
 8013444:	bf00      	nop
 8013446:	3714      	adds	r7, #20
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr
 8013450:	20002570 	.word	0x20002570
 8013454:	20005068 	.word	0x20005068
 8013458:	20005070 	.word	0x20005070
 801345c:	20005078 	.word	0x20005078
 8013460:	20005074 	.word	0x20005074
 8013464:	20005084 	.word	0x20005084

08013468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013468:	b480      	push	{r7}
 801346a:	b085      	sub	sp, #20
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013470:	4b28      	ldr	r3, [pc, #160]	; (8013514 <prvInsertBlockIntoFreeList+0xac>)
 8013472:	60fb      	str	r3, [r7, #12]
 8013474:	e002      	b.n	801347c <prvInsertBlockIntoFreeList+0x14>
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	429a      	cmp	r2, r3
 8013484:	d8f7      	bhi.n	8013476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	4413      	add	r3, r2
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	429a      	cmp	r2, r3
 8013496:	d108      	bne.n	80134aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	685a      	ldr	r2, [r3, #4]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	441a      	add	r2, r3
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	68ba      	ldr	r2, [r7, #8]
 80134b4:	441a      	add	r2, r3
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d118      	bne.n	80134f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	681a      	ldr	r2, [r3, #0]
 80134c2:	4b15      	ldr	r3, [pc, #84]	; (8013518 <prvInsertBlockIntoFreeList+0xb0>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d00d      	beq.n	80134e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	441a      	add	r2, r3
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	e008      	b.n	80134f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80134e6:	4b0c      	ldr	r3, [pc, #48]	; (8013518 <prvInsertBlockIntoFreeList+0xb0>)
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	601a      	str	r2, [r3, #0]
 80134ee:	e003      	b.n	80134f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d002      	beq.n	8013506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013506:	bf00      	nop
 8013508:	3714      	adds	r7, #20
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr
 8013512:	bf00      	nop
 8013514:	20005068 	.word	0x20005068
 8013518:	20005070 	.word	0x20005070

0801351c <__assert_func>:
 801351c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801351e:	4614      	mov	r4, r2
 8013520:	461a      	mov	r2, r3
 8013522:	4b09      	ldr	r3, [pc, #36]	; (8013548 <__assert_func+0x2c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	4605      	mov	r5, r0
 8013528:	68d8      	ldr	r0, [r3, #12]
 801352a:	b14c      	cbz	r4, 8013540 <__assert_func+0x24>
 801352c:	4b07      	ldr	r3, [pc, #28]	; (801354c <__assert_func+0x30>)
 801352e:	9100      	str	r1, [sp, #0]
 8013530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013534:	4906      	ldr	r1, [pc, #24]	; (8013550 <__assert_func+0x34>)
 8013536:	462b      	mov	r3, r5
 8013538:	f000 f8ea 	bl	8013710 <fiprintf>
 801353c:	f001 fad0 	bl	8014ae0 <abort>
 8013540:	4b04      	ldr	r3, [pc, #16]	; (8013554 <__assert_func+0x38>)
 8013542:	461c      	mov	r4, r3
 8013544:	e7f3      	b.n	801352e <__assert_func+0x12>
 8013546:	bf00      	nop
 8013548:	20000058 	.word	0x20000058
 801354c:	0801851f 	.word	0x0801851f
 8013550:	0801852c 	.word	0x0801852c
 8013554:	0801855a 	.word	0x0801855a

08013558 <__errno>:
 8013558:	4b01      	ldr	r3, [pc, #4]	; (8013560 <__errno+0x8>)
 801355a:	6818      	ldr	r0, [r3, #0]
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop
 8013560:	20000058 	.word	0x20000058

08013564 <std>:
 8013564:	2300      	movs	r3, #0
 8013566:	b510      	push	{r4, lr}
 8013568:	4604      	mov	r4, r0
 801356a:	e9c0 3300 	strd	r3, r3, [r0]
 801356e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013572:	6083      	str	r3, [r0, #8]
 8013574:	8181      	strh	r1, [r0, #12]
 8013576:	6643      	str	r3, [r0, #100]	; 0x64
 8013578:	81c2      	strh	r2, [r0, #14]
 801357a:	6183      	str	r3, [r0, #24]
 801357c:	4619      	mov	r1, r3
 801357e:	2208      	movs	r2, #8
 8013580:	305c      	adds	r0, #92	; 0x5c
 8013582:	f000 f956 	bl	8013832 <memset>
 8013586:	4b05      	ldr	r3, [pc, #20]	; (801359c <std+0x38>)
 8013588:	6263      	str	r3, [r4, #36]	; 0x24
 801358a:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <std+0x3c>)
 801358c:	62a3      	str	r3, [r4, #40]	; 0x28
 801358e:	4b05      	ldr	r3, [pc, #20]	; (80135a4 <std+0x40>)
 8013590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013592:	4b05      	ldr	r3, [pc, #20]	; (80135a8 <std+0x44>)
 8013594:	6224      	str	r4, [r4, #32]
 8013596:	6323      	str	r3, [r4, #48]	; 0x30
 8013598:	bd10      	pop	{r4, pc}
 801359a:	bf00      	nop
 801359c:	080147ad 	.word	0x080147ad
 80135a0:	080147cf 	.word	0x080147cf
 80135a4:	08014807 	.word	0x08014807
 80135a8:	0801482b 	.word	0x0801482b

080135ac <_cleanup_r>:
 80135ac:	4901      	ldr	r1, [pc, #4]	; (80135b4 <_cleanup_r+0x8>)
 80135ae:	f000 b8c1 	b.w	8013734 <_fwalk_reent>
 80135b2:	bf00      	nop
 80135b4:	08015911 	.word	0x08015911

080135b8 <__sfmoreglue>:
 80135b8:	b570      	push	{r4, r5, r6, lr}
 80135ba:	2268      	movs	r2, #104	; 0x68
 80135bc:	1e4d      	subs	r5, r1, #1
 80135be:	4355      	muls	r5, r2
 80135c0:	460e      	mov	r6, r1
 80135c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135c6:	f000 f95d 	bl	8013884 <_malloc_r>
 80135ca:	4604      	mov	r4, r0
 80135cc:	b140      	cbz	r0, 80135e0 <__sfmoreglue+0x28>
 80135ce:	2100      	movs	r1, #0
 80135d0:	e9c0 1600 	strd	r1, r6, [r0]
 80135d4:	300c      	adds	r0, #12
 80135d6:	60a0      	str	r0, [r4, #8]
 80135d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80135dc:	f000 f929 	bl	8013832 <memset>
 80135e0:	4620      	mov	r0, r4
 80135e2:	bd70      	pop	{r4, r5, r6, pc}

080135e4 <__sfp_lock_acquire>:
 80135e4:	4801      	ldr	r0, [pc, #4]	; (80135ec <__sfp_lock_acquire+0x8>)
 80135e6:	f000 b8ea 	b.w	80137be <__retarget_lock_acquire_recursive>
 80135ea:	bf00      	nop
 80135ec:	20005089 	.word	0x20005089

080135f0 <__sfp_lock_release>:
 80135f0:	4801      	ldr	r0, [pc, #4]	; (80135f8 <__sfp_lock_release+0x8>)
 80135f2:	f000 b8e5 	b.w	80137c0 <__retarget_lock_release_recursive>
 80135f6:	bf00      	nop
 80135f8:	20005089 	.word	0x20005089

080135fc <__sinit_lock_acquire>:
 80135fc:	4801      	ldr	r0, [pc, #4]	; (8013604 <__sinit_lock_acquire+0x8>)
 80135fe:	f000 b8de 	b.w	80137be <__retarget_lock_acquire_recursive>
 8013602:	bf00      	nop
 8013604:	2000508a 	.word	0x2000508a

08013608 <__sinit_lock_release>:
 8013608:	4801      	ldr	r0, [pc, #4]	; (8013610 <__sinit_lock_release+0x8>)
 801360a:	f000 b8d9 	b.w	80137c0 <__retarget_lock_release_recursive>
 801360e:	bf00      	nop
 8013610:	2000508a 	.word	0x2000508a

08013614 <__sinit>:
 8013614:	b510      	push	{r4, lr}
 8013616:	4604      	mov	r4, r0
 8013618:	f7ff fff0 	bl	80135fc <__sinit_lock_acquire>
 801361c:	69a3      	ldr	r3, [r4, #24]
 801361e:	b11b      	cbz	r3, 8013628 <__sinit+0x14>
 8013620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013624:	f7ff bff0 	b.w	8013608 <__sinit_lock_release>
 8013628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801362c:	6523      	str	r3, [r4, #80]	; 0x50
 801362e:	4b13      	ldr	r3, [pc, #76]	; (801367c <__sinit+0x68>)
 8013630:	4a13      	ldr	r2, [pc, #76]	; (8013680 <__sinit+0x6c>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	62a2      	str	r2, [r4, #40]	; 0x28
 8013636:	42a3      	cmp	r3, r4
 8013638:	bf04      	itt	eq
 801363a:	2301      	moveq	r3, #1
 801363c:	61a3      	streq	r3, [r4, #24]
 801363e:	4620      	mov	r0, r4
 8013640:	f000 f820 	bl	8013684 <__sfp>
 8013644:	6060      	str	r0, [r4, #4]
 8013646:	4620      	mov	r0, r4
 8013648:	f000 f81c 	bl	8013684 <__sfp>
 801364c:	60a0      	str	r0, [r4, #8]
 801364e:	4620      	mov	r0, r4
 8013650:	f000 f818 	bl	8013684 <__sfp>
 8013654:	2200      	movs	r2, #0
 8013656:	60e0      	str	r0, [r4, #12]
 8013658:	2104      	movs	r1, #4
 801365a:	6860      	ldr	r0, [r4, #4]
 801365c:	f7ff ff82 	bl	8013564 <std>
 8013660:	68a0      	ldr	r0, [r4, #8]
 8013662:	2201      	movs	r2, #1
 8013664:	2109      	movs	r1, #9
 8013666:	f7ff ff7d 	bl	8013564 <std>
 801366a:	68e0      	ldr	r0, [r4, #12]
 801366c:	2202      	movs	r2, #2
 801366e:	2112      	movs	r1, #18
 8013670:	f7ff ff78 	bl	8013564 <std>
 8013674:	2301      	movs	r3, #1
 8013676:	61a3      	str	r3, [r4, #24]
 8013678:	e7d2      	b.n	8013620 <__sinit+0xc>
 801367a:	bf00      	nop
 801367c:	080185bc 	.word	0x080185bc
 8013680:	080135ad 	.word	0x080135ad

08013684 <__sfp>:
 8013684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013686:	4607      	mov	r7, r0
 8013688:	f7ff ffac 	bl	80135e4 <__sfp_lock_acquire>
 801368c:	4b1e      	ldr	r3, [pc, #120]	; (8013708 <__sfp+0x84>)
 801368e:	681e      	ldr	r6, [r3, #0]
 8013690:	69b3      	ldr	r3, [r6, #24]
 8013692:	b913      	cbnz	r3, 801369a <__sfp+0x16>
 8013694:	4630      	mov	r0, r6
 8013696:	f7ff ffbd 	bl	8013614 <__sinit>
 801369a:	3648      	adds	r6, #72	; 0x48
 801369c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136a0:	3b01      	subs	r3, #1
 80136a2:	d503      	bpl.n	80136ac <__sfp+0x28>
 80136a4:	6833      	ldr	r3, [r6, #0]
 80136a6:	b30b      	cbz	r3, 80136ec <__sfp+0x68>
 80136a8:	6836      	ldr	r6, [r6, #0]
 80136aa:	e7f7      	b.n	801369c <__sfp+0x18>
 80136ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136b0:	b9d5      	cbnz	r5, 80136e8 <__sfp+0x64>
 80136b2:	4b16      	ldr	r3, [pc, #88]	; (801370c <__sfp+0x88>)
 80136b4:	60e3      	str	r3, [r4, #12]
 80136b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136ba:	6665      	str	r5, [r4, #100]	; 0x64
 80136bc:	f000 f87e 	bl	80137bc <__retarget_lock_init_recursive>
 80136c0:	f7ff ff96 	bl	80135f0 <__sfp_lock_release>
 80136c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80136cc:	6025      	str	r5, [r4, #0]
 80136ce:	61a5      	str	r5, [r4, #24]
 80136d0:	2208      	movs	r2, #8
 80136d2:	4629      	mov	r1, r5
 80136d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136d8:	f000 f8ab 	bl	8013832 <memset>
 80136dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136e4:	4620      	mov	r0, r4
 80136e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136e8:	3468      	adds	r4, #104	; 0x68
 80136ea:	e7d9      	b.n	80136a0 <__sfp+0x1c>
 80136ec:	2104      	movs	r1, #4
 80136ee:	4638      	mov	r0, r7
 80136f0:	f7ff ff62 	bl	80135b8 <__sfmoreglue>
 80136f4:	4604      	mov	r4, r0
 80136f6:	6030      	str	r0, [r6, #0]
 80136f8:	2800      	cmp	r0, #0
 80136fa:	d1d5      	bne.n	80136a8 <__sfp+0x24>
 80136fc:	f7ff ff78 	bl	80135f0 <__sfp_lock_release>
 8013700:	230c      	movs	r3, #12
 8013702:	603b      	str	r3, [r7, #0]
 8013704:	e7ee      	b.n	80136e4 <__sfp+0x60>
 8013706:	bf00      	nop
 8013708:	080185bc 	.word	0x080185bc
 801370c:	ffff0001 	.word	0xffff0001

08013710 <fiprintf>:
 8013710:	b40e      	push	{r1, r2, r3}
 8013712:	b503      	push	{r0, r1, lr}
 8013714:	4601      	mov	r1, r0
 8013716:	ab03      	add	r3, sp, #12
 8013718:	4805      	ldr	r0, [pc, #20]	; (8013730 <fiprintf+0x20>)
 801371a:	f853 2b04 	ldr.w	r2, [r3], #4
 801371e:	6800      	ldr	r0, [r0, #0]
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	f000 f94d 	bl	80139c0 <_vfiprintf_r>
 8013726:	b002      	add	sp, #8
 8013728:	f85d eb04 	ldr.w	lr, [sp], #4
 801372c:	b003      	add	sp, #12
 801372e:	4770      	bx	lr
 8013730:	20000058 	.word	0x20000058

08013734 <_fwalk_reent>:
 8013734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013738:	4606      	mov	r6, r0
 801373a:	4688      	mov	r8, r1
 801373c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013740:	2700      	movs	r7, #0
 8013742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013746:	f1b9 0901 	subs.w	r9, r9, #1
 801374a:	d505      	bpl.n	8013758 <_fwalk_reent+0x24>
 801374c:	6824      	ldr	r4, [r4, #0]
 801374e:	2c00      	cmp	r4, #0
 8013750:	d1f7      	bne.n	8013742 <_fwalk_reent+0xe>
 8013752:	4638      	mov	r0, r7
 8013754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013758:	89ab      	ldrh	r3, [r5, #12]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d907      	bls.n	801376e <_fwalk_reent+0x3a>
 801375e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013762:	3301      	adds	r3, #1
 8013764:	d003      	beq.n	801376e <_fwalk_reent+0x3a>
 8013766:	4629      	mov	r1, r5
 8013768:	4630      	mov	r0, r6
 801376a:	47c0      	blx	r8
 801376c:	4307      	orrs	r7, r0
 801376e:	3568      	adds	r5, #104	; 0x68
 8013770:	e7e9      	b.n	8013746 <_fwalk_reent+0x12>
	...

08013774 <__libc_init_array>:
 8013774:	b570      	push	{r4, r5, r6, lr}
 8013776:	4d0d      	ldr	r5, [pc, #52]	; (80137ac <__libc_init_array+0x38>)
 8013778:	4c0d      	ldr	r4, [pc, #52]	; (80137b0 <__libc_init_array+0x3c>)
 801377a:	1b64      	subs	r4, r4, r5
 801377c:	10a4      	asrs	r4, r4, #2
 801377e:	2600      	movs	r6, #0
 8013780:	42a6      	cmp	r6, r4
 8013782:	d109      	bne.n	8013798 <__libc_init_array+0x24>
 8013784:	4d0b      	ldr	r5, [pc, #44]	; (80137b4 <__libc_init_array+0x40>)
 8013786:	4c0c      	ldr	r4, [pc, #48]	; (80137b8 <__libc_init_array+0x44>)
 8013788:	f002 ff9e 	bl	80166c8 <_init>
 801378c:	1b64      	subs	r4, r4, r5
 801378e:	10a4      	asrs	r4, r4, #2
 8013790:	2600      	movs	r6, #0
 8013792:	42a6      	cmp	r6, r4
 8013794:	d105      	bne.n	80137a2 <__libc_init_array+0x2e>
 8013796:	bd70      	pop	{r4, r5, r6, pc}
 8013798:	f855 3b04 	ldr.w	r3, [r5], #4
 801379c:	4798      	blx	r3
 801379e:	3601      	adds	r6, #1
 80137a0:	e7ee      	b.n	8013780 <__libc_init_array+0xc>
 80137a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80137a6:	4798      	blx	r3
 80137a8:	3601      	adds	r6, #1
 80137aa:	e7f2      	b.n	8013792 <__libc_init_array+0x1e>
 80137ac:	08018960 	.word	0x08018960
 80137b0:	08018960 	.word	0x08018960
 80137b4:	08018960 	.word	0x08018960
 80137b8:	08018964 	.word	0x08018964

080137bc <__retarget_lock_init_recursive>:
 80137bc:	4770      	bx	lr

080137be <__retarget_lock_acquire_recursive>:
 80137be:	4770      	bx	lr

080137c0 <__retarget_lock_release_recursive>:
 80137c0:	4770      	bx	lr

080137c2 <memcmp>:
 80137c2:	b510      	push	{r4, lr}
 80137c4:	3901      	subs	r1, #1
 80137c6:	4402      	add	r2, r0
 80137c8:	4290      	cmp	r0, r2
 80137ca:	d101      	bne.n	80137d0 <memcmp+0xe>
 80137cc:	2000      	movs	r0, #0
 80137ce:	e005      	b.n	80137dc <memcmp+0x1a>
 80137d0:	7803      	ldrb	r3, [r0, #0]
 80137d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80137d6:	42a3      	cmp	r3, r4
 80137d8:	d001      	beq.n	80137de <memcmp+0x1c>
 80137da:	1b18      	subs	r0, r3, r4
 80137dc:	bd10      	pop	{r4, pc}
 80137de:	3001      	adds	r0, #1
 80137e0:	e7f2      	b.n	80137c8 <memcmp+0x6>

080137e2 <memcpy>:
 80137e2:	440a      	add	r2, r1
 80137e4:	4291      	cmp	r1, r2
 80137e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80137ea:	d100      	bne.n	80137ee <memcpy+0xc>
 80137ec:	4770      	bx	lr
 80137ee:	b510      	push	{r4, lr}
 80137f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137f8:	4291      	cmp	r1, r2
 80137fa:	d1f9      	bne.n	80137f0 <memcpy+0xe>
 80137fc:	bd10      	pop	{r4, pc}

080137fe <memmove>:
 80137fe:	4288      	cmp	r0, r1
 8013800:	b510      	push	{r4, lr}
 8013802:	eb01 0402 	add.w	r4, r1, r2
 8013806:	d902      	bls.n	801380e <memmove+0x10>
 8013808:	4284      	cmp	r4, r0
 801380a:	4623      	mov	r3, r4
 801380c:	d807      	bhi.n	801381e <memmove+0x20>
 801380e:	1e43      	subs	r3, r0, #1
 8013810:	42a1      	cmp	r1, r4
 8013812:	d008      	beq.n	8013826 <memmove+0x28>
 8013814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013818:	f803 2f01 	strb.w	r2, [r3, #1]!
 801381c:	e7f8      	b.n	8013810 <memmove+0x12>
 801381e:	4402      	add	r2, r0
 8013820:	4601      	mov	r1, r0
 8013822:	428a      	cmp	r2, r1
 8013824:	d100      	bne.n	8013828 <memmove+0x2a>
 8013826:	bd10      	pop	{r4, pc}
 8013828:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801382c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013830:	e7f7      	b.n	8013822 <memmove+0x24>

08013832 <memset>:
 8013832:	4402      	add	r2, r0
 8013834:	4603      	mov	r3, r0
 8013836:	4293      	cmp	r3, r2
 8013838:	d100      	bne.n	801383c <memset+0xa>
 801383a:	4770      	bx	lr
 801383c:	f803 1b01 	strb.w	r1, [r3], #1
 8013840:	e7f9      	b.n	8013836 <memset+0x4>
	...

08013844 <sbrk_aligned>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	4e0e      	ldr	r6, [pc, #56]	; (8013880 <sbrk_aligned+0x3c>)
 8013848:	460c      	mov	r4, r1
 801384a:	6831      	ldr	r1, [r6, #0]
 801384c:	4605      	mov	r5, r0
 801384e:	b911      	cbnz	r1, 8013856 <sbrk_aligned+0x12>
 8013850:	f000 ff48 	bl	80146e4 <_sbrk_r>
 8013854:	6030      	str	r0, [r6, #0]
 8013856:	4621      	mov	r1, r4
 8013858:	4628      	mov	r0, r5
 801385a:	f000 ff43 	bl	80146e4 <_sbrk_r>
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	d00a      	beq.n	8013878 <sbrk_aligned+0x34>
 8013862:	1cc4      	adds	r4, r0, #3
 8013864:	f024 0403 	bic.w	r4, r4, #3
 8013868:	42a0      	cmp	r0, r4
 801386a:	d007      	beq.n	801387c <sbrk_aligned+0x38>
 801386c:	1a21      	subs	r1, r4, r0
 801386e:	4628      	mov	r0, r5
 8013870:	f000 ff38 	bl	80146e4 <_sbrk_r>
 8013874:	3001      	adds	r0, #1
 8013876:	d101      	bne.n	801387c <sbrk_aligned+0x38>
 8013878:	f04f 34ff 	mov.w	r4, #4294967295
 801387c:	4620      	mov	r0, r4
 801387e:	bd70      	pop	{r4, r5, r6, pc}
 8013880:	20005090 	.word	0x20005090

08013884 <_malloc_r>:
 8013884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013888:	1ccd      	adds	r5, r1, #3
 801388a:	f025 0503 	bic.w	r5, r5, #3
 801388e:	3508      	adds	r5, #8
 8013890:	2d0c      	cmp	r5, #12
 8013892:	bf38      	it	cc
 8013894:	250c      	movcc	r5, #12
 8013896:	2d00      	cmp	r5, #0
 8013898:	4607      	mov	r7, r0
 801389a:	db01      	blt.n	80138a0 <_malloc_r+0x1c>
 801389c:	42a9      	cmp	r1, r5
 801389e:	d905      	bls.n	80138ac <_malloc_r+0x28>
 80138a0:	230c      	movs	r3, #12
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	2600      	movs	r6, #0
 80138a6:	4630      	mov	r0, r6
 80138a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ac:	4e2e      	ldr	r6, [pc, #184]	; (8013968 <_malloc_r+0xe4>)
 80138ae:	f002 f8ef 	bl	8015a90 <__malloc_lock>
 80138b2:	6833      	ldr	r3, [r6, #0]
 80138b4:	461c      	mov	r4, r3
 80138b6:	bb34      	cbnz	r4, 8013906 <_malloc_r+0x82>
 80138b8:	4629      	mov	r1, r5
 80138ba:	4638      	mov	r0, r7
 80138bc:	f7ff ffc2 	bl	8013844 <sbrk_aligned>
 80138c0:	1c43      	adds	r3, r0, #1
 80138c2:	4604      	mov	r4, r0
 80138c4:	d14d      	bne.n	8013962 <_malloc_r+0xde>
 80138c6:	6834      	ldr	r4, [r6, #0]
 80138c8:	4626      	mov	r6, r4
 80138ca:	2e00      	cmp	r6, #0
 80138cc:	d140      	bne.n	8013950 <_malloc_r+0xcc>
 80138ce:	6823      	ldr	r3, [r4, #0]
 80138d0:	4631      	mov	r1, r6
 80138d2:	4638      	mov	r0, r7
 80138d4:	eb04 0803 	add.w	r8, r4, r3
 80138d8:	f000 ff04 	bl	80146e4 <_sbrk_r>
 80138dc:	4580      	cmp	r8, r0
 80138de:	d13a      	bne.n	8013956 <_malloc_r+0xd2>
 80138e0:	6821      	ldr	r1, [r4, #0]
 80138e2:	3503      	adds	r5, #3
 80138e4:	1a6d      	subs	r5, r5, r1
 80138e6:	f025 0503 	bic.w	r5, r5, #3
 80138ea:	3508      	adds	r5, #8
 80138ec:	2d0c      	cmp	r5, #12
 80138ee:	bf38      	it	cc
 80138f0:	250c      	movcc	r5, #12
 80138f2:	4629      	mov	r1, r5
 80138f4:	4638      	mov	r0, r7
 80138f6:	f7ff ffa5 	bl	8013844 <sbrk_aligned>
 80138fa:	3001      	adds	r0, #1
 80138fc:	d02b      	beq.n	8013956 <_malloc_r+0xd2>
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	442b      	add	r3, r5
 8013902:	6023      	str	r3, [r4, #0]
 8013904:	e00e      	b.n	8013924 <_malloc_r+0xa0>
 8013906:	6822      	ldr	r2, [r4, #0]
 8013908:	1b52      	subs	r2, r2, r5
 801390a:	d41e      	bmi.n	801394a <_malloc_r+0xc6>
 801390c:	2a0b      	cmp	r2, #11
 801390e:	d916      	bls.n	801393e <_malloc_r+0xba>
 8013910:	1961      	adds	r1, r4, r5
 8013912:	42a3      	cmp	r3, r4
 8013914:	6025      	str	r5, [r4, #0]
 8013916:	bf18      	it	ne
 8013918:	6059      	strne	r1, [r3, #4]
 801391a:	6863      	ldr	r3, [r4, #4]
 801391c:	bf08      	it	eq
 801391e:	6031      	streq	r1, [r6, #0]
 8013920:	5162      	str	r2, [r4, r5]
 8013922:	604b      	str	r3, [r1, #4]
 8013924:	4638      	mov	r0, r7
 8013926:	f104 060b 	add.w	r6, r4, #11
 801392a:	f002 f8b7 	bl	8015a9c <__malloc_unlock>
 801392e:	f026 0607 	bic.w	r6, r6, #7
 8013932:	1d23      	adds	r3, r4, #4
 8013934:	1af2      	subs	r2, r6, r3
 8013936:	d0b6      	beq.n	80138a6 <_malloc_r+0x22>
 8013938:	1b9b      	subs	r3, r3, r6
 801393a:	50a3      	str	r3, [r4, r2]
 801393c:	e7b3      	b.n	80138a6 <_malloc_r+0x22>
 801393e:	6862      	ldr	r2, [r4, #4]
 8013940:	42a3      	cmp	r3, r4
 8013942:	bf0c      	ite	eq
 8013944:	6032      	streq	r2, [r6, #0]
 8013946:	605a      	strne	r2, [r3, #4]
 8013948:	e7ec      	b.n	8013924 <_malloc_r+0xa0>
 801394a:	4623      	mov	r3, r4
 801394c:	6864      	ldr	r4, [r4, #4]
 801394e:	e7b2      	b.n	80138b6 <_malloc_r+0x32>
 8013950:	4634      	mov	r4, r6
 8013952:	6876      	ldr	r6, [r6, #4]
 8013954:	e7b9      	b.n	80138ca <_malloc_r+0x46>
 8013956:	230c      	movs	r3, #12
 8013958:	603b      	str	r3, [r7, #0]
 801395a:	4638      	mov	r0, r7
 801395c:	f002 f89e 	bl	8015a9c <__malloc_unlock>
 8013960:	e7a1      	b.n	80138a6 <_malloc_r+0x22>
 8013962:	6025      	str	r5, [r4, #0]
 8013964:	e7de      	b.n	8013924 <_malloc_r+0xa0>
 8013966:	bf00      	nop
 8013968:	2000508c 	.word	0x2000508c

0801396c <__sfputc_r>:
 801396c:	6893      	ldr	r3, [r2, #8]
 801396e:	3b01      	subs	r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	b410      	push	{r4}
 8013974:	6093      	str	r3, [r2, #8]
 8013976:	da08      	bge.n	801398a <__sfputc_r+0x1e>
 8013978:	6994      	ldr	r4, [r2, #24]
 801397a:	42a3      	cmp	r3, r4
 801397c:	db01      	blt.n	8013982 <__sfputc_r+0x16>
 801397e:	290a      	cmp	r1, #10
 8013980:	d103      	bne.n	801398a <__sfputc_r+0x1e>
 8013982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013986:	f000 bfd9 	b.w	801493c <__swbuf_r>
 801398a:	6813      	ldr	r3, [r2, #0]
 801398c:	1c58      	adds	r0, r3, #1
 801398e:	6010      	str	r0, [r2, #0]
 8013990:	7019      	strb	r1, [r3, #0]
 8013992:	4608      	mov	r0, r1
 8013994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013998:	4770      	bx	lr

0801399a <__sfputs_r>:
 801399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399c:	4606      	mov	r6, r0
 801399e:	460f      	mov	r7, r1
 80139a0:	4614      	mov	r4, r2
 80139a2:	18d5      	adds	r5, r2, r3
 80139a4:	42ac      	cmp	r4, r5
 80139a6:	d101      	bne.n	80139ac <__sfputs_r+0x12>
 80139a8:	2000      	movs	r0, #0
 80139aa:	e007      	b.n	80139bc <__sfputs_r+0x22>
 80139ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139b0:	463a      	mov	r2, r7
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7ff ffda 	bl	801396c <__sfputc_r>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d1f3      	bne.n	80139a4 <__sfputs_r+0xa>
 80139bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139c0 <_vfiprintf_r>:
 80139c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c4:	460d      	mov	r5, r1
 80139c6:	b09d      	sub	sp, #116	; 0x74
 80139c8:	4614      	mov	r4, r2
 80139ca:	4698      	mov	r8, r3
 80139cc:	4606      	mov	r6, r0
 80139ce:	b118      	cbz	r0, 80139d8 <_vfiprintf_r+0x18>
 80139d0:	6983      	ldr	r3, [r0, #24]
 80139d2:	b90b      	cbnz	r3, 80139d8 <_vfiprintf_r+0x18>
 80139d4:	f7ff fe1e 	bl	8013614 <__sinit>
 80139d8:	4b89      	ldr	r3, [pc, #548]	; (8013c00 <_vfiprintf_r+0x240>)
 80139da:	429d      	cmp	r5, r3
 80139dc:	d11b      	bne.n	8013a16 <_vfiprintf_r+0x56>
 80139de:	6875      	ldr	r5, [r6, #4]
 80139e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139e2:	07d9      	lsls	r1, r3, #31
 80139e4:	d405      	bmi.n	80139f2 <_vfiprintf_r+0x32>
 80139e6:	89ab      	ldrh	r3, [r5, #12]
 80139e8:	059a      	lsls	r2, r3, #22
 80139ea:	d402      	bmi.n	80139f2 <_vfiprintf_r+0x32>
 80139ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139ee:	f7ff fee6 	bl	80137be <__retarget_lock_acquire_recursive>
 80139f2:	89ab      	ldrh	r3, [r5, #12]
 80139f4:	071b      	lsls	r3, r3, #28
 80139f6:	d501      	bpl.n	80139fc <_vfiprintf_r+0x3c>
 80139f8:	692b      	ldr	r3, [r5, #16]
 80139fa:	b9eb      	cbnz	r3, 8013a38 <_vfiprintf_r+0x78>
 80139fc:	4629      	mov	r1, r5
 80139fe:	4630      	mov	r0, r6
 8013a00:	f001 f800 	bl	8014a04 <__swsetup_r>
 8013a04:	b1c0      	cbz	r0, 8013a38 <_vfiprintf_r+0x78>
 8013a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a08:	07dc      	lsls	r4, r3, #31
 8013a0a:	d50e      	bpl.n	8013a2a <_vfiprintf_r+0x6a>
 8013a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a10:	b01d      	add	sp, #116	; 0x74
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	4b7b      	ldr	r3, [pc, #492]	; (8013c04 <_vfiprintf_r+0x244>)
 8013a18:	429d      	cmp	r5, r3
 8013a1a:	d101      	bne.n	8013a20 <_vfiprintf_r+0x60>
 8013a1c:	68b5      	ldr	r5, [r6, #8]
 8013a1e:	e7df      	b.n	80139e0 <_vfiprintf_r+0x20>
 8013a20:	4b79      	ldr	r3, [pc, #484]	; (8013c08 <_vfiprintf_r+0x248>)
 8013a22:	429d      	cmp	r5, r3
 8013a24:	bf08      	it	eq
 8013a26:	68f5      	ldreq	r5, [r6, #12]
 8013a28:	e7da      	b.n	80139e0 <_vfiprintf_r+0x20>
 8013a2a:	89ab      	ldrh	r3, [r5, #12]
 8013a2c:	0598      	lsls	r0, r3, #22
 8013a2e:	d4ed      	bmi.n	8013a0c <_vfiprintf_r+0x4c>
 8013a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a32:	f7ff fec5 	bl	80137c0 <__retarget_lock_release_recursive>
 8013a36:	e7e9      	b.n	8013a0c <_vfiprintf_r+0x4c>
 8013a38:	2300      	movs	r3, #0
 8013a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8013a3c:	2320      	movs	r3, #32
 8013a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a46:	2330      	movs	r3, #48	; 0x30
 8013a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013c0c <_vfiprintf_r+0x24c>
 8013a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a50:	f04f 0901 	mov.w	r9, #1
 8013a54:	4623      	mov	r3, r4
 8013a56:	469a      	mov	sl, r3
 8013a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a5c:	b10a      	cbz	r2, 8013a62 <_vfiprintf_r+0xa2>
 8013a5e:	2a25      	cmp	r2, #37	; 0x25
 8013a60:	d1f9      	bne.n	8013a56 <_vfiprintf_r+0x96>
 8013a62:	ebba 0b04 	subs.w	fp, sl, r4
 8013a66:	d00b      	beq.n	8013a80 <_vfiprintf_r+0xc0>
 8013a68:	465b      	mov	r3, fp
 8013a6a:	4622      	mov	r2, r4
 8013a6c:	4629      	mov	r1, r5
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f7ff ff93 	bl	801399a <__sfputs_r>
 8013a74:	3001      	adds	r0, #1
 8013a76:	f000 80aa 	beq.w	8013bce <_vfiprintf_r+0x20e>
 8013a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a7c:	445a      	add	r2, fp
 8013a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8013a80:	f89a 3000 	ldrb.w	r3, [sl]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	f000 80a2 	beq.w	8013bce <_vfiprintf_r+0x20e>
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a94:	f10a 0a01 	add.w	sl, sl, #1
 8013a98:	9304      	str	r3, [sp, #16]
 8013a9a:	9307      	str	r3, [sp, #28]
 8013a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8013aa2:	4654      	mov	r4, sl
 8013aa4:	2205      	movs	r2, #5
 8013aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aaa:	4858      	ldr	r0, [pc, #352]	; (8013c0c <_vfiprintf_r+0x24c>)
 8013aac:	f7ec fb98 	bl	80001e0 <memchr>
 8013ab0:	9a04      	ldr	r2, [sp, #16]
 8013ab2:	b9d8      	cbnz	r0, 8013aec <_vfiprintf_r+0x12c>
 8013ab4:	06d1      	lsls	r1, r2, #27
 8013ab6:	bf44      	itt	mi
 8013ab8:	2320      	movmi	r3, #32
 8013aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013abe:	0713      	lsls	r3, r2, #28
 8013ac0:	bf44      	itt	mi
 8013ac2:	232b      	movmi	r3, #43	; 0x2b
 8013ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8013acc:	2b2a      	cmp	r3, #42	; 0x2a
 8013ace:	d015      	beq.n	8013afc <_vfiprintf_r+0x13c>
 8013ad0:	9a07      	ldr	r2, [sp, #28]
 8013ad2:	4654      	mov	r4, sl
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	f04f 0c0a 	mov.w	ip, #10
 8013ada:	4621      	mov	r1, r4
 8013adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ae0:	3b30      	subs	r3, #48	; 0x30
 8013ae2:	2b09      	cmp	r3, #9
 8013ae4:	d94e      	bls.n	8013b84 <_vfiprintf_r+0x1c4>
 8013ae6:	b1b0      	cbz	r0, 8013b16 <_vfiprintf_r+0x156>
 8013ae8:	9207      	str	r2, [sp, #28]
 8013aea:	e014      	b.n	8013b16 <_vfiprintf_r+0x156>
 8013aec:	eba0 0308 	sub.w	r3, r0, r8
 8013af0:	fa09 f303 	lsl.w	r3, r9, r3
 8013af4:	4313      	orrs	r3, r2
 8013af6:	9304      	str	r3, [sp, #16]
 8013af8:	46a2      	mov	sl, r4
 8013afa:	e7d2      	b.n	8013aa2 <_vfiprintf_r+0xe2>
 8013afc:	9b03      	ldr	r3, [sp, #12]
 8013afe:	1d19      	adds	r1, r3, #4
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	9103      	str	r1, [sp, #12]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	bfbb      	ittet	lt
 8013b08:	425b      	neglt	r3, r3
 8013b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8013b0e:	9307      	strge	r3, [sp, #28]
 8013b10:	9307      	strlt	r3, [sp, #28]
 8013b12:	bfb8      	it	lt
 8013b14:	9204      	strlt	r2, [sp, #16]
 8013b16:	7823      	ldrb	r3, [r4, #0]
 8013b18:	2b2e      	cmp	r3, #46	; 0x2e
 8013b1a:	d10c      	bne.n	8013b36 <_vfiprintf_r+0x176>
 8013b1c:	7863      	ldrb	r3, [r4, #1]
 8013b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b20:	d135      	bne.n	8013b8e <_vfiprintf_r+0x1ce>
 8013b22:	9b03      	ldr	r3, [sp, #12]
 8013b24:	1d1a      	adds	r2, r3, #4
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	9203      	str	r2, [sp, #12]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	bfb8      	it	lt
 8013b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b32:	3402      	adds	r4, #2
 8013b34:	9305      	str	r3, [sp, #20]
 8013b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013c1c <_vfiprintf_r+0x25c>
 8013b3a:	7821      	ldrb	r1, [r4, #0]
 8013b3c:	2203      	movs	r2, #3
 8013b3e:	4650      	mov	r0, sl
 8013b40:	f7ec fb4e 	bl	80001e0 <memchr>
 8013b44:	b140      	cbz	r0, 8013b58 <_vfiprintf_r+0x198>
 8013b46:	2340      	movs	r3, #64	; 0x40
 8013b48:	eba0 000a 	sub.w	r0, r0, sl
 8013b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8013b50:	9b04      	ldr	r3, [sp, #16]
 8013b52:	4303      	orrs	r3, r0
 8013b54:	3401      	adds	r4, #1
 8013b56:	9304      	str	r3, [sp, #16]
 8013b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b5c:	482c      	ldr	r0, [pc, #176]	; (8013c10 <_vfiprintf_r+0x250>)
 8013b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b62:	2206      	movs	r2, #6
 8013b64:	f7ec fb3c 	bl	80001e0 <memchr>
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d03f      	beq.n	8013bec <_vfiprintf_r+0x22c>
 8013b6c:	4b29      	ldr	r3, [pc, #164]	; (8013c14 <_vfiprintf_r+0x254>)
 8013b6e:	bb1b      	cbnz	r3, 8013bb8 <_vfiprintf_r+0x1f8>
 8013b70:	9b03      	ldr	r3, [sp, #12]
 8013b72:	3307      	adds	r3, #7
 8013b74:	f023 0307 	bic.w	r3, r3, #7
 8013b78:	3308      	adds	r3, #8
 8013b7a:	9303      	str	r3, [sp, #12]
 8013b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b7e:	443b      	add	r3, r7
 8013b80:	9309      	str	r3, [sp, #36]	; 0x24
 8013b82:	e767      	b.n	8013a54 <_vfiprintf_r+0x94>
 8013b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b88:	460c      	mov	r4, r1
 8013b8a:	2001      	movs	r0, #1
 8013b8c:	e7a5      	b.n	8013ada <_vfiprintf_r+0x11a>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	3401      	adds	r4, #1
 8013b92:	9305      	str	r3, [sp, #20]
 8013b94:	4619      	mov	r1, r3
 8013b96:	f04f 0c0a 	mov.w	ip, #10
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ba0:	3a30      	subs	r2, #48	; 0x30
 8013ba2:	2a09      	cmp	r2, #9
 8013ba4:	d903      	bls.n	8013bae <_vfiprintf_r+0x1ee>
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d0c5      	beq.n	8013b36 <_vfiprintf_r+0x176>
 8013baa:	9105      	str	r1, [sp, #20]
 8013bac:	e7c3      	b.n	8013b36 <_vfiprintf_r+0x176>
 8013bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	e7f0      	b.n	8013b9a <_vfiprintf_r+0x1da>
 8013bb8:	ab03      	add	r3, sp, #12
 8013bba:	9300      	str	r3, [sp, #0]
 8013bbc:	462a      	mov	r2, r5
 8013bbe:	4b16      	ldr	r3, [pc, #88]	; (8013c18 <_vfiprintf_r+0x258>)
 8013bc0:	a904      	add	r1, sp, #16
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	f000 f8cc 	bl	8013d60 <_printf_float>
 8013bc8:	4607      	mov	r7, r0
 8013bca:	1c78      	adds	r0, r7, #1
 8013bcc:	d1d6      	bne.n	8013b7c <_vfiprintf_r+0x1bc>
 8013bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bd0:	07d9      	lsls	r1, r3, #31
 8013bd2:	d405      	bmi.n	8013be0 <_vfiprintf_r+0x220>
 8013bd4:	89ab      	ldrh	r3, [r5, #12]
 8013bd6:	059a      	lsls	r2, r3, #22
 8013bd8:	d402      	bmi.n	8013be0 <_vfiprintf_r+0x220>
 8013bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bdc:	f7ff fdf0 	bl	80137c0 <__retarget_lock_release_recursive>
 8013be0:	89ab      	ldrh	r3, [r5, #12]
 8013be2:	065b      	lsls	r3, r3, #25
 8013be4:	f53f af12 	bmi.w	8013a0c <_vfiprintf_r+0x4c>
 8013be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bea:	e711      	b.n	8013a10 <_vfiprintf_r+0x50>
 8013bec:	ab03      	add	r3, sp, #12
 8013bee:	9300      	str	r3, [sp, #0]
 8013bf0:	462a      	mov	r2, r5
 8013bf2:	4b09      	ldr	r3, [pc, #36]	; (8013c18 <_vfiprintf_r+0x258>)
 8013bf4:	a904      	add	r1, sp, #16
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f000 fb56 	bl	80142a8 <_printf_i>
 8013bfc:	e7e4      	b.n	8013bc8 <_vfiprintf_r+0x208>
 8013bfe:	bf00      	nop
 8013c00:	0801857c 	.word	0x0801857c
 8013c04:	0801859c 	.word	0x0801859c
 8013c08:	0801855c 	.word	0x0801855c
 8013c0c:	080185c0 	.word	0x080185c0
 8013c10:	080185ca 	.word	0x080185ca
 8013c14:	08013d61 	.word	0x08013d61
 8013c18:	0801399b 	.word	0x0801399b
 8013c1c:	080185c6 	.word	0x080185c6

08013c20 <__cvt>:
 8013c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c24:	ec55 4b10 	vmov	r4, r5, d0
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	460e      	mov	r6, r1
 8013c2c:	4619      	mov	r1, r3
 8013c2e:	462b      	mov	r3, r5
 8013c30:	bfbb      	ittet	lt
 8013c32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013c36:	461d      	movlt	r5, r3
 8013c38:	2300      	movge	r3, #0
 8013c3a:	232d      	movlt	r3, #45	; 0x2d
 8013c3c:	700b      	strb	r3, [r1, #0]
 8013c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013c44:	4691      	mov	r9, r2
 8013c46:	f023 0820 	bic.w	r8, r3, #32
 8013c4a:	bfbc      	itt	lt
 8013c4c:	4622      	movlt	r2, r4
 8013c4e:	4614      	movlt	r4, r2
 8013c50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c54:	d005      	beq.n	8013c62 <__cvt+0x42>
 8013c56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013c5a:	d100      	bne.n	8013c5e <__cvt+0x3e>
 8013c5c:	3601      	adds	r6, #1
 8013c5e:	2102      	movs	r1, #2
 8013c60:	e000      	b.n	8013c64 <__cvt+0x44>
 8013c62:	2103      	movs	r1, #3
 8013c64:	ab03      	add	r3, sp, #12
 8013c66:	9301      	str	r3, [sp, #4]
 8013c68:	ab02      	add	r3, sp, #8
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	ec45 4b10 	vmov	d0, r4, r5
 8013c70:	4653      	mov	r3, sl
 8013c72:	4632      	mov	r2, r6
 8013c74:	f000 ffd8 	bl	8014c28 <_dtoa_r>
 8013c78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013c7c:	4607      	mov	r7, r0
 8013c7e:	d102      	bne.n	8013c86 <__cvt+0x66>
 8013c80:	f019 0f01 	tst.w	r9, #1
 8013c84:	d022      	beq.n	8013ccc <__cvt+0xac>
 8013c86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c8a:	eb07 0906 	add.w	r9, r7, r6
 8013c8e:	d110      	bne.n	8013cb2 <__cvt+0x92>
 8013c90:	783b      	ldrb	r3, [r7, #0]
 8013c92:	2b30      	cmp	r3, #48	; 0x30
 8013c94:	d10a      	bne.n	8013cac <__cvt+0x8c>
 8013c96:	2200      	movs	r2, #0
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	f7ec ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ca2:	b918      	cbnz	r0, 8013cac <__cvt+0x8c>
 8013ca4:	f1c6 0601 	rsb	r6, r6, #1
 8013ca8:	f8ca 6000 	str.w	r6, [sl]
 8013cac:	f8da 3000 	ldr.w	r3, [sl]
 8013cb0:	4499      	add	r9, r3
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	4629      	mov	r1, r5
 8013cba:	f7ec ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8013cbe:	b108      	cbz	r0, 8013cc4 <__cvt+0xa4>
 8013cc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8013cc4:	2230      	movs	r2, #48	; 0x30
 8013cc6:	9b03      	ldr	r3, [sp, #12]
 8013cc8:	454b      	cmp	r3, r9
 8013cca:	d307      	bcc.n	8013cdc <__cvt+0xbc>
 8013ccc:	9b03      	ldr	r3, [sp, #12]
 8013cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013cd0:	1bdb      	subs	r3, r3, r7
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	6013      	str	r3, [r2, #0]
 8013cd6:	b004      	add	sp, #16
 8013cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cdc:	1c59      	adds	r1, r3, #1
 8013cde:	9103      	str	r1, [sp, #12]
 8013ce0:	701a      	strb	r2, [r3, #0]
 8013ce2:	e7f0      	b.n	8013cc6 <__cvt+0xa6>

08013ce4 <__exponent>:
 8013ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2900      	cmp	r1, #0
 8013cea:	bfb8      	it	lt
 8013cec:	4249      	neglt	r1, r1
 8013cee:	f803 2b02 	strb.w	r2, [r3], #2
 8013cf2:	bfb4      	ite	lt
 8013cf4:	222d      	movlt	r2, #45	; 0x2d
 8013cf6:	222b      	movge	r2, #43	; 0x2b
 8013cf8:	2909      	cmp	r1, #9
 8013cfa:	7042      	strb	r2, [r0, #1]
 8013cfc:	dd2a      	ble.n	8013d54 <__exponent+0x70>
 8013cfe:	f10d 0407 	add.w	r4, sp, #7
 8013d02:	46a4      	mov	ip, r4
 8013d04:	270a      	movs	r7, #10
 8013d06:	46a6      	mov	lr, r4
 8013d08:	460a      	mov	r2, r1
 8013d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8013d0e:	fb07 1516 	mls	r5, r7, r6, r1
 8013d12:	3530      	adds	r5, #48	; 0x30
 8013d14:	2a63      	cmp	r2, #99	; 0x63
 8013d16:	f104 34ff 	add.w	r4, r4, #4294967295
 8013d1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013d1e:	4631      	mov	r1, r6
 8013d20:	dcf1      	bgt.n	8013d06 <__exponent+0x22>
 8013d22:	3130      	adds	r1, #48	; 0x30
 8013d24:	f1ae 0502 	sub.w	r5, lr, #2
 8013d28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013d2c:	1c44      	adds	r4, r0, #1
 8013d2e:	4629      	mov	r1, r5
 8013d30:	4561      	cmp	r1, ip
 8013d32:	d30a      	bcc.n	8013d4a <__exponent+0x66>
 8013d34:	f10d 0209 	add.w	r2, sp, #9
 8013d38:	eba2 020e 	sub.w	r2, r2, lr
 8013d3c:	4565      	cmp	r5, ip
 8013d3e:	bf88      	it	hi
 8013d40:	2200      	movhi	r2, #0
 8013d42:	4413      	add	r3, r2
 8013d44:	1a18      	subs	r0, r3, r0
 8013d46:	b003      	add	sp, #12
 8013d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013d52:	e7ed      	b.n	8013d30 <__exponent+0x4c>
 8013d54:	2330      	movs	r3, #48	; 0x30
 8013d56:	3130      	adds	r1, #48	; 0x30
 8013d58:	7083      	strb	r3, [r0, #2]
 8013d5a:	70c1      	strb	r1, [r0, #3]
 8013d5c:	1d03      	adds	r3, r0, #4
 8013d5e:	e7f1      	b.n	8013d44 <__exponent+0x60>

08013d60 <_printf_float>:
 8013d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	ed2d 8b02 	vpush	{d8}
 8013d68:	b08d      	sub	sp, #52	; 0x34
 8013d6a:	460c      	mov	r4, r1
 8013d6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013d70:	4616      	mov	r6, r2
 8013d72:	461f      	mov	r7, r3
 8013d74:	4605      	mov	r5, r0
 8013d76:	f001 fe07 	bl	8015988 <_localeconv_r>
 8013d7a:	f8d0 a000 	ldr.w	sl, [r0]
 8013d7e:	4650      	mov	r0, sl
 8013d80:	f7ec fa26 	bl	80001d0 <strlen>
 8013d84:	2300      	movs	r3, #0
 8013d86:	930a      	str	r3, [sp, #40]	; 0x28
 8013d88:	6823      	ldr	r3, [r4, #0]
 8013d8a:	9305      	str	r3, [sp, #20]
 8013d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8013d90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013d94:	3307      	adds	r3, #7
 8013d96:	f023 0307 	bic.w	r3, r3, #7
 8013d9a:	f103 0208 	add.w	r2, r3, #8
 8013d9e:	f8c8 2000 	str.w	r2, [r8]
 8013da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013daa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013dae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013db2:	9307      	str	r3, [sp, #28]
 8013db4:	f8cd 8018 	str.w	r8, [sp, #24]
 8013db8:	ee08 0a10 	vmov	s16, r0
 8013dbc:	4b9f      	ldr	r3, [pc, #636]	; (801403c <_printf_float+0x2dc>)
 8013dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc6:	f7ec feb1 	bl	8000b2c <__aeabi_dcmpun>
 8013dca:	bb88      	cbnz	r0, 8013e30 <_printf_float+0xd0>
 8013dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dd0:	4b9a      	ldr	r3, [pc, #616]	; (801403c <_printf_float+0x2dc>)
 8013dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd6:	f7ec fe8b 	bl	8000af0 <__aeabi_dcmple>
 8013dda:	bb48      	cbnz	r0, 8013e30 <_printf_float+0xd0>
 8013ddc:	2200      	movs	r2, #0
 8013dde:	2300      	movs	r3, #0
 8013de0:	4640      	mov	r0, r8
 8013de2:	4649      	mov	r1, r9
 8013de4:	f7ec fe7a 	bl	8000adc <__aeabi_dcmplt>
 8013de8:	b110      	cbz	r0, 8013df0 <_printf_float+0x90>
 8013dea:	232d      	movs	r3, #45	; 0x2d
 8013dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013df0:	4b93      	ldr	r3, [pc, #588]	; (8014040 <_printf_float+0x2e0>)
 8013df2:	4894      	ldr	r0, [pc, #592]	; (8014044 <_printf_float+0x2e4>)
 8013df4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013df8:	bf94      	ite	ls
 8013dfa:	4698      	movls	r8, r3
 8013dfc:	4680      	movhi	r8, r0
 8013dfe:	2303      	movs	r3, #3
 8013e00:	6123      	str	r3, [r4, #16]
 8013e02:	9b05      	ldr	r3, [sp, #20]
 8013e04:	f023 0204 	bic.w	r2, r3, #4
 8013e08:	6022      	str	r2, [r4, #0]
 8013e0a:	f04f 0900 	mov.w	r9, #0
 8013e0e:	9700      	str	r7, [sp, #0]
 8013e10:	4633      	mov	r3, r6
 8013e12:	aa0b      	add	r2, sp, #44	; 0x2c
 8013e14:	4621      	mov	r1, r4
 8013e16:	4628      	mov	r0, r5
 8013e18:	f000 f9d8 	bl	80141cc <_printf_common>
 8013e1c:	3001      	adds	r0, #1
 8013e1e:	f040 8090 	bne.w	8013f42 <_printf_float+0x1e2>
 8013e22:	f04f 30ff 	mov.w	r0, #4294967295
 8013e26:	b00d      	add	sp, #52	; 0x34
 8013e28:	ecbd 8b02 	vpop	{d8}
 8013e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e30:	4642      	mov	r2, r8
 8013e32:	464b      	mov	r3, r9
 8013e34:	4640      	mov	r0, r8
 8013e36:	4649      	mov	r1, r9
 8013e38:	f7ec fe78 	bl	8000b2c <__aeabi_dcmpun>
 8013e3c:	b140      	cbz	r0, 8013e50 <_printf_float+0xf0>
 8013e3e:	464b      	mov	r3, r9
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	bfbc      	itt	lt
 8013e44:	232d      	movlt	r3, #45	; 0x2d
 8013e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013e4a:	487f      	ldr	r0, [pc, #508]	; (8014048 <_printf_float+0x2e8>)
 8013e4c:	4b7f      	ldr	r3, [pc, #508]	; (801404c <_printf_float+0x2ec>)
 8013e4e:	e7d1      	b.n	8013df4 <_printf_float+0x94>
 8013e50:	6863      	ldr	r3, [r4, #4]
 8013e52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013e56:	9206      	str	r2, [sp, #24]
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	d13f      	bne.n	8013edc <_printf_float+0x17c>
 8013e5c:	2306      	movs	r3, #6
 8013e5e:	6063      	str	r3, [r4, #4]
 8013e60:	9b05      	ldr	r3, [sp, #20]
 8013e62:	6861      	ldr	r1, [r4, #4]
 8013e64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013e68:	2300      	movs	r3, #0
 8013e6a:	9303      	str	r3, [sp, #12]
 8013e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8013e6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013e72:	ab09      	add	r3, sp, #36	; 0x24
 8013e74:	ec49 8b10 	vmov	d0, r8, r9
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	6022      	str	r2, [r4, #0]
 8013e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013e80:	4628      	mov	r0, r5
 8013e82:	f7ff fecd 	bl	8013c20 <__cvt>
 8013e86:	9b06      	ldr	r3, [sp, #24]
 8013e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e8a:	2b47      	cmp	r3, #71	; 0x47
 8013e8c:	4680      	mov	r8, r0
 8013e8e:	d108      	bne.n	8013ea2 <_printf_float+0x142>
 8013e90:	1cc8      	adds	r0, r1, #3
 8013e92:	db02      	blt.n	8013e9a <_printf_float+0x13a>
 8013e94:	6863      	ldr	r3, [r4, #4]
 8013e96:	4299      	cmp	r1, r3
 8013e98:	dd41      	ble.n	8013f1e <_printf_float+0x1be>
 8013e9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8013e9e:	fa5f fb8b 	uxtb.w	fp, fp
 8013ea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ea6:	d820      	bhi.n	8013eea <_printf_float+0x18a>
 8013ea8:	3901      	subs	r1, #1
 8013eaa:	465a      	mov	r2, fp
 8013eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8013eb2:	f7ff ff17 	bl	8013ce4 <__exponent>
 8013eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eb8:	1813      	adds	r3, r2, r0
 8013eba:	2a01      	cmp	r2, #1
 8013ebc:	4681      	mov	r9, r0
 8013ebe:	6123      	str	r3, [r4, #16]
 8013ec0:	dc02      	bgt.n	8013ec8 <_printf_float+0x168>
 8013ec2:	6822      	ldr	r2, [r4, #0]
 8013ec4:	07d2      	lsls	r2, r2, #31
 8013ec6:	d501      	bpl.n	8013ecc <_printf_float+0x16c>
 8013ec8:	3301      	adds	r3, #1
 8013eca:	6123      	str	r3, [r4, #16]
 8013ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d09c      	beq.n	8013e0e <_printf_float+0xae>
 8013ed4:	232d      	movs	r3, #45	; 0x2d
 8013ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eda:	e798      	b.n	8013e0e <_printf_float+0xae>
 8013edc:	9a06      	ldr	r2, [sp, #24]
 8013ede:	2a47      	cmp	r2, #71	; 0x47
 8013ee0:	d1be      	bne.n	8013e60 <_printf_float+0x100>
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1bc      	bne.n	8013e60 <_printf_float+0x100>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	e7b9      	b.n	8013e5e <_printf_float+0xfe>
 8013eea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013eee:	d118      	bne.n	8013f22 <_printf_float+0x1c2>
 8013ef0:	2900      	cmp	r1, #0
 8013ef2:	6863      	ldr	r3, [r4, #4]
 8013ef4:	dd0b      	ble.n	8013f0e <_printf_float+0x1ae>
 8013ef6:	6121      	str	r1, [r4, #16]
 8013ef8:	b913      	cbnz	r3, 8013f00 <_printf_float+0x1a0>
 8013efa:	6822      	ldr	r2, [r4, #0]
 8013efc:	07d0      	lsls	r0, r2, #31
 8013efe:	d502      	bpl.n	8013f06 <_printf_float+0x1a6>
 8013f00:	3301      	adds	r3, #1
 8013f02:	440b      	add	r3, r1
 8013f04:	6123      	str	r3, [r4, #16]
 8013f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8013f08:	f04f 0900 	mov.w	r9, #0
 8013f0c:	e7de      	b.n	8013ecc <_printf_float+0x16c>
 8013f0e:	b913      	cbnz	r3, 8013f16 <_printf_float+0x1b6>
 8013f10:	6822      	ldr	r2, [r4, #0]
 8013f12:	07d2      	lsls	r2, r2, #31
 8013f14:	d501      	bpl.n	8013f1a <_printf_float+0x1ba>
 8013f16:	3302      	adds	r3, #2
 8013f18:	e7f4      	b.n	8013f04 <_printf_float+0x1a4>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e7f2      	b.n	8013f04 <_printf_float+0x1a4>
 8013f1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f24:	4299      	cmp	r1, r3
 8013f26:	db05      	blt.n	8013f34 <_printf_float+0x1d4>
 8013f28:	6823      	ldr	r3, [r4, #0]
 8013f2a:	6121      	str	r1, [r4, #16]
 8013f2c:	07d8      	lsls	r0, r3, #31
 8013f2e:	d5ea      	bpl.n	8013f06 <_printf_float+0x1a6>
 8013f30:	1c4b      	adds	r3, r1, #1
 8013f32:	e7e7      	b.n	8013f04 <_printf_float+0x1a4>
 8013f34:	2900      	cmp	r1, #0
 8013f36:	bfd4      	ite	le
 8013f38:	f1c1 0202 	rsble	r2, r1, #2
 8013f3c:	2201      	movgt	r2, #1
 8013f3e:	4413      	add	r3, r2
 8013f40:	e7e0      	b.n	8013f04 <_printf_float+0x1a4>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	055a      	lsls	r2, r3, #21
 8013f46:	d407      	bmi.n	8013f58 <_printf_float+0x1f8>
 8013f48:	6923      	ldr	r3, [r4, #16]
 8013f4a:	4642      	mov	r2, r8
 8013f4c:	4631      	mov	r1, r6
 8013f4e:	4628      	mov	r0, r5
 8013f50:	47b8      	blx	r7
 8013f52:	3001      	adds	r0, #1
 8013f54:	d12c      	bne.n	8013fb0 <_printf_float+0x250>
 8013f56:	e764      	b.n	8013e22 <_printf_float+0xc2>
 8013f58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013f5c:	f240 80e0 	bls.w	8014120 <_printf_float+0x3c0>
 8013f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f64:	2200      	movs	r2, #0
 8013f66:	2300      	movs	r3, #0
 8013f68:	f7ec fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d034      	beq.n	8013fda <_printf_float+0x27a>
 8013f70:	4a37      	ldr	r2, [pc, #220]	; (8014050 <_printf_float+0x2f0>)
 8013f72:	2301      	movs	r3, #1
 8013f74:	4631      	mov	r1, r6
 8013f76:	4628      	mov	r0, r5
 8013f78:	47b8      	blx	r7
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	f43f af51 	beq.w	8013e22 <_printf_float+0xc2>
 8013f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f84:	429a      	cmp	r2, r3
 8013f86:	db02      	blt.n	8013f8e <_printf_float+0x22e>
 8013f88:	6823      	ldr	r3, [r4, #0]
 8013f8a:	07d8      	lsls	r0, r3, #31
 8013f8c:	d510      	bpl.n	8013fb0 <_printf_float+0x250>
 8013f8e:	ee18 3a10 	vmov	r3, s16
 8013f92:	4652      	mov	r2, sl
 8013f94:	4631      	mov	r1, r6
 8013f96:	4628      	mov	r0, r5
 8013f98:	47b8      	blx	r7
 8013f9a:	3001      	adds	r0, #1
 8013f9c:	f43f af41 	beq.w	8013e22 <_printf_float+0xc2>
 8013fa0:	f04f 0800 	mov.w	r8, #0
 8013fa4:	f104 091a 	add.w	r9, r4, #26
 8013fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013faa:	3b01      	subs	r3, #1
 8013fac:	4543      	cmp	r3, r8
 8013fae:	dc09      	bgt.n	8013fc4 <_printf_float+0x264>
 8013fb0:	6823      	ldr	r3, [r4, #0]
 8013fb2:	079b      	lsls	r3, r3, #30
 8013fb4:	f100 8105 	bmi.w	80141c2 <_printf_float+0x462>
 8013fb8:	68e0      	ldr	r0, [r4, #12]
 8013fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fbc:	4298      	cmp	r0, r3
 8013fbe:	bfb8      	it	lt
 8013fc0:	4618      	movlt	r0, r3
 8013fc2:	e730      	b.n	8013e26 <_printf_float+0xc6>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	464a      	mov	r2, r9
 8013fc8:	4631      	mov	r1, r6
 8013fca:	4628      	mov	r0, r5
 8013fcc:	47b8      	blx	r7
 8013fce:	3001      	adds	r0, #1
 8013fd0:	f43f af27 	beq.w	8013e22 <_printf_float+0xc2>
 8013fd4:	f108 0801 	add.w	r8, r8, #1
 8013fd8:	e7e6      	b.n	8013fa8 <_printf_float+0x248>
 8013fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	dc39      	bgt.n	8014054 <_printf_float+0x2f4>
 8013fe0:	4a1b      	ldr	r2, [pc, #108]	; (8014050 <_printf_float+0x2f0>)
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	4631      	mov	r1, r6
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	47b8      	blx	r7
 8013fea:	3001      	adds	r0, #1
 8013fec:	f43f af19 	beq.w	8013e22 <_printf_float+0xc2>
 8013ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	d102      	bne.n	8013ffe <_printf_float+0x29e>
 8013ff8:	6823      	ldr	r3, [r4, #0]
 8013ffa:	07d9      	lsls	r1, r3, #31
 8013ffc:	d5d8      	bpl.n	8013fb0 <_printf_float+0x250>
 8013ffe:	ee18 3a10 	vmov	r3, s16
 8014002:	4652      	mov	r2, sl
 8014004:	4631      	mov	r1, r6
 8014006:	4628      	mov	r0, r5
 8014008:	47b8      	blx	r7
 801400a:	3001      	adds	r0, #1
 801400c:	f43f af09 	beq.w	8013e22 <_printf_float+0xc2>
 8014010:	f04f 0900 	mov.w	r9, #0
 8014014:	f104 0a1a 	add.w	sl, r4, #26
 8014018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801401a:	425b      	negs	r3, r3
 801401c:	454b      	cmp	r3, r9
 801401e:	dc01      	bgt.n	8014024 <_printf_float+0x2c4>
 8014020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014022:	e792      	b.n	8013f4a <_printf_float+0x1ea>
 8014024:	2301      	movs	r3, #1
 8014026:	4652      	mov	r2, sl
 8014028:	4631      	mov	r1, r6
 801402a:	4628      	mov	r0, r5
 801402c:	47b8      	blx	r7
 801402e:	3001      	adds	r0, #1
 8014030:	f43f aef7 	beq.w	8013e22 <_printf_float+0xc2>
 8014034:	f109 0901 	add.w	r9, r9, #1
 8014038:	e7ee      	b.n	8014018 <_printf_float+0x2b8>
 801403a:	bf00      	nop
 801403c:	7fefffff 	.word	0x7fefffff
 8014040:	080185d1 	.word	0x080185d1
 8014044:	080185d5 	.word	0x080185d5
 8014048:	080185dd 	.word	0x080185dd
 801404c:	080185d9 	.word	0x080185d9
 8014050:	080185e1 	.word	0x080185e1
 8014054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014058:	429a      	cmp	r2, r3
 801405a:	bfa8      	it	ge
 801405c:	461a      	movge	r2, r3
 801405e:	2a00      	cmp	r2, #0
 8014060:	4691      	mov	r9, r2
 8014062:	dc37      	bgt.n	80140d4 <_printf_float+0x374>
 8014064:	f04f 0b00 	mov.w	fp, #0
 8014068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801406c:	f104 021a 	add.w	r2, r4, #26
 8014070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014072:	9305      	str	r3, [sp, #20]
 8014074:	eba3 0309 	sub.w	r3, r3, r9
 8014078:	455b      	cmp	r3, fp
 801407a:	dc33      	bgt.n	80140e4 <_printf_float+0x384>
 801407c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014080:	429a      	cmp	r2, r3
 8014082:	db3b      	blt.n	80140fc <_printf_float+0x39c>
 8014084:	6823      	ldr	r3, [r4, #0]
 8014086:	07da      	lsls	r2, r3, #31
 8014088:	d438      	bmi.n	80140fc <_printf_float+0x39c>
 801408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801408c:	9a05      	ldr	r2, [sp, #20]
 801408e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014090:	1a9a      	subs	r2, r3, r2
 8014092:	eba3 0901 	sub.w	r9, r3, r1
 8014096:	4591      	cmp	r9, r2
 8014098:	bfa8      	it	ge
 801409a:	4691      	movge	r9, r2
 801409c:	f1b9 0f00 	cmp.w	r9, #0
 80140a0:	dc35      	bgt.n	801410e <_printf_float+0x3ae>
 80140a2:	f04f 0800 	mov.w	r8, #0
 80140a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80140aa:	f104 0a1a 	add.w	sl, r4, #26
 80140ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140b2:	1a9b      	subs	r3, r3, r2
 80140b4:	eba3 0309 	sub.w	r3, r3, r9
 80140b8:	4543      	cmp	r3, r8
 80140ba:	f77f af79 	ble.w	8013fb0 <_printf_float+0x250>
 80140be:	2301      	movs	r3, #1
 80140c0:	4652      	mov	r2, sl
 80140c2:	4631      	mov	r1, r6
 80140c4:	4628      	mov	r0, r5
 80140c6:	47b8      	blx	r7
 80140c8:	3001      	adds	r0, #1
 80140ca:	f43f aeaa 	beq.w	8013e22 <_printf_float+0xc2>
 80140ce:	f108 0801 	add.w	r8, r8, #1
 80140d2:	e7ec      	b.n	80140ae <_printf_float+0x34e>
 80140d4:	4613      	mov	r3, r2
 80140d6:	4631      	mov	r1, r6
 80140d8:	4642      	mov	r2, r8
 80140da:	4628      	mov	r0, r5
 80140dc:	47b8      	blx	r7
 80140de:	3001      	adds	r0, #1
 80140e0:	d1c0      	bne.n	8014064 <_printf_float+0x304>
 80140e2:	e69e      	b.n	8013e22 <_printf_float+0xc2>
 80140e4:	2301      	movs	r3, #1
 80140e6:	4631      	mov	r1, r6
 80140e8:	4628      	mov	r0, r5
 80140ea:	9205      	str	r2, [sp, #20]
 80140ec:	47b8      	blx	r7
 80140ee:	3001      	adds	r0, #1
 80140f0:	f43f ae97 	beq.w	8013e22 <_printf_float+0xc2>
 80140f4:	9a05      	ldr	r2, [sp, #20]
 80140f6:	f10b 0b01 	add.w	fp, fp, #1
 80140fa:	e7b9      	b.n	8014070 <_printf_float+0x310>
 80140fc:	ee18 3a10 	vmov	r3, s16
 8014100:	4652      	mov	r2, sl
 8014102:	4631      	mov	r1, r6
 8014104:	4628      	mov	r0, r5
 8014106:	47b8      	blx	r7
 8014108:	3001      	adds	r0, #1
 801410a:	d1be      	bne.n	801408a <_printf_float+0x32a>
 801410c:	e689      	b.n	8013e22 <_printf_float+0xc2>
 801410e:	9a05      	ldr	r2, [sp, #20]
 8014110:	464b      	mov	r3, r9
 8014112:	4442      	add	r2, r8
 8014114:	4631      	mov	r1, r6
 8014116:	4628      	mov	r0, r5
 8014118:	47b8      	blx	r7
 801411a:	3001      	adds	r0, #1
 801411c:	d1c1      	bne.n	80140a2 <_printf_float+0x342>
 801411e:	e680      	b.n	8013e22 <_printf_float+0xc2>
 8014120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014122:	2a01      	cmp	r2, #1
 8014124:	dc01      	bgt.n	801412a <_printf_float+0x3ca>
 8014126:	07db      	lsls	r3, r3, #31
 8014128:	d538      	bpl.n	801419c <_printf_float+0x43c>
 801412a:	2301      	movs	r3, #1
 801412c:	4642      	mov	r2, r8
 801412e:	4631      	mov	r1, r6
 8014130:	4628      	mov	r0, r5
 8014132:	47b8      	blx	r7
 8014134:	3001      	adds	r0, #1
 8014136:	f43f ae74 	beq.w	8013e22 <_printf_float+0xc2>
 801413a:	ee18 3a10 	vmov	r3, s16
 801413e:	4652      	mov	r2, sl
 8014140:	4631      	mov	r1, r6
 8014142:	4628      	mov	r0, r5
 8014144:	47b8      	blx	r7
 8014146:	3001      	adds	r0, #1
 8014148:	f43f ae6b 	beq.w	8013e22 <_printf_float+0xc2>
 801414c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014150:	2200      	movs	r2, #0
 8014152:	2300      	movs	r3, #0
 8014154:	f7ec fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8014158:	b9d8      	cbnz	r0, 8014192 <_printf_float+0x432>
 801415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801415c:	f108 0201 	add.w	r2, r8, #1
 8014160:	3b01      	subs	r3, #1
 8014162:	4631      	mov	r1, r6
 8014164:	4628      	mov	r0, r5
 8014166:	47b8      	blx	r7
 8014168:	3001      	adds	r0, #1
 801416a:	d10e      	bne.n	801418a <_printf_float+0x42a>
 801416c:	e659      	b.n	8013e22 <_printf_float+0xc2>
 801416e:	2301      	movs	r3, #1
 8014170:	4652      	mov	r2, sl
 8014172:	4631      	mov	r1, r6
 8014174:	4628      	mov	r0, r5
 8014176:	47b8      	blx	r7
 8014178:	3001      	adds	r0, #1
 801417a:	f43f ae52 	beq.w	8013e22 <_printf_float+0xc2>
 801417e:	f108 0801 	add.w	r8, r8, #1
 8014182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014184:	3b01      	subs	r3, #1
 8014186:	4543      	cmp	r3, r8
 8014188:	dcf1      	bgt.n	801416e <_printf_float+0x40e>
 801418a:	464b      	mov	r3, r9
 801418c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014190:	e6dc      	b.n	8013f4c <_printf_float+0x1ec>
 8014192:	f04f 0800 	mov.w	r8, #0
 8014196:	f104 0a1a 	add.w	sl, r4, #26
 801419a:	e7f2      	b.n	8014182 <_printf_float+0x422>
 801419c:	2301      	movs	r3, #1
 801419e:	4642      	mov	r2, r8
 80141a0:	e7df      	b.n	8014162 <_printf_float+0x402>
 80141a2:	2301      	movs	r3, #1
 80141a4:	464a      	mov	r2, r9
 80141a6:	4631      	mov	r1, r6
 80141a8:	4628      	mov	r0, r5
 80141aa:	47b8      	blx	r7
 80141ac:	3001      	adds	r0, #1
 80141ae:	f43f ae38 	beq.w	8013e22 <_printf_float+0xc2>
 80141b2:	f108 0801 	add.w	r8, r8, #1
 80141b6:	68e3      	ldr	r3, [r4, #12]
 80141b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141ba:	1a5b      	subs	r3, r3, r1
 80141bc:	4543      	cmp	r3, r8
 80141be:	dcf0      	bgt.n	80141a2 <_printf_float+0x442>
 80141c0:	e6fa      	b.n	8013fb8 <_printf_float+0x258>
 80141c2:	f04f 0800 	mov.w	r8, #0
 80141c6:	f104 0919 	add.w	r9, r4, #25
 80141ca:	e7f4      	b.n	80141b6 <_printf_float+0x456>

080141cc <_printf_common>:
 80141cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d0:	4616      	mov	r6, r2
 80141d2:	4699      	mov	r9, r3
 80141d4:	688a      	ldr	r2, [r1, #8]
 80141d6:	690b      	ldr	r3, [r1, #16]
 80141d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80141dc:	4293      	cmp	r3, r2
 80141de:	bfb8      	it	lt
 80141e0:	4613      	movlt	r3, r2
 80141e2:	6033      	str	r3, [r6, #0]
 80141e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80141e8:	4607      	mov	r7, r0
 80141ea:	460c      	mov	r4, r1
 80141ec:	b10a      	cbz	r2, 80141f2 <_printf_common+0x26>
 80141ee:	3301      	adds	r3, #1
 80141f0:	6033      	str	r3, [r6, #0]
 80141f2:	6823      	ldr	r3, [r4, #0]
 80141f4:	0699      	lsls	r1, r3, #26
 80141f6:	bf42      	ittt	mi
 80141f8:	6833      	ldrmi	r3, [r6, #0]
 80141fa:	3302      	addmi	r3, #2
 80141fc:	6033      	strmi	r3, [r6, #0]
 80141fe:	6825      	ldr	r5, [r4, #0]
 8014200:	f015 0506 	ands.w	r5, r5, #6
 8014204:	d106      	bne.n	8014214 <_printf_common+0x48>
 8014206:	f104 0a19 	add.w	sl, r4, #25
 801420a:	68e3      	ldr	r3, [r4, #12]
 801420c:	6832      	ldr	r2, [r6, #0]
 801420e:	1a9b      	subs	r3, r3, r2
 8014210:	42ab      	cmp	r3, r5
 8014212:	dc26      	bgt.n	8014262 <_printf_common+0x96>
 8014214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014218:	1e13      	subs	r3, r2, #0
 801421a:	6822      	ldr	r2, [r4, #0]
 801421c:	bf18      	it	ne
 801421e:	2301      	movne	r3, #1
 8014220:	0692      	lsls	r2, r2, #26
 8014222:	d42b      	bmi.n	801427c <_printf_common+0xb0>
 8014224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014228:	4649      	mov	r1, r9
 801422a:	4638      	mov	r0, r7
 801422c:	47c0      	blx	r8
 801422e:	3001      	adds	r0, #1
 8014230:	d01e      	beq.n	8014270 <_printf_common+0xa4>
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	68e5      	ldr	r5, [r4, #12]
 8014236:	6832      	ldr	r2, [r6, #0]
 8014238:	f003 0306 	and.w	r3, r3, #6
 801423c:	2b04      	cmp	r3, #4
 801423e:	bf08      	it	eq
 8014240:	1aad      	subeq	r5, r5, r2
 8014242:	68a3      	ldr	r3, [r4, #8]
 8014244:	6922      	ldr	r2, [r4, #16]
 8014246:	bf0c      	ite	eq
 8014248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801424c:	2500      	movne	r5, #0
 801424e:	4293      	cmp	r3, r2
 8014250:	bfc4      	itt	gt
 8014252:	1a9b      	subgt	r3, r3, r2
 8014254:	18ed      	addgt	r5, r5, r3
 8014256:	2600      	movs	r6, #0
 8014258:	341a      	adds	r4, #26
 801425a:	42b5      	cmp	r5, r6
 801425c:	d11a      	bne.n	8014294 <_printf_common+0xc8>
 801425e:	2000      	movs	r0, #0
 8014260:	e008      	b.n	8014274 <_printf_common+0xa8>
 8014262:	2301      	movs	r3, #1
 8014264:	4652      	mov	r2, sl
 8014266:	4649      	mov	r1, r9
 8014268:	4638      	mov	r0, r7
 801426a:	47c0      	blx	r8
 801426c:	3001      	adds	r0, #1
 801426e:	d103      	bne.n	8014278 <_printf_common+0xac>
 8014270:	f04f 30ff 	mov.w	r0, #4294967295
 8014274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014278:	3501      	adds	r5, #1
 801427a:	e7c6      	b.n	801420a <_printf_common+0x3e>
 801427c:	18e1      	adds	r1, r4, r3
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	2030      	movs	r0, #48	; 0x30
 8014282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014286:	4422      	add	r2, r4
 8014288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801428c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014290:	3302      	adds	r3, #2
 8014292:	e7c7      	b.n	8014224 <_printf_common+0x58>
 8014294:	2301      	movs	r3, #1
 8014296:	4622      	mov	r2, r4
 8014298:	4649      	mov	r1, r9
 801429a:	4638      	mov	r0, r7
 801429c:	47c0      	blx	r8
 801429e:	3001      	adds	r0, #1
 80142a0:	d0e6      	beq.n	8014270 <_printf_common+0xa4>
 80142a2:	3601      	adds	r6, #1
 80142a4:	e7d9      	b.n	801425a <_printf_common+0x8e>
	...

080142a8 <_printf_i>:
 80142a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142ac:	7e0f      	ldrb	r7, [r1, #24]
 80142ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80142b0:	2f78      	cmp	r7, #120	; 0x78
 80142b2:	4691      	mov	r9, r2
 80142b4:	4680      	mov	r8, r0
 80142b6:	460c      	mov	r4, r1
 80142b8:	469a      	mov	sl, r3
 80142ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80142be:	d807      	bhi.n	80142d0 <_printf_i+0x28>
 80142c0:	2f62      	cmp	r7, #98	; 0x62
 80142c2:	d80a      	bhi.n	80142da <_printf_i+0x32>
 80142c4:	2f00      	cmp	r7, #0
 80142c6:	f000 80d8 	beq.w	801447a <_printf_i+0x1d2>
 80142ca:	2f58      	cmp	r7, #88	; 0x58
 80142cc:	f000 80a3 	beq.w	8014416 <_printf_i+0x16e>
 80142d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80142d8:	e03a      	b.n	8014350 <_printf_i+0xa8>
 80142da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80142de:	2b15      	cmp	r3, #21
 80142e0:	d8f6      	bhi.n	80142d0 <_printf_i+0x28>
 80142e2:	a101      	add	r1, pc, #4	; (adr r1, 80142e8 <_printf_i+0x40>)
 80142e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80142e8:	08014341 	.word	0x08014341
 80142ec:	08014355 	.word	0x08014355
 80142f0:	080142d1 	.word	0x080142d1
 80142f4:	080142d1 	.word	0x080142d1
 80142f8:	080142d1 	.word	0x080142d1
 80142fc:	080142d1 	.word	0x080142d1
 8014300:	08014355 	.word	0x08014355
 8014304:	080142d1 	.word	0x080142d1
 8014308:	080142d1 	.word	0x080142d1
 801430c:	080142d1 	.word	0x080142d1
 8014310:	080142d1 	.word	0x080142d1
 8014314:	08014461 	.word	0x08014461
 8014318:	08014385 	.word	0x08014385
 801431c:	08014443 	.word	0x08014443
 8014320:	080142d1 	.word	0x080142d1
 8014324:	080142d1 	.word	0x080142d1
 8014328:	08014483 	.word	0x08014483
 801432c:	080142d1 	.word	0x080142d1
 8014330:	08014385 	.word	0x08014385
 8014334:	080142d1 	.word	0x080142d1
 8014338:	080142d1 	.word	0x080142d1
 801433c:	0801444b 	.word	0x0801444b
 8014340:	682b      	ldr	r3, [r5, #0]
 8014342:	1d1a      	adds	r2, r3, #4
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	602a      	str	r2, [r5, #0]
 8014348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801434c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014350:	2301      	movs	r3, #1
 8014352:	e0a3      	b.n	801449c <_printf_i+0x1f4>
 8014354:	6820      	ldr	r0, [r4, #0]
 8014356:	6829      	ldr	r1, [r5, #0]
 8014358:	0606      	lsls	r6, r0, #24
 801435a:	f101 0304 	add.w	r3, r1, #4
 801435e:	d50a      	bpl.n	8014376 <_printf_i+0xce>
 8014360:	680e      	ldr	r6, [r1, #0]
 8014362:	602b      	str	r3, [r5, #0]
 8014364:	2e00      	cmp	r6, #0
 8014366:	da03      	bge.n	8014370 <_printf_i+0xc8>
 8014368:	232d      	movs	r3, #45	; 0x2d
 801436a:	4276      	negs	r6, r6
 801436c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014370:	485e      	ldr	r0, [pc, #376]	; (80144ec <_printf_i+0x244>)
 8014372:	230a      	movs	r3, #10
 8014374:	e019      	b.n	80143aa <_printf_i+0x102>
 8014376:	680e      	ldr	r6, [r1, #0]
 8014378:	602b      	str	r3, [r5, #0]
 801437a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801437e:	bf18      	it	ne
 8014380:	b236      	sxthne	r6, r6
 8014382:	e7ef      	b.n	8014364 <_printf_i+0xbc>
 8014384:	682b      	ldr	r3, [r5, #0]
 8014386:	6820      	ldr	r0, [r4, #0]
 8014388:	1d19      	adds	r1, r3, #4
 801438a:	6029      	str	r1, [r5, #0]
 801438c:	0601      	lsls	r1, r0, #24
 801438e:	d501      	bpl.n	8014394 <_printf_i+0xec>
 8014390:	681e      	ldr	r6, [r3, #0]
 8014392:	e002      	b.n	801439a <_printf_i+0xf2>
 8014394:	0646      	lsls	r6, r0, #25
 8014396:	d5fb      	bpl.n	8014390 <_printf_i+0xe8>
 8014398:	881e      	ldrh	r6, [r3, #0]
 801439a:	4854      	ldr	r0, [pc, #336]	; (80144ec <_printf_i+0x244>)
 801439c:	2f6f      	cmp	r7, #111	; 0x6f
 801439e:	bf0c      	ite	eq
 80143a0:	2308      	moveq	r3, #8
 80143a2:	230a      	movne	r3, #10
 80143a4:	2100      	movs	r1, #0
 80143a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80143aa:	6865      	ldr	r5, [r4, #4]
 80143ac:	60a5      	str	r5, [r4, #8]
 80143ae:	2d00      	cmp	r5, #0
 80143b0:	bfa2      	ittt	ge
 80143b2:	6821      	ldrge	r1, [r4, #0]
 80143b4:	f021 0104 	bicge.w	r1, r1, #4
 80143b8:	6021      	strge	r1, [r4, #0]
 80143ba:	b90e      	cbnz	r6, 80143c0 <_printf_i+0x118>
 80143bc:	2d00      	cmp	r5, #0
 80143be:	d04d      	beq.n	801445c <_printf_i+0x1b4>
 80143c0:	4615      	mov	r5, r2
 80143c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80143c6:	fb03 6711 	mls	r7, r3, r1, r6
 80143ca:	5dc7      	ldrb	r7, [r0, r7]
 80143cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80143d0:	4637      	mov	r7, r6
 80143d2:	42bb      	cmp	r3, r7
 80143d4:	460e      	mov	r6, r1
 80143d6:	d9f4      	bls.n	80143c2 <_printf_i+0x11a>
 80143d8:	2b08      	cmp	r3, #8
 80143da:	d10b      	bne.n	80143f4 <_printf_i+0x14c>
 80143dc:	6823      	ldr	r3, [r4, #0]
 80143de:	07de      	lsls	r6, r3, #31
 80143e0:	d508      	bpl.n	80143f4 <_printf_i+0x14c>
 80143e2:	6923      	ldr	r3, [r4, #16]
 80143e4:	6861      	ldr	r1, [r4, #4]
 80143e6:	4299      	cmp	r1, r3
 80143e8:	bfde      	ittt	le
 80143ea:	2330      	movle	r3, #48	; 0x30
 80143ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80143f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80143f4:	1b52      	subs	r2, r2, r5
 80143f6:	6122      	str	r2, [r4, #16]
 80143f8:	f8cd a000 	str.w	sl, [sp]
 80143fc:	464b      	mov	r3, r9
 80143fe:	aa03      	add	r2, sp, #12
 8014400:	4621      	mov	r1, r4
 8014402:	4640      	mov	r0, r8
 8014404:	f7ff fee2 	bl	80141cc <_printf_common>
 8014408:	3001      	adds	r0, #1
 801440a:	d14c      	bne.n	80144a6 <_printf_i+0x1fe>
 801440c:	f04f 30ff 	mov.w	r0, #4294967295
 8014410:	b004      	add	sp, #16
 8014412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014416:	4835      	ldr	r0, [pc, #212]	; (80144ec <_printf_i+0x244>)
 8014418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801441c:	6829      	ldr	r1, [r5, #0]
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	f851 6b04 	ldr.w	r6, [r1], #4
 8014424:	6029      	str	r1, [r5, #0]
 8014426:	061d      	lsls	r5, r3, #24
 8014428:	d514      	bpl.n	8014454 <_printf_i+0x1ac>
 801442a:	07df      	lsls	r7, r3, #31
 801442c:	bf44      	itt	mi
 801442e:	f043 0320 	orrmi.w	r3, r3, #32
 8014432:	6023      	strmi	r3, [r4, #0]
 8014434:	b91e      	cbnz	r6, 801443e <_printf_i+0x196>
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	f023 0320 	bic.w	r3, r3, #32
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	2310      	movs	r3, #16
 8014440:	e7b0      	b.n	80143a4 <_printf_i+0xfc>
 8014442:	6823      	ldr	r3, [r4, #0]
 8014444:	f043 0320 	orr.w	r3, r3, #32
 8014448:	6023      	str	r3, [r4, #0]
 801444a:	2378      	movs	r3, #120	; 0x78
 801444c:	4828      	ldr	r0, [pc, #160]	; (80144f0 <_printf_i+0x248>)
 801444e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014452:	e7e3      	b.n	801441c <_printf_i+0x174>
 8014454:	0659      	lsls	r1, r3, #25
 8014456:	bf48      	it	mi
 8014458:	b2b6      	uxthmi	r6, r6
 801445a:	e7e6      	b.n	801442a <_printf_i+0x182>
 801445c:	4615      	mov	r5, r2
 801445e:	e7bb      	b.n	80143d8 <_printf_i+0x130>
 8014460:	682b      	ldr	r3, [r5, #0]
 8014462:	6826      	ldr	r6, [r4, #0]
 8014464:	6961      	ldr	r1, [r4, #20]
 8014466:	1d18      	adds	r0, r3, #4
 8014468:	6028      	str	r0, [r5, #0]
 801446a:	0635      	lsls	r5, r6, #24
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	d501      	bpl.n	8014474 <_printf_i+0x1cc>
 8014470:	6019      	str	r1, [r3, #0]
 8014472:	e002      	b.n	801447a <_printf_i+0x1d2>
 8014474:	0670      	lsls	r0, r6, #25
 8014476:	d5fb      	bpl.n	8014470 <_printf_i+0x1c8>
 8014478:	8019      	strh	r1, [r3, #0]
 801447a:	2300      	movs	r3, #0
 801447c:	6123      	str	r3, [r4, #16]
 801447e:	4615      	mov	r5, r2
 8014480:	e7ba      	b.n	80143f8 <_printf_i+0x150>
 8014482:	682b      	ldr	r3, [r5, #0]
 8014484:	1d1a      	adds	r2, r3, #4
 8014486:	602a      	str	r2, [r5, #0]
 8014488:	681d      	ldr	r5, [r3, #0]
 801448a:	6862      	ldr	r2, [r4, #4]
 801448c:	2100      	movs	r1, #0
 801448e:	4628      	mov	r0, r5
 8014490:	f7eb fea6 	bl	80001e0 <memchr>
 8014494:	b108      	cbz	r0, 801449a <_printf_i+0x1f2>
 8014496:	1b40      	subs	r0, r0, r5
 8014498:	6060      	str	r0, [r4, #4]
 801449a:	6863      	ldr	r3, [r4, #4]
 801449c:	6123      	str	r3, [r4, #16]
 801449e:	2300      	movs	r3, #0
 80144a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144a4:	e7a8      	b.n	80143f8 <_printf_i+0x150>
 80144a6:	6923      	ldr	r3, [r4, #16]
 80144a8:	462a      	mov	r2, r5
 80144aa:	4649      	mov	r1, r9
 80144ac:	4640      	mov	r0, r8
 80144ae:	47d0      	blx	sl
 80144b0:	3001      	adds	r0, #1
 80144b2:	d0ab      	beq.n	801440c <_printf_i+0x164>
 80144b4:	6823      	ldr	r3, [r4, #0]
 80144b6:	079b      	lsls	r3, r3, #30
 80144b8:	d413      	bmi.n	80144e2 <_printf_i+0x23a>
 80144ba:	68e0      	ldr	r0, [r4, #12]
 80144bc:	9b03      	ldr	r3, [sp, #12]
 80144be:	4298      	cmp	r0, r3
 80144c0:	bfb8      	it	lt
 80144c2:	4618      	movlt	r0, r3
 80144c4:	e7a4      	b.n	8014410 <_printf_i+0x168>
 80144c6:	2301      	movs	r3, #1
 80144c8:	4632      	mov	r2, r6
 80144ca:	4649      	mov	r1, r9
 80144cc:	4640      	mov	r0, r8
 80144ce:	47d0      	blx	sl
 80144d0:	3001      	adds	r0, #1
 80144d2:	d09b      	beq.n	801440c <_printf_i+0x164>
 80144d4:	3501      	adds	r5, #1
 80144d6:	68e3      	ldr	r3, [r4, #12]
 80144d8:	9903      	ldr	r1, [sp, #12]
 80144da:	1a5b      	subs	r3, r3, r1
 80144dc:	42ab      	cmp	r3, r5
 80144de:	dcf2      	bgt.n	80144c6 <_printf_i+0x21e>
 80144e0:	e7eb      	b.n	80144ba <_printf_i+0x212>
 80144e2:	2500      	movs	r5, #0
 80144e4:	f104 0619 	add.w	r6, r4, #25
 80144e8:	e7f5      	b.n	80144d6 <_printf_i+0x22e>
 80144ea:	bf00      	nop
 80144ec:	080185e3 	.word	0x080185e3
 80144f0:	080185f4 	.word	0x080185f4

080144f4 <iprintf>:
 80144f4:	b40f      	push	{r0, r1, r2, r3}
 80144f6:	4b0a      	ldr	r3, [pc, #40]	; (8014520 <iprintf+0x2c>)
 80144f8:	b513      	push	{r0, r1, r4, lr}
 80144fa:	681c      	ldr	r4, [r3, #0]
 80144fc:	b124      	cbz	r4, 8014508 <iprintf+0x14>
 80144fe:	69a3      	ldr	r3, [r4, #24]
 8014500:	b913      	cbnz	r3, 8014508 <iprintf+0x14>
 8014502:	4620      	mov	r0, r4
 8014504:	f7ff f886 	bl	8013614 <__sinit>
 8014508:	ab05      	add	r3, sp, #20
 801450a:	9a04      	ldr	r2, [sp, #16]
 801450c:	68a1      	ldr	r1, [r4, #8]
 801450e:	9301      	str	r3, [sp, #4]
 8014510:	4620      	mov	r0, r4
 8014512:	f7ff fa55 	bl	80139c0 <_vfiprintf_r>
 8014516:	b002      	add	sp, #8
 8014518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801451c:	b004      	add	sp, #16
 801451e:	4770      	bx	lr
 8014520:	20000058 	.word	0x20000058

08014524 <_puts_r>:
 8014524:	b570      	push	{r4, r5, r6, lr}
 8014526:	460e      	mov	r6, r1
 8014528:	4605      	mov	r5, r0
 801452a:	b118      	cbz	r0, 8014534 <_puts_r+0x10>
 801452c:	6983      	ldr	r3, [r0, #24]
 801452e:	b90b      	cbnz	r3, 8014534 <_puts_r+0x10>
 8014530:	f7ff f870 	bl	8013614 <__sinit>
 8014534:	69ab      	ldr	r3, [r5, #24]
 8014536:	68ac      	ldr	r4, [r5, #8]
 8014538:	b913      	cbnz	r3, 8014540 <_puts_r+0x1c>
 801453a:	4628      	mov	r0, r5
 801453c:	f7ff f86a 	bl	8013614 <__sinit>
 8014540:	4b2c      	ldr	r3, [pc, #176]	; (80145f4 <_puts_r+0xd0>)
 8014542:	429c      	cmp	r4, r3
 8014544:	d120      	bne.n	8014588 <_puts_r+0x64>
 8014546:	686c      	ldr	r4, [r5, #4]
 8014548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801454a:	07db      	lsls	r3, r3, #31
 801454c:	d405      	bmi.n	801455a <_puts_r+0x36>
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	0598      	lsls	r0, r3, #22
 8014552:	d402      	bmi.n	801455a <_puts_r+0x36>
 8014554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014556:	f7ff f932 	bl	80137be <__retarget_lock_acquire_recursive>
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	0719      	lsls	r1, r3, #28
 801455e:	d51d      	bpl.n	801459c <_puts_r+0x78>
 8014560:	6923      	ldr	r3, [r4, #16]
 8014562:	b1db      	cbz	r3, 801459c <_puts_r+0x78>
 8014564:	3e01      	subs	r6, #1
 8014566:	68a3      	ldr	r3, [r4, #8]
 8014568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801456c:	3b01      	subs	r3, #1
 801456e:	60a3      	str	r3, [r4, #8]
 8014570:	bb39      	cbnz	r1, 80145c2 <_puts_r+0x9e>
 8014572:	2b00      	cmp	r3, #0
 8014574:	da38      	bge.n	80145e8 <_puts_r+0xc4>
 8014576:	4622      	mov	r2, r4
 8014578:	210a      	movs	r1, #10
 801457a:	4628      	mov	r0, r5
 801457c:	f000 f9de 	bl	801493c <__swbuf_r>
 8014580:	3001      	adds	r0, #1
 8014582:	d011      	beq.n	80145a8 <_puts_r+0x84>
 8014584:	250a      	movs	r5, #10
 8014586:	e011      	b.n	80145ac <_puts_r+0x88>
 8014588:	4b1b      	ldr	r3, [pc, #108]	; (80145f8 <_puts_r+0xd4>)
 801458a:	429c      	cmp	r4, r3
 801458c:	d101      	bne.n	8014592 <_puts_r+0x6e>
 801458e:	68ac      	ldr	r4, [r5, #8]
 8014590:	e7da      	b.n	8014548 <_puts_r+0x24>
 8014592:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <_puts_r+0xd8>)
 8014594:	429c      	cmp	r4, r3
 8014596:	bf08      	it	eq
 8014598:	68ec      	ldreq	r4, [r5, #12]
 801459a:	e7d5      	b.n	8014548 <_puts_r+0x24>
 801459c:	4621      	mov	r1, r4
 801459e:	4628      	mov	r0, r5
 80145a0:	f000 fa30 	bl	8014a04 <__swsetup_r>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d0dd      	beq.n	8014564 <_puts_r+0x40>
 80145a8:	f04f 35ff 	mov.w	r5, #4294967295
 80145ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145ae:	07da      	lsls	r2, r3, #31
 80145b0:	d405      	bmi.n	80145be <_puts_r+0x9a>
 80145b2:	89a3      	ldrh	r3, [r4, #12]
 80145b4:	059b      	lsls	r3, r3, #22
 80145b6:	d402      	bmi.n	80145be <_puts_r+0x9a>
 80145b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145ba:	f7ff f901 	bl	80137c0 <__retarget_lock_release_recursive>
 80145be:	4628      	mov	r0, r5
 80145c0:	bd70      	pop	{r4, r5, r6, pc}
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	da04      	bge.n	80145d0 <_puts_r+0xac>
 80145c6:	69a2      	ldr	r2, [r4, #24]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	dc06      	bgt.n	80145da <_puts_r+0xb6>
 80145cc:	290a      	cmp	r1, #10
 80145ce:	d004      	beq.n	80145da <_puts_r+0xb6>
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	1c5a      	adds	r2, r3, #1
 80145d4:	6022      	str	r2, [r4, #0]
 80145d6:	7019      	strb	r1, [r3, #0]
 80145d8:	e7c5      	b.n	8014566 <_puts_r+0x42>
 80145da:	4622      	mov	r2, r4
 80145dc:	4628      	mov	r0, r5
 80145de:	f000 f9ad 	bl	801493c <__swbuf_r>
 80145e2:	3001      	adds	r0, #1
 80145e4:	d1bf      	bne.n	8014566 <_puts_r+0x42>
 80145e6:	e7df      	b.n	80145a8 <_puts_r+0x84>
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	250a      	movs	r5, #10
 80145ec:	1c5a      	adds	r2, r3, #1
 80145ee:	6022      	str	r2, [r4, #0]
 80145f0:	701d      	strb	r5, [r3, #0]
 80145f2:	e7db      	b.n	80145ac <_puts_r+0x88>
 80145f4:	0801857c 	.word	0x0801857c
 80145f8:	0801859c 	.word	0x0801859c
 80145fc:	0801855c 	.word	0x0801855c

08014600 <puts>:
 8014600:	4b02      	ldr	r3, [pc, #8]	; (801460c <puts+0xc>)
 8014602:	4601      	mov	r1, r0
 8014604:	6818      	ldr	r0, [r3, #0]
 8014606:	f7ff bf8d 	b.w	8014524 <_puts_r>
 801460a:	bf00      	nop
 801460c:	20000058 	.word	0x20000058

08014610 <cleanup_glue>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	460c      	mov	r4, r1
 8014614:	6809      	ldr	r1, [r1, #0]
 8014616:	4605      	mov	r5, r0
 8014618:	b109      	cbz	r1, 801461e <cleanup_glue+0xe>
 801461a:	f7ff fff9 	bl	8014610 <cleanup_glue>
 801461e:	4621      	mov	r1, r4
 8014620:	4628      	mov	r0, r5
 8014622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014626:	f001 bdd9 	b.w	80161dc <_free_r>
	...

0801462c <_reclaim_reent>:
 801462c:	4b2c      	ldr	r3, [pc, #176]	; (80146e0 <_reclaim_reent+0xb4>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	4283      	cmp	r3, r0
 8014632:	b570      	push	{r4, r5, r6, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	d051      	beq.n	80146dc <_reclaim_reent+0xb0>
 8014638:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801463a:	b143      	cbz	r3, 801464e <_reclaim_reent+0x22>
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d14a      	bne.n	80146d8 <_reclaim_reent+0xac>
 8014642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014644:	6819      	ldr	r1, [r3, #0]
 8014646:	b111      	cbz	r1, 801464e <_reclaim_reent+0x22>
 8014648:	4620      	mov	r0, r4
 801464a:	f001 fdc7 	bl	80161dc <_free_r>
 801464e:	6961      	ldr	r1, [r4, #20]
 8014650:	b111      	cbz	r1, 8014658 <_reclaim_reent+0x2c>
 8014652:	4620      	mov	r0, r4
 8014654:	f001 fdc2 	bl	80161dc <_free_r>
 8014658:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801465a:	b111      	cbz	r1, 8014662 <_reclaim_reent+0x36>
 801465c:	4620      	mov	r0, r4
 801465e:	f001 fdbd 	bl	80161dc <_free_r>
 8014662:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014664:	b111      	cbz	r1, 801466c <_reclaim_reent+0x40>
 8014666:	4620      	mov	r0, r4
 8014668:	f001 fdb8 	bl	80161dc <_free_r>
 801466c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801466e:	b111      	cbz	r1, 8014676 <_reclaim_reent+0x4a>
 8014670:	4620      	mov	r0, r4
 8014672:	f001 fdb3 	bl	80161dc <_free_r>
 8014676:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014678:	b111      	cbz	r1, 8014680 <_reclaim_reent+0x54>
 801467a:	4620      	mov	r0, r4
 801467c:	f001 fdae 	bl	80161dc <_free_r>
 8014680:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014682:	b111      	cbz	r1, 801468a <_reclaim_reent+0x5e>
 8014684:	4620      	mov	r0, r4
 8014686:	f001 fda9 	bl	80161dc <_free_r>
 801468a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801468c:	b111      	cbz	r1, 8014694 <_reclaim_reent+0x68>
 801468e:	4620      	mov	r0, r4
 8014690:	f001 fda4 	bl	80161dc <_free_r>
 8014694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014696:	b111      	cbz	r1, 801469e <_reclaim_reent+0x72>
 8014698:	4620      	mov	r0, r4
 801469a:	f001 fd9f 	bl	80161dc <_free_r>
 801469e:	69a3      	ldr	r3, [r4, #24]
 80146a0:	b1e3      	cbz	r3, 80146dc <_reclaim_reent+0xb0>
 80146a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80146a4:	4620      	mov	r0, r4
 80146a6:	4798      	blx	r3
 80146a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80146aa:	b1b9      	cbz	r1, 80146dc <_reclaim_reent+0xb0>
 80146ac:	4620      	mov	r0, r4
 80146ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146b2:	f7ff bfad 	b.w	8014610 <cleanup_glue>
 80146b6:	5949      	ldr	r1, [r1, r5]
 80146b8:	b941      	cbnz	r1, 80146cc <_reclaim_reent+0xa0>
 80146ba:	3504      	adds	r5, #4
 80146bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146be:	2d80      	cmp	r5, #128	; 0x80
 80146c0:	68d9      	ldr	r1, [r3, #12]
 80146c2:	d1f8      	bne.n	80146b6 <_reclaim_reent+0x8a>
 80146c4:	4620      	mov	r0, r4
 80146c6:	f001 fd89 	bl	80161dc <_free_r>
 80146ca:	e7ba      	b.n	8014642 <_reclaim_reent+0x16>
 80146cc:	680e      	ldr	r6, [r1, #0]
 80146ce:	4620      	mov	r0, r4
 80146d0:	f001 fd84 	bl	80161dc <_free_r>
 80146d4:	4631      	mov	r1, r6
 80146d6:	e7ef      	b.n	80146b8 <_reclaim_reent+0x8c>
 80146d8:	2500      	movs	r5, #0
 80146da:	e7ef      	b.n	80146bc <_reclaim_reent+0x90>
 80146dc:	bd70      	pop	{r4, r5, r6, pc}
 80146de:	bf00      	nop
 80146e0:	20000058 	.word	0x20000058

080146e4 <_sbrk_r>:
 80146e4:	b538      	push	{r3, r4, r5, lr}
 80146e6:	4d06      	ldr	r5, [pc, #24]	; (8014700 <_sbrk_r+0x1c>)
 80146e8:	2300      	movs	r3, #0
 80146ea:	4604      	mov	r4, r0
 80146ec:	4608      	mov	r0, r1
 80146ee:	602b      	str	r3, [r5, #0]
 80146f0:	f7ef f97c 	bl	80039ec <_sbrk>
 80146f4:	1c43      	adds	r3, r0, #1
 80146f6:	d102      	bne.n	80146fe <_sbrk_r+0x1a>
 80146f8:	682b      	ldr	r3, [r5, #0]
 80146fa:	b103      	cbz	r3, 80146fe <_sbrk_r+0x1a>
 80146fc:	6023      	str	r3, [r4, #0]
 80146fe:	bd38      	pop	{r3, r4, r5, pc}
 8014700:	20005094 	.word	0x20005094

08014704 <sniprintf>:
 8014704:	b40c      	push	{r2, r3}
 8014706:	b530      	push	{r4, r5, lr}
 8014708:	4b17      	ldr	r3, [pc, #92]	; (8014768 <sniprintf+0x64>)
 801470a:	1e0c      	subs	r4, r1, #0
 801470c:	681d      	ldr	r5, [r3, #0]
 801470e:	b09d      	sub	sp, #116	; 0x74
 8014710:	da08      	bge.n	8014724 <sniprintf+0x20>
 8014712:	238b      	movs	r3, #139	; 0x8b
 8014714:	602b      	str	r3, [r5, #0]
 8014716:	f04f 30ff 	mov.w	r0, #4294967295
 801471a:	b01d      	add	sp, #116	; 0x74
 801471c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014720:	b002      	add	sp, #8
 8014722:	4770      	bx	lr
 8014724:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014728:	f8ad 3014 	strh.w	r3, [sp, #20]
 801472c:	bf14      	ite	ne
 801472e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014732:	4623      	moveq	r3, r4
 8014734:	9304      	str	r3, [sp, #16]
 8014736:	9307      	str	r3, [sp, #28]
 8014738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801473c:	9002      	str	r0, [sp, #8]
 801473e:	9006      	str	r0, [sp, #24]
 8014740:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014746:	ab21      	add	r3, sp, #132	; 0x84
 8014748:	a902      	add	r1, sp, #8
 801474a:	4628      	mov	r0, r5
 801474c:	9301      	str	r3, [sp, #4]
 801474e:	f001 fe1b 	bl	8016388 <_svfiprintf_r>
 8014752:	1c43      	adds	r3, r0, #1
 8014754:	bfbc      	itt	lt
 8014756:	238b      	movlt	r3, #139	; 0x8b
 8014758:	602b      	strlt	r3, [r5, #0]
 801475a:	2c00      	cmp	r4, #0
 801475c:	d0dd      	beq.n	801471a <sniprintf+0x16>
 801475e:	9b02      	ldr	r3, [sp, #8]
 8014760:	2200      	movs	r2, #0
 8014762:	701a      	strb	r2, [r3, #0]
 8014764:	e7d9      	b.n	801471a <sniprintf+0x16>
 8014766:	bf00      	nop
 8014768:	20000058 	.word	0x20000058

0801476c <siprintf>:
 801476c:	b40e      	push	{r1, r2, r3}
 801476e:	b500      	push	{lr}
 8014770:	b09c      	sub	sp, #112	; 0x70
 8014772:	ab1d      	add	r3, sp, #116	; 0x74
 8014774:	9002      	str	r0, [sp, #8]
 8014776:	9006      	str	r0, [sp, #24]
 8014778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801477c:	4809      	ldr	r0, [pc, #36]	; (80147a4 <siprintf+0x38>)
 801477e:	9107      	str	r1, [sp, #28]
 8014780:	9104      	str	r1, [sp, #16]
 8014782:	4909      	ldr	r1, [pc, #36]	; (80147a8 <siprintf+0x3c>)
 8014784:	f853 2b04 	ldr.w	r2, [r3], #4
 8014788:	9105      	str	r1, [sp, #20]
 801478a:	6800      	ldr	r0, [r0, #0]
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	a902      	add	r1, sp, #8
 8014790:	f001 fdfa 	bl	8016388 <_svfiprintf_r>
 8014794:	9b02      	ldr	r3, [sp, #8]
 8014796:	2200      	movs	r2, #0
 8014798:	701a      	strb	r2, [r3, #0]
 801479a:	b01c      	add	sp, #112	; 0x70
 801479c:	f85d eb04 	ldr.w	lr, [sp], #4
 80147a0:	b003      	add	sp, #12
 80147a2:	4770      	bx	lr
 80147a4:	20000058 	.word	0x20000058
 80147a8:	ffff0208 	.word	0xffff0208

080147ac <__sread>:
 80147ac:	b510      	push	{r4, lr}
 80147ae:	460c      	mov	r4, r1
 80147b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147b4:	f001 fee8 	bl	8016588 <_read_r>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	bfab      	itete	ge
 80147bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147be:	89a3      	ldrhlt	r3, [r4, #12]
 80147c0:	181b      	addge	r3, r3, r0
 80147c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147c6:	bfac      	ite	ge
 80147c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80147ca:	81a3      	strhlt	r3, [r4, #12]
 80147cc:	bd10      	pop	{r4, pc}

080147ce <__swrite>:
 80147ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d2:	461f      	mov	r7, r3
 80147d4:	898b      	ldrh	r3, [r1, #12]
 80147d6:	05db      	lsls	r3, r3, #23
 80147d8:	4605      	mov	r5, r0
 80147da:	460c      	mov	r4, r1
 80147dc:	4616      	mov	r6, r2
 80147de:	d505      	bpl.n	80147ec <__swrite+0x1e>
 80147e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147e4:	2302      	movs	r3, #2
 80147e6:	2200      	movs	r2, #0
 80147e8:	f001 f8d2 	bl	8015990 <_lseek_r>
 80147ec:	89a3      	ldrh	r3, [r4, #12]
 80147ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147f6:	81a3      	strh	r3, [r4, #12]
 80147f8:	4632      	mov	r2, r6
 80147fa:	463b      	mov	r3, r7
 80147fc:	4628      	mov	r0, r5
 80147fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014802:	f000 b8ed 	b.w	80149e0 <_write_r>

08014806 <__sseek>:
 8014806:	b510      	push	{r4, lr}
 8014808:	460c      	mov	r4, r1
 801480a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801480e:	f001 f8bf 	bl	8015990 <_lseek_r>
 8014812:	1c43      	adds	r3, r0, #1
 8014814:	89a3      	ldrh	r3, [r4, #12]
 8014816:	bf15      	itete	ne
 8014818:	6560      	strne	r0, [r4, #84]	; 0x54
 801481a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801481e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014822:	81a3      	strheq	r3, [r4, #12]
 8014824:	bf18      	it	ne
 8014826:	81a3      	strhne	r3, [r4, #12]
 8014828:	bd10      	pop	{r4, pc}

0801482a <__sclose>:
 801482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801482e:	f000 b95f 	b.w	8014af0 <_close_r>

08014832 <strncpy>:
 8014832:	b510      	push	{r4, lr}
 8014834:	3901      	subs	r1, #1
 8014836:	4603      	mov	r3, r0
 8014838:	b132      	cbz	r2, 8014848 <strncpy+0x16>
 801483a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801483e:	f803 4b01 	strb.w	r4, [r3], #1
 8014842:	3a01      	subs	r2, #1
 8014844:	2c00      	cmp	r4, #0
 8014846:	d1f7      	bne.n	8014838 <strncpy+0x6>
 8014848:	441a      	add	r2, r3
 801484a:	2100      	movs	r1, #0
 801484c:	4293      	cmp	r3, r2
 801484e:	d100      	bne.n	8014852 <strncpy+0x20>
 8014850:	bd10      	pop	{r4, pc}
 8014852:	f803 1b01 	strb.w	r1, [r3], #1
 8014856:	e7f9      	b.n	801484c <strncpy+0x1a>

08014858 <strstr>:
 8014858:	780a      	ldrb	r2, [r1, #0]
 801485a:	b570      	push	{r4, r5, r6, lr}
 801485c:	b96a      	cbnz	r2, 801487a <strstr+0x22>
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	429a      	cmp	r2, r3
 8014862:	d109      	bne.n	8014878 <strstr+0x20>
 8014864:	460c      	mov	r4, r1
 8014866:	4605      	mov	r5, r0
 8014868:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801486c:	2b00      	cmp	r3, #0
 801486e:	d0f6      	beq.n	801485e <strstr+0x6>
 8014870:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014874:	429e      	cmp	r6, r3
 8014876:	d0f7      	beq.n	8014868 <strstr+0x10>
 8014878:	3001      	adds	r0, #1
 801487a:	7803      	ldrb	r3, [r0, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d1ef      	bne.n	8014860 <strstr+0x8>
 8014880:	4618      	mov	r0, r3
 8014882:	e7ec      	b.n	801485e <strstr+0x6>

08014884 <strtok>:
 8014884:	4b16      	ldr	r3, [pc, #88]	; (80148e0 <strtok+0x5c>)
 8014886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014888:	681e      	ldr	r6, [r3, #0]
 801488a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801488c:	4605      	mov	r5, r0
 801488e:	b9fc      	cbnz	r4, 80148d0 <strtok+0x4c>
 8014890:	2050      	movs	r0, #80	; 0x50
 8014892:	9101      	str	r1, [sp, #4]
 8014894:	f001 f8f4 	bl	8015a80 <malloc>
 8014898:	9901      	ldr	r1, [sp, #4]
 801489a:	65b0      	str	r0, [r6, #88]	; 0x58
 801489c:	4602      	mov	r2, r0
 801489e:	b920      	cbnz	r0, 80148aa <strtok+0x26>
 80148a0:	4b10      	ldr	r3, [pc, #64]	; (80148e4 <strtok+0x60>)
 80148a2:	4811      	ldr	r0, [pc, #68]	; (80148e8 <strtok+0x64>)
 80148a4:	2157      	movs	r1, #87	; 0x57
 80148a6:	f7fe fe39 	bl	801351c <__assert_func>
 80148aa:	e9c0 4400 	strd	r4, r4, [r0]
 80148ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80148b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80148b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80148ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80148be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80148c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80148c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80148ca:	6184      	str	r4, [r0, #24]
 80148cc:	7704      	strb	r4, [r0, #28]
 80148ce:	6244      	str	r4, [r0, #36]	; 0x24
 80148d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80148d2:	2301      	movs	r3, #1
 80148d4:	4628      	mov	r0, r5
 80148d6:	b002      	add	sp, #8
 80148d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148dc:	f000 b806 	b.w	80148ec <__strtok_r>
 80148e0:	20000058 	.word	0x20000058
 80148e4:	08018605 	.word	0x08018605
 80148e8:	0801861c 	.word	0x0801861c

080148ec <__strtok_r>:
 80148ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148ee:	b908      	cbnz	r0, 80148f4 <__strtok_r+0x8>
 80148f0:	6810      	ldr	r0, [r2, #0]
 80148f2:	b188      	cbz	r0, 8014918 <__strtok_r+0x2c>
 80148f4:	4604      	mov	r4, r0
 80148f6:	4620      	mov	r0, r4
 80148f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80148fc:	460f      	mov	r7, r1
 80148fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014902:	b91e      	cbnz	r6, 801490c <__strtok_r+0x20>
 8014904:	b965      	cbnz	r5, 8014920 <__strtok_r+0x34>
 8014906:	6015      	str	r5, [r2, #0]
 8014908:	4628      	mov	r0, r5
 801490a:	e005      	b.n	8014918 <__strtok_r+0x2c>
 801490c:	42b5      	cmp	r5, r6
 801490e:	d1f6      	bne.n	80148fe <__strtok_r+0x12>
 8014910:	2b00      	cmp	r3, #0
 8014912:	d1f0      	bne.n	80148f6 <__strtok_r+0xa>
 8014914:	6014      	str	r4, [r2, #0]
 8014916:	7003      	strb	r3, [r0, #0]
 8014918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801491a:	461c      	mov	r4, r3
 801491c:	e00c      	b.n	8014938 <__strtok_r+0x4c>
 801491e:	b915      	cbnz	r5, 8014926 <__strtok_r+0x3a>
 8014920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014924:	460e      	mov	r6, r1
 8014926:	f816 5b01 	ldrb.w	r5, [r6], #1
 801492a:	42ab      	cmp	r3, r5
 801492c:	d1f7      	bne.n	801491e <__strtok_r+0x32>
 801492e:	2b00      	cmp	r3, #0
 8014930:	d0f3      	beq.n	801491a <__strtok_r+0x2e>
 8014932:	2300      	movs	r3, #0
 8014934:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014938:	6014      	str	r4, [r2, #0]
 801493a:	e7ed      	b.n	8014918 <__strtok_r+0x2c>

0801493c <__swbuf_r>:
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	460e      	mov	r6, r1
 8014940:	4614      	mov	r4, r2
 8014942:	4605      	mov	r5, r0
 8014944:	b118      	cbz	r0, 801494e <__swbuf_r+0x12>
 8014946:	6983      	ldr	r3, [r0, #24]
 8014948:	b90b      	cbnz	r3, 801494e <__swbuf_r+0x12>
 801494a:	f7fe fe63 	bl	8013614 <__sinit>
 801494e:	4b21      	ldr	r3, [pc, #132]	; (80149d4 <__swbuf_r+0x98>)
 8014950:	429c      	cmp	r4, r3
 8014952:	d12b      	bne.n	80149ac <__swbuf_r+0x70>
 8014954:	686c      	ldr	r4, [r5, #4]
 8014956:	69a3      	ldr	r3, [r4, #24]
 8014958:	60a3      	str	r3, [r4, #8]
 801495a:	89a3      	ldrh	r3, [r4, #12]
 801495c:	071a      	lsls	r2, r3, #28
 801495e:	d52f      	bpl.n	80149c0 <__swbuf_r+0x84>
 8014960:	6923      	ldr	r3, [r4, #16]
 8014962:	b36b      	cbz	r3, 80149c0 <__swbuf_r+0x84>
 8014964:	6923      	ldr	r3, [r4, #16]
 8014966:	6820      	ldr	r0, [r4, #0]
 8014968:	1ac0      	subs	r0, r0, r3
 801496a:	6963      	ldr	r3, [r4, #20]
 801496c:	b2f6      	uxtb	r6, r6
 801496e:	4283      	cmp	r3, r0
 8014970:	4637      	mov	r7, r6
 8014972:	dc04      	bgt.n	801497e <__swbuf_r+0x42>
 8014974:	4621      	mov	r1, r4
 8014976:	4628      	mov	r0, r5
 8014978:	f000 ffca 	bl	8015910 <_fflush_r>
 801497c:	bb30      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	3b01      	subs	r3, #1
 8014982:	60a3      	str	r3, [r4, #8]
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	1c5a      	adds	r2, r3, #1
 8014988:	6022      	str	r2, [r4, #0]
 801498a:	701e      	strb	r6, [r3, #0]
 801498c:	6963      	ldr	r3, [r4, #20]
 801498e:	3001      	adds	r0, #1
 8014990:	4283      	cmp	r3, r0
 8014992:	d004      	beq.n	801499e <__swbuf_r+0x62>
 8014994:	89a3      	ldrh	r3, [r4, #12]
 8014996:	07db      	lsls	r3, r3, #31
 8014998:	d506      	bpl.n	80149a8 <__swbuf_r+0x6c>
 801499a:	2e0a      	cmp	r6, #10
 801499c:	d104      	bne.n	80149a8 <__swbuf_r+0x6c>
 801499e:	4621      	mov	r1, r4
 80149a0:	4628      	mov	r0, r5
 80149a2:	f000 ffb5 	bl	8015910 <_fflush_r>
 80149a6:	b988      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 80149a8:	4638      	mov	r0, r7
 80149aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ac:	4b0a      	ldr	r3, [pc, #40]	; (80149d8 <__swbuf_r+0x9c>)
 80149ae:	429c      	cmp	r4, r3
 80149b0:	d101      	bne.n	80149b6 <__swbuf_r+0x7a>
 80149b2:	68ac      	ldr	r4, [r5, #8]
 80149b4:	e7cf      	b.n	8014956 <__swbuf_r+0x1a>
 80149b6:	4b09      	ldr	r3, [pc, #36]	; (80149dc <__swbuf_r+0xa0>)
 80149b8:	429c      	cmp	r4, r3
 80149ba:	bf08      	it	eq
 80149bc:	68ec      	ldreq	r4, [r5, #12]
 80149be:	e7ca      	b.n	8014956 <__swbuf_r+0x1a>
 80149c0:	4621      	mov	r1, r4
 80149c2:	4628      	mov	r0, r5
 80149c4:	f000 f81e 	bl	8014a04 <__swsetup_r>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d0cb      	beq.n	8014964 <__swbuf_r+0x28>
 80149cc:	f04f 37ff 	mov.w	r7, #4294967295
 80149d0:	e7ea      	b.n	80149a8 <__swbuf_r+0x6c>
 80149d2:	bf00      	nop
 80149d4:	0801857c 	.word	0x0801857c
 80149d8:	0801859c 	.word	0x0801859c
 80149dc:	0801855c 	.word	0x0801855c

080149e0 <_write_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d07      	ldr	r5, [pc, #28]	; (8014a00 <_write_r+0x20>)
 80149e4:	4604      	mov	r4, r0
 80149e6:	4608      	mov	r0, r1
 80149e8:	4611      	mov	r1, r2
 80149ea:	2200      	movs	r2, #0
 80149ec:	602a      	str	r2, [r5, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	f7ec ff54 	bl	800189c <_write>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_write_r+0x1e>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_write_r+0x1e>
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	20005094 	.word	0x20005094

08014a04 <__swsetup_r>:
 8014a04:	4b32      	ldr	r3, [pc, #200]	; (8014ad0 <__swsetup_r+0xcc>)
 8014a06:	b570      	push	{r4, r5, r6, lr}
 8014a08:	681d      	ldr	r5, [r3, #0]
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	b125      	cbz	r5, 8014a1a <__swsetup_r+0x16>
 8014a10:	69ab      	ldr	r3, [r5, #24]
 8014a12:	b913      	cbnz	r3, 8014a1a <__swsetup_r+0x16>
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7fe fdfd 	bl	8013614 <__sinit>
 8014a1a:	4b2e      	ldr	r3, [pc, #184]	; (8014ad4 <__swsetup_r+0xd0>)
 8014a1c:	429c      	cmp	r4, r3
 8014a1e:	d10f      	bne.n	8014a40 <__swsetup_r+0x3c>
 8014a20:	686c      	ldr	r4, [r5, #4]
 8014a22:	89a3      	ldrh	r3, [r4, #12]
 8014a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a28:	0719      	lsls	r1, r3, #28
 8014a2a:	d42c      	bmi.n	8014a86 <__swsetup_r+0x82>
 8014a2c:	06dd      	lsls	r5, r3, #27
 8014a2e:	d411      	bmi.n	8014a54 <__swsetup_r+0x50>
 8014a30:	2309      	movs	r3, #9
 8014a32:	6033      	str	r3, [r6, #0]
 8014a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a38:	81a3      	strh	r3, [r4, #12]
 8014a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3e:	e03e      	b.n	8014abe <__swsetup_r+0xba>
 8014a40:	4b25      	ldr	r3, [pc, #148]	; (8014ad8 <__swsetup_r+0xd4>)
 8014a42:	429c      	cmp	r4, r3
 8014a44:	d101      	bne.n	8014a4a <__swsetup_r+0x46>
 8014a46:	68ac      	ldr	r4, [r5, #8]
 8014a48:	e7eb      	b.n	8014a22 <__swsetup_r+0x1e>
 8014a4a:	4b24      	ldr	r3, [pc, #144]	; (8014adc <__swsetup_r+0xd8>)
 8014a4c:	429c      	cmp	r4, r3
 8014a4e:	bf08      	it	eq
 8014a50:	68ec      	ldreq	r4, [r5, #12]
 8014a52:	e7e6      	b.n	8014a22 <__swsetup_r+0x1e>
 8014a54:	0758      	lsls	r0, r3, #29
 8014a56:	d512      	bpl.n	8014a7e <__swsetup_r+0x7a>
 8014a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a5a:	b141      	cbz	r1, 8014a6e <__swsetup_r+0x6a>
 8014a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a60:	4299      	cmp	r1, r3
 8014a62:	d002      	beq.n	8014a6a <__swsetup_r+0x66>
 8014a64:	4630      	mov	r0, r6
 8014a66:	f001 fbb9 	bl	80161dc <_free_r>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	2300      	movs	r3, #0
 8014a78:	6063      	str	r3, [r4, #4]
 8014a7a:	6923      	ldr	r3, [r4, #16]
 8014a7c:	6023      	str	r3, [r4, #0]
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	f043 0308 	orr.w	r3, r3, #8
 8014a84:	81a3      	strh	r3, [r4, #12]
 8014a86:	6923      	ldr	r3, [r4, #16]
 8014a88:	b94b      	cbnz	r3, 8014a9e <__swsetup_r+0x9a>
 8014a8a:	89a3      	ldrh	r3, [r4, #12]
 8014a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a94:	d003      	beq.n	8014a9e <__swsetup_r+0x9a>
 8014a96:	4621      	mov	r1, r4
 8014a98:	4630      	mov	r0, r6
 8014a9a:	f000 ffb1 	bl	8015a00 <__smakebuf_r>
 8014a9e:	89a0      	ldrh	r0, [r4, #12]
 8014aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014aa4:	f010 0301 	ands.w	r3, r0, #1
 8014aa8:	d00a      	beq.n	8014ac0 <__swsetup_r+0xbc>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	60a3      	str	r3, [r4, #8]
 8014aae:	6963      	ldr	r3, [r4, #20]
 8014ab0:	425b      	negs	r3, r3
 8014ab2:	61a3      	str	r3, [r4, #24]
 8014ab4:	6923      	ldr	r3, [r4, #16]
 8014ab6:	b943      	cbnz	r3, 8014aca <__swsetup_r+0xc6>
 8014ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014abc:	d1ba      	bne.n	8014a34 <__swsetup_r+0x30>
 8014abe:	bd70      	pop	{r4, r5, r6, pc}
 8014ac0:	0781      	lsls	r1, r0, #30
 8014ac2:	bf58      	it	pl
 8014ac4:	6963      	ldrpl	r3, [r4, #20]
 8014ac6:	60a3      	str	r3, [r4, #8]
 8014ac8:	e7f4      	b.n	8014ab4 <__swsetup_r+0xb0>
 8014aca:	2000      	movs	r0, #0
 8014acc:	e7f7      	b.n	8014abe <__swsetup_r+0xba>
 8014ace:	bf00      	nop
 8014ad0:	20000058 	.word	0x20000058
 8014ad4:	0801857c 	.word	0x0801857c
 8014ad8:	0801859c 	.word	0x0801859c
 8014adc:	0801855c 	.word	0x0801855c

08014ae0 <abort>:
 8014ae0:	b508      	push	{r3, lr}
 8014ae2:	2006      	movs	r0, #6
 8014ae4:	f001 fd8a 	bl	80165fc <raise>
 8014ae8:	2001      	movs	r0, #1
 8014aea:	f7ee ff23 	bl	8003934 <_exit>
	...

08014af0 <_close_r>:
 8014af0:	b538      	push	{r3, r4, r5, lr}
 8014af2:	4d06      	ldr	r5, [pc, #24]	; (8014b0c <_close_r+0x1c>)
 8014af4:	2300      	movs	r3, #0
 8014af6:	4604      	mov	r4, r0
 8014af8:	4608      	mov	r0, r1
 8014afa:	602b      	str	r3, [r5, #0]
 8014afc:	f7ee ff41 	bl	8003982 <_close>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_close_r+0x1a>
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_close_r+0x1a>
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	20005094 	.word	0x20005094

08014b10 <quorem>:
 8014b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b14:	6903      	ldr	r3, [r0, #16]
 8014b16:	690c      	ldr	r4, [r1, #16]
 8014b18:	42a3      	cmp	r3, r4
 8014b1a:	4607      	mov	r7, r0
 8014b1c:	f2c0 8081 	blt.w	8014c22 <quorem+0x112>
 8014b20:	3c01      	subs	r4, #1
 8014b22:	f101 0814 	add.w	r8, r1, #20
 8014b26:	f100 0514 	add.w	r5, r0, #20
 8014b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b2e:	9301      	str	r3, [sp, #4]
 8014b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014b44:	fbb2 f6f3 	udiv	r6, r2, r3
 8014b48:	d331      	bcc.n	8014bae <quorem+0x9e>
 8014b4a:	f04f 0e00 	mov.w	lr, #0
 8014b4e:	4640      	mov	r0, r8
 8014b50:	46ac      	mov	ip, r5
 8014b52:	46f2      	mov	sl, lr
 8014b54:	f850 2b04 	ldr.w	r2, [r0], #4
 8014b58:	b293      	uxth	r3, r2
 8014b5a:	fb06 e303 	mla	r3, r6, r3, lr
 8014b5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	ebaa 0303 	sub.w	r3, sl, r3
 8014b68:	f8dc a000 	ldr.w	sl, [ip]
 8014b6c:	0c12      	lsrs	r2, r2, #16
 8014b6e:	fa13 f38a 	uxtah	r3, r3, sl
 8014b72:	fb06 e202 	mla	r2, r6, r2, lr
 8014b76:	9300      	str	r3, [sp, #0]
 8014b78:	9b00      	ldr	r3, [sp, #0]
 8014b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014b7e:	b292      	uxth	r2, r2
 8014b80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b88:	f8bd 3000 	ldrh.w	r3, [sp]
 8014b8c:	4581      	cmp	r9, r0
 8014b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b92:	f84c 3b04 	str.w	r3, [ip], #4
 8014b96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014b9a:	d2db      	bcs.n	8014b54 <quorem+0x44>
 8014b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ba0:	b92b      	cbnz	r3, 8014bae <quorem+0x9e>
 8014ba2:	9b01      	ldr	r3, [sp, #4]
 8014ba4:	3b04      	subs	r3, #4
 8014ba6:	429d      	cmp	r5, r3
 8014ba8:	461a      	mov	r2, r3
 8014baa:	d32e      	bcc.n	8014c0a <quorem+0xfa>
 8014bac:	613c      	str	r4, [r7, #16]
 8014bae:	4638      	mov	r0, r7
 8014bb0:	f001 f9fc 	bl	8015fac <__mcmp>
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	db24      	blt.n	8014c02 <quorem+0xf2>
 8014bb8:	3601      	adds	r6, #1
 8014bba:	4628      	mov	r0, r5
 8014bbc:	f04f 0c00 	mov.w	ip, #0
 8014bc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8014bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8014bc8:	b293      	uxth	r3, r2
 8014bca:	ebac 0303 	sub.w	r3, ip, r3
 8014bce:	0c12      	lsrs	r2, r2, #16
 8014bd0:	fa13 f38e 	uxtah	r3, r3, lr
 8014bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014be2:	45c1      	cmp	r9, r8
 8014be4:	f840 3b04 	str.w	r3, [r0], #4
 8014be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014bec:	d2e8      	bcs.n	8014bc0 <quorem+0xb0>
 8014bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bf6:	b922      	cbnz	r2, 8014c02 <quorem+0xf2>
 8014bf8:	3b04      	subs	r3, #4
 8014bfa:	429d      	cmp	r5, r3
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	d30a      	bcc.n	8014c16 <quorem+0x106>
 8014c00:	613c      	str	r4, [r7, #16]
 8014c02:	4630      	mov	r0, r6
 8014c04:	b003      	add	sp, #12
 8014c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c0a:	6812      	ldr	r2, [r2, #0]
 8014c0c:	3b04      	subs	r3, #4
 8014c0e:	2a00      	cmp	r2, #0
 8014c10:	d1cc      	bne.n	8014bac <quorem+0x9c>
 8014c12:	3c01      	subs	r4, #1
 8014c14:	e7c7      	b.n	8014ba6 <quorem+0x96>
 8014c16:	6812      	ldr	r2, [r2, #0]
 8014c18:	3b04      	subs	r3, #4
 8014c1a:	2a00      	cmp	r2, #0
 8014c1c:	d1f0      	bne.n	8014c00 <quorem+0xf0>
 8014c1e:	3c01      	subs	r4, #1
 8014c20:	e7eb      	b.n	8014bfa <quorem+0xea>
 8014c22:	2000      	movs	r0, #0
 8014c24:	e7ee      	b.n	8014c04 <quorem+0xf4>
	...

08014c28 <_dtoa_r>:
 8014c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2c:	ed2d 8b04 	vpush	{d8-d9}
 8014c30:	ec57 6b10 	vmov	r6, r7, d0
 8014c34:	b093      	sub	sp, #76	; 0x4c
 8014c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014c3c:	9106      	str	r1, [sp, #24]
 8014c3e:	ee10 aa10 	vmov	sl, s0
 8014c42:	4604      	mov	r4, r0
 8014c44:	9209      	str	r2, [sp, #36]	; 0x24
 8014c46:	930c      	str	r3, [sp, #48]	; 0x30
 8014c48:	46bb      	mov	fp, r7
 8014c4a:	b975      	cbnz	r5, 8014c6a <_dtoa_r+0x42>
 8014c4c:	2010      	movs	r0, #16
 8014c4e:	f000 ff17 	bl	8015a80 <malloc>
 8014c52:	4602      	mov	r2, r0
 8014c54:	6260      	str	r0, [r4, #36]	; 0x24
 8014c56:	b920      	cbnz	r0, 8014c62 <_dtoa_r+0x3a>
 8014c58:	4ba7      	ldr	r3, [pc, #668]	; (8014ef8 <_dtoa_r+0x2d0>)
 8014c5a:	21ea      	movs	r1, #234	; 0xea
 8014c5c:	48a7      	ldr	r0, [pc, #668]	; (8014efc <_dtoa_r+0x2d4>)
 8014c5e:	f7fe fc5d 	bl	801351c <__assert_func>
 8014c62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c66:	6005      	str	r5, [r0, #0]
 8014c68:	60c5      	str	r5, [r0, #12]
 8014c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c6c:	6819      	ldr	r1, [r3, #0]
 8014c6e:	b151      	cbz	r1, 8014c86 <_dtoa_r+0x5e>
 8014c70:	685a      	ldr	r2, [r3, #4]
 8014c72:	604a      	str	r2, [r1, #4]
 8014c74:	2301      	movs	r3, #1
 8014c76:	4093      	lsls	r3, r2
 8014c78:	608b      	str	r3, [r1, #8]
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f000 ff54 	bl	8015b28 <_Bfree>
 8014c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c82:	2200      	movs	r2, #0
 8014c84:	601a      	str	r2, [r3, #0]
 8014c86:	1e3b      	subs	r3, r7, #0
 8014c88:	bfaa      	itet	ge
 8014c8a:	2300      	movge	r3, #0
 8014c8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014c90:	f8c8 3000 	strge.w	r3, [r8]
 8014c94:	4b9a      	ldr	r3, [pc, #616]	; (8014f00 <_dtoa_r+0x2d8>)
 8014c96:	bfbc      	itt	lt
 8014c98:	2201      	movlt	r2, #1
 8014c9a:	f8c8 2000 	strlt.w	r2, [r8]
 8014c9e:	ea33 030b 	bics.w	r3, r3, fp
 8014ca2:	d11b      	bne.n	8014cdc <_dtoa_r+0xb4>
 8014ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ca6:	f242 730f 	movw	r3, #9999	; 0x270f
 8014caa:	6013      	str	r3, [r2, #0]
 8014cac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cb0:	4333      	orrs	r3, r6
 8014cb2:	f000 8592 	beq.w	80157da <_dtoa_r+0xbb2>
 8014cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cb8:	b963      	cbnz	r3, 8014cd4 <_dtoa_r+0xac>
 8014cba:	4b92      	ldr	r3, [pc, #584]	; (8014f04 <_dtoa_r+0x2dc>)
 8014cbc:	e022      	b.n	8014d04 <_dtoa_r+0xdc>
 8014cbe:	4b92      	ldr	r3, [pc, #584]	; (8014f08 <_dtoa_r+0x2e0>)
 8014cc0:	9301      	str	r3, [sp, #4]
 8014cc2:	3308      	adds	r3, #8
 8014cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cc6:	6013      	str	r3, [r2, #0]
 8014cc8:	9801      	ldr	r0, [sp, #4]
 8014cca:	b013      	add	sp, #76	; 0x4c
 8014ccc:	ecbd 8b04 	vpop	{d8-d9}
 8014cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd4:	4b8b      	ldr	r3, [pc, #556]	; (8014f04 <_dtoa_r+0x2dc>)
 8014cd6:	9301      	str	r3, [sp, #4]
 8014cd8:	3303      	adds	r3, #3
 8014cda:	e7f3      	b.n	8014cc4 <_dtoa_r+0x9c>
 8014cdc:	2200      	movs	r2, #0
 8014cde:	2300      	movs	r3, #0
 8014ce0:	4650      	mov	r0, sl
 8014ce2:	4659      	mov	r1, fp
 8014ce4:	f7eb fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ce8:	ec4b ab19 	vmov	d9, sl, fp
 8014cec:	4680      	mov	r8, r0
 8014cee:	b158      	cbz	r0, 8014d08 <_dtoa_r+0xe0>
 8014cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	6013      	str	r3, [r2, #0]
 8014cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 856b 	beq.w	80157d4 <_dtoa_r+0xbac>
 8014cfe:	4883      	ldr	r0, [pc, #524]	; (8014f0c <_dtoa_r+0x2e4>)
 8014d00:	6018      	str	r0, [r3, #0]
 8014d02:	1e43      	subs	r3, r0, #1
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	e7df      	b.n	8014cc8 <_dtoa_r+0xa0>
 8014d08:	ec4b ab10 	vmov	d0, sl, fp
 8014d0c:	aa10      	add	r2, sp, #64	; 0x40
 8014d0e:	a911      	add	r1, sp, #68	; 0x44
 8014d10:	4620      	mov	r0, r4
 8014d12:	f001 f9f1 	bl	80160f8 <__d2b>
 8014d16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014d1a:	ee08 0a10 	vmov	s16, r0
 8014d1e:	2d00      	cmp	r5, #0
 8014d20:	f000 8084 	beq.w	8014e2c <_dtoa_r+0x204>
 8014d24:	ee19 3a90 	vmov	r3, s19
 8014d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014d30:	4656      	mov	r6, sl
 8014d32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014d36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014d3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014d3e:	4b74      	ldr	r3, [pc, #464]	; (8014f10 <_dtoa_r+0x2e8>)
 8014d40:	2200      	movs	r2, #0
 8014d42:	4630      	mov	r0, r6
 8014d44:	4639      	mov	r1, r7
 8014d46:	f7eb fa9f 	bl	8000288 <__aeabi_dsub>
 8014d4a:	a365      	add	r3, pc, #404	; (adr r3, 8014ee0 <_dtoa_r+0x2b8>)
 8014d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d50:	f7eb fc52 	bl	80005f8 <__aeabi_dmul>
 8014d54:	a364      	add	r3, pc, #400	; (adr r3, 8014ee8 <_dtoa_r+0x2c0>)
 8014d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5a:	f7eb fa97 	bl	800028c <__adddf3>
 8014d5e:	4606      	mov	r6, r0
 8014d60:	4628      	mov	r0, r5
 8014d62:	460f      	mov	r7, r1
 8014d64:	f7eb fbde 	bl	8000524 <__aeabi_i2d>
 8014d68:	a361      	add	r3, pc, #388	; (adr r3, 8014ef0 <_dtoa_r+0x2c8>)
 8014d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6e:	f7eb fc43 	bl	80005f8 <__aeabi_dmul>
 8014d72:	4602      	mov	r2, r0
 8014d74:	460b      	mov	r3, r1
 8014d76:	4630      	mov	r0, r6
 8014d78:	4639      	mov	r1, r7
 8014d7a:	f7eb fa87 	bl	800028c <__adddf3>
 8014d7e:	4606      	mov	r6, r0
 8014d80:	460f      	mov	r7, r1
 8014d82:	f7eb fee9 	bl	8000b58 <__aeabi_d2iz>
 8014d86:	2200      	movs	r2, #0
 8014d88:	9000      	str	r0, [sp, #0]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	4639      	mov	r1, r7
 8014d90:	f7eb fea4 	bl	8000adc <__aeabi_dcmplt>
 8014d94:	b150      	cbz	r0, 8014dac <_dtoa_r+0x184>
 8014d96:	9800      	ldr	r0, [sp, #0]
 8014d98:	f7eb fbc4 	bl	8000524 <__aeabi_i2d>
 8014d9c:	4632      	mov	r2, r6
 8014d9e:	463b      	mov	r3, r7
 8014da0:	f7eb fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8014da4:	b910      	cbnz	r0, 8014dac <_dtoa_r+0x184>
 8014da6:	9b00      	ldr	r3, [sp, #0]
 8014da8:	3b01      	subs	r3, #1
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	9b00      	ldr	r3, [sp, #0]
 8014dae:	2b16      	cmp	r3, #22
 8014db0:	d85a      	bhi.n	8014e68 <_dtoa_r+0x240>
 8014db2:	9a00      	ldr	r2, [sp, #0]
 8014db4:	4b57      	ldr	r3, [pc, #348]	; (8014f14 <_dtoa_r+0x2ec>)
 8014db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbe:	ec51 0b19 	vmov	r0, r1, d9
 8014dc2:	f7eb fe8b 	bl	8000adc <__aeabi_dcmplt>
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d050      	beq.n	8014e6c <_dtoa_r+0x244>
 8014dca:	9b00      	ldr	r3, [sp, #0]
 8014dcc:	3b01      	subs	r3, #1
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014dd6:	1b5d      	subs	r5, r3, r5
 8014dd8:	1e6b      	subs	r3, r5, #1
 8014dda:	9305      	str	r3, [sp, #20]
 8014ddc:	bf45      	ittet	mi
 8014dde:	f1c5 0301 	rsbmi	r3, r5, #1
 8014de2:	9304      	strmi	r3, [sp, #16]
 8014de4:	2300      	movpl	r3, #0
 8014de6:	2300      	movmi	r3, #0
 8014de8:	bf4c      	ite	mi
 8014dea:	9305      	strmi	r3, [sp, #20]
 8014dec:	9304      	strpl	r3, [sp, #16]
 8014dee:	9b00      	ldr	r3, [sp, #0]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	db3d      	blt.n	8014e70 <_dtoa_r+0x248>
 8014df4:	9b05      	ldr	r3, [sp, #20]
 8014df6:	9a00      	ldr	r2, [sp, #0]
 8014df8:	920a      	str	r2, [sp, #40]	; 0x28
 8014dfa:	4413      	add	r3, r2
 8014dfc:	9305      	str	r3, [sp, #20]
 8014dfe:	2300      	movs	r3, #0
 8014e00:	9307      	str	r3, [sp, #28]
 8014e02:	9b06      	ldr	r3, [sp, #24]
 8014e04:	2b09      	cmp	r3, #9
 8014e06:	f200 8089 	bhi.w	8014f1c <_dtoa_r+0x2f4>
 8014e0a:	2b05      	cmp	r3, #5
 8014e0c:	bfc4      	itt	gt
 8014e0e:	3b04      	subgt	r3, #4
 8014e10:	9306      	strgt	r3, [sp, #24]
 8014e12:	9b06      	ldr	r3, [sp, #24]
 8014e14:	f1a3 0302 	sub.w	r3, r3, #2
 8014e18:	bfcc      	ite	gt
 8014e1a:	2500      	movgt	r5, #0
 8014e1c:	2501      	movle	r5, #1
 8014e1e:	2b03      	cmp	r3, #3
 8014e20:	f200 8087 	bhi.w	8014f32 <_dtoa_r+0x30a>
 8014e24:	e8df f003 	tbb	[pc, r3]
 8014e28:	59383a2d 	.word	0x59383a2d
 8014e2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014e30:	441d      	add	r5, r3
 8014e32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014e36:	2b20      	cmp	r3, #32
 8014e38:	bfc1      	itttt	gt
 8014e3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014e3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014e42:	fa0b f303 	lslgt.w	r3, fp, r3
 8014e46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014e4a:	bfda      	itte	le
 8014e4c:	f1c3 0320 	rsble	r3, r3, #32
 8014e50:	fa06 f003 	lslle.w	r0, r6, r3
 8014e54:	4318      	orrgt	r0, r3
 8014e56:	f7eb fb55 	bl	8000504 <__aeabi_ui2d>
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	4606      	mov	r6, r0
 8014e5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014e62:	3d01      	subs	r5, #1
 8014e64:	930e      	str	r3, [sp, #56]	; 0x38
 8014e66:	e76a      	b.n	8014d3e <_dtoa_r+0x116>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e7b2      	b.n	8014dd2 <_dtoa_r+0x1aa>
 8014e6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e6e:	e7b1      	b.n	8014dd4 <_dtoa_r+0x1ac>
 8014e70:	9b04      	ldr	r3, [sp, #16]
 8014e72:	9a00      	ldr	r2, [sp, #0]
 8014e74:	1a9b      	subs	r3, r3, r2
 8014e76:	9304      	str	r3, [sp, #16]
 8014e78:	4253      	negs	r3, r2
 8014e7a:	9307      	str	r3, [sp, #28]
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8014e80:	e7bf      	b.n	8014e02 <_dtoa_r+0x1da>
 8014e82:	2300      	movs	r3, #0
 8014e84:	9308      	str	r3, [sp, #32]
 8014e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	dc55      	bgt.n	8014f38 <_dtoa_r+0x310>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014e92:	461a      	mov	r2, r3
 8014e94:	9209      	str	r2, [sp, #36]	; 0x24
 8014e96:	e00c      	b.n	8014eb2 <_dtoa_r+0x28a>
 8014e98:	2301      	movs	r3, #1
 8014e9a:	e7f3      	b.n	8014e84 <_dtoa_r+0x25c>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ea0:	9308      	str	r3, [sp, #32]
 8014ea2:	9b00      	ldr	r3, [sp, #0]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	9302      	str	r3, [sp, #8]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	2b01      	cmp	r3, #1
 8014eac:	9303      	str	r3, [sp, #12]
 8014eae:	bfb8      	it	lt
 8014eb0:	2301      	movlt	r3, #1
 8014eb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	6042      	str	r2, [r0, #4]
 8014eb8:	2204      	movs	r2, #4
 8014eba:	f102 0614 	add.w	r6, r2, #20
 8014ebe:	429e      	cmp	r6, r3
 8014ec0:	6841      	ldr	r1, [r0, #4]
 8014ec2:	d93d      	bls.n	8014f40 <_dtoa_r+0x318>
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f000 fdef 	bl	8015aa8 <_Balloc>
 8014eca:	9001      	str	r0, [sp, #4]
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d13b      	bne.n	8014f48 <_dtoa_r+0x320>
 8014ed0:	4b11      	ldr	r3, [pc, #68]	; (8014f18 <_dtoa_r+0x2f0>)
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014ed8:	e6c0      	b.n	8014c5c <_dtoa_r+0x34>
 8014eda:	2301      	movs	r3, #1
 8014edc:	e7df      	b.n	8014e9e <_dtoa_r+0x276>
 8014ede:	bf00      	nop
 8014ee0:	636f4361 	.word	0x636f4361
 8014ee4:	3fd287a7 	.word	0x3fd287a7
 8014ee8:	8b60c8b3 	.word	0x8b60c8b3
 8014eec:	3fc68a28 	.word	0x3fc68a28
 8014ef0:	509f79fb 	.word	0x509f79fb
 8014ef4:	3fd34413 	.word	0x3fd34413
 8014ef8:	08018605 	.word	0x08018605
 8014efc:	08018686 	.word	0x08018686
 8014f00:	7ff00000 	.word	0x7ff00000
 8014f04:	08018682 	.word	0x08018682
 8014f08:	08018679 	.word	0x08018679
 8014f0c:	080185e2 	.word	0x080185e2
 8014f10:	3ff80000 	.word	0x3ff80000
 8014f14:	08018778 	.word	0x08018778
 8014f18:	080186e1 	.word	0x080186e1
 8014f1c:	2501      	movs	r5, #1
 8014f1e:	2300      	movs	r3, #0
 8014f20:	9306      	str	r3, [sp, #24]
 8014f22:	9508      	str	r5, [sp, #32]
 8014f24:	f04f 33ff 	mov.w	r3, #4294967295
 8014f28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	2312      	movs	r3, #18
 8014f30:	e7b0      	b.n	8014e94 <_dtoa_r+0x26c>
 8014f32:	2301      	movs	r3, #1
 8014f34:	9308      	str	r3, [sp, #32]
 8014f36:	e7f5      	b.n	8014f24 <_dtoa_r+0x2fc>
 8014f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014f3e:	e7b8      	b.n	8014eb2 <_dtoa_r+0x28a>
 8014f40:	3101      	adds	r1, #1
 8014f42:	6041      	str	r1, [r0, #4]
 8014f44:	0052      	lsls	r2, r2, #1
 8014f46:	e7b8      	b.n	8014eba <_dtoa_r+0x292>
 8014f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f4a:	9a01      	ldr	r2, [sp, #4]
 8014f4c:	601a      	str	r2, [r3, #0]
 8014f4e:	9b03      	ldr	r3, [sp, #12]
 8014f50:	2b0e      	cmp	r3, #14
 8014f52:	f200 809d 	bhi.w	8015090 <_dtoa_r+0x468>
 8014f56:	2d00      	cmp	r5, #0
 8014f58:	f000 809a 	beq.w	8015090 <_dtoa_r+0x468>
 8014f5c:	9b00      	ldr	r3, [sp, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	dd32      	ble.n	8014fc8 <_dtoa_r+0x3a0>
 8014f62:	4ab7      	ldr	r2, [pc, #732]	; (8015240 <_dtoa_r+0x618>)
 8014f64:	f003 030f 	and.w	r3, r3, #15
 8014f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014f6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014f70:	9b00      	ldr	r3, [sp, #0]
 8014f72:	05d8      	lsls	r0, r3, #23
 8014f74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014f78:	d516      	bpl.n	8014fa8 <_dtoa_r+0x380>
 8014f7a:	4bb2      	ldr	r3, [pc, #712]	; (8015244 <_dtoa_r+0x61c>)
 8014f7c:	ec51 0b19 	vmov	r0, r1, d9
 8014f80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014f84:	f7eb fc62 	bl	800084c <__aeabi_ddiv>
 8014f88:	f007 070f 	and.w	r7, r7, #15
 8014f8c:	4682      	mov	sl, r0
 8014f8e:	468b      	mov	fp, r1
 8014f90:	2503      	movs	r5, #3
 8014f92:	4eac      	ldr	r6, [pc, #688]	; (8015244 <_dtoa_r+0x61c>)
 8014f94:	b957      	cbnz	r7, 8014fac <_dtoa_r+0x384>
 8014f96:	4642      	mov	r2, r8
 8014f98:	464b      	mov	r3, r9
 8014f9a:	4650      	mov	r0, sl
 8014f9c:	4659      	mov	r1, fp
 8014f9e:	f7eb fc55 	bl	800084c <__aeabi_ddiv>
 8014fa2:	4682      	mov	sl, r0
 8014fa4:	468b      	mov	fp, r1
 8014fa6:	e028      	b.n	8014ffa <_dtoa_r+0x3d2>
 8014fa8:	2502      	movs	r5, #2
 8014faa:	e7f2      	b.n	8014f92 <_dtoa_r+0x36a>
 8014fac:	07f9      	lsls	r1, r7, #31
 8014fae:	d508      	bpl.n	8014fc2 <_dtoa_r+0x39a>
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	4649      	mov	r1, r9
 8014fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014fb8:	f7eb fb1e 	bl	80005f8 <__aeabi_dmul>
 8014fbc:	3501      	adds	r5, #1
 8014fbe:	4680      	mov	r8, r0
 8014fc0:	4689      	mov	r9, r1
 8014fc2:	107f      	asrs	r7, r7, #1
 8014fc4:	3608      	adds	r6, #8
 8014fc6:	e7e5      	b.n	8014f94 <_dtoa_r+0x36c>
 8014fc8:	f000 809b 	beq.w	8015102 <_dtoa_r+0x4da>
 8014fcc:	9b00      	ldr	r3, [sp, #0]
 8014fce:	4f9d      	ldr	r7, [pc, #628]	; (8015244 <_dtoa_r+0x61c>)
 8014fd0:	425e      	negs	r6, r3
 8014fd2:	4b9b      	ldr	r3, [pc, #620]	; (8015240 <_dtoa_r+0x618>)
 8014fd4:	f006 020f 	and.w	r2, r6, #15
 8014fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe0:	ec51 0b19 	vmov	r0, r1, d9
 8014fe4:	f7eb fb08 	bl	80005f8 <__aeabi_dmul>
 8014fe8:	1136      	asrs	r6, r6, #4
 8014fea:	4682      	mov	sl, r0
 8014fec:	468b      	mov	fp, r1
 8014fee:	2300      	movs	r3, #0
 8014ff0:	2502      	movs	r5, #2
 8014ff2:	2e00      	cmp	r6, #0
 8014ff4:	d17a      	bne.n	80150ec <_dtoa_r+0x4c4>
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d1d3      	bne.n	8014fa2 <_dtoa_r+0x37a>
 8014ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f000 8082 	beq.w	8015106 <_dtoa_r+0x4de>
 8015002:	4b91      	ldr	r3, [pc, #580]	; (8015248 <_dtoa_r+0x620>)
 8015004:	2200      	movs	r2, #0
 8015006:	4650      	mov	r0, sl
 8015008:	4659      	mov	r1, fp
 801500a:	f7eb fd67 	bl	8000adc <__aeabi_dcmplt>
 801500e:	2800      	cmp	r0, #0
 8015010:	d079      	beq.n	8015106 <_dtoa_r+0x4de>
 8015012:	9b03      	ldr	r3, [sp, #12]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d076      	beq.n	8015106 <_dtoa_r+0x4de>
 8015018:	9b02      	ldr	r3, [sp, #8]
 801501a:	2b00      	cmp	r3, #0
 801501c:	dd36      	ble.n	801508c <_dtoa_r+0x464>
 801501e:	9b00      	ldr	r3, [sp, #0]
 8015020:	4650      	mov	r0, sl
 8015022:	4659      	mov	r1, fp
 8015024:	1e5f      	subs	r7, r3, #1
 8015026:	2200      	movs	r2, #0
 8015028:	4b88      	ldr	r3, [pc, #544]	; (801524c <_dtoa_r+0x624>)
 801502a:	f7eb fae5 	bl	80005f8 <__aeabi_dmul>
 801502e:	9e02      	ldr	r6, [sp, #8]
 8015030:	4682      	mov	sl, r0
 8015032:	468b      	mov	fp, r1
 8015034:	3501      	adds	r5, #1
 8015036:	4628      	mov	r0, r5
 8015038:	f7eb fa74 	bl	8000524 <__aeabi_i2d>
 801503c:	4652      	mov	r2, sl
 801503e:	465b      	mov	r3, fp
 8015040:	f7eb fada 	bl	80005f8 <__aeabi_dmul>
 8015044:	4b82      	ldr	r3, [pc, #520]	; (8015250 <_dtoa_r+0x628>)
 8015046:	2200      	movs	r2, #0
 8015048:	f7eb f920 	bl	800028c <__adddf3>
 801504c:	46d0      	mov	r8, sl
 801504e:	46d9      	mov	r9, fp
 8015050:	4682      	mov	sl, r0
 8015052:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015056:	2e00      	cmp	r6, #0
 8015058:	d158      	bne.n	801510c <_dtoa_r+0x4e4>
 801505a:	4b7e      	ldr	r3, [pc, #504]	; (8015254 <_dtoa_r+0x62c>)
 801505c:	2200      	movs	r2, #0
 801505e:	4640      	mov	r0, r8
 8015060:	4649      	mov	r1, r9
 8015062:	f7eb f911 	bl	8000288 <__aeabi_dsub>
 8015066:	4652      	mov	r2, sl
 8015068:	465b      	mov	r3, fp
 801506a:	4680      	mov	r8, r0
 801506c:	4689      	mov	r9, r1
 801506e:	f7eb fd53 	bl	8000b18 <__aeabi_dcmpgt>
 8015072:	2800      	cmp	r0, #0
 8015074:	f040 8295 	bne.w	80155a2 <_dtoa_r+0x97a>
 8015078:	4652      	mov	r2, sl
 801507a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801507e:	4640      	mov	r0, r8
 8015080:	4649      	mov	r1, r9
 8015082:	f7eb fd2b 	bl	8000adc <__aeabi_dcmplt>
 8015086:	2800      	cmp	r0, #0
 8015088:	f040 8289 	bne.w	801559e <_dtoa_r+0x976>
 801508c:	ec5b ab19 	vmov	sl, fp, d9
 8015090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015092:	2b00      	cmp	r3, #0
 8015094:	f2c0 8148 	blt.w	8015328 <_dtoa_r+0x700>
 8015098:	9a00      	ldr	r2, [sp, #0]
 801509a:	2a0e      	cmp	r2, #14
 801509c:	f300 8144 	bgt.w	8015328 <_dtoa_r+0x700>
 80150a0:	4b67      	ldr	r3, [pc, #412]	; (8015240 <_dtoa_r+0x618>)
 80150a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80150aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	f280 80d5 	bge.w	801525c <_dtoa_r+0x634>
 80150b2:	9b03      	ldr	r3, [sp, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f300 80d1 	bgt.w	801525c <_dtoa_r+0x634>
 80150ba:	f040 826f 	bne.w	801559c <_dtoa_r+0x974>
 80150be:	4b65      	ldr	r3, [pc, #404]	; (8015254 <_dtoa_r+0x62c>)
 80150c0:	2200      	movs	r2, #0
 80150c2:	4640      	mov	r0, r8
 80150c4:	4649      	mov	r1, r9
 80150c6:	f7eb fa97 	bl	80005f8 <__aeabi_dmul>
 80150ca:	4652      	mov	r2, sl
 80150cc:	465b      	mov	r3, fp
 80150ce:	f7eb fd19 	bl	8000b04 <__aeabi_dcmpge>
 80150d2:	9e03      	ldr	r6, [sp, #12]
 80150d4:	4637      	mov	r7, r6
 80150d6:	2800      	cmp	r0, #0
 80150d8:	f040 8245 	bne.w	8015566 <_dtoa_r+0x93e>
 80150dc:	9d01      	ldr	r5, [sp, #4]
 80150de:	2331      	movs	r3, #49	; 0x31
 80150e0:	f805 3b01 	strb.w	r3, [r5], #1
 80150e4:	9b00      	ldr	r3, [sp, #0]
 80150e6:	3301      	adds	r3, #1
 80150e8:	9300      	str	r3, [sp, #0]
 80150ea:	e240      	b.n	801556e <_dtoa_r+0x946>
 80150ec:	07f2      	lsls	r2, r6, #31
 80150ee:	d505      	bpl.n	80150fc <_dtoa_r+0x4d4>
 80150f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150f4:	f7eb fa80 	bl	80005f8 <__aeabi_dmul>
 80150f8:	3501      	adds	r5, #1
 80150fa:	2301      	movs	r3, #1
 80150fc:	1076      	asrs	r6, r6, #1
 80150fe:	3708      	adds	r7, #8
 8015100:	e777      	b.n	8014ff2 <_dtoa_r+0x3ca>
 8015102:	2502      	movs	r5, #2
 8015104:	e779      	b.n	8014ffa <_dtoa_r+0x3d2>
 8015106:	9f00      	ldr	r7, [sp, #0]
 8015108:	9e03      	ldr	r6, [sp, #12]
 801510a:	e794      	b.n	8015036 <_dtoa_r+0x40e>
 801510c:	9901      	ldr	r1, [sp, #4]
 801510e:	4b4c      	ldr	r3, [pc, #304]	; (8015240 <_dtoa_r+0x618>)
 8015110:	4431      	add	r1, r6
 8015112:	910d      	str	r1, [sp, #52]	; 0x34
 8015114:	9908      	ldr	r1, [sp, #32]
 8015116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801511a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801511e:	2900      	cmp	r1, #0
 8015120:	d043      	beq.n	80151aa <_dtoa_r+0x582>
 8015122:	494d      	ldr	r1, [pc, #308]	; (8015258 <_dtoa_r+0x630>)
 8015124:	2000      	movs	r0, #0
 8015126:	f7eb fb91 	bl	800084c <__aeabi_ddiv>
 801512a:	4652      	mov	r2, sl
 801512c:	465b      	mov	r3, fp
 801512e:	f7eb f8ab 	bl	8000288 <__aeabi_dsub>
 8015132:	9d01      	ldr	r5, [sp, #4]
 8015134:	4682      	mov	sl, r0
 8015136:	468b      	mov	fp, r1
 8015138:	4649      	mov	r1, r9
 801513a:	4640      	mov	r0, r8
 801513c:	f7eb fd0c 	bl	8000b58 <__aeabi_d2iz>
 8015140:	4606      	mov	r6, r0
 8015142:	f7eb f9ef 	bl	8000524 <__aeabi_i2d>
 8015146:	4602      	mov	r2, r0
 8015148:	460b      	mov	r3, r1
 801514a:	4640      	mov	r0, r8
 801514c:	4649      	mov	r1, r9
 801514e:	f7eb f89b 	bl	8000288 <__aeabi_dsub>
 8015152:	3630      	adds	r6, #48	; 0x30
 8015154:	f805 6b01 	strb.w	r6, [r5], #1
 8015158:	4652      	mov	r2, sl
 801515a:	465b      	mov	r3, fp
 801515c:	4680      	mov	r8, r0
 801515e:	4689      	mov	r9, r1
 8015160:	f7eb fcbc 	bl	8000adc <__aeabi_dcmplt>
 8015164:	2800      	cmp	r0, #0
 8015166:	d163      	bne.n	8015230 <_dtoa_r+0x608>
 8015168:	4642      	mov	r2, r8
 801516a:	464b      	mov	r3, r9
 801516c:	4936      	ldr	r1, [pc, #216]	; (8015248 <_dtoa_r+0x620>)
 801516e:	2000      	movs	r0, #0
 8015170:	f7eb f88a 	bl	8000288 <__aeabi_dsub>
 8015174:	4652      	mov	r2, sl
 8015176:	465b      	mov	r3, fp
 8015178:	f7eb fcb0 	bl	8000adc <__aeabi_dcmplt>
 801517c:	2800      	cmp	r0, #0
 801517e:	f040 80b5 	bne.w	80152ec <_dtoa_r+0x6c4>
 8015182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015184:	429d      	cmp	r5, r3
 8015186:	d081      	beq.n	801508c <_dtoa_r+0x464>
 8015188:	4b30      	ldr	r3, [pc, #192]	; (801524c <_dtoa_r+0x624>)
 801518a:	2200      	movs	r2, #0
 801518c:	4650      	mov	r0, sl
 801518e:	4659      	mov	r1, fp
 8015190:	f7eb fa32 	bl	80005f8 <__aeabi_dmul>
 8015194:	4b2d      	ldr	r3, [pc, #180]	; (801524c <_dtoa_r+0x624>)
 8015196:	4682      	mov	sl, r0
 8015198:	468b      	mov	fp, r1
 801519a:	4640      	mov	r0, r8
 801519c:	4649      	mov	r1, r9
 801519e:	2200      	movs	r2, #0
 80151a0:	f7eb fa2a 	bl	80005f8 <__aeabi_dmul>
 80151a4:	4680      	mov	r8, r0
 80151a6:	4689      	mov	r9, r1
 80151a8:	e7c6      	b.n	8015138 <_dtoa_r+0x510>
 80151aa:	4650      	mov	r0, sl
 80151ac:	4659      	mov	r1, fp
 80151ae:	f7eb fa23 	bl	80005f8 <__aeabi_dmul>
 80151b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151b4:	9d01      	ldr	r5, [sp, #4]
 80151b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80151b8:	4682      	mov	sl, r0
 80151ba:	468b      	mov	fp, r1
 80151bc:	4649      	mov	r1, r9
 80151be:	4640      	mov	r0, r8
 80151c0:	f7eb fcca 	bl	8000b58 <__aeabi_d2iz>
 80151c4:	4606      	mov	r6, r0
 80151c6:	f7eb f9ad 	bl	8000524 <__aeabi_i2d>
 80151ca:	3630      	adds	r6, #48	; 0x30
 80151cc:	4602      	mov	r2, r0
 80151ce:	460b      	mov	r3, r1
 80151d0:	4640      	mov	r0, r8
 80151d2:	4649      	mov	r1, r9
 80151d4:	f7eb f858 	bl	8000288 <__aeabi_dsub>
 80151d8:	f805 6b01 	strb.w	r6, [r5], #1
 80151dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151de:	429d      	cmp	r5, r3
 80151e0:	4680      	mov	r8, r0
 80151e2:	4689      	mov	r9, r1
 80151e4:	f04f 0200 	mov.w	r2, #0
 80151e8:	d124      	bne.n	8015234 <_dtoa_r+0x60c>
 80151ea:	4b1b      	ldr	r3, [pc, #108]	; (8015258 <_dtoa_r+0x630>)
 80151ec:	4650      	mov	r0, sl
 80151ee:	4659      	mov	r1, fp
 80151f0:	f7eb f84c 	bl	800028c <__adddf3>
 80151f4:	4602      	mov	r2, r0
 80151f6:	460b      	mov	r3, r1
 80151f8:	4640      	mov	r0, r8
 80151fa:	4649      	mov	r1, r9
 80151fc:	f7eb fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 8015200:	2800      	cmp	r0, #0
 8015202:	d173      	bne.n	80152ec <_dtoa_r+0x6c4>
 8015204:	4652      	mov	r2, sl
 8015206:	465b      	mov	r3, fp
 8015208:	4913      	ldr	r1, [pc, #76]	; (8015258 <_dtoa_r+0x630>)
 801520a:	2000      	movs	r0, #0
 801520c:	f7eb f83c 	bl	8000288 <__aeabi_dsub>
 8015210:	4602      	mov	r2, r0
 8015212:	460b      	mov	r3, r1
 8015214:	4640      	mov	r0, r8
 8015216:	4649      	mov	r1, r9
 8015218:	f7eb fc60 	bl	8000adc <__aeabi_dcmplt>
 801521c:	2800      	cmp	r0, #0
 801521e:	f43f af35 	beq.w	801508c <_dtoa_r+0x464>
 8015222:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015224:	1e6b      	subs	r3, r5, #1
 8015226:	930f      	str	r3, [sp, #60]	; 0x3c
 8015228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801522c:	2b30      	cmp	r3, #48	; 0x30
 801522e:	d0f8      	beq.n	8015222 <_dtoa_r+0x5fa>
 8015230:	9700      	str	r7, [sp, #0]
 8015232:	e049      	b.n	80152c8 <_dtoa_r+0x6a0>
 8015234:	4b05      	ldr	r3, [pc, #20]	; (801524c <_dtoa_r+0x624>)
 8015236:	f7eb f9df 	bl	80005f8 <__aeabi_dmul>
 801523a:	4680      	mov	r8, r0
 801523c:	4689      	mov	r9, r1
 801523e:	e7bd      	b.n	80151bc <_dtoa_r+0x594>
 8015240:	08018778 	.word	0x08018778
 8015244:	08018750 	.word	0x08018750
 8015248:	3ff00000 	.word	0x3ff00000
 801524c:	40240000 	.word	0x40240000
 8015250:	401c0000 	.word	0x401c0000
 8015254:	40140000 	.word	0x40140000
 8015258:	3fe00000 	.word	0x3fe00000
 801525c:	9d01      	ldr	r5, [sp, #4]
 801525e:	4656      	mov	r6, sl
 8015260:	465f      	mov	r7, fp
 8015262:	4642      	mov	r2, r8
 8015264:	464b      	mov	r3, r9
 8015266:	4630      	mov	r0, r6
 8015268:	4639      	mov	r1, r7
 801526a:	f7eb faef 	bl	800084c <__aeabi_ddiv>
 801526e:	f7eb fc73 	bl	8000b58 <__aeabi_d2iz>
 8015272:	4682      	mov	sl, r0
 8015274:	f7eb f956 	bl	8000524 <__aeabi_i2d>
 8015278:	4642      	mov	r2, r8
 801527a:	464b      	mov	r3, r9
 801527c:	f7eb f9bc 	bl	80005f8 <__aeabi_dmul>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	4630      	mov	r0, r6
 8015286:	4639      	mov	r1, r7
 8015288:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801528c:	f7ea fffc 	bl	8000288 <__aeabi_dsub>
 8015290:	f805 6b01 	strb.w	r6, [r5], #1
 8015294:	9e01      	ldr	r6, [sp, #4]
 8015296:	9f03      	ldr	r7, [sp, #12]
 8015298:	1bae      	subs	r6, r5, r6
 801529a:	42b7      	cmp	r7, r6
 801529c:	4602      	mov	r2, r0
 801529e:	460b      	mov	r3, r1
 80152a0:	d135      	bne.n	801530e <_dtoa_r+0x6e6>
 80152a2:	f7ea fff3 	bl	800028c <__adddf3>
 80152a6:	4642      	mov	r2, r8
 80152a8:	464b      	mov	r3, r9
 80152aa:	4606      	mov	r6, r0
 80152ac:	460f      	mov	r7, r1
 80152ae:	f7eb fc33 	bl	8000b18 <__aeabi_dcmpgt>
 80152b2:	b9d0      	cbnz	r0, 80152ea <_dtoa_r+0x6c2>
 80152b4:	4642      	mov	r2, r8
 80152b6:	464b      	mov	r3, r9
 80152b8:	4630      	mov	r0, r6
 80152ba:	4639      	mov	r1, r7
 80152bc:	f7eb fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80152c0:	b110      	cbz	r0, 80152c8 <_dtoa_r+0x6a0>
 80152c2:	f01a 0f01 	tst.w	sl, #1
 80152c6:	d110      	bne.n	80152ea <_dtoa_r+0x6c2>
 80152c8:	4620      	mov	r0, r4
 80152ca:	ee18 1a10 	vmov	r1, s16
 80152ce:	f000 fc2b 	bl	8015b28 <_Bfree>
 80152d2:	2300      	movs	r3, #0
 80152d4:	9800      	ldr	r0, [sp, #0]
 80152d6:	702b      	strb	r3, [r5, #0]
 80152d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152da:	3001      	adds	r0, #1
 80152dc:	6018      	str	r0, [r3, #0]
 80152de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	f43f acf1 	beq.w	8014cc8 <_dtoa_r+0xa0>
 80152e6:	601d      	str	r5, [r3, #0]
 80152e8:	e4ee      	b.n	8014cc8 <_dtoa_r+0xa0>
 80152ea:	9f00      	ldr	r7, [sp, #0]
 80152ec:	462b      	mov	r3, r5
 80152ee:	461d      	mov	r5, r3
 80152f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80152f4:	2a39      	cmp	r2, #57	; 0x39
 80152f6:	d106      	bne.n	8015306 <_dtoa_r+0x6de>
 80152f8:	9a01      	ldr	r2, [sp, #4]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d1f7      	bne.n	80152ee <_dtoa_r+0x6c6>
 80152fe:	9901      	ldr	r1, [sp, #4]
 8015300:	2230      	movs	r2, #48	; 0x30
 8015302:	3701      	adds	r7, #1
 8015304:	700a      	strb	r2, [r1, #0]
 8015306:	781a      	ldrb	r2, [r3, #0]
 8015308:	3201      	adds	r2, #1
 801530a:	701a      	strb	r2, [r3, #0]
 801530c:	e790      	b.n	8015230 <_dtoa_r+0x608>
 801530e:	4ba6      	ldr	r3, [pc, #664]	; (80155a8 <_dtoa_r+0x980>)
 8015310:	2200      	movs	r2, #0
 8015312:	f7eb f971 	bl	80005f8 <__aeabi_dmul>
 8015316:	2200      	movs	r2, #0
 8015318:	2300      	movs	r3, #0
 801531a:	4606      	mov	r6, r0
 801531c:	460f      	mov	r7, r1
 801531e:	f7eb fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015322:	2800      	cmp	r0, #0
 8015324:	d09d      	beq.n	8015262 <_dtoa_r+0x63a>
 8015326:	e7cf      	b.n	80152c8 <_dtoa_r+0x6a0>
 8015328:	9a08      	ldr	r2, [sp, #32]
 801532a:	2a00      	cmp	r2, #0
 801532c:	f000 80d7 	beq.w	80154de <_dtoa_r+0x8b6>
 8015330:	9a06      	ldr	r2, [sp, #24]
 8015332:	2a01      	cmp	r2, #1
 8015334:	f300 80ba 	bgt.w	80154ac <_dtoa_r+0x884>
 8015338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801533a:	2a00      	cmp	r2, #0
 801533c:	f000 80b2 	beq.w	80154a4 <_dtoa_r+0x87c>
 8015340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015344:	9e07      	ldr	r6, [sp, #28]
 8015346:	9d04      	ldr	r5, [sp, #16]
 8015348:	9a04      	ldr	r2, [sp, #16]
 801534a:	441a      	add	r2, r3
 801534c:	9204      	str	r2, [sp, #16]
 801534e:	9a05      	ldr	r2, [sp, #20]
 8015350:	2101      	movs	r1, #1
 8015352:	441a      	add	r2, r3
 8015354:	4620      	mov	r0, r4
 8015356:	9205      	str	r2, [sp, #20]
 8015358:	f000 fc9e 	bl	8015c98 <__i2b>
 801535c:	4607      	mov	r7, r0
 801535e:	2d00      	cmp	r5, #0
 8015360:	dd0c      	ble.n	801537c <_dtoa_r+0x754>
 8015362:	9b05      	ldr	r3, [sp, #20]
 8015364:	2b00      	cmp	r3, #0
 8015366:	dd09      	ble.n	801537c <_dtoa_r+0x754>
 8015368:	42ab      	cmp	r3, r5
 801536a:	9a04      	ldr	r2, [sp, #16]
 801536c:	bfa8      	it	ge
 801536e:	462b      	movge	r3, r5
 8015370:	1ad2      	subs	r2, r2, r3
 8015372:	9204      	str	r2, [sp, #16]
 8015374:	9a05      	ldr	r2, [sp, #20]
 8015376:	1aed      	subs	r5, r5, r3
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	9305      	str	r3, [sp, #20]
 801537c:	9b07      	ldr	r3, [sp, #28]
 801537e:	b31b      	cbz	r3, 80153c8 <_dtoa_r+0x7a0>
 8015380:	9b08      	ldr	r3, [sp, #32]
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 80af 	beq.w	80154e6 <_dtoa_r+0x8be>
 8015388:	2e00      	cmp	r6, #0
 801538a:	dd13      	ble.n	80153b4 <_dtoa_r+0x78c>
 801538c:	4639      	mov	r1, r7
 801538e:	4632      	mov	r2, r6
 8015390:	4620      	mov	r0, r4
 8015392:	f000 fd41 	bl	8015e18 <__pow5mult>
 8015396:	ee18 2a10 	vmov	r2, s16
 801539a:	4601      	mov	r1, r0
 801539c:	4607      	mov	r7, r0
 801539e:	4620      	mov	r0, r4
 80153a0:	f000 fc90 	bl	8015cc4 <__multiply>
 80153a4:	ee18 1a10 	vmov	r1, s16
 80153a8:	4680      	mov	r8, r0
 80153aa:	4620      	mov	r0, r4
 80153ac:	f000 fbbc 	bl	8015b28 <_Bfree>
 80153b0:	ee08 8a10 	vmov	s16, r8
 80153b4:	9b07      	ldr	r3, [sp, #28]
 80153b6:	1b9a      	subs	r2, r3, r6
 80153b8:	d006      	beq.n	80153c8 <_dtoa_r+0x7a0>
 80153ba:	ee18 1a10 	vmov	r1, s16
 80153be:	4620      	mov	r0, r4
 80153c0:	f000 fd2a 	bl	8015e18 <__pow5mult>
 80153c4:	ee08 0a10 	vmov	s16, r0
 80153c8:	2101      	movs	r1, #1
 80153ca:	4620      	mov	r0, r4
 80153cc:	f000 fc64 	bl	8015c98 <__i2b>
 80153d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	4606      	mov	r6, r0
 80153d6:	f340 8088 	ble.w	80154ea <_dtoa_r+0x8c2>
 80153da:	461a      	mov	r2, r3
 80153dc:	4601      	mov	r1, r0
 80153de:	4620      	mov	r0, r4
 80153e0:	f000 fd1a 	bl	8015e18 <__pow5mult>
 80153e4:	9b06      	ldr	r3, [sp, #24]
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	4606      	mov	r6, r0
 80153ea:	f340 8081 	ble.w	80154f0 <_dtoa_r+0x8c8>
 80153ee:	f04f 0800 	mov.w	r8, #0
 80153f2:	6933      	ldr	r3, [r6, #16]
 80153f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80153f8:	6918      	ldr	r0, [r3, #16]
 80153fa:	f000 fbfd 	bl	8015bf8 <__hi0bits>
 80153fe:	f1c0 0020 	rsb	r0, r0, #32
 8015402:	9b05      	ldr	r3, [sp, #20]
 8015404:	4418      	add	r0, r3
 8015406:	f010 001f 	ands.w	r0, r0, #31
 801540a:	f000 8092 	beq.w	8015532 <_dtoa_r+0x90a>
 801540e:	f1c0 0320 	rsb	r3, r0, #32
 8015412:	2b04      	cmp	r3, #4
 8015414:	f340 808a 	ble.w	801552c <_dtoa_r+0x904>
 8015418:	f1c0 001c 	rsb	r0, r0, #28
 801541c:	9b04      	ldr	r3, [sp, #16]
 801541e:	4403      	add	r3, r0
 8015420:	9304      	str	r3, [sp, #16]
 8015422:	9b05      	ldr	r3, [sp, #20]
 8015424:	4403      	add	r3, r0
 8015426:	4405      	add	r5, r0
 8015428:	9305      	str	r3, [sp, #20]
 801542a:	9b04      	ldr	r3, [sp, #16]
 801542c:	2b00      	cmp	r3, #0
 801542e:	dd07      	ble.n	8015440 <_dtoa_r+0x818>
 8015430:	ee18 1a10 	vmov	r1, s16
 8015434:	461a      	mov	r2, r3
 8015436:	4620      	mov	r0, r4
 8015438:	f000 fd48 	bl	8015ecc <__lshift>
 801543c:	ee08 0a10 	vmov	s16, r0
 8015440:	9b05      	ldr	r3, [sp, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	dd05      	ble.n	8015452 <_dtoa_r+0x82a>
 8015446:	4631      	mov	r1, r6
 8015448:	461a      	mov	r2, r3
 801544a:	4620      	mov	r0, r4
 801544c:	f000 fd3e 	bl	8015ecc <__lshift>
 8015450:	4606      	mov	r6, r0
 8015452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015454:	2b00      	cmp	r3, #0
 8015456:	d06e      	beq.n	8015536 <_dtoa_r+0x90e>
 8015458:	ee18 0a10 	vmov	r0, s16
 801545c:	4631      	mov	r1, r6
 801545e:	f000 fda5 	bl	8015fac <__mcmp>
 8015462:	2800      	cmp	r0, #0
 8015464:	da67      	bge.n	8015536 <_dtoa_r+0x90e>
 8015466:	9b00      	ldr	r3, [sp, #0]
 8015468:	3b01      	subs	r3, #1
 801546a:	ee18 1a10 	vmov	r1, s16
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	220a      	movs	r2, #10
 8015472:	2300      	movs	r3, #0
 8015474:	4620      	mov	r0, r4
 8015476:	f000 fb79 	bl	8015b6c <__multadd>
 801547a:	9b08      	ldr	r3, [sp, #32]
 801547c:	ee08 0a10 	vmov	s16, r0
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 81b1 	beq.w	80157e8 <_dtoa_r+0xbc0>
 8015486:	2300      	movs	r3, #0
 8015488:	4639      	mov	r1, r7
 801548a:	220a      	movs	r2, #10
 801548c:	4620      	mov	r0, r4
 801548e:	f000 fb6d 	bl	8015b6c <__multadd>
 8015492:	9b02      	ldr	r3, [sp, #8]
 8015494:	2b00      	cmp	r3, #0
 8015496:	4607      	mov	r7, r0
 8015498:	f300 808e 	bgt.w	80155b8 <_dtoa_r+0x990>
 801549c:	9b06      	ldr	r3, [sp, #24]
 801549e:	2b02      	cmp	r3, #2
 80154a0:	dc51      	bgt.n	8015546 <_dtoa_r+0x91e>
 80154a2:	e089      	b.n	80155b8 <_dtoa_r+0x990>
 80154a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80154aa:	e74b      	b.n	8015344 <_dtoa_r+0x71c>
 80154ac:	9b03      	ldr	r3, [sp, #12]
 80154ae:	1e5e      	subs	r6, r3, #1
 80154b0:	9b07      	ldr	r3, [sp, #28]
 80154b2:	42b3      	cmp	r3, r6
 80154b4:	bfbf      	itttt	lt
 80154b6:	9b07      	ldrlt	r3, [sp, #28]
 80154b8:	9607      	strlt	r6, [sp, #28]
 80154ba:	1af2      	sublt	r2, r6, r3
 80154bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80154be:	bfb6      	itet	lt
 80154c0:	189b      	addlt	r3, r3, r2
 80154c2:	1b9e      	subge	r6, r3, r6
 80154c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80154c6:	9b03      	ldr	r3, [sp, #12]
 80154c8:	bfb8      	it	lt
 80154ca:	2600      	movlt	r6, #0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	bfb7      	itett	lt
 80154d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80154d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80154d8:	1a9d      	sublt	r5, r3, r2
 80154da:	2300      	movlt	r3, #0
 80154dc:	e734      	b.n	8015348 <_dtoa_r+0x720>
 80154de:	9e07      	ldr	r6, [sp, #28]
 80154e0:	9d04      	ldr	r5, [sp, #16]
 80154e2:	9f08      	ldr	r7, [sp, #32]
 80154e4:	e73b      	b.n	801535e <_dtoa_r+0x736>
 80154e6:	9a07      	ldr	r2, [sp, #28]
 80154e8:	e767      	b.n	80153ba <_dtoa_r+0x792>
 80154ea:	9b06      	ldr	r3, [sp, #24]
 80154ec:	2b01      	cmp	r3, #1
 80154ee:	dc18      	bgt.n	8015522 <_dtoa_r+0x8fa>
 80154f0:	f1ba 0f00 	cmp.w	sl, #0
 80154f4:	d115      	bne.n	8015522 <_dtoa_r+0x8fa>
 80154f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80154fa:	b993      	cbnz	r3, 8015522 <_dtoa_r+0x8fa>
 80154fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015500:	0d1b      	lsrs	r3, r3, #20
 8015502:	051b      	lsls	r3, r3, #20
 8015504:	b183      	cbz	r3, 8015528 <_dtoa_r+0x900>
 8015506:	9b04      	ldr	r3, [sp, #16]
 8015508:	3301      	adds	r3, #1
 801550a:	9304      	str	r3, [sp, #16]
 801550c:	9b05      	ldr	r3, [sp, #20]
 801550e:	3301      	adds	r3, #1
 8015510:	9305      	str	r3, [sp, #20]
 8015512:	f04f 0801 	mov.w	r8, #1
 8015516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015518:	2b00      	cmp	r3, #0
 801551a:	f47f af6a 	bne.w	80153f2 <_dtoa_r+0x7ca>
 801551e:	2001      	movs	r0, #1
 8015520:	e76f      	b.n	8015402 <_dtoa_r+0x7da>
 8015522:	f04f 0800 	mov.w	r8, #0
 8015526:	e7f6      	b.n	8015516 <_dtoa_r+0x8ee>
 8015528:	4698      	mov	r8, r3
 801552a:	e7f4      	b.n	8015516 <_dtoa_r+0x8ee>
 801552c:	f43f af7d 	beq.w	801542a <_dtoa_r+0x802>
 8015530:	4618      	mov	r0, r3
 8015532:	301c      	adds	r0, #28
 8015534:	e772      	b.n	801541c <_dtoa_r+0x7f4>
 8015536:	9b03      	ldr	r3, [sp, #12]
 8015538:	2b00      	cmp	r3, #0
 801553a:	dc37      	bgt.n	80155ac <_dtoa_r+0x984>
 801553c:	9b06      	ldr	r3, [sp, #24]
 801553e:	2b02      	cmp	r3, #2
 8015540:	dd34      	ble.n	80155ac <_dtoa_r+0x984>
 8015542:	9b03      	ldr	r3, [sp, #12]
 8015544:	9302      	str	r3, [sp, #8]
 8015546:	9b02      	ldr	r3, [sp, #8]
 8015548:	b96b      	cbnz	r3, 8015566 <_dtoa_r+0x93e>
 801554a:	4631      	mov	r1, r6
 801554c:	2205      	movs	r2, #5
 801554e:	4620      	mov	r0, r4
 8015550:	f000 fb0c 	bl	8015b6c <__multadd>
 8015554:	4601      	mov	r1, r0
 8015556:	4606      	mov	r6, r0
 8015558:	ee18 0a10 	vmov	r0, s16
 801555c:	f000 fd26 	bl	8015fac <__mcmp>
 8015560:	2800      	cmp	r0, #0
 8015562:	f73f adbb 	bgt.w	80150dc <_dtoa_r+0x4b4>
 8015566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015568:	9d01      	ldr	r5, [sp, #4]
 801556a:	43db      	mvns	r3, r3
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	f04f 0800 	mov.w	r8, #0
 8015572:	4631      	mov	r1, r6
 8015574:	4620      	mov	r0, r4
 8015576:	f000 fad7 	bl	8015b28 <_Bfree>
 801557a:	2f00      	cmp	r7, #0
 801557c:	f43f aea4 	beq.w	80152c8 <_dtoa_r+0x6a0>
 8015580:	f1b8 0f00 	cmp.w	r8, #0
 8015584:	d005      	beq.n	8015592 <_dtoa_r+0x96a>
 8015586:	45b8      	cmp	r8, r7
 8015588:	d003      	beq.n	8015592 <_dtoa_r+0x96a>
 801558a:	4641      	mov	r1, r8
 801558c:	4620      	mov	r0, r4
 801558e:	f000 facb 	bl	8015b28 <_Bfree>
 8015592:	4639      	mov	r1, r7
 8015594:	4620      	mov	r0, r4
 8015596:	f000 fac7 	bl	8015b28 <_Bfree>
 801559a:	e695      	b.n	80152c8 <_dtoa_r+0x6a0>
 801559c:	2600      	movs	r6, #0
 801559e:	4637      	mov	r7, r6
 80155a0:	e7e1      	b.n	8015566 <_dtoa_r+0x93e>
 80155a2:	9700      	str	r7, [sp, #0]
 80155a4:	4637      	mov	r7, r6
 80155a6:	e599      	b.n	80150dc <_dtoa_r+0x4b4>
 80155a8:	40240000 	.word	0x40240000
 80155ac:	9b08      	ldr	r3, [sp, #32]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f000 80ca 	beq.w	8015748 <_dtoa_r+0xb20>
 80155b4:	9b03      	ldr	r3, [sp, #12]
 80155b6:	9302      	str	r3, [sp, #8]
 80155b8:	2d00      	cmp	r5, #0
 80155ba:	dd05      	ble.n	80155c8 <_dtoa_r+0x9a0>
 80155bc:	4639      	mov	r1, r7
 80155be:	462a      	mov	r2, r5
 80155c0:	4620      	mov	r0, r4
 80155c2:	f000 fc83 	bl	8015ecc <__lshift>
 80155c6:	4607      	mov	r7, r0
 80155c8:	f1b8 0f00 	cmp.w	r8, #0
 80155cc:	d05b      	beq.n	8015686 <_dtoa_r+0xa5e>
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	4620      	mov	r0, r4
 80155d2:	f000 fa69 	bl	8015aa8 <_Balloc>
 80155d6:	4605      	mov	r5, r0
 80155d8:	b928      	cbnz	r0, 80155e6 <_dtoa_r+0x9be>
 80155da:	4b87      	ldr	r3, [pc, #540]	; (80157f8 <_dtoa_r+0xbd0>)
 80155dc:	4602      	mov	r2, r0
 80155de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80155e2:	f7ff bb3b 	b.w	8014c5c <_dtoa_r+0x34>
 80155e6:	693a      	ldr	r2, [r7, #16]
 80155e8:	3202      	adds	r2, #2
 80155ea:	0092      	lsls	r2, r2, #2
 80155ec:	f107 010c 	add.w	r1, r7, #12
 80155f0:	300c      	adds	r0, #12
 80155f2:	f7fe f8f6 	bl	80137e2 <memcpy>
 80155f6:	2201      	movs	r2, #1
 80155f8:	4629      	mov	r1, r5
 80155fa:	4620      	mov	r0, r4
 80155fc:	f000 fc66 	bl	8015ecc <__lshift>
 8015600:	9b01      	ldr	r3, [sp, #4]
 8015602:	f103 0901 	add.w	r9, r3, #1
 8015606:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801560a:	4413      	add	r3, r2
 801560c:	9305      	str	r3, [sp, #20]
 801560e:	f00a 0301 	and.w	r3, sl, #1
 8015612:	46b8      	mov	r8, r7
 8015614:	9304      	str	r3, [sp, #16]
 8015616:	4607      	mov	r7, r0
 8015618:	4631      	mov	r1, r6
 801561a:	ee18 0a10 	vmov	r0, s16
 801561e:	f7ff fa77 	bl	8014b10 <quorem>
 8015622:	4641      	mov	r1, r8
 8015624:	9002      	str	r0, [sp, #8]
 8015626:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801562a:	ee18 0a10 	vmov	r0, s16
 801562e:	f000 fcbd 	bl	8015fac <__mcmp>
 8015632:	463a      	mov	r2, r7
 8015634:	9003      	str	r0, [sp, #12]
 8015636:	4631      	mov	r1, r6
 8015638:	4620      	mov	r0, r4
 801563a:	f000 fcd3 	bl	8015fe4 <__mdiff>
 801563e:	68c2      	ldr	r2, [r0, #12]
 8015640:	f109 3bff 	add.w	fp, r9, #4294967295
 8015644:	4605      	mov	r5, r0
 8015646:	bb02      	cbnz	r2, 801568a <_dtoa_r+0xa62>
 8015648:	4601      	mov	r1, r0
 801564a:	ee18 0a10 	vmov	r0, s16
 801564e:	f000 fcad 	bl	8015fac <__mcmp>
 8015652:	4602      	mov	r2, r0
 8015654:	4629      	mov	r1, r5
 8015656:	4620      	mov	r0, r4
 8015658:	9207      	str	r2, [sp, #28]
 801565a:	f000 fa65 	bl	8015b28 <_Bfree>
 801565e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015662:	ea43 0102 	orr.w	r1, r3, r2
 8015666:	9b04      	ldr	r3, [sp, #16]
 8015668:	430b      	orrs	r3, r1
 801566a:	464d      	mov	r5, r9
 801566c:	d10f      	bne.n	801568e <_dtoa_r+0xa66>
 801566e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015672:	d02a      	beq.n	80156ca <_dtoa_r+0xaa2>
 8015674:	9b03      	ldr	r3, [sp, #12]
 8015676:	2b00      	cmp	r3, #0
 8015678:	dd02      	ble.n	8015680 <_dtoa_r+0xa58>
 801567a:	9b02      	ldr	r3, [sp, #8]
 801567c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015680:	f88b a000 	strb.w	sl, [fp]
 8015684:	e775      	b.n	8015572 <_dtoa_r+0x94a>
 8015686:	4638      	mov	r0, r7
 8015688:	e7ba      	b.n	8015600 <_dtoa_r+0x9d8>
 801568a:	2201      	movs	r2, #1
 801568c:	e7e2      	b.n	8015654 <_dtoa_r+0xa2c>
 801568e:	9b03      	ldr	r3, [sp, #12]
 8015690:	2b00      	cmp	r3, #0
 8015692:	db04      	blt.n	801569e <_dtoa_r+0xa76>
 8015694:	9906      	ldr	r1, [sp, #24]
 8015696:	430b      	orrs	r3, r1
 8015698:	9904      	ldr	r1, [sp, #16]
 801569a:	430b      	orrs	r3, r1
 801569c:	d122      	bne.n	80156e4 <_dtoa_r+0xabc>
 801569e:	2a00      	cmp	r2, #0
 80156a0:	ddee      	ble.n	8015680 <_dtoa_r+0xa58>
 80156a2:	ee18 1a10 	vmov	r1, s16
 80156a6:	2201      	movs	r2, #1
 80156a8:	4620      	mov	r0, r4
 80156aa:	f000 fc0f 	bl	8015ecc <__lshift>
 80156ae:	4631      	mov	r1, r6
 80156b0:	ee08 0a10 	vmov	s16, r0
 80156b4:	f000 fc7a 	bl	8015fac <__mcmp>
 80156b8:	2800      	cmp	r0, #0
 80156ba:	dc03      	bgt.n	80156c4 <_dtoa_r+0xa9c>
 80156bc:	d1e0      	bne.n	8015680 <_dtoa_r+0xa58>
 80156be:	f01a 0f01 	tst.w	sl, #1
 80156c2:	d0dd      	beq.n	8015680 <_dtoa_r+0xa58>
 80156c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80156c8:	d1d7      	bne.n	801567a <_dtoa_r+0xa52>
 80156ca:	2339      	movs	r3, #57	; 0x39
 80156cc:	f88b 3000 	strb.w	r3, [fp]
 80156d0:	462b      	mov	r3, r5
 80156d2:	461d      	mov	r5, r3
 80156d4:	3b01      	subs	r3, #1
 80156d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80156da:	2a39      	cmp	r2, #57	; 0x39
 80156dc:	d071      	beq.n	80157c2 <_dtoa_r+0xb9a>
 80156de:	3201      	adds	r2, #1
 80156e0:	701a      	strb	r2, [r3, #0]
 80156e2:	e746      	b.n	8015572 <_dtoa_r+0x94a>
 80156e4:	2a00      	cmp	r2, #0
 80156e6:	dd07      	ble.n	80156f8 <_dtoa_r+0xad0>
 80156e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80156ec:	d0ed      	beq.n	80156ca <_dtoa_r+0xaa2>
 80156ee:	f10a 0301 	add.w	r3, sl, #1
 80156f2:	f88b 3000 	strb.w	r3, [fp]
 80156f6:	e73c      	b.n	8015572 <_dtoa_r+0x94a>
 80156f8:	9b05      	ldr	r3, [sp, #20]
 80156fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80156fe:	4599      	cmp	r9, r3
 8015700:	d047      	beq.n	8015792 <_dtoa_r+0xb6a>
 8015702:	ee18 1a10 	vmov	r1, s16
 8015706:	2300      	movs	r3, #0
 8015708:	220a      	movs	r2, #10
 801570a:	4620      	mov	r0, r4
 801570c:	f000 fa2e 	bl	8015b6c <__multadd>
 8015710:	45b8      	cmp	r8, r7
 8015712:	ee08 0a10 	vmov	s16, r0
 8015716:	f04f 0300 	mov.w	r3, #0
 801571a:	f04f 020a 	mov.w	r2, #10
 801571e:	4641      	mov	r1, r8
 8015720:	4620      	mov	r0, r4
 8015722:	d106      	bne.n	8015732 <_dtoa_r+0xb0a>
 8015724:	f000 fa22 	bl	8015b6c <__multadd>
 8015728:	4680      	mov	r8, r0
 801572a:	4607      	mov	r7, r0
 801572c:	f109 0901 	add.w	r9, r9, #1
 8015730:	e772      	b.n	8015618 <_dtoa_r+0x9f0>
 8015732:	f000 fa1b 	bl	8015b6c <__multadd>
 8015736:	4639      	mov	r1, r7
 8015738:	4680      	mov	r8, r0
 801573a:	2300      	movs	r3, #0
 801573c:	220a      	movs	r2, #10
 801573e:	4620      	mov	r0, r4
 8015740:	f000 fa14 	bl	8015b6c <__multadd>
 8015744:	4607      	mov	r7, r0
 8015746:	e7f1      	b.n	801572c <_dtoa_r+0xb04>
 8015748:	9b03      	ldr	r3, [sp, #12]
 801574a:	9302      	str	r3, [sp, #8]
 801574c:	9d01      	ldr	r5, [sp, #4]
 801574e:	ee18 0a10 	vmov	r0, s16
 8015752:	4631      	mov	r1, r6
 8015754:	f7ff f9dc 	bl	8014b10 <quorem>
 8015758:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801575c:	9b01      	ldr	r3, [sp, #4]
 801575e:	f805 ab01 	strb.w	sl, [r5], #1
 8015762:	1aea      	subs	r2, r5, r3
 8015764:	9b02      	ldr	r3, [sp, #8]
 8015766:	4293      	cmp	r3, r2
 8015768:	dd09      	ble.n	801577e <_dtoa_r+0xb56>
 801576a:	ee18 1a10 	vmov	r1, s16
 801576e:	2300      	movs	r3, #0
 8015770:	220a      	movs	r2, #10
 8015772:	4620      	mov	r0, r4
 8015774:	f000 f9fa 	bl	8015b6c <__multadd>
 8015778:	ee08 0a10 	vmov	s16, r0
 801577c:	e7e7      	b.n	801574e <_dtoa_r+0xb26>
 801577e:	9b02      	ldr	r3, [sp, #8]
 8015780:	2b00      	cmp	r3, #0
 8015782:	bfc8      	it	gt
 8015784:	461d      	movgt	r5, r3
 8015786:	9b01      	ldr	r3, [sp, #4]
 8015788:	bfd8      	it	le
 801578a:	2501      	movle	r5, #1
 801578c:	441d      	add	r5, r3
 801578e:	f04f 0800 	mov.w	r8, #0
 8015792:	ee18 1a10 	vmov	r1, s16
 8015796:	2201      	movs	r2, #1
 8015798:	4620      	mov	r0, r4
 801579a:	f000 fb97 	bl	8015ecc <__lshift>
 801579e:	4631      	mov	r1, r6
 80157a0:	ee08 0a10 	vmov	s16, r0
 80157a4:	f000 fc02 	bl	8015fac <__mcmp>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	dc91      	bgt.n	80156d0 <_dtoa_r+0xaa8>
 80157ac:	d102      	bne.n	80157b4 <_dtoa_r+0xb8c>
 80157ae:	f01a 0f01 	tst.w	sl, #1
 80157b2:	d18d      	bne.n	80156d0 <_dtoa_r+0xaa8>
 80157b4:	462b      	mov	r3, r5
 80157b6:	461d      	mov	r5, r3
 80157b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80157bc:	2a30      	cmp	r2, #48	; 0x30
 80157be:	d0fa      	beq.n	80157b6 <_dtoa_r+0xb8e>
 80157c0:	e6d7      	b.n	8015572 <_dtoa_r+0x94a>
 80157c2:	9a01      	ldr	r2, [sp, #4]
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d184      	bne.n	80156d2 <_dtoa_r+0xaaa>
 80157c8:	9b00      	ldr	r3, [sp, #0]
 80157ca:	3301      	adds	r3, #1
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	2331      	movs	r3, #49	; 0x31
 80157d0:	7013      	strb	r3, [r2, #0]
 80157d2:	e6ce      	b.n	8015572 <_dtoa_r+0x94a>
 80157d4:	4b09      	ldr	r3, [pc, #36]	; (80157fc <_dtoa_r+0xbd4>)
 80157d6:	f7ff ba95 	b.w	8014d04 <_dtoa_r+0xdc>
 80157da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157dc:	2b00      	cmp	r3, #0
 80157de:	f47f aa6e 	bne.w	8014cbe <_dtoa_r+0x96>
 80157e2:	4b07      	ldr	r3, [pc, #28]	; (8015800 <_dtoa_r+0xbd8>)
 80157e4:	f7ff ba8e 	b.w	8014d04 <_dtoa_r+0xdc>
 80157e8:	9b02      	ldr	r3, [sp, #8]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	dcae      	bgt.n	801574c <_dtoa_r+0xb24>
 80157ee:	9b06      	ldr	r3, [sp, #24]
 80157f0:	2b02      	cmp	r3, #2
 80157f2:	f73f aea8 	bgt.w	8015546 <_dtoa_r+0x91e>
 80157f6:	e7a9      	b.n	801574c <_dtoa_r+0xb24>
 80157f8:	080186e1 	.word	0x080186e1
 80157fc:	080185e1 	.word	0x080185e1
 8015800:	08018679 	.word	0x08018679

08015804 <__sflush_r>:
 8015804:	898a      	ldrh	r2, [r1, #12]
 8015806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580a:	4605      	mov	r5, r0
 801580c:	0710      	lsls	r0, r2, #28
 801580e:	460c      	mov	r4, r1
 8015810:	d458      	bmi.n	80158c4 <__sflush_r+0xc0>
 8015812:	684b      	ldr	r3, [r1, #4]
 8015814:	2b00      	cmp	r3, #0
 8015816:	dc05      	bgt.n	8015824 <__sflush_r+0x20>
 8015818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801581a:	2b00      	cmp	r3, #0
 801581c:	dc02      	bgt.n	8015824 <__sflush_r+0x20>
 801581e:	2000      	movs	r0, #0
 8015820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015826:	2e00      	cmp	r6, #0
 8015828:	d0f9      	beq.n	801581e <__sflush_r+0x1a>
 801582a:	2300      	movs	r3, #0
 801582c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015830:	682f      	ldr	r7, [r5, #0]
 8015832:	602b      	str	r3, [r5, #0]
 8015834:	d032      	beq.n	801589c <__sflush_r+0x98>
 8015836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015838:	89a3      	ldrh	r3, [r4, #12]
 801583a:	075a      	lsls	r2, r3, #29
 801583c:	d505      	bpl.n	801584a <__sflush_r+0x46>
 801583e:	6863      	ldr	r3, [r4, #4]
 8015840:	1ac0      	subs	r0, r0, r3
 8015842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015844:	b10b      	cbz	r3, 801584a <__sflush_r+0x46>
 8015846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015848:	1ac0      	subs	r0, r0, r3
 801584a:	2300      	movs	r3, #0
 801584c:	4602      	mov	r2, r0
 801584e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015850:	6a21      	ldr	r1, [r4, #32]
 8015852:	4628      	mov	r0, r5
 8015854:	47b0      	blx	r6
 8015856:	1c43      	adds	r3, r0, #1
 8015858:	89a3      	ldrh	r3, [r4, #12]
 801585a:	d106      	bne.n	801586a <__sflush_r+0x66>
 801585c:	6829      	ldr	r1, [r5, #0]
 801585e:	291d      	cmp	r1, #29
 8015860:	d82c      	bhi.n	80158bc <__sflush_r+0xb8>
 8015862:	4a2a      	ldr	r2, [pc, #168]	; (801590c <__sflush_r+0x108>)
 8015864:	40ca      	lsrs	r2, r1
 8015866:	07d6      	lsls	r6, r2, #31
 8015868:	d528      	bpl.n	80158bc <__sflush_r+0xb8>
 801586a:	2200      	movs	r2, #0
 801586c:	6062      	str	r2, [r4, #4]
 801586e:	04d9      	lsls	r1, r3, #19
 8015870:	6922      	ldr	r2, [r4, #16]
 8015872:	6022      	str	r2, [r4, #0]
 8015874:	d504      	bpl.n	8015880 <__sflush_r+0x7c>
 8015876:	1c42      	adds	r2, r0, #1
 8015878:	d101      	bne.n	801587e <__sflush_r+0x7a>
 801587a:	682b      	ldr	r3, [r5, #0]
 801587c:	b903      	cbnz	r3, 8015880 <__sflush_r+0x7c>
 801587e:	6560      	str	r0, [r4, #84]	; 0x54
 8015880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015882:	602f      	str	r7, [r5, #0]
 8015884:	2900      	cmp	r1, #0
 8015886:	d0ca      	beq.n	801581e <__sflush_r+0x1a>
 8015888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801588c:	4299      	cmp	r1, r3
 801588e:	d002      	beq.n	8015896 <__sflush_r+0x92>
 8015890:	4628      	mov	r0, r5
 8015892:	f000 fca3 	bl	80161dc <_free_r>
 8015896:	2000      	movs	r0, #0
 8015898:	6360      	str	r0, [r4, #52]	; 0x34
 801589a:	e7c1      	b.n	8015820 <__sflush_r+0x1c>
 801589c:	6a21      	ldr	r1, [r4, #32]
 801589e:	2301      	movs	r3, #1
 80158a0:	4628      	mov	r0, r5
 80158a2:	47b0      	blx	r6
 80158a4:	1c41      	adds	r1, r0, #1
 80158a6:	d1c7      	bne.n	8015838 <__sflush_r+0x34>
 80158a8:	682b      	ldr	r3, [r5, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d0c4      	beq.n	8015838 <__sflush_r+0x34>
 80158ae:	2b1d      	cmp	r3, #29
 80158b0:	d001      	beq.n	80158b6 <__sflush_r+0xb2>
 80158b2:	2b16      	cmp	r3, #22
 80158b4:	d101      	bne.n	80158ba <__sflush_r+0xb6>
 80158b6:	602f      	str	r7, [r5, #0]
 80158b8:	e7b1      	b.n	801581e <__sflush_r+0x1a>
 80158ba:	89a3      	ldrh	r3, [r4, #12]
 80158bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158c0:	81a3      	strh	r3, [r4, #12]
 80158c2:	e7ad      	b.n	8015820 <__sflush_r+0x1c>
 80158c4:	690f      	ldr	r7, [r1, #16]
 80158c6:	2f00      	cmp	r7, #0
 80158c8:	d0a9      	beq.n	801581e <__sflush_r+0x1a>
 80158ca:	0793      	lsls	r3, r2, #30
 80158cc:	680e      	ldr	r6, [r1, #0]
 80158ce:	bf08      	it	eq
 80158d0:	694b      	ldreq	r3, [r1, #20]
 80158d2:	600f      	str	r7, [r1, #0]
 80158d4:	bf18      	it	ne
 80158d6:	2300      	movne	r3, #0
 80158d8:	eba6 0807 	sub.w	r8, r6, r7
 80158dc:	608b      	str	r3, [r1, #8]
 80158de:	f1b8 0f00 	cmp.w	r8, #0
 80158e2:	dd9c      	ble.n	801581e <__sflush_r+0x1a>
 80158e4:	6a21      	ldr	r1, [r4, #32]
 80158e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158e8:	4643      	mov	r3, r8
 80158ea:	463a      	mov	r2, r7
 80158ec:	4628      	mov	r0, r5
 80158ee:	47b0      	blx	r6
 80158f0:	2800      	cmp	r0, #0
 80158f2:	dc06      	bgt.n	8015902 <__sflush_r+0xfe>
 80158f4:	89a3      	ldrh	r3, [r4, #12]
 80158f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158fa:	81a3      	strh	r3, [r4, #12]
 80158fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015900:	e78e      	b.n	8015820 <__sflush_r+0x1c>
 8015902:	4407      	add	r7, r0
 8015904:	eba8 0800 	sub.w	r8, r8, r0
 8015908:	e7e9      	b.n	80158de <__sflush_r+0xda>
 801590a:	bf00      	nop
 801590c:	20400001 	.word	0x20400001

08015910 <_fflush_r>:
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	690b      	ldr	r3, [r1, #16]
 8015914:	4605      	mov	r5, r0
 8015916:	460c      	mov	r4, r1
 8015918:	b913      	cbnz	r3, 8015920 <_fflush_r+0x10>
 801591a:	2500      	movs	r5, #0
 801591c:	4628      	mov	r0, r5
 801591e:	bd38      	pop	{r3, r4, r5, pc}
 8015920:	b118      	cbz	r0, 801592a <_fflush_r+0x1a>
 8015922:	6983      	ldr	r3, [r0, #24]
 8015924:	b90b      	cbnz	r3, 801592a <_fflush_r+0x1a>
 8015926:	f7fd fe75 	bl	8013614 <__sinit>
 801592a:	4b14      	ldr	r3, [pc, #80]	; (801597c <_fflush_r+0x6c>)
 801592c:	429c      	cmp	r4, r3
 801592e:	d11b      	bne.n	8015968 <_fflush_r+0x58>
 8015930:	686c      	ldr	r4, [r5, #4]
 8015932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d0ef      	beq.n	801591a <_fflush_r+0xa>
 801593a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801593c:	07d0      	lsls	r0, r2, #31
 801593e:	d404      	bmi.n	801594a <_fflush_r+0x3a>
 8015940:	0599      	lsls	r1, r3, #22
 8015942:	d402      	bmi.n	801594a <_fflush_r+0x3a>
 8015944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015946:	f7fd ff3a 	bl	80137be <__retarget_lock_acquire_recursive>
 801594a:	4628      	mov	r0, r5
 801594c:	4621      	mov	r1, r4
 801594e:	f7ff ff59 	bl	8015804 <__sflush_r>
 8015952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015954:	07da      	lsls	r2, r3, #31
 8015956:	4605      	mov	r5, r0
 8015958:	d4e0      	bmi.n	801591c <_fflush_r+0xc>
 801595a:	89a3      	ldrh	r3, [r4, #12]
 801595c:	059b      	lsls	r3, r3, #22
 801595e:	d4dd      	bmi.n	801591c <_fflush_r+0xc>
 8015960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015962:	f7fd ff2d 	bl	80137c0 <__retarget_lock_release_recursive>
 8015966:	e7d9      	b.n	801591c <_fflush_r+0xc>
 8015968:	4b05      	ldr	r3, [pc, #20]	; (8015980 <_fflush_r+0x70>)
 801596a:	429c      	cmp	r4, r3
 801596c:	d101      	bne.n	8015972 <_fflush_r+0x62>
 801596e:	68ac      	ldr	r4, [r5, #8]
 8015970:	e7df      	b.n	8015932 <_fflush_r+0x22>
 8015972:	4b04      	ldr	r3, [pc, #16]	; (8015984 <_fflush_r+0x74>)
 8015974:	429c      	cmp	r4, r3
 8015976:	bf08      	it	eq
 8015978:	68ec      	ldreq	r4, [r5, #12]
 801597a:	e7da      	b.n	8015932 <_fflush_r+0x22>
 801597c:	0801857c 	.word	0x0801857c
 8015980:	0801859c 	.word	0x0801859c
 8015984:	0801855c 	.word	0x0801855c

08015988 <_localeconv_r>:
 8015988:	4800      	ldr	r0, [pc, #0]	; (801598c <_localeconv_r+0x4>)
 801598a:	4770      	bx	lr
 801598c:	200001ac 	.word	0x200001ac

08015990 <_lseek_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4d07      	ldr	r5, [pc, #28]	; (80159b0 <_lseek_r+0x20>)
 8015994:	4604      	mov	r4, r0
 8015996:	4608      	mov	r0, r1
 8015998:	4611      	mov	r1, r2
 801599a:	2200      	movs	r2, #0
 801599c:	602a      	str	r2, [r5, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	f7ee f816 	bl	80039d0 <_lseek>
 80159a4:	1c43      	adds	r3, r0, #1
 80159a6:	d102      	bne.n	80159ae <_lseek_r+0x1e>
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	b103      	cbz	r3, 80159ae <_lseek_r+0x1e>
 80159ac:	6023      	str	r3, [r4, #0]
 80159ae:	bd38      	pop	{r3, r4, r5, pc}
 80159b0:	20005094 	.word	0x20005094

080159b4 <__swhatbuf_r>:
 80159b4:	b570      	push	{r4, r5, r6, lr}
 80159b6:	460e      	mov	r6, r1
 80159b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159bc:	2900      	cmp	r1, #0
 80159be:	b096      	sub	sp, #88	; 0x58
 80159c0:	4614      	mov	r4, r2
 80159c2:	461d      	mov	r5, r3
 80159c4:	da08      	bge.n	80159d8 <__swhatbuf_r+0x24>
 80159c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80159ca:	2200      	movs	r2, #0
 80159cc:	602a      	str	r2, [r5, #0]
 80159ce:	061a      	lsls	r2, r3, #24
 80159d0:	d410      	bmi.n	80159f4 <__swhatbuf_r+0x40>
 80159d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159d6:	e00e      	b.n	80159f6 <__swhatbuf_r+0x42>
 80159d8:	466a      	mov	r2, sp
 80159da:	f000 fe2b 	bl	8016634 <_fstat_r>
 80159de:	2800      	cmp	r0, #0
 80159e0:	dbf1      	blt.n	80159c6 <__swhatbuf_r+0x12>
 80159e2:	9a01      	ldr	r2, [sp, #4]
 80159e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80159e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80159ec:	425a      	negs	r2, r3
 80159ee:	415a      	adcs	r2, r3
 80159f0:	602a      	str	r2, [r5, #0]
 80159f2:	e7ee      	b.n	80159d2 <__swhatbuf_r+0x1e>
 80159f4:	2340      	movs	r3, #64	; 0x40
 80159f6:	2000      	movs	r0, #0
 80159f8:	6023      	str	r3, [r4, #0]
 80159fa:	b016      	add	sp, #88	; 0x58
 80159fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a00 <__smakebuf_r>:
 8015a00:	898b      	ldrh	r3, [r1, #12]
 8015a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a04:	079d      	lsls	r5, r3, #30
 8015a06:	4606      	mov	r6, r0
 8015a08:	460c      	mov	r4, r1
 8015a0a:	d507      	bpl.n	8015a1c <__smakebuf_r+0x1c>
 8015a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	6123      	str	r3, [r4, #16]
 8015a14:	2301      	movs	r3, #1
 8015a16:	6163      	str	r3, [r4, #20]
 8015a18:	b002      	add	sp, #8
 8015a1a:	bd70      	pop	{r4, r5, r6, pc}
 8015a1c:	ab01      	add	r3, sp, #4
 8015a1e:	466a      	mov	r2, sp
 8015a20:	f7ff ffc8 	bl	80159b4 <__swhatbuf_r>
 8015a24:	9900      	ldr	r1, [sp, #0]
 8015a26:	4605      	mov	r5, r0
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f7fd ff2b 	bl	8013884 <_malloc_r>
 8015a2e:	b948      	cbnz	r0, 8015a44 <__smakebuf_r+0x44>
 8015a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a34:	059a      	lsls	r2, r3, #22
 8015a36:	d4ef      	bmi.n	8015a18 <__smakebuf_r+0x18>
 8015a38:	f023 0303 	bic.w	r3, r3, #3
 8015a3c:	f043 0302 	orr.w	r3, r3, #2
 8015a40:	81a3      	strh	r3, [r4, #12]
 8015a42:	e7e3      	b.n	8015a0c <__smakebuf_r+0xc>
 8015a44:	4b0d      	ldr	r3, [pc, #52]	; (8015a7c <__smakebuf_r+0x7c>)
 8015a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a48:	89a3      	ldrh	r3, [r4, #12]
 8015a4a:	6020      	str	r0, [r4, #0]
 8015a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a50:	81a3      	strh	r3, [r4, #12]
 8015a52:	9b00      	ldr	r3, [sp, #0]
 8015a54:	6163      	str	r3, [r4, #20]
 8015a56:	9b01      	ldr	r3, [sp, #4]
 8015a58:	6120      	str	r0, [r4, #16]
 8015a5a:	b15b      	cbz	r3, 8015a74 <__smakebuf_r+0x74>
 8015a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a60:	4630      	mov	r0, r6
 8015a62:	f000 fdf9 	bl	8016658 <_isatty_r>
 8015a66:	b128      	cbz	r0, 8015a74 <__smakebuf_r+0x74>
 8015a68:	89a3      	ldrh	r3, [r4, #12]
 8015a6a:	f023 0303 	bic.w	r3, r3, #3
 8015a6e:	f043 0301 	orr.w	r3, r3, #1
 8015a72:	81a3      	strh	r3, [r4, #12]
 8015a74:	89a0      	ldrh	r0, [r4, #12]
 8015a76:	4305      	orrs	r5, r0
 8015a78:	81a5      	strh	r5, [r4, #12]
 8015a7a:	e7cd      	b.n	8015a18 <__smakebuf_r+0x18>
 8015a7c:	080135ad 	.word	0x080135ad

08015a80 <malloc>:
 8015a80:	4b02      	ldr	r3, [pc, #8]	; (8015a8c <malloc+0xc>)
 8015a82:	4601      	mov	r1, r0
 8015a84:	6818      	ldr	r0, [r3, #0]
 8015a86:	f7fd befd 	b.w	8013884 <_malloc_r>
 8015a8a:	bf00      	nop
 8015a8c:	20000058 	.word	0x20000058

08015a90 <__malloc_lock>:
 8015a90:	4801      	ldr	r0, [pc, #4]	; (8015a98 <__malloc_lock+0x8>)
 8015a92:	f7fd be94 	b.w	80137be <__retarget_lock_acquire_recursive>
 8015a96:	bf00      	nop
 8015a98:	20005088 	.word	0x20005088

08015a9c <__malloc_unlock>:
 8015a9c:	4801      	ldr	r0, [pc, #4]	; (8015aa4 <__malloc_unlock+0x8>)
 8015a9e:	f7fd be8f 	b.w	80137c0 <__retarget_lock_release_recursive>
 8015aa2:	bf00      	nop
 8015aa4:	20005088 	.word	0x20005088

08015aa8 <_Balloc>:
 8015aa8:	b570      	push	{r4, r5, r6, lr}
 8015aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015aac:	4604      	mov	r4, r0
 8015aae:	460d      	mov	r5, r1
 8015ab0:	b976      	cbnz	r6, 8015ad0 <_Balloc+0x28>
 8015ab2:	2010      	movs	r0, #16
 8015ab4:	f7ff ffe4 	bl	8015a80 <malloc>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	6260      	str	r0, [r4, #36]	; 0x24
 8015abc:	b920      	cbnz	r0, 8015ac8 <_Balloc+0x20>
 8015abe:	4b18      	ldr	r3, [pc, #96]	; (8015b20 <_Balloc+0x78>)
 8015ac0:	4818      	ldr	r0, [pc, #96]	; (8015b24 <_Balloc+0x7c>)
 8015ac2:	2166      	movs	r1, #102	; 0x66
 8015ac4:	f7fd fd2a 	bl	801351c <__assert_func>
 8015ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015acc:	6006      	str	r6, [r0, #0]
 8015ace:	60c6      	str	r6, [r0, #12]
 8015ad0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ad2:	68f3      	ldr	r3, [r6, #12]
 8015ad4:	b183      	cbz	r3, 8015af8 <_Balloc+0x50>
 8015ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ad8:	68db      	ldr	r3, [r3, #12]
 8015ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ade:	b9b8      	cbnz	r0, 8015b10 <_Balloc+0x68>
 8015ae0:	2101      	movs	r1, #1
 8015ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8015ae6:	1d72      	adds	r2, r6, #5
 8015ae8:	0092      	lsls	r2, r2, #2
 8015aea:	4620      	mov	r0, r4
 8015aec:	f000 fb60 	bl	80161b0 <_calloc_r>
 8015af0:	b160      	cbz	r0, 8015b0c <_Balloc+0x64>
 8015af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015af6:	e00e      	b.n	8015b16 <_Balloc+0x6e>
 8015af8:	2221      	movs	r2, #33	; 0x21
 8015afa:	2104      	movs	r1, #4
 8015afc:	4620      	mov	r0, r4
 8015afe:	f000 fb57 	bl	80161b0 <_calloc_r>
 8015b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b04:	60f0      	str	r0, [r6, #12]
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d1e4      	bne.n	8015ad6 <_Balloc+0x2e>
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	bd70      	pop	{r4, r5, r6, pc}
 8015b10:	6802      	ldr	r2, [r0, #0]
 8015b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b16:	2300      	movs	r3, #0
 8015b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b1c:	e7f7      	b.n	8015b0e <_Balloc+0x66>
 8015b1e:	bf00      	nop
 8015b20:	08018605 	.word	0x08018605
 8015b24:	080186f2 	.word	0x080186f2

08015b28 <_Bfree>:
 8015b28:	b570      	push	{r4, r5, r6, lr}
 8015b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b2c:	4605      	mov	r5, r0
 8015b2e:	460c      	mov	r4, r1
 8015b30:	b976      	cbnz	r6, 8015b50 <_Bfree+0x28>
 8015b32:	2010      	movs	r0, #16
 8015b34:	f7ff ffa4 	bl	8015a80 <malloc>
 8015b38:	4602      	mov	r2, r0
 8015b3a:	6268      	str	r0, [r5, #36]	; 0x24
 8015b3c:	b920      	cbnz	r0, 8015b48 <_Bfree+0x20>
 8015b3e:	4b09      	ldr	r3, [pc, #36]	; (8015b64 <_Bfree+0x3c>)
 8015b40:	4809      	ldr	r0, [pc, #36]	; (8015b68 <_Bfree+0x40>)
 8015b42:	218a      	movs	r1, #138	; 0x8a
 8015b44:	f7fd fcea 	bl	801351c <__assert_func>
 8015b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b4c:	6006      	str	r6, [r0, #0]
 8015b4e:	60c6      	str	r6, [r0, #12]
 8015b50:	b13c      	cbz	r4, 8015b62 <_Bfree+0x3a>
 8015b52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015b54:	6862      	ldr	r2, [r4, #4]
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b5c:	6021      	str	r1, [r4, #0]
 8015b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b62:	bd70      	pop	{r4, r5, r6, pc}
 8015b64:	08018605 	.word	0x08018605
 8015b68:	080186f2 	.word	0x080186f2

08015b6c <__multadd>:
 8015b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b70:	690d      	ldr	r5, [r1, #16]
 8015b72:	4607      	mov	r7, r0
 8015b74:	460c      	mov	r4, r1
 8015b76:	461e      	mov	r6, r3
 8015b78:	f101 0c14 	add.w	ip, r1, #20
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	f8dc 3000 	ldr.w	r3, [ip]
 8015b82:	b299      	uxth	r1, r3
 8015b84:	fb02 6101 	mla	r1, r2, r1, r6
 8015b88:	0c1e      	lsrs	r6, r3, #16
 8015b8a:	0c0b      	lsrs	r3, r1, #16
 8015b8c:	fb02 3306 	mla	r3, r2, r6, r3
 8015b90:	b289      	uxth	r1, r1
 8015b92:	3001      	adds	r0, #1
 8015b94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015b98:	4285      	cmp	r5, r0
 8015b9a:	f84c 1b04 	str.w	r1, [ip], #4
 8015b9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015ba2:	dcec      	bgt.n	8015b7e <__multadd+0x12>
 8015ba4:	b30e      	cbz	r6, 8015bea <__multadd+0x7e>
 8015ba6:	68a3      	ldr	r3, [r4, #8]
 8015ba8:	42ab      	cmp	r3, r5
 8015baa:	dc19      	bgt.n	8015be0 <__multadd+0x74>
 8015bac:	6861      	ldr	r1, [r4, #4]
 8015bae:	4638      	mov	r0, r7
 8015bb0:	3101      	adds	r1, #1
 8015bb2:	f7ff ff79 	bl	8015aa8 <_Balloc>
 8015bb6:	4680      	mov	r8, r0
 8015bb8:	b928      	cbnz	r0, 8015bc6 <__multadd+0x5a>
 8015bba:	4602      	mov	r2, r0
 8015bbc:	4b0c      	ldr	r3, [pc, #48]	; (8015bf0 <__multadd+0x84>)
 8015bbe:	480d      	ldr	r0, [pc, #52]	; (8015bf4 <__multadd+0x88>)
 8015bc0:	21b5      	movs	r1, #181	; 0xb5
 8015bc2:	f7fd fcab 	bl	801351c <__assert_func>
 8015bc6:	6922      	ldr	r2, [r4, #16]
 8015bc8:	3202      	adds	r2, #2
 8015bca:	f104 010c 	add.w	r1, r4, #12
 8015bce:	0092      	lsls	r2, r2, #2
 8015bd0:	300c      	adds	r0, #12
 8015bd2:	f7fd fe06 	bl	80137e2 <memcpy>
 8015bd6:	4621      	mov	r1, r4
 8015bd8:	4638      	mov	r0, r7
 8015bda:	f7ff ffa5 	bl	8015b28 <_Bfree>
 8015bde:	4644      	mov	r4, r8
 8015be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015be4:	3501      	adds	r5, #1
 8015be6:	615e      	str	r6, [r3, #20]
 8015be8:	6125      	str	r5, [r4, #16]
 8015bea:	4620      	mov	r0, r4
 8015bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bf0:	080186e1 	.word	0x080186e1
 8015bf4:	080186f2 	.word	0x080186f2

08015bf8 <__hi0bits>:
 8015bf8:	0c03      	lsrs	r3, r0, #16
 8015bfa:	041b      	lsls	r3, r3, #16
 8015bfc:	b9d3      	cbnz	r3, 8015c34 <__hi0bits+0x3c>
 8015bfe:	0400      	lsls	r0, r0, #16
 8015c00:	2310      	movs	r3, #16
 8015c02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015c06:	bf04      	itt	eq
 8015c08:	0200      	lsleq	r0, r0, #8
 8015c0a:	3308      	addeq	r3, #8
 8015c0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015c10:	bf04      	itt	eq
 8015c12:	0100      	lsleq	r0, r0, #4
 8015c14:	3304      	addeq	r3, #4
 8015c16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015c1a:	bf04      	itt	eq
 8015c1c:	0080      	lsleq	r0, r0, #2
 8015c1e:	3302      	addeq	r3, #2
 8015c20:	2800      	cmp	r0, #0
 8015c22:	db05      	blt.n	8015c30 <__hi0bits+0x38>
 8015c24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015c28:	f103 0301 	add.w	r3, r3, #1
 8015c2c:	bf08      	it	eq
 8015c2e:	2320      	moveq	r3, #32
 8015c30:	4618      	mov	r0, r3
 8015c32:	4770      	bx	lr
 8015c34:	2300      	movs	r3, #0
 8015c36:	e7e4      	b.n	8015c02 <__hi0bits+0xa>

08015c38 <__lo0bits>:
 8015c38:	6803      	ldr	r3, [r0, #0]
 8015c3a:	f013 0207 	ands.w	r2, r3, #7
 8015c3e:	4601      	mov	r1, r0
 8015c40:	d00b      	beq.n	8015c5a <__lo0bits+0x22>
 8015c42:	07da      	lsls	r2, r3, #31
 8015c44:	d423      	bmi.n	8015c8e <__lo0bits+0x56>
 8015c46:	0798      	lsls	r0, r3, #30
 8015c48:	bf49      	itett	mi
 8015c4a:	085b      	lsrmi	r3, r3, #1
 8015c4c:	089b      	lsrpl	r3, r3, #2
 8015c4e:	2001      	movmi	r0, #1
 8015c50:	600b      	strmi	r3, [r1, #0]
 8015c52:	bf5c      	itt	pl
 8015c54:	600b      	strpl	r3, [r1, #0]
 8015c56:	2002      	movpl	r0, #2
 8015c58:	4770      	bx	lr
 8015c5a:	b298      	uxth	r0, r3
 8015c5c:	b9a8      	cbnz	r0, 8015c8a <__lo0bits+0x52>
 8015c5e:	0c1b      	lsrs	r3, r3, #16
 8015c60:	2010      	movs	r0, #16
 8015c62:	b2da      	uxtb	r2, r3
 8015c64:	b90a      	cbnz	r2, 8015c6a <__lo0bits+0x32>
 8015c66:	3008      	adds	r0, #8
 8015c68:	0a1b      	lsrs	r3, r3, #8
 8015c6a:	071a      	lsls	r2, r3, #28
 8015c6c:	bf04      	itt	eq
 8015c6e:	091b      	lsreq	r3, r3, #4
 8015c70:	3004      	addeq	r0, #4
 8015c72:	079a      	lsls	r2, r3, #30
 8015c74:	bf04      	itt	eq
 8015c76:	089b      	lsreq	r3, r3, #2
 8015c78:	3002      	addeq	r0, #2
 8015c7a:	07da      	lsls	r2, r3, #31
 8015c7c:	d403      	bmi.n	8015c86 <__lo0bits+0x4e>
 8015c7e:	085b      	lsrs	r3, r3, #1
 8015c80:	f100 0001 	add.w	r0, r0, #1
 8015c84:	d005      	beq.n	8015c92 <__lo0bits+0x5a>
 8015c86:	600b      	str	r3, [r1, #0]
 8015c88:	4770      	bx	lr
 8015c8a:	4610      	mov	r0, r2
 8015c8c:	e7e9      	b.n	8015c62 <__lo0bits+0x2a>
 8015c8e:	2000      	movs	r0, #0
 8015c90:	4770      	bx	lr
 8015c92:	2020      	movs	r0, #32
 8015c94:	4770      	bx	lr
	...

08015c98 <__i2b>:
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	460c      	mov	r4, r1
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	f7ff ff03 	bl	8015aa8 <_Balloc>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	b928      	cbnz	r0, 8015cb2 <__i2b+0x1a>
 8015ca6:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <__i2b+0x24>)
 8015ca8:	4805      	ldr	r0, [pc, #20]	; (8015cc0 <__i2b+0x28>)
 8015caa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015cae:	f7fd fc35 	bl	801351c <__assert_func>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	6144      	str	r4, [r0, #20]
 8015cb6:	6103      	str	r3, [r0, #16]
 8015cb8:	bd10      	pop	{r4, pc}
 8015cba:	bf00      	nop
 8015cbc:	080186e1 	.word	0x080186e1
 8015cc0:	080186f2 	.word	0x080186f2

08015cc4 <__multiply>:
 8015cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc8:	4691      	mov	r9, r2
 8015cca:	690a      	ldr	r2, [r1, #16]
 8015ccc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	bfb8      	it	lt
 8015cd4:	460b      	movlt	r3, r1
 8015cd6:	460c      	mov	r4, r1
 8015cd8:	bfbc      	itt	lt
 8015cda:	464c      	movlt	r4, r9
 8015cdc:	4699      	movlt	r9, r3
 8015cde:	6927      	ldr	r7, [r4, #16]
 8015ce0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015ce4:	68a3      	ldr	r3, [r4, #8]
 8015ce6:	6861      	ldr	r1, [r4, #4]
 8015ce8:	eb07 060a 	add.w	r6, r7, sl
 8015cec:	42b3      	cmp	r3, r6
 8015cee:	b085      	sub	sp, #20
 8015cf0:	bfb8      	it	lt
 8015cf2:	3101      	addlt	r1, #1
 8015cf4:	f7ff fed8 	bl	8015aa8 <_Balloc>
 8015cf8:	b930      	cbnz	r0, 8015d08 <__multiply+0x44>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	4b44      	ldr	r3, [pc, #272]	; (8015e10 <__multiply+0x14c>)
 8015cfe:	4845      	ldr	r0, [pc, #276]	; (8015e14 <__multiply+0x150>)
 8015d00:	f240 115d 	movw	r1, #349	; 0x15d
 8015d04:	f7fd fc0a 	bl	801351c <__assert_func>
 8015d08:	f100 0514 	add.w	r5, r0, #20
 8015d0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015d10:	462b      	mov	r3, r5
 8015d12:	2200      	movs	r2, #0
 8015d14:	4543      	cmp	r3, r8
 8015d16:	d321      	bcc.n	8015d5c <__multiply+0x98>
 8015d18:	f104 0314 	add.w	r3, r4, #20
 8015d1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015d20:	f109 0314 	add.w	r3, r9, #20
 8015d24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015d28:	9202      	str	r2, [sp, #8]
 8015d2a:	1b3a      	subs	r2, r7, r4
 8015d2c:	3a15      	subs	r2, #21
 8015d2e:	f022 0203 	bic.w	r2, r2, #3
 8015d32:	3204      	adds	r2, #4
 8015d34:	f104 0115 	add.w	r1, r4, #21
 8015d38:	428f      	cmp	r7, r1
 8015d3a:	bf38      	it	cc
 8015d3c:	2204      	movcc	r2, #4
 8015d3e:	9201      	str	r2, [sp, #4]
 8015d40:	9a02      	ldr	r2, [sp, #8]
 8015d42:	9303      	str	r3, [sp, #12]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d80c      	bhi.n	8015d62 <__multiply+0x9e>
 8015d48:	2e00      	cmp	r6, #0
 8015d4a:	dd03      	ble.n	8015d54 <__multiply+0x90>
 8015d4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d05a      	beq.n	8015e0a <__multiply+0x146>
 8015d54:	6106      	str	r6, [r0, #16]
 8015d56:	b005      	add	sp, #20
 8015d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5c:	f843 2b04 	str.w	r2, [r3], #4
 8015d60:	e7d8      	b.n	8015d14 <__multiply+0x50>
 8015d62:	f8b3 a000 	ldrh.w	sl, [r3]
 8015d66:	f1ba 0f00 	cmp.w	sl, #0
 8015d6a:	d024      	beq.n	8015db6 <__multiply+0xf2>
 8015d6c:	f104 0e14 	add.w	lr, r4, #20
 8015d70:	46a9      	mov	r9, r5
 8015d72:	f04f 0c00 	mov.w	ip, #0
 8015d76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015d7a:	f8d9 1000 	ldr.w	r1, [r9]
 8015d7e:	fa1f fb82 	uxth.w	fp, r2
 8015d82:	b289      	uxth	r1, r1
 8015d84:	fb0a 110b 	mla	r1, sl, fp, r1
 8015d88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8015d90:	4461      	add	r1, ip
 8015d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015d96:	fb0a c20b 	mla	r2, sl, fp, ip
 8015d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015d9e:	b289      	uxth	r1, r1
 8015da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015da4:	4577      	cmp	r7, lr
 8015da6:	f849 1b04 	str.w	r1, [r9], #4
 8015daa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015dae:	d8e2      	bhi.n	8015d76 <__multiply+0xb2>
 8015db0:	9a01      	ldr	r2, [sp, #4]
 8015db2:	f845 c002 	str.w	ip, [r5, r2]
 8015db6:	9a03      	ldr	r2, [sp, #12]
 8015db8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015dbc:	3304      	adds	r3, #4
 8015dbe:	f1b9 0f00 	cmp.w	r9, #0
 8015dc2:	d020      	beq.n	8015e06 <__multiply+0x142>
 8015dc4:	6829      	ldr	r1, [r5, #0]
 8015dc6:	f104 0c14 	add.w	ip, r4, #20
 8015dca:	46ae      	mov	lr, r5
 8015dcc:	f04f 0a00 	mov.w	sl, #0
 8015dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8015dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015dd8:	fb09 220b 	mla	r2, r9, fp, r2
 8015ddc:	4492      	add	sl, r2
 8015dde:	b289      	uxth	r1, r1
 8015de0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015de4:	f84e 1b04 	str.w	r1, [lr], #4
 8015de8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015dec:	f8be 1000 	ldrh.w	r1, [lr]
 8015df0:	0c12      	lsrs	r2, r2, #16
 8015df2:	fb09 1102 	mla	r1, r9, r2, r1
 8015df6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015dfa:	4567      	cmp	r7, ip
 8015dfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015e00:	d8e6      	bhi.n	8015dd0 <__multiply+0x10c>
 8015e02:	9a01      	ldr	r2, [sp, #4]
 8015e04:	50a9      	str	r1, [r5, r2]
 8015e06:	3504      	adds	r5, #4
 8015e08:	e79a      	b.n	8015d40 <__multiply+0x7c>
 8015e0a:	3e01      	subs	r6, #1
 8015e0c:	e79c      	b.n	8015d48 <__multiply+0x84>
 8015e0e:	bf00      	nop
 8015e10:	080186e1 	.word	0x080186e1
 8015e14:	080186f2 	.word	0x080186f2

08015e18 <__pow5mult>:
 8015e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e1c:	4615      	mov	r5, r2
 8015e1e:	f012 0203 	ands.w	r2, r2, #3
 8015e22:	4606      	mov	r6, r0
 8015e24:	460f      	mov	r7, r1
 8015e26:	d007      	beq.n	8015e38 <__pow5mult+0x20>
 8015e28:	4c25      	ldr	r4, [pc, #148]	; (8015ec0 <__pow5mult+0xa8>)
 8015e2a:	3a01      	subs	r2, #1
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e32:	f7ff fe9b 	bl	8015b6c <__multadd>
 8015e36:	4607      	mov	r7, r0
 8015e38:	10ad      	asrs	r5, r5, #2
 8015e3a:	d03d      	beq.n	8015eb8 <__pow5mult+0xa0>
 8015e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015e3e:	b97c      	cbnz	r4, 8015e60 <__pow5mult+0x48>
 8015e40:	2010      	movs	r0, #16
 8015e42:	f7ff fe1d 	bl	8015a80 <malloc>
 8015e46:	4602      	mov	r2, r0
 8015e48:	6270      	str	r0, [r6, #36]	; 0x24
 8015e4a:	b928      	cbnz	r0, 8015e58 <__pow5mult+0x40>
 8015e4c:	4b1d      	ldr	r3, [pc, #116]	; (8015ec4 <__pow5mult+0xac>)
 8015e4e:	481e      	ldr	r0, [pc, #120]	; (8015ec8 <__pow5mult+0xb0>)
 8015e50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015e54:	f7fd fb62 	bl	801351c <__assert_func>
 8015e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e5c:	6004      	str	r4, [r0, #0]
 8015e5e:	60c4      	str	r4, [r0, #12]
 8015e60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e68:	b94c      	cbnz	r4, 8015e7e <__pow5mult+0x66>
 8015e6a:	f240 2171 	movw	r1, #625	; 0x271
 8015e6e:	4630      	mov	r0, r6
 8015e70:	f7ff ff12 	bl	8015c98 <__i2b>
 8015e74:	2300      	movs	r3, #0
 8015e76:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	6003      	str	r3, [r0, #0]
 8015e7e:	f04f 0900 	mov.w	r9, #0
 8015e82:	07eb      	lsls	r3, r5, #31
 8015e84:	d50a      	bpl.n	8015e9c <__pow5mult+0x84>
 8015e86:	4639      	mov	r1, r7
 8015e88:	4622      	mov	r2, r4
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	f7ff ff1a 	bl	8015cc4 <__multiply>
 8015e90:	4639      	mov	r1, r7
 8015e92:	4680      	mov	r8, r0
 8015e94:	4630      	mov	r0, r6
 8015e96:	f7ff fe47 	bl	8015b28 <_Bfree>
 8015e9a:	4647      	mov	r7, r8
 8015e9c:	106d      	asrs	r5, r5, #1
 8015e9e:	d00b      	beq.n	8015eb8 <__pow5mult+0xa0>
 8015ea0:	6820      	ldr	r0, [r4, #0]
 8015ea2:	b938      	cbnz	r0, 8015eb4 <__pow5mult+0x9c>
 8015ea4:	4622      	mov	r2, r4
 8015ea6:	4621      	mov	r1, r4
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	f7ff ff0b 	bl	8015cc4 <__multiply>
 8015eae:	6020      	str	r0, [r4, #0]
 8015eb0:	f8c0 9000 	str.w	r9, [r0]
 8015eb4:	4604      	mov	r4, r0
 8015eb6:	e7e4      	b.n	8015e82 <__pow5mult+0x6a>
 8015eb8:	4638      	mov	r0, r7
 8015eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ebe:	bf00      	nop
 8015ec0:	08018840 	.word	0x08018840
 8015ec4:	08018605 	.word	0x08018605
 8015ec8:	080186f2 	.word	0x080186f2

08015ecc <__lshift>:
 8015ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	6849      	ldr	r1, [r1, #4]
 8015ed4:	6923      	ldr	r3, [r4, #16]
 8015ed6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015eda:	68a3      	ldr	r3, [r4, #8]
 8015edc:	4607      	mov	r7, r0
 8015ede:	4691      	mov	r9, r2
 8015ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ee4:	f108 0601 	add.w	r6, r8, #1
 8015ee8:	42b3      	cmp	r3, r6
 8015eea:	db0b      	blt.n	8015f04 <__lshift+0x38>
 8015eec:	4638      	mov	r0, r7
 8015eee:	f7ff fddb 	bl	8015aa8 <_Balloc>
 8015ef2:	4605      	mov	r5, r0
 8015ef4:	b948      	cbnz	r0, 8015f0a <__lshift+0x3e>
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	4b2a      	ldr	r3, [pc, #168]	; (8015fa4 <__lshift+0xd8>)
 8015efa:	482b      	ldr	r0, [pc, #172]	; (8015fa8 <__lshift+0xdc>)
 8015efc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015f00:	f7fd fb0c 	bl	801351c <__assert_func>
 8015f04:	3101      	adds	r1, #1
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	e7ee      	b.n	8015ee8 <__lshift+0x1c>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	f100 0114 	add.w	r1, r0, #20
 8015f10:	f100 0210 	add.w	r2, r0, #16
 8015f14:	4618      	mov	r0, r3
 8015f16:	4553      	cmp	r3, sl
 8015f18:	db37      	blt.n	8015f8a <__lshift+0xbe>
 8015f1a:	6920      	ldr	r0, [r4, #16]
 8015f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f20:	f104 0314 	add.w	r3, r4, #20
 8015f24:	f019 091f 	ands.w	r9, r9, #31
 8015f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015f30:	d02f      	beq.n	8015f92 <__lshift+0xc6>
 8015f32:	f1c9 0e20 	rsb	lr, r9, #32
 8015f36:	468a      	mov	sl, r1
 8015f38:	f04f 0c00 	mov.w	ip, #0
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	fa02 f209 	lsl.w	r2, r2, r9
 8015f42:	ea42 020c 	orr.w	r2, r2, ip
 8015f46:	f84a 2b04 	str.w	r2, [sl], #4
 8015f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f4e:	4298      	cmp	r0, r3
 8015f50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015f54:	d8f2      	bhi.n	8015f3c <__lshift+0x70>
 8015f56:	1b03      	subs	r3, r0, r4
 8015f58:	3b15      	subs	r3, #21
 8015f5a:	f023 0303 	bic.w	r3, r3, #3
 8015f5e:	3304      	adds	r3, #4
 8015f60:	f104 0215 	add.w	r2, r4, #21
 8015f64:	4290      	cmp	r0, r2
 8015f66:	bf38      	it	cc
 8015f68:	2304      	movcc	r3, #4
 8015f6a:	f841 c003 	str.w	ip, [r1, r3]
 8015f6e:	f1bc 0f00 	cmp.w	ip, #0
 8015f72:	d001      	beq.n	8015f78 <__lshift+0xac>
 8015f74:	f108 0602 	add.w	r6, r8, #2
 8015f78:	3e01      	subs	r6, #1
 8015f7a:	4638      	mov	r0, r7
 8015f7c:	612e      	str	r6, [r5, #16]
 8015f7e:	4621      	mov	r1, r4
 8015f80:	f7ff fdd2 	bl	8015b28 <_Bfree>
 8015f84:	4628      	mov	r0, r5
 8015f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f8e:	3301      	adds	r3, #1
 8015f90:	e7c1      	b.n	8015f16 <__lshift+0x4a>
 8015f92:	3904      	subs	r1, #4
 8015f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f98:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f9c:	4298      	cmp	r0, r3
 8015f9e:	d8f9      	bhi.n	8015f94 <__lshift+0xc8>
 8015fa0:	e7ea      	b.n	8015f78 <__lshift+0xac>
 8015fa2:	bf00      	nop
 8015fa4:	080186e1 	.word	0x080186e1
 8015fa8:	080186f2 	.word	0x080186f2

08015fac <__mcmp>:
 8015fac:	b530      	push	{r4, r5, lr}
 8015fae:	6902      	ldr	r2, [r0, #16]
 8015fb0:	690c      	ldr	r4, [r1, #16]
 8015fb2:	1b12      	subs	r2, r2, r4
 8015fb4:	d10e      	bne.n	8015fd4 <__mcmp+0x28>
 8015fb6:	f100 0314 	add.w	r3, r0, #20
 8015fba:	3114      	adds	r1, #20
 8015fbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015fc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015fc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015fc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015fcc:	42a5      	cmp	r5, r4
 8015fce:	d003      	beq.n	8015fd8 <__mcmp+0x2c>
 8015fd0:	d305      	bcc.n	8015fde <__mcmp+0x32>
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	4610      	mov	r0, r2
 8015fd6:	bd30      	pop	{r4, r5, pc}
 8015fd8:	4283      	cmp	r3, r0
 8015fda:	d3f3      	bcc.n	8015fc4 <__mcmp+0x18>
 8015fdc:	e7fa      	b.n	8015fd4 <__mcmp+0x28>
 8015fde:	f04f 32ff 	mov.w	r2, #4294967295
 8015fe2:	e7f7      	b.n	8015fd4 <__mcmp+0x28>

08015fe4 <__mdiff>:
 8015fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	460c      	mov	r4, r1
 8015fea:	4606      	mov	r6, r0
 8015fec:	4611      	mov	r1, r2
 8015fee:	4620      	mov	r0, r4
 8015ff0:	4690      	mov	r8, r2
 8015ff2:	f7ff ffdb 	bl	8015fac <__mcmp>
 8015ff6:	1e05      	subs	r5, r0, #0
 8015ff8:	d110      	bne.n	801601c <__mdiff+0x38>
 8015ffa:	4629      	mov	r1, r5
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f7ff fd53 	bl	8015aa8 <_Balloc>
 8016002:	b930      	cbnz	r0, 8016012 <__mdiff+0x2e>
 8016004:	4b3a      	ldr	r3, [pc, #232]	; (80160f0 <__mdiff+0x10c>)
 8016006:	4602      	mov	r2, r0
 8016008:	f240 2132 	movw	r1, #562	; 0x232
 801600c:	4839      	ldr	r0, [pc, #228]	; (80160f4 <__mdiff+0x110>)
 801600e:	f7fd fa85 	bl	801351c <__assert_func>
 8016012:	2301      	movs	r3, #1
 8016014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601c:	bfa4      	itt	ge
 801601e:	4643      	movge	r3, r8
 8016020:	46a0      	movge	r8, r4
 8016022:	4630      	mov	r0, r6
 8016024:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016028:	bfa6      	itte	ge
 801602a:	461c      	movge	r4, r3
 801602c:	2500      	movge	r5, #0
 801602e:	2501      	movlt	r5, #1
 8016030:	f7ff fd3a 	bl	8015aa8 <_Balloc>
 8016034:	b920      	cbnz	r0, 8016040 <__mdiff+0x5c>
 8016036:	4b2e      	ldr	r3, [pc, #184]	; (80160f0 <__mdiff+0x10c>)
 8016038:	4602      	mov	r2, r0
 801603a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801603e:	e7e5      	b.n	801600c <__mdiff+0x28>
 8016040:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016044:	6926      	ldr	r6, [r4, #16]
 8016046:	60c5      	str	r5, [r0, #12]
 8016048:	f104 0914 	add.w	r9, r4, #20
 801604c:	f108 0514 	add.w	r5, r8, #20
 8016050:	f100 0e14 	add.w	lr, r0, #20
 8016054:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016058:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801605c:	f108 0210 	add.w	r2, r8, #16
 8016060:	46f2      	mov	sl, lr
 8016062:	2100      	movs	r1, #0
 8016064:	f859 3b04 	ldr.w	r3, [r9], #4
 8016068:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801606c:	fa1f f883 	uxth.w	r8, r3
 8016070:	fa11 f18b 	uxtah	r1, r1, fp
 8016074:	0c1b      	lsrs	r3, r3, #16
 8016076:	eba1 0808 	sub.w	r8, r1, r8
 801607a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801607e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016082:	fa1f f888 	uxth.w	r8, r8
 8016086:	1419      	asrs	r1, r3, #16
 8016088:	454e      	cmp	r6, r9
 801608a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801608e:	f84a 3b04 	str.w	r3, [sl], #4
 8016092:	d8e7      	bhi.n	8016064 <__mdiff+0x80>
 8016094:	1b33      	subs	r3, r6, r4
 8016096:	3b15      	subs	r3, #21
 8016098:	f023 0303 	bic.w	r3, r3, #3
 801609c:	3304      	adds	r3, #4
 801609e:	3415      	adds	r4, #21
 80160a0:	42a6      	cmp	r6, r4
 80160a2:	bf38      	it	cc
 80160a4:	2304      	movcc	r3, #4
 80160a6:	441d      	add	r5, r3
 80160a8:	4473      	add	r3, lr
 80160aa:	469e      	mov	lr, r3
 80160ac:	462e      	mov	r6, r5
 80160ae:	4566      	cmp	r6, ip
 80160b0:	d30e      	bcc.n	80160d0 <__mdiff+0xec>
 80160b2:	f10c 0203 	add.w	r2, ip, #3
 80160b6:	1b52      	subs	r2, r2, r5
 80160b8:	f022 0203 	bic.w	r2, r2, #3
 80160bc:	3d03      	subs	r5, #3
 80160be:	45ac      	cmp	ip, r5
 80160c0:	bf38      	it	cc
 80160c2:	2200      	movcc	r2, #0
 80160c4:	441a      	add	r2, r3
 80160c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80160ca:	b17b      	cbz	r3, 80160ec <__mdiff+0x108>
 80160cc:	6107      	str	r7, [r0, #16]
 80160ce:	e7a3      	b.n	8016018 <__mdiff+0x34>
 80160d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80160d4:	fa11 f288 	uxtah	r2, r1, r8
 80160d8:	1414      	asrs	r4, r2, #16
 80160da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80160de:	b292      	uxth	r2, r2
 80160e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80160e4:	f84e 2b04 	str.w	r2, [lr], #4
 80160e8:	1421      	asrs	r1, r4, #16
 80160ea:	e7e0      	b.n	80160ae <__mdiff+0xca>
 80160ec:	3f01      	subs	r7, #1
 80160ee:	e7ea      	b.n	80160c6 <__mdiff+0xe2>
 80160f0:	080186e1 	.word	0x080186e1
 80160f4:	080186f2 	.word	0x080186f2

080160f8 <__d2b>:
 80160f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80160fc:	4689      	mov	r9, r1
 80160fe:	2101      	movs	r1, #1
 8016100:	ec57 6b10 	vmov	r6, r7, d0
 8016104:	4690      	mov	r8, r2
 8016106:	f7ff fccf 	bl	8015aa8 <_Balloc>
 801610a:	4604      	mov	r4, r0
 801610c:	b930      	cbnz	r0, 801611c <__d2b+0x24>
 801610e:	4602      	mov	r2, r0
 8016110:	4b25      	ldr	r3, [pc, #148]	; (80161a8 <__d2b+0xb0>)
 8016112:	4826      	ldr	r0, [pc, #152]	; (80161ac <__d2b+0xb4>)
 8016114:	f240 310a 	movw	r1, #778	; 0x30a
 8016118:	f7fd fa00 	bl	801351c <__assert_func>
 801611c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016124:	bb35      	cbnz	r5, 8016174 <__d2b+0x7c>
 8016126:	2e00      	cmp	r6, #0
 8016128:	9301      	str	r3, [sp, #4]
 801612a:	d028      	beq.n	801617e <__d2b+0x86>
 801612c:	4668      	mov	r0, sp
 801612e:	9600      	str	r6, [sp, #0]
 8016130:	f7ff fd82 	bl	8015c38 <__lo0bits>
 8016134:	9900      	ldr	r1, [sp, #0]
 8016136:	b300      	cbz	r0, 801617a <__d2b+0x82>
 8016138:	9a01      	ldr	r2, [sp, #4]
 801613a:	f1c0 0320 	rsb	r3, r0, #32
 801613e:	fa02 f303 	lsl.w	r3, r2, r3
 8016142:	430b      	orrs	r3, r1
 8016144:	40c2      	lsrs	r2, r0
 8016146:	6163      	str	r3, [r4, #20]
 8016148:	9201      	str	r2, [sp, #4]
 801614a:	9b01      	ldr	r3, [sp, #4]
 801614c:	61a3      	str	r3, [r4, #24]
 801614e:	2b00      	cmp	r3, #0
 8016150:	bf14      	ite	ne
 8016152:	2202      	movne	r2, #2
 8016154:	2201      	moveq	r2, #1
 8016156:	6122      	str	r2, [r4, #16]
 8016158:	b1d5      	cbz	r5, 8016190 <__d2b+0x98>
 801615a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801615e:	4405      	add	r5, r0
 8016160:	f8c9 5000 	str.w	r5, [r9]
 8016164:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016168:	f8c8 0000 	str.w	r0, [r8]
 801616c:	4620      	mov	r0, r4
 801616e:	b003      	add	sp, #12
 8016170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016178:	e7d5      	b.n	8016126 <__d2b+0x2e>
 801617a:	6161      	str	r1, [r4, #20]
 801617c:	e7e5      	b.n	801614a <__d2b+0x52>
 801617e:	a801      	add	r0, sp, #4
 8016180:	f7ff fd5a 	bl	8015c38 <__lo0bits>
 8016184:	9b01      	ldr	r3, [sp, #4]
 8016186:	6163      	str	r3, [r4, #20]
 8016188:	2201      	movs	r2, #1
 801618a:	6122      	str	r2, [r4, #16]
 801618c:	3020      	adds	r0, #32
 801618e:	e7e3      	b.n	8016158 <__d2b+0x60>
 8016190:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016194:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016198:	f8c9 0000 	str.w	r0, [r9]
 801619c:	6918      	ldr	r0, [r3, #16]
 801619e:	f7ff fd2b 	bl	8015bf8 <__hi0bits>
 80161a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161a6:	e7df      	b.n	8016168 <__d2b+0x70>
 80161a8:	080186e1 	.word	0x080186e1
 80161ac:	080186f2 	.word	0x080186f2

080161b0 <_calloc_r>:
 80161b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161b2:	fba1 2402 	umull	r2, r4, r1, r2
 80161b6:	b94c      	cbnz	r4, 80161cc <_calloc_r+0x1c>
 80161b8:	4611      	mov	r1, r2
 80161ba:	9201      	str	r2, [sp, #4]
 80161bc:	f7fd fb62 	bl	8013884 <_malloc_r>
 80161c0:	9a01      	ldr	r2, [sp, #4]
 80161c2:	4605      	mov	r5, r0
 80161c4:	b930      	cbnz	r0, 80161d4 <_calloc_r+0x24>
 80161c6:	4628      	mov	r0, r5
 80161c8:	b003      	add	sp, #12
 80161ca:	bd30      	pop	{r4, r5, pc}
 80161cc:	220c      	movs	r2, #12
 80161ce:	6002      	str	r2, [r0, #0]
 80161d0:	2500      	movs	r5, #0
 80161d2:	e7f8      	b.n	80161c6 <_calloc_r+0x16>
 80161d4:	4621      	mov	r1, r4
 80161d6:	f7fd fb2c 	bl	8013832 <memset>
 80161da:	e7f4      	b.n	80161c6 <_calloc_r+0x16>

080161dc <_free_r>:
 80161dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161de:	2900      	cmp	r1, #0
 80161e0:	d044      	beq.n	801626c <_free_r+0x90>
 80161e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161e6:	9001      	str	r0, [sp, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f1a1 0404 	sub.w	r4, r1, #4
 80161ee:	bfb8      	it	lt
 80161f0:	18e4      	addlt	r4, r4, r3
 80161f2:	f7ff fc4d 	bl	8015a90 <__malloc_lock>
 80161f6:	4a1e      	ldr	r2, [pc, #120]	; (8016270 <_free_r+0x94>)
 80161f8:	9801      	ldr	r0, [sp, #4]
 80161fa:	6813      	ldr	r3, [r2, #0]
 80161fc:	b933      	cbnz	r3, 801620c <_free_r+0x30>
 80161fe:	6063      	str	r3, [r4, #4]
 8016200:	6014      	str	r4, [r2, #0]
 8016202:	b003      	add	sp, #12
 8016204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016208:	f7ff bc48 	b.w	8015a9c <__malloc_unlock>
 801620c:	42a3      	cmp	r3, r4
 801620e:	d908      	bls.n	8016222 <_free_r+0x46>
 8016210:	6825      	ldr	r5, [r4, #0]
 8016212:	1961      	adds	r1, r4, r5
 8016214:	428b      	cmp	r3, r1
 8016216:	bf01      	itttt	eq
 8016218:	6819      	ldreq	r1, [r3, #0]
 801621a:	685b      	ldreq	r3, [r3, #4]
 801621c:	1949      	addeq	r1, r1, r5
 801621e:	6021      	streq	r1, [r4, #0]
 8016220:	e7ed      	b.n	80161fe <_free_r+0x22>
 8016222:	461a      	mov	r2, r3
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	b10b      	cbz	r3, 801622c <_free_r+0x50>
 8016228:	42a3      	cmp	r3, r4
 801622a:	d9fa      	bls.n	8016222 <_free_r+0x46>
 801622c:	6811      	ldr	r1, [r2, #0]
 801622e:	1855      	adds	r5, r2, r1
 8016230:	42a5      	cmp	r5, r4
 8016232:	d10b      	bne.n	801624c <_free_r+0x70>
 8016234:	6824      	ldr	r4, [r4, #0]
 8016236:	4421      	add	r1, r4
 8016238:	1854      	adds	r4, r2, r1
 801623a:	42a3      	cmp	r3, r4
 801623c:	6011      	str	r1, [r2, #0]
 801623e:	d1e0      	bne.n	8016202 <_free_r+0x26>
 8016240:	681c      	ldr	r4, [r3, #0]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	6053      	str	r3, [r2, #4]
 8016246:	4421      	add	r1, r4
 8016248:	6011      	str	r1, [r2, #0]
 801624a:	e7da      	b.n	8016202 <_free_r+0x26>
 801624c:	d902      	bls.n	8016254 <_free_r+0x78>
 801624e:	230c      	movs	r3, #12
 8016250:	6003      	str	r3, [r0, #0]
 8016252:	e7d6      	b.n	8016202 <_free_r+0x26>
 8016254:	6825      	ldr	r5, [r4, #0]
 8016256:	1961      	adds	r1, r4, r5
 8016258:	428b      	cmp	r3, r1
 801625a:	bf04      	itt	eq
 801625c:	6819      	ldreq	r1, [r3, #0]
 801625e:	685b      	ldreq	r3, [r3, #4]
 8016260:	6063      	str	r3, [r4, #4]
 8016262:	bf04      	itt	eq
 8016264:	1949      	addeq	r1, r1, r5
 8016266:	6021      	streq	r1, [r4, #0]
 8016268:	6054      	str	r4, [r2, #4]
 801626a:	e7ca      	b.n	8016202 <_free_r+0x26>
 801626c:	b003      	add	sp, #12
 801626e:	bd30      	pop	{r4, r5, pc}
 8016270:	2000508c 	.word	0x2000508c

08016274 <_realloc_r>:
 8016274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016278:	4680      	mov	r8, r0
 801627a:	4614      	mov	r4, r2
 801627c:	460e      	mov	r6, r1
 801627e:	b921      	cbnz	r1, 801628a <_realloc_r+0x16>
 8016280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016284:	4611      	mov	r1, r2
 8016286:	f7fd bafd 	b.w	8013884 <_malloc_r>
 801628a:	b92a      	cbnz	r2, 8016298 <_realloc_r+0x24>
 801628c:	f7ff ffa6 	bl	80161dc <_free_r>
 8016290:	4625      	mov	r5, r4
 8016292:	4628      	mov	r0, r5
 8016294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016298:	f000 fa00 	bl	801669c <_malloc_usable_size_r>
 801629c:	4284      	cmp	r4, r0
 801629e:	4607      	mov	r7, r0
 80162a0:	d802      	bhi.n	80162a8 <_realloc_r+0x34>
 80162a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162a6:	d812      	bhi.n	80162ce <_realloc_r+0x5a>
 80162a8:	4621      	mov	r1, r4
 80162aa:	4640      	mov	r0, r8
 80162ac:	f7fd faea 	bl	8013884 <_malloc_r>
 80162b0:	4605      	mov	r5, r0
 80162b2:	2800      	cmp	r0, #0
 80162b4:	d0ed      	beq.n	8016292 <_realloc_r+0x1e>
 80162b6:	42bc      	cmp	r4, r7
 80162b8:	4622      	mov	r2, r4
 80162ba:	4631      	mov	r1, r6
 80162bc:	bf28      	it	cs
 80162be:	463a      	movcs	r2, r7
 80162c0:	f7fd fa8f 	bl	80137e2 <memcpy>
 80162c4:	4631      	mov	r1, r6
 80162c6:	4640      	mov	r0, r8
 80162c8:	f7ff ff88 	bl	80161dc <_free_r>
 80162cc:	e7e1      	b.n	8016292 <_realloc_r+0x1e>
 80162ce:	4635      	mov	r5, r6
 80162d0:	e7df      	b.n	8016292 <_realloc_r+0x1e>

080162d2 <__ssputs_r>:
 80162d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162d6:	688e      	ldr	r6, [r1, #8]
 80162d8:	429e      	cmp	r6, r3
 80162da:	4682      	mov	sl, r0
 80162dc:	460c      	mov	r4, r1
 80162de:	4690      	mov	r8, r2
 80162e0:	461f      	mov	r7, r3
 80162e2:	d838      	bhi.n	8016356 <__ssputs_r+0x84>
 80162e4:	898a      	ldrh	r2, [r1, #12]
 80162e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80162ea:	d032      	beq.n	8016352 <__ssputs_r+0x80>
 80162ec:	6825      	ldr	r5, [r4, #0]
 80162ee:	6909      	ldr	r1, [r1, #16]
 80162f0:	eba5 0901 	sub.w	r9, r5, r1
 80162f4:	6965      	ldr	r5, [r4, #20]
 80162f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80162fe:	3301      	adds	r3, #1
 8016300:	444b      	add	r3, r9
 8016302:	106d      	asrs	r5, r5, #1
 8016304:	429d      	cmp	r5, r3
 8016306:	bf38      	it	cc
 8016308:	461d      	movcc	r5, r3
 801630a:	0553      	lsls	r3, r2, #21
 801630c:	d531      	bpl.n	8016372 <__ssputs_r+0xa0>
 801630e:	4629      	mov	r1, r5
 8016310:	f7fd fab8 	bl	8013884 <_malloc_r>
 8016314:	4606      	mov	r6, r0
 8016316:	b950      	cbnz	r0, 801632e <__ssputs_r+0x5c>
 8016318:	230c      	movs	r3, #12
 801631a:	f8ca 3000 	str.w	r3, [sl]
 801631e:	89a3      	ldrh	r3, [r4, #12]
 8016320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016324:	81a3      	strh	r3, [r4, #12]
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
 801632a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632e:	6921      	ldr	r1, [r4, #16]
 8016330:	464a      	mov	r2, r9
 8016332:	f7fd fa56 	bl	80137e2 <memcpy>
 8016336:	89a3      	ldrh	r3, [r4, #12]
 8016338:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016340:	81a3      	strh	r3, [r4, #12]
 8016342:	6126      	str	r6, [r4, #16]
 8016344:	6165      	str	r5, [r4, #20]
 8016346:	444e      	add	r6, r9
 8016348:	eba5 0509 	sub.w	r5, r5, r9
 801634c:	6026      	str	r6, [r4, #0]
 801634e:	60a5      	str	r5, [r4, #8]
 8016350:	463e      	mov	r6, r7
 8016352:	42be      	cmp	r6, r7
 8016354:	d900      	bls.n	8016358 <__ssputs_r+0x86>
 8016356:	463e      	mov	r6, r7
 8016358:	6820      	ldr	r0, [r4, #0]
 801635a:	4632      	mov	r2, r6
 801635c:	4641      	mov	r1, r8
 801635e:	f7fd fa4e 	bl	80137fe <memmove>
 8016362:	68a3      	ldr	r3, [r4, #8]
 8016364:	1b9b      	subs	r3, r3, r6
 8016366:	60a3      	str	r3, [r4, #8]
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	4433      	add	r3, r6
 801636c:	6023      	str	r3, [r4, #0]
 801636e:	2000      	movs	r0, #0
 8016370:	e7db      	b.n	801632a <__ssputs_r+0x58>
 8016372:	462a      	mov	r2, r5
 8016374:	f7ff ff7e 	bl	8016274 <_realloc_r>
 8016378:	4606      	mov	r6, r0
 801637a:	2800      	cmp	r0, #0
 801637c:	d1e1      	bne.n	8016342 <__ssputs_r+0x70>
 801637e:	6921      	ldr	r1, [r4, #16]
 8016380:	4650      	mov	r0, sl
 8016382:	f7ff ff2b 	bl	80161dc <_free_r>
 8016386:	e7c7      	b.n	8016318 <__ssputs_r+0x46>

08016388 <_svfiprintf_r>:
 8016388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638c:	4698      	mov	r8, r3
 801638e:	898b      	ldrh	r3, [r1, #12]
 8016390:	061b      	lsls	r3, r3, #24
 8016392:	b09d      	sub	sp, #116	; 0x74
 8016394:	4607      	mov	r7, r0
 8016396:	460d      	mov	r5, r1
 8016398:	4614      	mov	r4, r2
 801639a:	d50e      	bpl.n	80163ba <_svfiprintf_r+0x32>
 801639c:	690b      	ldr	r3, [r1, #16]
 801639e:	b963      	cbnz	r3, 80163ba <_svfiprintf_r+0x32>
 80163a0:	2140      	movs	r1, #64	; 0x40
 80163a2:	f7fd fa6f 	bl	8013884 <_malloc_r>
 80163a6:	6028      	str	r0, [r5, #0]
 80163a8:	6128      	str	r0, [r5, #16]
 80163aa:	b920      	cbnz	r0, 80163b6 <_svfiprintf_r+0x2e>
 80163ac:	230c      	movs	r3, #12
 80163ae:	603b      	str	r3, [r7, #0]
 80163b0:	f04f 30ff 	mov.w	r0, #4294967295
 80163b4:	e0d1      	b.n	801655a <_svfiprintf_r+0x1d2>
 80163b6:	2340      	movs	r3, #64	; 0x40
 80163b8:	616b      	str	r3, [r5, #20]
 80163ba:	2300      	movs	r3, #0
 80163bc:	9309      	str	r3, [sp, #36]	; 0x24
 80163be:	2320      	movs	r3, #32
 80163c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c8:	2330      	movs	r3, #48	; 0x30
 80163ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016574 <_svfiprintf_r+0x1ec>
 80163ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163d2:	f04f 0901 	mov.w	r9, #1
 80163d6:	4623      	mov	r3, r4
 80163d8:	469a      	mov	sl, r3
 80163da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163de:	b10a      	cbz	r2, 80163e4 <_svfiprintf_r+0x5c>
 80163e0:	2a25      	cmp	r2, #37	; 0x25
 80163e2:	d1f9      	bne.n	80163d8 <_svfiprintf_r+0x50>
 80163e4:	ebba 0b04 	subs.w	fp, sl, r4
 80163e8:	d00b      	beq.n	8016402 <_svfiprintf_r+0x7a>
 80163ea:	465b      	mov	r3, fp
 80163ec:	4622      	mov	r2, r4
 80163ee:	4629      	mov	r1, r5
 80163f0:	4638      	mov	r0, r7
 80163f2:	f7ff ff6e 	bl	80162d2 <__ssputs_r>
 80163f6:	3001      	adds	r0, #1
 80163f8:	f000 80aa 	beq.w	8016550 <_svfiprintf_r+0x1c8>
 80163fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163fe:	445a      	add	r2, fp
 8016400:	9209      	str	r2, [sp, #36]	; 0x24
 8016402:	f89a 3000 	ldrb.w	r3, [sl]
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 80a2 	beq.w	8016550 <_svfiprintf_r+0x1c8>
 801640c:	2300      	movs	r3, #0
 801640e:	f04f 32ff 	mov.w	r2, #4294967295
 8016412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016416:	f10a 0a01 	add.w	sl, sl, #1
 801641a:	9304      	str	r3, [sp, #16]
 801641c:	9307      	str	r3, [sp, #28]
 801641e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016422:	931a      	str	r3, [sp, #104]	; 0x68
 8016424:	4654      	mov	r4, sl
 8016426:	2205      	movs	r2, #5
 8016428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801642c:	4851      	ldr	r0, [pc, #324]	; (8016574 <_svfiprintf_r+0x1ec>)
 801642e:	f7e9 fed7 	bl	80001e0 <memchr>
 8016432:	9a04      	ldr	r2, [sp, #16]
 8016434:	b9d8      	cbnz	r0, 801646e <_svfiprintf_r+0xe6>
 8016436:	06d0      	lsls	r0, r2, #27
 8016438:	bf44      	itt	mi
 801643a:	2320      	movmi	r3, #32
 801643c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016440:	0711      	lsls	r1, r2, #28
 8016442:	bf44      	itt	mi
 8016444:	232b      	movmi	r3, #43	; 0x2b
 8016446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801644a:	f89a 3000 	ldrb.w	r3, [sl]
 801644e:	2b2a      	cmp	r3, #42	; 0x2a
 8016450:	d015      	beq.n	801647e <_svfiprintf_r+0xf6>
 8016452:	9a07      	ldr	r2, [sp, #28]
 8016454:	4654      	mov	r4, sl
 8016456:	2000      	movs	r0, #0
 8016458:	f04f 0c0a 	mov.w	ip, #10
 801645c:	4621      	mov	r1, r4
 801645e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016462:	3b30      	subs	r3, #48	; 0x30
 8016464:	2b09      	cmp	r3, #9
 8016466:	d94e      	bls.n	8016506 <_svfiprintf_r+0x17e>
 8016468:	b1b0      	cbz	r0, 8016498 <_svfiprintf_r+0x110>
 801646a:	9207      	str	r2, [sp, #28]
 801646c:	e014      	b.n	8016498 <_svfiprintf_r+0x110>
 801646e:	eba0 0308 	sub.w	r3, r0, r8
 8016472:	fa09 f303 	lsl.w	r3, r9, r3
 8016476:	4313      	orrs	r3, r2
 8016478:	9304      	str	r3, [sp, #16]
 801647a:	46a2      	mov	sl, r4
 801647c:	e7d2      	b.n	8016424 <_svfiprintf_r+0x9c>
 801647e:	9b03      	ldr	r3, [sp, #12]
 8016480:	1d19      	adds	r1, r3, #4
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	9103      	str	r1, [sp, #12]
 8016486:	2b00      	cmp	r3, #0
 8016488:	bfbb      	ittet	lt
 801648a:	425b      	neglt	r3, r3
 801648c:	f042 0202 	orrlt.w	r2, r2, #2
 8016490:	9307      	strge	r3, [sp, #28]
 8016492:	9307      	strlt	r3, [sp, #28]
 8016494:	bfb8      	it	lt
 8016496:	9204      	strlt	r2, [sp, #16]
 8016498:	7823      	ldrb	r3, [r4, #0]
 801649a:	2b2e      	cmp	r3, #46	; 0x2e
 801649c:	d10c      	bne.n	80164b8 <_svfiprintf_r+0x130>
 801649e:	7863      	ldrb	r3, [r4, #1]
 80164a0:	2b2a      	cmp	r3, #42	; 0x2a
 80164a2:	d135      	bne.n	8016510 <_svfiprintf_r+0x188>
 80164a4:	9b03      	ldr	r3, [sp, #12]
 80164a6:	1d1a      	adds	r2, r3, #4
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	9203      	str	r2, [sp, #12]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	bfb8      	it	lt
 80164b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80164b4:	3402      	adds	r4, #2
 80164b6:	9305      	str	r3, [sp, #20]
 80164b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016584 <_svfiprintf_r+0x1fc>
 80164bc:	7821      	ldrb	r1, [r4, #0]
 80164be:	2203      	movs	r2, #3
 80164c0:	4650      	mov	r0, sl
 80164c2:	f7e9 fe8d 	bl	80001e0 <memchr>
 80164c6:	b140      	cbz	r0, 80164da <_svfiprintf_r+0x152>
 80164c8:	2340      	movs	r3, #64	; 0x40
 80164ca:	eba0 000a 	sub.w	r0, r0, sl
 80164ce:	fa03 f000 	lsl.w	r0, r3, r0
 80164d2:	9b04      	ldr	r3, [sp, #16]
 80164d4:	4303      	orrs	r3, r0
 80164d6:	3401      	adds	r4, #1
 80164d8:	9304      	str	r3, [sp, #16]
 80164da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164de:	4826      	ldr	r0, [pc, #152]	; (8016578 <_svfiprintf_r+0x1f0>)
 80164e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164e4:	2206      	movs	r2, #6
 80164e6:	f7e9 fe7b 	bl	80001e0 <memchr>
 80164ea:	2800      	cmp	r0, #0
 80164ec:	d038      	beq.n	8016560 <_svfiprintf_r+0x1d8>
 80164ee:	4b23      	ldr	r3, [pc, #140]	; (801657c <_svfiprintf_r+0x1f4>)
 80164f0:	bb1b      	cbnz	r3, 801653a <_svfiprintf_r+0x1b2>
 80164f2:	9b03      	ldr	r3, [sp, #12]
 80164f4:	3307      	adds	r3, #7
 80164f6:	f023 0307 	bic.w	r3, r3, #7
 80164fa:	3308      	adds	r3, #8
 80164fc:	9303      	str	r3, [sp, #12]
 80164fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016500:	4433      	add	r3, r6
 8016502:	9309      	str	r3, [sp, #36]	; 0x24
 8016504:	e767      	b.n	80163d6 <_svfiprintf_r+0x4e>
 8016506:	fb0c 3202 	mla	r2, ip, r2, r3
 801650a:	460c      	mov	r4, r1
 801650c:	2001      	movs	r0, #1
 801650e:	e7a5      	b.n	801645c <_svfiprintf_r+0xd4>
 8016510:	2300      	movs	r3, #0
 8016512:	3401      	adds	r4, #1
 8016514:	9305      	str	r3, [sp, #20]
 8016516:	4619      	mov	r1, r3
 8016518:	f04f 0c0a 	mov.w	ip, #10
 801651c:	4620      	mov	r0, r4
 801651e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016522:	3a30      	subs	r2, #48	; 0x30
 8016524:	2a09      	cmp	r2, #9
 8016526:	d903      	bls.n	8016530 <_svfiprintf_r+0x1a8>
 8016528:	2b00      	cmp	r3, #0
 801652a:	d0c5      	beq.n	80164b8 <_svfiprintf_r+0x130>
 801652c:	9105      	str	r1, [sp, #20]
 801652e:	e7c3      	b.n	80164b8 <_svfiprintf_r+0x130>
 8016530:	fb0c 2101 	mla	r1, ip, r1, r2
 8016534:	4604      	mov	r4, r0
 8016536:	2301      	movs	r3, #1
 8016538:	e7f0      	b.n	801651c <_svfiprintf_r+0x194>
 801653a:	ab03      	add	r3, sp, #12
 801653c:	9300      	str	r3, [sp, #0]
 801653e:	462a      	mov	r2, r5
 8016540:	4b0f      	ldr	r3, [pc, #60]	; (8016580 <_svfiprintf_r+0x1f8>)
 8016542:	a904      	add	r1, sp, #16
 8016544:	4638      	mov	r0, r7
 8016546:	f7fd fc0b 	bl	8013d60 <_printf_float>
 801654a:	1c42      	adds	r2, r0, #1
 801654c:	4606      	mov	r6, r0
 801654e:	d1d6      	bne.n	80164fe <_svfiprintf_r+0x176>
 8016550:	89ab      	ldrh	r3, [r5, #12]
 8016552:	065b      	lsls	r3, r3, #25
 8016554:	f53f af2c 	bmi.w	80163b0 <_svfiprintf_r+0x28>
 8016558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801655a:	b01d      	add	sp, #116	; 0x74
 801655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016560:	ab03      	add	r3, sp, #12
 8016562:	9300      	str	r3, [sp, #0]
 8016564:	462a      	mov	r2, r5
 8016566:	4b06      	ldr	r3, [pc, #24]	; (8016580 <_svfiprintf_r+0x1f8>)
 8016568:	a904      	add	r1, sp, #16
 801656a:	4638      	mov	r0, r7
 801656c:	f7fd fe9c 	bl	80142a8 <_printf_i>
 8016570:	e7eb      	b.n	801654a <_svfiprintf_r+0x1c2>
 8016572:	bf00      	nop
 8016574:	080185c0 	.word	0x080185c0
 8016578:	080185ca 	.word	0x080185ca
 801657c:	08013d61 	.word	0x08013d61
 8016580:	080162d3 	.word	0x080162d3
 8016584:	080185c6 	.word	0x080185c6

08016588 <_read_r>:
 8016588:	b538      	push	{r3, r4, r5, lr}
 801658a:	4d07      	ldr	r5, [pc, #28]	; (80165a8 <_read_r+0x20>)
 801658c:	4604      	mov	r4, r0
 801658e:	4608      	mov	r0, r1
 8016590:	4611      	mov	r1, r2
 8016592:	2200      	movs	r2, #0
 8016594:	602a      	str	r2, [r5, #0]
 8016596:	461a      	mov	r2, r3
 8016598:	f7ed f9d6 	bl	8003948 <_read>
 801659c:	1c43      	adds	r3, r0, #1
 801659e:	d102      	bne.n	80165a6 <_read_r+0x1e>
 80165a0:	682b      	ldr	r3, [r5, #0]
 80165a2:	b103      	cbz	r3, 80165a6 <_read_r+0x1e>
 80165a4:	6023      	str	r3, [r4, #0]
 80165a6:	bd38      	pop	{r3, r4, r5, pc}
 80165a8:	20005094 	.word	0x20005094

080165ac <_raise_r>:
 80165ac:	291f      	cmp	r1, #31
 80165ae:	b538      	push	{r3, r4, r5, lr}
 80165b0:	4604      	mov	r4, r0
 80165b2:	460d      	mov	r5, r1
 80165b4:	d904      	bls.n	80165c0 <_raise_r+0x14>
 80165b6:	2316      	movs	r3, #22
 80165b8:	6003      	str	r3, [r0, #0]
 80165ba:	f04f 30ff 	mov.w	r0, #4294967295
 80165be:	bd38      	pop	{r3, r4, r5, pc}
 80165c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80165c2:	b112      	cbz	r2, 80165ca <_raise_r+0x1e>
 80165c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165c8:	b94b      	cbnz	r3, 80165de <_raise_r+0x32>
 80165ca:	4620      	mov	r0, r4
 80165cc:	f000 f830 	bl	8016630 <_getpid_r>
 80165d0:	462a      	mov	r2, r5
 80165d2:	4601      	mov	r1, r0
 80165d4:	4620      	mov	r0, r4
 80165d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165da:	f000 b817 	b.w	801660c <_kill_r>
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d00a      	beq.n	80165f8 <_raise_r+0x4c>
 80165e2:	1c59      	adds	r1, r3, #1
 80165e4:	d103      	bne.n	80165ee <_raise_r+0x42>
 80165e6:	2316      	movs	r3, #22
 80165e8:	6003      	str	r3, [r0, #0]
 80165ea:	2001      	movs	r0, #1
 80165ec:	e7e7      	b.n	80165be <_raise_r+0x12>
 80165ee:	2400      	movs	r4, #0
 80165f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165f4:	4628      	mov	r0, r5
 80165f6:	4798      	blx	r3
 80165f8:	2000      	movs	r0, #0
 80165fa:	e7e0      	b.n	80165be <_raise_r+0x12>

080165fc <raise>:
 80165fc:	4b02      	ldr	r3, [pc, #8]	; (8016608 <raise+0xc>)
 80165fe:	4601      	mov	r1, r0
 8016600:	6818      	ldr	r0, [r3, #0]
 8016602:	f7ff bfd3 	b.w	80165ac <_raise_r>
 8016606:	bf00      	nop
 8016608:	20000058 	.word	0x20000058

0801660c <_kill_r>:
 801660c:	b538      	push	{r3, r4, r5, lr}
 801660e:	4d07      	ldr	r5, [pc, #28]	; (801662c <_kill_r+0x20>)
 8016610:	2300      	movs	r3, #0
 8016612:	4604      	mov	r4, r0
 8016614:	4608      	mov	r0, r1
 8016616:	4611      	mov	r1, r2
 8016618:	602b      	str	r3, [r5, #0]
 801661a:	f7ed f97b 	bl	8003914 <_kill>
 801661e:	1c43      	adds	r3, r0, #1
 8016620:	d102      	bne.n	8016628 <_kill_r+0x1c>
 8016622:	682b      	ldr	r3, [r5, #0]
 8016624:	b103      	cbz	r3, 8016628 <_kill_r+0x1c>
 8016626:	6023      	str	r3, [r4, #0]
 8016628:	bd38      	pop	{r3, r4, r5, pc}
 801662a:	bf00      	nop
 801662c:	20005094 	.word	0x20005094

08016630 <_getpid_r>:
 8016630:	f7ed b968 	b.w	8003904 <_getpid>

08016634 <_fstat_r>:
 8016634:	b538      	push	{r3, r4, r5, lr}
 8016636:	4d07      	ldr	r5, [pc, #28]	; (8016654 <_fstat_r+0x20>)
 8016638:	2300      	movs	r3, #0
 801663a:	4604      	mov	r4, r0
 801663c:	4608      	mov	r0, r1
 801663e:	4611      	mov	r1, r2
 8016640:	602b      	str	r3, [r5, #0]
 8016642:	f7ed f9aa 	bl	800399a <_fstat>
 8016646:	1c43      	adds	r3, r0, #1
 8016648:	d102      	bne.n	8016650 <_fstat_r+0x1c>
 801664a:	682b      	ldr	r3, [r5, #0]
 801664c:	b103      	cbz	r3, 8016650 <_fstat_r+0x1c>
 801664e:	6023      	str	r3, [r4, #0]
 8016650:	bd38      	pop	{r3, r4, r5, pc}
 8016652:	bf00      	nop
 8016654:	20005094 	.word	0x20005094

08016658 <_isatty_r>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	4d06      	ldr	r5, [pc, #24]	; (8016674 <_isatty_r+0x1c>)
 801665c:	2300      	movs	r3, #0
 801665e:	4604      	mov	r4, r0
 8016660:	4608      	mov	r0, r1
 8016662:	602b      	str	r3, [r5, #0]
 8016664:	f7ed f9a9 	bl	80039ba <_isatty>
 8016668:	1c43      	adds	r3, r0, #1
 801666a:	d102      	bne.n	8016672 <_isatty_r+0x1a>
 801666c:	682b      	ldr	r3, [r5, #0]
 801666e:	b103      	cbz	r3, 8016672 <_isatty_r+0x1a>
 8016670:	6023      	str	r3, [r4, #0]
 8016672:	bd38      	pop	{r3, r4, r5, pc}
 8016674:	20005094 	.word	0x20005094

08016678 <__ascii_mbtowc>:
 8016678:	b082      	sub	sp, #8
 801667a:	b901      	cbnz	r1, 801667e <__ascii_mbtowc+0x6>
 801667c:	a901      	add	r1, sp, #4
 801667e:	b142      	cbz	r2, 8016692 <__ascii_mbtowc+0x1a>
 8016680:	b14b      	cbz	r3, 8016696 <__ascii_mbtowc+0x1e>
 8016682:	7813      	ldrb	r3, [r2, #0]
 8016684:	600b      	str	r3, [r1, #0]
 8016686:	7812      	ldrb	r2, [r2, #0]
 8016688:	1e10      	subs	r0, r2, #0
 801668a:	bf18      	it	ne
 801668c:	2001      	movne	r0, #1
 801668e:	b002      	add	sp, #8
 8016690:	4770      	bx	lr
 8016692:	4610      	mov	r0, r2
 8016694:	e7fb      	b.n	801668e <__ascii_mbtowc+0x16>
 8016696:	f06f 0001 	mvn.w	r0, #1
 801669a:	e7f8      	b.n	801668e <__ascii_mbtowc+0x16>

0801669c <_malloc_usable_size_r>:
 801669c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166a0:	1f18      	subs	r0, r3, #4
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	bfbc      	itt	lt
 80166a6:	580b      	ldrlt	r3, [r1, r0]
 80166a8:	18c0      	addlt	r0, r0, r3
 80166aa:	4770      	bx	lr

080166ac <__ascii_wctomb>:
 80166ac:	b149      	cbz	r1, 80166c2 <__ascii_wctomb+0x16>
 80166ae:	2aff      	cmp	r2, #255	; 0xff
 80166b0:	bf85      	ittet	hi
 80166b2:	238a      	movhi	r3, #138	; 0x8a
 80166b4:	6003      	strhi	r3, [r0, #0]
 80166b6:	700a      	strbls	r2, [r1, #0]
 80166b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80166bc:	bf98      	it	ls
 80166be:	2001      	movls	r0, #1
 80166c0:	4770      	bx	lr
 80166c2:	4608      	mov	r0, r1
 80166c4:	4770      	bx	lr
	...

080166c8 <_init>:
 80166c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ca:	bf00      	nop
 80166cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ce:	bc08      	pop	{r3}
 80166d0:	469e      	mov	lr, r3
 80166d2:	4770      	bx	lr

080166d4 <_fini>:
 80166d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166d6:	bf00      	nop
 80166d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166da:	bc08      	pop	{r3}
 80166dc:	469e      	mov	lr, r3
 80166de:	4770      	bx	lr
