
Practica_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800ce74  0800ce74  0001ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d478  0800d478  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d478  0800d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d480  0800d480  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d480  0800d480  0001d480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002780  20000084  0800d50c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002804  0800d50c  00022804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e876  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005805  00000000  00000000  0004e92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002790  00000000  00000000  00054130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002558  00000000  00000000  000568c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007acd  00000000  00000000  00058e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c889  00000000  00000000  000608e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112a79  00000000  00000000  0008d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019fbe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b434  00000000  00000000  0019fc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce5c 	.word	0x0800ce5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800ce5c 	.word	0x0800ce5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b974 	b.w	8000948 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468e      	mov	lr, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14d      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000686:	428a      	cmp	r2, r1
 8000688:	4694      	mov	ip, r2
 800068a:	d969      	bls.n	8000760 <__udivmoddi4+0xe8>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b152      	cbz	r2, 80006a8 <__udivmoddi4+0x30>
 8000692:	fa01 f302 	lsl.w	r3, r1, r2
 8000696:	f1c2 0120 	rsb	r1, r2, #32
 800069a:	fa20 f101 	lsr.w	r1, r0, r1
 800069e:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a2:	ea41 0e03 	orr.w	lr, r1, r3
 80006a6:	4094      	lsls	r4, r2
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	fbbe f6f8 	udiv	r6, lr, r8
 80006b2:	fa1f f78c 	uxth.w	r7, ip
 80006b6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006be:	fb06 f107 	mul.w	r1, r6, r7
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ce:	f080 811f 	bcs.w	8000910 <__udivmoddi4+0x298>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 811c 	bls.w	8000910 <__udivmoddi4+0x298>
 80006d8:	3e02      	subs	r6, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e4:	fb08 3310 	mls	r3, r8, r0, r3
 80006e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ec:	fb00 f707 	mul.w	r7, r0, r7
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x92>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fc:	f080 810a 	bcs.w	8000914 <__udivmoddi4+0x29c>
 8000700:	42a7      	cmp	r7, r4
 8000702:	f240 8107 	bls.w	8000914 <__udivmoddi4+0x29c>
 8000706:	4464      	add	r4, ip
 8000708:	3802      	subs	r0, #2
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	1be4      	subs	r4, r4, r7
 8000710:	2600      	movs	r6, #0
 8000712:	b11d      	cbz	r5, 800071c <__udivmoddi4+0xa4>
 8000714:	40d4      	lsrs	r4, r2
 8000716:	2300      	movs	r3, #0
 8000718:	e9c5 4300 	strd	r4, r3, [r5]
 800071c:	4631      	mov	r1, r6
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0xc2>
 8000726:	2d00      	cmp	r5, #0
 8000728:	f000 80ef 	beq.w	800090a <__udivmoddi4+0x292>
 800072c:	2600      	movs	r6, #0
 800072e:	e9c5 0100 	strd	r0, r1, [r5]
 8000732:	4630      	mov	r0, r6
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	fab3 f683 	clz	r6, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d14a      	bne.n	80007d8 <__udivmoddi4+0x160>
 8000742:	428b      	cmp	r3, r1
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xd4>
 8000746:	4282      	cmp	r2, r0
 8000748:	f200 80f9 	bhi.w	800093e <__udivmoddi4+0x2c6>
 800074c:	1a84      	subs	r4, r0, r2
 800074e:	eb61 0303 	sbc.w	r3, r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	469e      	mov	lr, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d0e0      	beq.n	800071c <__udivmoddi4+0xa4>
 800075a:	e9c5 4e00 	strd	r4, lr, [r5]
 800075e:	e7dd      	b.n	800071c <__udivmoddi4+0xa4>
 8000760:	b902      	cbnz	r2, 8000764 <__udivmoddi4+0xec>
 8000762:	deff      	udf	#255	; 0xff
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	2a00      	cmp	r2, #0
 800076a:	f040 8092 	bne.w	8000892 <__udivmoddi4+0x21a>
 800076e:	eba1 010c 	sub.w	r1, r1, ip
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2601      	movs	r6, #1
 800077c:	0c20      	lsrs	r0, r4, #16
 800077e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000782:	fb07 1113 	mls	r1, r7, r3, r1
 8000786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800078a:	fb0e f003 	mul.w	r0, lr, r3
 800078e:	4288      	cmp	r0, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x12c>
 8000792:	eb1c 0101 	adds.w	r1, ip, r1
 8000796:	f103 38ff 	add.w	r8, r3, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x12a>
 800079c:	4288      	cmp	r0, r1
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2c0>
 80007a2:	4643      	mov	r3, r8
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ac:	fb07 1110 	mls	r1, r7, r0, r1
 80007b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x156>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x154>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2ca>
 80007cc:	4608      	mov	r0, r1
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007d6:	e79c      	b.n	8000712 <__udivmoddi4+0x9a>
 80007d8:	f1c6 0720 	rsb	r7, r6, #32
 80007dc:	40b3      	lsls	r3, r6
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ea:	fa01 f306 	lsl.w	r3, r1, r6
 80007ee:	431c      	orrs	r4, r3
 80007f0:	40f9      	lsrs	r1, r7
 80007f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f6:	fa00 f306 	lsl.w	r3, r0, r6
 80007fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	fa1f fe8c 	uxth.w	lr, ip
 8000804:	fb09 1118 	mls	r1, r9, r8, r1
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	fb08 f00e 	mul.w	r0, r8, lr
 8000810:	4288      	cmp	r0, r1
 8000812:	fa02 f206 	lsl.w	r2, r2, r6
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b8>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2bc>
 8000824:	4288      	cmp	r0, r1
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2bc>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4461      	add	r1, ip
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb1 f0f9 	udiv	r0, r1, r9
 8000838:	fb09 1110 	mls	r1, r9, r0, r1
 800083c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000840:	fb00 fe0e 	mul.w	lr, r0, lr
 8000844:	458e      	cmp	lr, r1
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1e2>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2b4>
 8000852:	458e      	cmp	lr, r1
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2b4>
 8000856:	3802      	subs	r0, #2
 8000858:	4461      	add	r1, ip
 800085a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800085e:	fba0 9402 	umull	r9, r4, r0, r2
 8000862:	eba1 010e 	sub.w	r1, r1, lr
 8000866:	42a1      	cmp	r1, r4
 8000868:	46c8      	mov	r8, r9
 800086a:	46a6      	mov	lr, r4
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x2a4>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x2a0>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x212>
 8000872:	ebb3 0208 	subs.w	r2, r3, r8
 8000876:	eb61 010e 	sbc.w	r1, r1, lr
 800087a:	fa01 f707 	lsl.w	r7, r1, r7
 800087e:	fa22 f306 	lsr.w	r3, r2, r6
 8000882:	40f1      	lsrs	r1, r6
 8000884:	431f      	orrs	r7, r3
 8000886:	e9c5 7100 	strd	r7, r1, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	40d8      	lsrs	r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	fa21 f303 	lsr.w	r3, r1, r3
 80008a0:	4091      	lsls	r1, r2
 80008a2:	4301      	orrs	r1, r0
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80008b0:	fb07 3610 	mls	r6, r7, r0, r3
 80008b4:	0c0b      	lsrs	r3, r1, #16
 80008b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ba:	fb00 f60e 	mul.w	r6, r0, lr
 80008be:	429e      	cmp	r6, r3
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x260>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b8>
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b8>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	b289      	uxth	r1, r1
 80008dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008e0:	fb07 3316 	mls	r3, r7, r6, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x28a>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008fe:	3e02      	subs	r6, #2
 8000900:	4461      	add	r1, ip
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0x104>
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e705      	b.n	800071c <__udivmoddi4+0xa4>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e3      	b.n	80006dc <__udivmoddi4+0x64>
 8000914:	4618      	mov	r0, r3
 8000916:	e6f8      	b.n	800070a <__udivmoddi4+0x92>
 8000918:	454b      	cmp	r3, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f8>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000924:	3801      	subs	r0, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f8>
 8000928:	4646      	mov	r6, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x28a>
 800092c:	4620      	mov	r0, r4
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1e2>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x260>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b8>
 8000938:	3b02      	subs	r3, #2
 800093a:	4461      	add	r1, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x12c>
 800093e:	4630      	mov	r0, r6
 8000940:	e709      	b.n	8000756 <__udivmoddi4+0xde>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x156>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000954:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000958:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d013      	beq.n	800098c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000964:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000968:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800096c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000974:	e000      	b.n	8000978 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000976:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f9      	beq.n	8000976 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000982:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f001 fd39 	bl	8002416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f862 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 fa88 	bl	8000ebc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80009ac:	f000 f8c2 	bl	8000b34 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80009b0:	f000 f8f8 	bl	8000ba4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80009b4:	f000 f934 	bl	8000c20 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80009b8:	f000 f9b4 	bl	8000d24 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80009bc:	f000 f9f0 	bl	8000da0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009c0:	f000 fa1e 	bl	8000e00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c4:	f000 fa4c 	bl	8000e60 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80009c8:	f000 f950 	bl	8000c6c <MX_RTC_Init>
  //Inicializar la HAL_UART_

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009cc:	f007 fdd4 	bl	8008578 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (8, sizeof(uintptr_t), &print_queue_attributes);
 80009d0:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <main+0x94>)
 80009d2:	2104      	movs	r1, #4
 80009d4:	2008      	movs	r0, #8
 80009d6:	f007 ff95 	bl	8008904 <osMessageQueueNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <main+0x98>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(char), &receive_queue_attributes);
 80009e0:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <main+0x9c>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2003      	movs	r0, #3
 80009e6:	f007 ff8d 	bl	8008904 <osMessageQueueNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <main+0xa0>)
 80009ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of temp_task */
  temp_taskHandle = osThreadNew(temp_task_function, NULL, &temp_task_attributes);
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <main+0xa4>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <main+0xa8>)
 80009f6:	f007 fe09 	bl	800860c <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0xac>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(print_task_func, NULL, &print_task_attributes);
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <main+0xb0>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4812      	ldr	r0, [pc, #72]	; (8000a50 <main+0xb4>)
 8000a06:	f007 fe01 	bl	800860c <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <main+0xb8>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <main+0xbc>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <main+0xc0>)
 8000a16:	f007 fdf9 	bl	800860c <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <main+0xc4>)
 8000a1e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  HAL_UART_Receive_IT(&huart1,&rec_data, sizeof(rec_data));
 8000a20:	2201      	movs	r2, #1
 8000a22:	4910      	ldr	r1, [pc, #64]	; (8000a64 <main+0xc8>)
 8000a24:	4810      	ldr	r0, [pc, #64]	; (8000a68 <main+0xcc>)
 8000a26:	f005 fdbb 	bl	80065a0 <HAL_UART_Receive_IT>
  osKernelStart();
 8000a2a:	f007 fdc9 	bl	80085c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <main+0x92>
 8000a30:	0800d368 	.word	0x0800d368
 8000a34:	20000818 	.word	0x20000818
 8000a38:	0800d380 	.word	0x0800d380
 8000a3c:	2000081c 	.word	0x2000081c
 8000a40:	0800d2fc 	.word	0x0800d2fc
 8000a44:	080013b5 	.word	0x080013b5
 8000a48:	2000080c 	.word	0x2000080c
 8000a4c:	0800d320 	.word	0x0800d320
 8000a50:	0800148d 	.word	0x0800148d
 8000a54:	20000810 	.word	0x20000810
 8000a58:	0800d344 	.word	0x0800d344
 8000a5c:	08001599 	.word	0x08001599
 8000a60:	20000814 	.word	0x20000814
 8000a64:	20000820 	.word	0x20000820
 8000a68:	200001f8 	.word	0x200001f8

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b096      	sub	sp, #88	; 0x58
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2244      	movs	r2, #68	; 0x44
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00a ffce 	bl	800ba1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a92:	f003 f9f5 	bl	8003e80 <HAL_PWREx_ControlVoltageScaling>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a9c:	f001 f814 	bl	8001ac8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa0:	f003 f9d0 	bl	8003e44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <SystemClock_Config+0xc4>)
 8000aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemClock_Config+0xc4>)
 8000aac:	f023 0318 	bic.w	r3, r3, #24
 8000ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000ab4:	231c      	movs	r3, #28
 8000ab6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ad8:	2328      	movs	r3, #40	; 0x28
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fae9 	bl	80040c4 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000af8:	f000 ffe6 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2104      	movs	r1, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 feb1 	bl	800487c <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b20:	f000 ffd2 	bl	8001ac8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b24:	f004 fbea 	bl	80052fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b28:	bf00      	nop
 8000b2a:	3758      	adds	r7, #88	; 0x58
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b3a:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <MX_DFSDM1_Init+0x6c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b62:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_DFSDM1_Init+0x68>)
 8000b8a:	f001 fd83 	bl	8002694 <HAL_DFSDM_ChannelInit>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b94:	f000 ff98 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000a0 	.word	0x200000a0
 8000ba0:	40016020 	.word	0x40016020

08000ba4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_I2C2_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bb0:	f640 6214 	movw	r2, #3604	; 0xe14
 8000bb4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000be2:	f002 f9bc 	bl	8002f5e <HAL_I2C_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bec:	f000 ff6c 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000bf4:	f002 ff46 	bl	8003a84 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 ff63 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_I2C2_Init+0x74>)
 8000c06:	f002 ff88 	bl	8003b1a <HAL_I2CEx_ConfigDigitalFilter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c10:	f000 ff5a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000d8 	.word	0x200000d8
 8000c1c:	40005800 	.word	0x40005800

08000c20 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c38:	2210      	movs	r2, #16
 8000c3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c3e:	2217      	movs	r2, #23
 8000c40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_QUADSPI_Init+0x44>)
 8000c50:	f003 f97c 	bl	8003f4c <HAL_QSPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000c5a:	f000 ff35 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000012c 	.word	0x2000012c
 8000c68:	a0001000 	.word	0xa0001000

08000c6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <MX_RTC_Init+0xb4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000c92:	227f      	movs	r2, #127	; 0x7f
 8000c94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000cb6:	f004 fd03 	bl	80056c0 <HAL_RTC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 ff02 	bl	8001ac8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8000cc4:	230d      	movs	r3, #13
 8000cc6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000ce0:	f004 fd69 	bl	80057b6 <HAL_RTC_SetTime>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cea:	f000 feed 	bl	8001ac8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_RTC_Init+0xb0>)
 8000d06:	f004 fe4f 	bl	80059a8 <HAL_RTC_SetDate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d10:	f000 feda 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000170 	.word	0x20000170
 8000d20:	40002800 	.word	0x40002800

08000d24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <MX_SPI3_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d42:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_SPI3_Init+0x74>)
 8000d84:	f004 ffb6 	bl	8005cf4 <HAL_SPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 fe9b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000194 	.word	0x20000194
 8000d9c:	40003c00 	.word	0x40003c00

08000da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <MX_USART1_UART_Init+0x5c>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART1_UART_Init+0x58>)
 8000de4:	f005 fafa 	bl	80063dc <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dee:	f000 fe6b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001f8 	.word	0x200001f8
 8000dfc:	40013800 	.word	0x40013800

08000e00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_USART3_UART_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e44:	f005 faca 	bl	80063dc <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 fe3b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000027c 	.word	0x2000027c
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6e:	2206      	movs	r2, #6
 8000e70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea4:	f002 fe85 	bl	8003bb2 <HAL_PCD_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 fe0b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000300 	.word	0x20000300

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	4bbd      	ldr	r3, [pc, #756]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4abc      	ldr	r2, [pc, #752]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4bba      	ldr	r3, [pc, #744]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4bb7      	ldr	r3, [pc, #732]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4ab6      	ldr	r2, [pc, #728]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4bb4      	ldr	r3, [pc, #720]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4bb1      	ldr	r3, [pc, #708]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4ab0      	ldr	r2, [pc, #704]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4bae      	ldr	r3, [pc, #696]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4bab      	ldr	r3, [pc, #684]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4aaa      	ldr	r2, [pc, #680]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4ba8      	ldr	r3, [pc, #672]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f32:	4ba5      	ldr	r3, [pc, #660]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4aa4      	ldr	r2, [pc, #656]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4ba2      	ldr	r3, [pc, #648]	; (80011c8 <MX_GPIO_Init+0x30c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f50:	489e      	ldr	r0, [pc, #632]	; (80011cc <MX_GPIO_Init+0x310>)
 8000f52:	f001 ffc9 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f001 ffc2 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f64:	2200      	movs	r2, #0
 8000f66:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f6a:	4899      	ldr	r0, [pc, #612]	; (80011d0 <MX_GPIO_Init+0x314>)
 8000f6c:	f001 ffbc 	bl	8002ee8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f76:	4897      	ldr	r0, [pc, #604]	; (80011d4 <MX_GPIO_Init+0x318>)
 8000f78:	f001 ffb6 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	4894      	ldr	r0, [pc, #592]	; (80011d4 <MX_GPIO_Init+0x318>)
 8000f84:	f001 ffb0 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f8e:	4892      	ldr	r0, [pc, #584]	; (80011d8 <MX_GPIO_Init+0x31c>)
 8000f90:	f001 ffaa 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	488c      	ldr	r0, [pc, #560]	; (80011cc <MX_GPIO_Init+0x310>)
 8000f9a:	f001 ffa5 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f9e:	f240 1315 	movw	r3, #277	; 0x115
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4885      	ldr	r0, [pc, #532]	; (80011cc <MX_GPIO_Init+0x310>)
 8000fb8:	f001 fcf8 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fbc:	236a      	movs	r3, #106	; 0x6a
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	487e      	ldr	r0, [pc, #504]	; (80011cc <MX_GPIO_Init+0x310>)
 8000fd2:	f001 fceb 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000fd6:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	487a      	ldr	r0, [pc, #488]	; (80011d8 <MX_GPIO_Init+0x31c>)
 8000fee:	f001 fcdd 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ff2:	233f      	movs	r3, #63	; 0x3f
 8000ff4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4874      	ldr	r0, [pc, #464]	; (80011d8 <MX_GPIO_Init+0x31c>)
 8001006:	f001 fcd1 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800100a:	2303      	movs	r3, #3
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800101a:	2308      	movs	r3, #8
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f001 fcc0 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800102c:	f248 1304 	movw	r3, #33028	; 0x8104
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fcb0 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800104c:	2308      	movs	r3, #8
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800105c:	2301      	movs	r3, #1
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 fc9f 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800106e:	2310      	movs	r3, #16
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001072:	230b      	movs	r3, #11
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fc92 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001088:	23e0      	movs	r3, #224	; 0xe0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001098:	2305      	movs	r3, #5
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f001 fc81 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4844      	ldr	r0, [pc, #272]	; (80011d0 <MX_GPIO_Init+0x314>)
 80010c0:	f001 fc74 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c8:	230b      	movs	r3, #11
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	483e      	ldr	r0, [pc, #248]	; (80011d0 <MX_GPIO_Init+0x314>)
 80010d8:	f001 fc68 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010dc:	f24f 0314 	movw	r3, #61460	; 0xf014
 80010e0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4836      	ldr	r0, [pc, #216]	; (80011d0 <MX_GPIO_Init+0x314>)
 80010f6:	f001 fc59 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010fa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010fe:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4830      	ldr	r0, [pc, #192]	; (80011d4 <MX_GPIO_Init+0x318>)
 8001112:	f001 fc4b 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001116:	f243 0381 	movw	r3, #12417	; 0x3081
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4829      	ldr	r0, [pc, #164]	; (80011d4 <MX_GPIO_Init+0x318>)
 8001130:	f001 fc3c 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001134:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4822      	ldr	r0, [pc, #136]	; (80011d8 <MX_GPIO_Init+0x31c>)
 800114e:	f001 fc2d 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001162:	2305      	movs	r3, #5
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <MX_GPIO_Init+0x318>)
 800116e:	f001 fc1d 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001172:	2378      	movs	r3, #120	; 0x78
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <MX_GPIO_Init+0x318>)
 800118e:	f001 fc0d 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	2312      	movs	r3, #18
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a4:	2304      	movs	r3, #4
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x314>)
 80011b0:	f001 fbfc 	bl	80029ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2017      	movs	r0, #23
 80011ba:	f001 fa41 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011be:	2017      	movs	r0, #23
 80011c0:	f001 fa5a 	bl	8002678 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	e009      	b.n	80011dc <MX_GPIO_Init+0x320>
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48000800 	.word	0x48000800
 80011dc:	2105      	movs	r1, #5
 80011de:	2028      	movs	r0, #40	; 0x28
 80011e0:	f001 fa2e 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e4:	2028      	movs	r0, #40	; 0x28
 80011e6:	f001 fa47 	bl	8002678 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop

080011f4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx=0; DataIdx<len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
{
ITM_SendChar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fb9c 	bl	800094c <ITM_SendChar>
for(DataIdx=0; DataIdx<len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
}
return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <extraerNumero>:


uint8_t extraerNumero(char *digitos, uint8_t *rango){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
int valor ;
if(strlen(digitos) > 1)
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7fe ffca 	bl	80001d0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d90f      	bls.n	8001262 <extraerNumero+0x36>
valor = ( ((digitos[0]-48) * 10) + (digitos[1] - 48) );
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3b30      	subs	r3, #48	; 0x30
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e003      	b.n	800126a <extraerNumero+0x3e>
else
valor = digitos[0] - 48;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3b30      	subs	r3, #48	; 0x30
 8001268:	60fb      	str	r3, [r7, #12]
if (valor<rango[0] || valor>rango[1])
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4293      	cmp	r3, r2
 8001274:	db06      	blt.n	8001284 <extraerNumero+0x58>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4293      	cmp	r3, r2
 8001282:	dd01      	ble.n	8001288 <extraerNumero+0x5c>
valor = 255; // Si devuelve 255 significa que el numero no es valido
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	60fb      	str	r3, [r7, #12]
return valor;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_UART_RxCpltCallback>:
//   // }
//}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint32_t cola_q;
	osStatus_t estado_cola;

	//const char *Test= "H";

if (huart == &huart1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a38      	ldr	r2, [pc, #224]	; (8001380 <HAL_UART_RxCpltCallback+0xec>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d168      	bne.n	8001376 <HAL_UART_RxCpltCallback+0xe2>
{

		printf("Se ha recibido el valor %c de la UART\r\n",rec_data);
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_UART_RxCpltCallback+0xf0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4837      	ldr	r0, [pc, #220]	; (8001388 <HAL_UART_RxCpltCallback+0xf4>)
 80012ac:	f00a fbbe 	bl	800ba2c <iprintf>
		if(cont<=3){
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d853      	bhi.n	8001360 <HAL_UART_RxCpltCallback+0xcc>

			estado_cola = osMessageQueuePut(receive_queueHandle,&rec_data,0,pdMS_TO_TICKS(0));
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_UART_RxCpltCallback+0xfc>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	4930      	ldr	r1, [pc, #192]	; (8001384 <HAL_UART_RxCpltCallback+0xf0>)
 80012c2:	f007 fb93 	bl	80089ec <osMessageQueuePut>
 80012c6:	60f8      	str	r0, [r7, #12]
			  if(estado_cola==osErrorTimeout){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f113 0f02 	cmn.w	r3, #2
 80012ce:	d103      	bne.n	80012d8 <HAL_UART_RxCpltCallback+0x44>
				  printf("PROBLEMA EN LA COLA, ESTO VA A DAR UN TIMEOUT\r\n");
 80012d0:	4830      	ldr	r0, [pc, #192]	; (8001394 <HAL_UART_RxCpltCallback+0x100>)
 80012d2:	f00a fc31 	bl	800bb38 <puts>
 80012d6:	e01d      	b.n	8001314 <HAL_UART_RxCpltCallback+0x80>
			  }
			  else if (estado_cola == osOK){
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <HAL_UART_RxCpltCallback+0x52>
				  printf("Se ha mandado correctamente por la cola\r\n");
 80012de:	482e      	ldr	r0, [pc, #184]	; (8001398 <HAL_UART_RxCpltCallback+0x104>)
 80012e0:	f00a fc2a 	bl	800bb38 <puts>
 80012e4:	e016      	b.n	8001314 <HAL_UART_RxCpltCallback+0x80>
			  }
			  else if (estado_cola == osErrorParameter){
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f113 0f04 	cmn.w	r3, #4
 80012ec:	d103      	bne.n	80012f6 <HAL_UART_RxCpltCallback+0x62>
				  printf("Error por el parametro\r\n");
 80012ee:	482b      	ldr	r0, [pc, #172]	; (800139c <HAL_UART_RxCpltCallback+0x108>)
 80012f0:	f00a fc22 	bl	800bb38 <puts>
 80012f4:	e00e      	b.n	8001314 <HAL_UART_RxCpltCallback+0x80>
			  }
			  else if (estado_cola == osErrorResource){
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f113 0f03 	cmn.w	r3, #3
 80012fc:	d103      	bne.n	8001306 <HAL_UART_RxCpltCallback+0x72>
				  printf("Error por el resource\r\n");
 80012fe:	4828      	ldr	r0, [pc, #160]	; (80013a0 <HAL_UART_RxCpltCallback+0x10c>)
 8001300:	f00a fc1a 	bl	800bb38 <puts>
 8001304:	e006      	b.n	8001314 <HAL_UART_RxCpltCallback+0x80>
			  }
			  else if (estado_cola == osError){
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d102      	bne.n	8001314 <HAL_UART_RxCpltCallback+0x80>
				  printf("Error por el resource\r\n");
 800130e:	4824      	ldr	r0, [pc, #144]	; (80013a0 <HAL_UART_RxCpltCallback+0x10c>)
 8001310:	f00a fc12 	bl	800bb38 <puts>
			  }
			  if(cont==3){
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d121      	bne.n	8001360 <HAL_UART_RxCpltCallback+0xcc>
				  printf("AHORA ES CUANDO DECIDO\r\n");
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <HAL_UART_RxCpltCallback+0x110>)
 800131e:	f00a fc0b 	bl	800bb38 <puts>
			  if(rec_data == 13/*rec_data == '1'strcmp(&rec_data,"\n")!=0*/){ //Comprobar y meter si el \n se envia en el tercer caracter, si no se envia en el tercer caracter entonces mandar el flag de error.
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_RxCpltCallback+0xf0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b0d      	cmp	r3, #13
 8001328:	d10d      	bne.n	8001346 <HAL_UART_RxCpltCallback+0xb2>
				  printf("Se mete aqui en el envio de flag\r\n");
 800132a:	481f      	ldr	r0, [pc, #124]	; (80013a8 <HAL_UART_RxCpltCallback+0x114>)
 800132c:	f00a fc04 	bl	800bb38 <puts>
				  cola_q = osThreadFlagsSet (RTC_setHandle,0x00000001U);
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_UART_RxCpltCallback+0x118>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f007 f9fa 	bl	8008730 <osThreadFlagsSet>
 800133c:	60b8      	str	r0, [r7, #8]
				  cont=0; //Esto quizás haya que cambiarlo
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e00c      	b.n	8001360 <HAL_UART_RxCpltCallback+0xcc>
			  } else{ //Se ha producido overflow en la cola, enviar el flag 1.
					printf("Se mete aqui EN EL OVERFLOW\r\n");
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <HAL_UART_RxCpltCallback+0x11c>)
 8001348:	f00a fbf6 	bl	800bb38 <puts>
					cola_q = osThreadFlagsSet (RTC_setHandle,0x00000002U);
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_UART_RxCpltCallback+0x118>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f007 f9ec 	bl	8008730 <osThreadFlagsSet>
 8001358:	60b8      	str	r0, [r7, #8]
					cont=0;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
				}
		}

		}

		cont=cont+1;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_UART_RxCpltCallback+0xf8>)
 800136a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,&rec_data, sizeof(rec_data));
 800136c:	2201      	movs	r2, #1
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <HAL_UART_RxCpltCallback+0xf0>)
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <HAL_UART_RxCpltCallback+0xec>)
 8001372:	f005 f915 	bl	80065a0 <HAL_UART_Receive_IT>
}
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001f8 	.word	0x200001f8
 8001384:	20000820 	.word	0x20000820
 8001388:	0800cf18 	.word	0x0800cf18
 800138c:	20000000 	.word	0x20000000
 8001390:	2000081c 	.word	0x2000081c
 8001394:	0800cf40 	.word	0x0800cf40
 8001398:	0800cf70 	.word	0x0800cf70
 800139c:	0800cf9c 	.word	0x0800cf9c
 80013a0:	0800cfb4 	.word	0x0800cfb4
 80013a4:	0800cfcc 	.word	0x0800cfcc
 80013a8:	0800cfe4 	.word	0x0800cfe4
 80013ac:	20000814 	.word	0x20000814
 80013b0:	0800d008 	.word	0x0800d008

080013b4 <temp_task_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_temp_task_function */
void temp_task_function(void *argument)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0a4      	sub	sp, #144	; 0x90
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t read_wait;
	float temperatura;
	char string_temp[100] = "";
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2260      	movs	r2, #96	; 0x60
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00a fb27 	bl	800ba1c <memset>
	char *string_temp_puntero = string_temp;
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	60fb      	str	r3, [r7, #12]

	//BSP_TSENSOR_Init();
	BSP_HSENSOR_Init();
 80013d4:	f006 ff80 	bl	80082d8 <BSP_HSENSOR_Init>
	read_wait = osThreadFlagsWait (0x00000001U,  osFlagsWaitAny, osWaitForever);
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	2100      	movs	r1, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	f007 f9f4 	bl	80087cc <osThreadFlagsWait>
 80013e4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  /* Infinite loop */
  for(;;)
  {
	  	  //printf("ENTRO AL TEMP TASK");
		  //temperatura= BSP_TSENSOR_ReadTemp();
	  	  temperatura = BSP_HSENSOR_ReadHumidity();
 80013e8:	f006 ff96 	bl	8008318 <BSP_HSENSOR_ReadHumidity>
 80013ec:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
		  //HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		  //HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		  int tmpInt1 = temperatura;
 80013f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	67fb      	str	r3, [r7, #124]	; 0x7c
		  float tmpFrac = temperatura - tmpInt1;
 80013fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		  int tmpInt2 = trunc(tmpFrac * 100);
 8001414:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001418:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800147c <temp_task_function+0xc8>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	ee17 0a90 	vmov	r0, s15
 8001424:	f7ff f890 	bl	8000548 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	ec43 2b10 	vmov	d0, r2, r3
 8001430:	f00b fce2 	bl	800cdf8 <trunc>
 8001434:	ec53 2b10 	vmov	r2, r3, d0
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff f8dc 	bl	80005f8 <__aeabi_d2iz>
 8001440:	4603      	mov	r3, r0
 8001442:	677b      	str	r3, [r7, #116]	; 0x74
		  printf("Medida periodica. Temperatura: %d.%02d grados\r\n",tmpInt1, tmpInt2);
 8001444:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001446:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <temp_task_function+0xcc>)
 800144a:	f00a faef 	bl	800ba2c <iprintf>
		  snprintf(string_temp, 100, "%d.%02d grados\r\n",tmpInt1, tmpInt2);
 800144e:	f107 0010 	add.w	r0, r7, #16
 8001452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <temp_task_function+0xd0>)
 800145a:	2164      	movs	r1, #100	; 0x64
 800145c:	f00a fb74 	bl	800bb48 <sniprintf>
	  	//snprintf(string_temp, 100, "%d de humedad\r\n",temperatura);
		  osDelay(pdMS_TO_TICKS(3000));
 8001460:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001464:	f007 fa33 	bl	80088ce <osDelay>
		  osMessageQueuePut(print_queueHandle, &string_temp_puntero, 0, pdMS_TO_TICKS(0));
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <temp_task_function+0xd4>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f107 010c 	add.w	r1, r7, #12
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	f007 faba 	bl	80089ec <osMessageQueuePut>
  {
 8001478:	e7b6      	b.n	80013e8 <temp_task_function+0x34>
 800147a:	bf00      	nop
 800147c:	42c80000 	.word	0x42c80000
 8001480:	0800d028 	.word	0x0800d028
 8001484:	0800d058 	.word	0x0800d058
 8001488:	20000818 	.word	0x20000818

0800148c <print_task_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_print_task_func */
void print_task_func(void *argument)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b0a1      	sub	sp, #132	; 0x84
 8001490:	af06      	add	r7, sp, #24
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_task_func */
	osStatus_t Espera_cola;
	char string_error[25] = "Error en la cola\r\n";
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <print_task_func+0xf0>)
 8001496:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800149a:	461d      	mov	r5, r3
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	8022      	strh	r2, [r4, #0]
 80014a6:	3402      	adds	r4, #2
 80014a8:	0c1b      	lsrs	r3, r3, #16
 80014aa:	7023      	strb	r3, [r4, #0]
 80014ac:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	809a      	strh	r2, [r3, #4]
	char *string_error_puntero = string_error;
 80014b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ba:	667b      	str	r3, [r7, #100]	; 0x64
	uintptr_t msg;
	char string_fecha_hora[50] = "";
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	222e      	movs	r2, #46	; 0x2e
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00a faa7 	bl	800ba1c <memset>

  /* Infinite loop */
  for(;;)
  {
	  Espera_cola = osMessageQueueGet(print_queueHandle, &msg, NULL, osWaitForever);
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <print_task_func+0xf4>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	2200      	movs	r2, #0
 80014dc:	f007 fae6 	bl	8008aac <osMessageQueueGet>
 80014e0:	6638      	str	r0, [r7, #96]	; 0x60
	  if(Espera_cola==osErrorTimeout){
 80014e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e4:	f113 0f02 	cmn.w	r3, #2
 80014e8:	d10c      	bne.n	8001504 <print_task_func+0x78>
		  HAL_UART_Transmit(&huart1,(uint8_t *)string_error_puntero,strlen((char *)string_error),10);
 80014ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe6e 	bl	80001d0 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <print_task_func+0xf8>)
 80014fe:	f004 ffbb 	bl	8006478 <HAL_UART_Transmit>
 8001502:	e7e4      	b.n	80014ce <print_task_func+0x42>
	  }
	  else {
		  HAL_RTC_GetTime(&hrtc,&GetTime, RTC_FORMAT_BIN);
 8001504:	2200      	movs	r2, #0
 8001506:	4920      	ldr	r1, [pc, #128]	; (8001588 <print_task_func+0xfc>)
 8001508:	4820      	ldr	r0, [pc, #128]	; (800158c <print_task_func+0x100>)
 800150a:	f004 f9f1 	bl	80058f0 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc,&GetDate, RTC_FORMAT_BIN);
 800150e:	2200      	movs	r2, #0
 8001510:	491f      	ldr	r1, [pc, #124]	; (8001590 <print_task_func+0x104>)
 8001512:	481e      	ldr	r0, [pc, #120]	; (800158c <print_task_func+0x100>)
 8001514:	f004 facf 	bl	8005ab6 <HAL_RTC_GetDate>
		  snprintf(string_fecha_hora, 50, "Periodica:  20%d / %d / %d  %d : %d : %d =====> ",GetDate.Year, GetDate.Month,GetDate.Date,GetTime.Hours,GetTime.Minutes,GetTime.Seconds);
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <print_task_func+0x104>)
 800151a:	78db      	ldrb	r3, [r3, #3]
 800151c:	461e      	mov	r6, r3
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <print_task_func+0x104>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	461a      	mov	r2, r3
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <print_task_func+0x104>)
 8001526:	789b      	ldrb	r3, [r3, #2]
 8001528:	4619      	mov	r1, r3
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <print_task_func+0xfc>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461c      	mov	r4, r3
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <print_task_func+0xfc>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	461d      	mov	r5, r3
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <print_task_func+0xfc>)
 8001538:	789b      	ldrb	r3, [r3, #2]
 800153a:	f107 000c 	add.w	r0, r7, #12
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	9503      	str	r5, [sp, #12]
 8001542:	9402      	str	r4, [sp, #8]
 8001544:	9101      	str	r1, [sp, #4]
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	4633      	mov	r3, r6
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <print_task_func+0x108>)
 800154c:	2132      	movs	r1, #50	; 0x32
 800154e:	f00a fafb 	bl	800bb48 <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t *)string_fecha_hora,sizeof(string_fecha_hora),10);
 8001552:	f107 010c 	add.w	r1, r7, #12
 8001556:	230a      	movs	r3, #10
 8001558:	2232      	movs	r2, #50	; 0x32
 800155a:	480a      	ldr	r0, [pc, #40]	; (8001584 <print_task_func+0xf8>)
 800155c:	f004 ff8c 	bl	8006478 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen((char *)msg),10);
 8001560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001562:	461c      	mov	r4, r3
 8001564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe32 	bl	80001d0 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	230a      	movs	r3, #10
 8001572:	4621      	mov	r1, r4
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <print_task_func+0xf8>)
 8001576:	f004 ff7f 	bl	8006478 <HAL_UART_Transmit>
	  Espera_cola = osMessageQueueGet(print_queueHandle, &msg, NULL, osWaitForever);
 800157a:	e7a8      	b.n	80014ce <print_task_func+0x42>
 800157c:	0800d0a0 	.word	0x0800d0a0
 8001580:	20000818 	.word	0x20000818
 8001584:	200001f8 	.word	0x200001f8
 8001588:	20000828 	.word	0x20000828
 800158c:	20000170 	.word	0x20000170
 8001590:	20000824 	.word	0x20000824
 8001594:	0800d06c 	.word	0x0800d06c

08001598 <RTC_set_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b0e9      	sub	sp, #420	; 0x1a4
 800159c:	af00      	add	r7, sp, #0
 800159e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80015a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80015a6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RTC_set_func */
	osStatus_t Espera_cola;
	uint32_t read_char_intro,read_char_overflow;

	const char msg_hora_ok[39] = "\r\nHora cambiada correctamente\r\n";
 80015a8:	4bcb      	ldr	r3, [pc, #812]	; (80018d8 <RTC_set_func+0x340>)
 80015aa:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80015ae:	461d      	mov	r5, r3
 80015b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015bc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f8c3 2003 	str.w	r2, [r3, #3]
	const char msg_fecha_ok[30] = "Fecha cambiada correctamente\r\n";
 80015c8:	4bc4      	ldr	r3, [pc, #784]	; (80018dc <RTC_set_func+0x344>)
 80015ca:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 80015ce:	461d      	mov	r5, r3
 80015d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d8:	c407      	stmia	r4!, {r0, r1, r2}
 80015da:	8023      	strh	r3, [r4, #0]
	const char msg_error[30] = "\r\nERROR: Valor no válido\r\n";
 80015dc:	4bc0      	ldr	r3, [pc, #768]	; (80018e0 <RTC_set_func+0x348>)
 80015de:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
	const char msg_rtc1[100]= "\r\n\r\n========================\r\n"
 80015f6:	4abb      	ldr	r2, [pc, #748]	; (80018e4 <RTC_set_func+0x34c>)
 80015f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015fc:	4611      	mov	r1, r2
 80015fe:	224f      	movs	r2, #79	; 0x4f
 8001600:	4618      	mov	r0, r3
 8001602:	f00a f9fd 	bl	800ba00 <memcpy>
 8001606:	f207 1317 	addw	r3, r7, #279	; 0x117
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	751a      	strb	r2, [r3, #20]
								   "| Configurar rtc |\r\n"
								   "========================\r\n\r\n";
	const char msg_Hora[20] = "Hora (0-23): ";
 8001618:	4bb3      	ldr	r3, [pc, #716]	; (80018e8 <RTC_set_func+0x350>)
 800161a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800161e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001620:	c407      	stmia	r4!, {r0, r1, r2}
 8001622:	8023      	strh	r3, [r4, #0]
 8001624:	f107 03c2 	add.w	r3, r7, #194	; 0xc2
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	809a      	strh	r2, [r3, #4]
	const char msg_Minuto[20] = "Minuto (0-59): ";
 800162e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001632:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8001636:	4bad      	ldr	r3, [pc, #692]	; (80018ec <RTC_set_func+0x354>)
 8001638:	4625      	mov	r5, r4
 800163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001640:	2300      	movs	r3, #0
 8001642:	6123      	str	r3, [r4, #16]
	const char msg_Segundo[20] = "Segundo (0-59): ";
 8001644:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001648:	f5a3 768a 	sub.w	r6, r3, #276	; 0x114
 800164c:	4ba8      	ldr	r3, [pc, #672]	; (80018f0 <RTC_set_func+0x358>)
 800164e:	4634      	mov	r4, r6
 8001650:	461d      	mov	r5, r3
 8001652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	7023      	strb	r3, [r4, #0]
 800165a:	f106 0311 	add.w	r3, r6, #17
 800165e:	2200      	movs	r2, #0
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	709a      	strb	r2, [r3, #2]
	const char msg_Dia[20] = "Dia (1-31): ";
 8001664:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001668:	f5a3 7594 	sub.w	r5, r3, #296	; 0x128
 800166c:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <RTC_set_func+0x35c>)
 800166e:	462c      	mov	r4, r5
 8001670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001672:	c407      	stmia	r4!, {r0, r1, r2}
 8001674:	7023      	strb	r3, [r4, #0]
 8001676:	f105 030d 	add.w	r3, r5, #13
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f8c3 2003 	str.w	r2, [r3, #3]
	const char msg_Mes[20] = "Mes (1-12): ";
 8001682:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001686:	f5a3 759e 	sub.w	r5, r3, #316	; 0x13c
 800168a:	4b9b      	ldr	r3, [pc, #620]	; (80018f8 <RTC_set_func+0x360>)
 800168c:	462c      	mov	r4, r5
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	c407      	stmia	r4!, {r0, r1, r2}
 8001692:	7023      	strb	r3, [r4, #0]
 8001694:	f105 030d 	add.w	r3, r5, #13
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f8c3 2003 	str.w	r2, [r3, #3]
	const char msg_Ano[20] = "Año (0-99): ";
 80016a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80016a4:	f5a3 75a8 	sub.w	r5, r3, #336	; 0x150
 80016a8:	4b94      	ldr	r3, [pc, #592]	; (80018fc <RTC_set_func+0x364>)
 80016aa:	462c      	mov	r4, r5
 80016ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ae:	c407      	stmia	r4!, {r0, r1, r2}
 80016b0:	8023      	strh	r3, [r4, #0]
 80016b2:	f105 030e 	add.w	r3, r5, #14
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	809a      	strh	r2, [r3, #4]

	char recibido[3];
	char rec1,rec2,rec3;
	uint8_t num;
	uint8_t i=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f


	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 80016c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80016c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80016ca:	4a8d      	ldr	r2, [pc, #564]	; (8001900 <RTC_set_func+0x368>)
 80016cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,
 80016d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80016d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016da:	4a8a      	ldr	r2, [pc, #552]	; (8001904 <RTC_set_func+0x36c>)
 80016dc:	461c      	mov	r4, r3
 80016de:	4615      	mov	r5, r2
 80016e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016e8:	e884 0003 	stmia.w	r4, {r0, r1}
	&GetDate.Month, &GetDate.Year};

	const char* msg[6] = {
 80016ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80016f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80016f4:	4a84      	ldr	r2, [pc, #528]	; (8001908 <RTC_set_func+0x370>)
 80016f6:	461c      	mov	r4, r3
 80016f8:	4615      	mov	r5, r2
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ", "\r\nAño (0-99): "};


	HAL_UART_Transmit(&huart1,(uint8_t *)msg_rtc1,sizeof(msg_rtc1),1000);
 8001706:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	2264      	movs	r2, #100	; 0x64
 8001710:	487e      	ldr	r0, [pc, #504]	; (800190c <RTC_set_func+0x374>)
 8001712:	f004 feb1 	bl	8006478 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)msg[0],strlen(msg[0]),1000);
 8001716:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800171a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001724:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd50 	bl	80001d0 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	4621      	mov	r1, r4
 800173a:	4874      	ldr	r0, [pc, #464]	; (800190c <RTC_set_func+0x374>)
 800173c:	f004 fe9c 	bl	8006478 <HAL_UART_Transmit>
	  while(i<6){
 8001740:	e17a      	b.n	8001a38 <RTC_set_func+0x4a0>
	  read_char_intro = osThreadFlagsWait (0x0000003U,  osFlagsWaitAny, osWaitForever); // Esto es un intro.
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	2100      	movs	r1, #0
 8001748:	2003      	movs	r0, #3
 800174a:	f007 f83f 	bl	80087cc <osThreadFlagsWait>
 800174e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	  if(read_char_intro == 0x0000001U){ //Si se ha recibido el intro correctamente:
 8001752:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 8142 	bne.w	80019e0 <RTC_set_func+0x448>
	  printf("FLAG 0 RECIBIDO\r\n");
 800175c:	486c      	ldr	r0, [pc, #432]	; (8001910 <RTC_set_func+0x378>)
 800175e:	f00a f9eb 	bl	800bb38 <puts>
	  Espera_cola = osMessageQueueGet(receive_queueHandle, &rec1, NULL, pdMS_TO_TICKS(1000));
 8001762:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <RTC_set_func+0x37c>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	2200      	movs	r2, #0
 8001770:	f007 f99c 	bl	8008aac <osMessageQueueGet>
 8001774:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
	  Espera_cola = osMessageQueueGet(receive_queueHandle, &rec2, NULL, pdMS_TO_TICKS(1000));
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <RTC_set_func+0x37c>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	2200      	movs	r2, #0
 8001786:	f007 f991 	bl	8008aac <osMessageQueueGet>
 800178a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
	  Espera_cola = osMessageQueueGet(receive_queueHandle, &rec3, NULL, pdMS_TO_TICKS(1000));
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <RTC_set_func+0x37c>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 0149 	add.w	r1, r7, #73	; 0x49
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	2200      	movs	r2, #0
 800179c:	f007 f986 	bl	8008aac <osMessageQueueGet>
 80017a0:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
	  recibido[0]=rec1;
 80017a4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017a8:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b6:	701a      	strb	r2, [r3, #0]
	  recibido[1]=rec2;
 80017b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017bc:	f5a3 73ab 	sub.w	r3, r3, #342	; 0x156
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ca:	705a      	strb	r2, [r3, #1]
	  recibido[2]="\0";
 80017cc:	4b52      	ldr	r3, [pc, #328]	; (8001918 <RTC_set_func+0x380>)
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017d4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017d8:	709a      	strb	r2, [r3, #2]
	  printf("El valor que llega ha sido: %c %c\r\n",recibido[0],recibido[1]);
 80017da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80017ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	461a      	mov	r2, r3
 80017f2:	484a      	ldr	r0, [pc, #296]	; (800191c <RTC_set_func+0x384>)
 80017f4:	f00a f91a 	bl	800ba2c <iprintf>

	  //AQUI TENGO QUE PONER LA FUNCIÓN DE CONVERTIR UN NUMERO A UN ENTERO.
	  num = extraerNumero((char *)recibido, (uint8_t *)limit[i]);
 80017f8:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80017fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	441a      	add	r2, r3
 8001804:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd0e 	bl	800122c <extraerNumero>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001818:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800181c:	701a      	strb	r2, [r3, #0]
	  //Aquí compruebo que lo que me ha devuelto la función es distinto de 255 por que si no da error.
	  printf("El numero extraido ha sido: %d\r\n",num);
 800181e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001822:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	483d      	ldr	r0, [pc, #244]	; (8001920 <RTC_set_func+0x388>)
 800182c:	f00a f8fe 	bl	800ba2c <iprintf>
	  printf("El get seconds tiene un valor de : %d\r\n",GetTime.Seconds);
 8001830:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <RTC_set_func+0x38c>)
 8001832:	789b      	ldrb	r3, [r3, #2]
 8001834:	4619      	mov	r1, r3
 8001836:	483c      	ldr	r0, [pc, #240]	; (8001928 <RTC_set_func+0x390>)
 8001838:	f00a f8f8 	bl	800ba2c <iprintf>
	  if(num!=255){ //Se actualiza la fecha y la hora.
 800183c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001840:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2bff      	cmp	r3, #255	; 0xff
 8001848:	f000 80a4 	beq.w	8001994 <RTC_set_func+0x3fc>
	  toChange[i] = &num;
 800184c:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 8001850:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001854:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001858:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  if(i==0){
 8001860:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001864:	2b00      	cmp	r3, #0
 8001866:	d107      	bne.n	8001878 <RTC_set_func+0x2e0>
		  GetTime.Hours=num;
 8001868:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800186c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <RTC_set_func+0x38c>)
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e066      	b.n	8001946 <RTC_set_func+0x3ae>
	  } else if(i==1){
 8001878:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <RTC_set_func+0x2f8>
		  GetTime.Minutes=num;
 8001880:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001884:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <RTC_set_func+0x38c>)
 800188c:	705a      	strb	r2, [r3, #1]
 800188e:	e05a      	b.n	8001946 <RTC_set_func+0x3ae>
	  }else if(i==2){
 8001890:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001894:	2b02      	cmp	r3, #2
 8001896:	d107      	bne.n	80018a8 <RTC_set_func+0x310>
		  GetTime.Seconds=num;
 8001898:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800189c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <RTC_set_func+0x38c>)
 80018a4:	709a      	strb	r2, [r3, #2]
 80018a6:	e04e      	b.n	8001946 <RTC_set_func+0x3ae>
	  }else if(i==3){
 80018a8:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d107      	bne.n	80018c0 <RTC_set_func+0x328>
		  GetDate.Date=num;
 80018b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80018b4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <RTC_set_func+0x394>)
 80018bc:	709a      	strb	r2, [r3, #2]
 80018be:	e042      	b.n	8001946 <RTC_set_func+0x3ae>
	  }else if(i==4){
 80018c0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d133      	bne.n	8001930 <RTC_set_func+0x398>
		  GetDate.Month=num;
 80018c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80018cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <RTC_set_func+0x394>)
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e036      	b.n	8001946 <RTC_set_func+0x3ae>
 80018d8:	0800d164 	.word	0x0800d164
 80018dc:	0800d18c 	.word	0x0800d18c
 80018e0:	0800d1ac 	.word	0x0800d1ac
 80018e4:	0800d1cc 	.word	0x0800d1cc
 80018e8:	0800d230 	.word	0x0800d230
 80018ec:	0800d244 	.word	0x0800d244
 80018f0:	0800d258 	.word	0x0800d258
 80018f4:	0800d26c 	.word	0x0800d26c
 80018f8:	0800d280 	.word	0x0800d280
 80018fc:	0800d294 	.word	0x0800d294
 8001900:	0800d2a8 	.word	0x0800d2a8
 8001904:	0800d2b4 	.word	0x0800d2b4
 8001908:	0800d2cc 	.word	0x0800d2cc
 800190c:	200001f8 	.word	0x200001f8
 8001910:	0800d0bc 	.word	0x0800d0bc
 8001914:	2000081c 	.word	0x2000081c
 8001918:	0800d0d0 	.word	0x0800d0d0
 800191c:	0800d0d4 	.word	0x0800d0d4
 8001920:	0800d0f8 	.word	0x0800d0f8
 8001924:	20000828 	.word	0x20000828
 8001928:	0800d11c 	.word	0x0800d11c
 800192c:	20000824 	.word	0x20000824
	  }else if(i==5){
 8001930:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001934:	2b05      	cmp	r3, #5
 8001936:	d106      	bne.n	8001946 <RTC_set_func+0x3ae>
		  GetDate.Year=num;
 8001938:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800193c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <RTC_set_func+0x4f0>)
 8001944:	70da      	strb	r2, [r3, #3]
	  }
	  if(i<5){
 8001946:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800194a:	2b04      	cmp	r3, #4
 800194c:	d81c      	bhi.n	8001988 <RTC_set_func+0x3f0>
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg[i+1],strlen(msg[i+1]),1000);
 800194e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001958:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001960:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800196a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc2c 	bl	80001d0 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	4621      	mov	r1, r4
 8001982:	4842      	ldr	r0, [pc, #264]	; (8001a8c <RTC_set_func+0x4f4>)
 8001984:	f004 fd78 	bl	8006478 <HAL_UART_Transmit>
	  }
	  i=i+1;
 8001988:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800198c:	3301      	adds	r3, #1
 800198e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001992:	e051      	b.n	8001a38 <RTC_set_func+0x4a0>
	  }
	  else{ //Valor erroneo introducido, resetea.
		  osMessageQueueReset(receive_queueHandle); //SEGURAMENTE TENGA QUE INTRODUCIR ESTO
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <RTC_set_func+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f007 f8e5 	bl	8008b68 <osMessageQueueReset>
		  HAL_UART_Transmit(&huart1,(uint8_t *)msg_error,sizeof(msg_error),1000);
 800199e:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	221e      	movs	r2, #30
 80019a8:	4838      	ldr	r0, [pc, #224]	; (8001a8c <RTC_set_func+0x4f4>)
 80019aa:	f004 fd65 	bl	8006478 <HAL_UART_Transmit>
		  i=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		  HAL_UART_Transmit(&huart1,(uint8_t *)msg[0],strlen(msg[0]),1000);
 80019b4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80019b8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80019c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fc01 	bl	80001d0 <strlen>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	4621      	mov	r1, r4
 80019d8:	482c      	ldr	r0, [pc, #176]	; (8001a8c <RTC_set_func+0x4f4>)
 80019da:	f004 fd4d 	bl	8006478 <HAL_UART_Transmit>
 80019de:	e02b      	b.n	8001a38 <RTC_set_func+0x4a0>
		  //break;
	  }

} //Si se han recibido los dos caracteres y el intro correctamente.

	  else if (read_char_intro == 0x0000002U){
 80019e0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d127      	bne.n	8001a38 <RTC_set_func+0x4a0>
	  printf("El flag del overflow funciona\r\n");
 80019e8:	482a      	ldr	r0, [pc, #168]	; (8001a94 <RTC_set_func+0x4fc>)
 80019ea:	f00a f8a5 	bl	800bb38 <puts>
	  osMessageQueueReset(receive_queueHandle); //Resetea la cola
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <RTC_set_func+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 f8b8 	bl	8008b68 <osMessageQueueReset>
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg_rtc1,sizeof(msg_rtc1),1000);
 80019f8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	2264      	movs	r2, #100	; 0x64
 8001a02:	4822      	ldr	r0, [pc, #136]	; (8001a8c <RTC_set_func+0x4f4>)
 8001a04:	f004 fd38 	bl	8006478 <HAL_UART_Transmit>
	  i=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg[0],strlen(msg[0]),1000);
 8001a0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001a12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001a1c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fbd4 	bl	80001d0 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	4621      	mov	r1, r4
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <RTC_set_func+0x4f4>)
 8001a34:	f004 fd20 	bl	8006478 <HAL_UART_Transmit>
	  while(i<6){
 8001a38:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	f67f ae80 	bls.w	8001742 <RTC_set_func+0x1aa>
	  	  }

	  //i=i+1;

	  } //Termina el bucle while donde se han inicializado todos los valores.
	  HAL_RTC_SetTime(&hrtc,&GetTime, RTC_FORMAT_BIN);
 8001a42:	2200      	movs	r2, #0
 8001a44:	4914      	ldr	r1, [pc, #80]	; (8001a98 <RTC_set_func+0x500>)
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <RTC_set_func+0x504>)
 8001a48:	f003 feb5 	bl	80057b6 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(&hrtc,&GetDate, RTC_FORMAT_BIN);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <RTC_set_func+0x4f0>)
 8001a50:	4812      	ldr	r0, [pc, #72]	; (8001a9c <RTC_set_func+0x504>)
 8001a52:	f003 ffa9 	bl	80059a8 <HAL_RTC_SetDate>
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg_hora_ok,sizeof(msg_hora_ok),10);
 8001a56:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	2227      	movs	r2, #39	; 0x27
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <RTC_set_func+0x4f4>)
 8001a60:	f004 fd0a 	bl	8006478 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg_fecha_ok,sizeof(msg_fecha_ok),10);
 8001a64:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 8001a68:	230a      	movs	r3, #10
 8001a6a:	221e      	movs	r2, #30
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <RTC_set_func+0x4f4>)
 8001a6e:	f004 fd03 	bl	8006478 <HAL_UART_Transmit>
	  osThreadFlagsSet(temp_taskHandle,0x00000001U);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <RTC_set_func+0x508>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2101      	movs	r1, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f006 fe59 	bl	8008730 <osThreadFlagsSet>
	  //Aquí hay que diferenciar si se ha recibido un flag de 1 (intro) o 2 (overflow)


	  //Cuando se hayan introducido todos los valores entonces mandar el flag de notificacion a temp_task:
	  //osThreadFlagsSet(temp_taskHandle,0x00000001U);
	  	  	  osDelay(pdMS_TO_TICKS(10));
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f006 ff25 	bl	80088ce <osDelay>
 8001a84:	e7fb      	b.n	8001a7e <RTC_set_func+0x4e6>
 8001a86:	bf00      	nop
 8001a88:	20000824 	.word	0x20000824
 8001a8c:	200001f8 	.word	0x200001f8
 8001a90:	2000081c 	.word	0x2000081c
 8001a94:	0800d144 	.word	0x0800d144
 8001a98:	20000828 	.word	0x20000828
 8001a9c:	20000170 	.word	0x20000170
 8001aa0:	2000080c 	.word	0x2000080c

08001aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ab6:	f000 fcc7 	bl	8002448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <Error_Handler+0x8>
	...

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_MspInit+0x4c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_MspInit+0x4c>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f000 fd95 	bl	8002640 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ac      	sub	sp, #176	; 0xb0
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2288      	movs	r2, #136	; 0x88
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 ff69 	bl	800ba1c <memset>
  if(DFSDM1_Init == 0)
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d142      	bne.n	8001bd8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f8e0 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b6e:	f7ff ffab 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001ba2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bbc:	2306      	movs	r3, #6
 8001bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001bca:	f000 feef 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a02      	ldr	r2, [pc, #8]	; (8001be0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bd6:	6013      	str	r3, [r2, #0]
  }

}
 8001bd8:	bf00      	nop
 8001bda:	37b0      	adds	r7, #176	; 0xb0
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000083c 	.word	0x2000083c
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48001000 	.word	0x48001000

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ac      	sub	sp, #176	; 0xb0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2288      	movs	r2, #136	; 0x88
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f009 ff05 	bl	800ba1c <memset>
  if(hi2c->Instance==I2C2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_I2C_MspInit+0xb0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13b      	bne.n	8001c94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 f87d 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff ff48 	bl	8001ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c74:	4619      	mov	r1, r3
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <HAL_I2C_MspInit+0xb8>)
 8001c78:	f000 fe98 	bl	80029ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c86:	6593      	str	r3, [r2, #88]	; 0x58
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_I2C_MspInit+0xb4>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	37b0      	adds	r7, #176	; 0xb0
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40005800 	.word	0x40005800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_I2C_MspDeInit+0x3c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10f      	bne.n	8001cda <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_I2C_MspDeInit+0x40>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_I2C_MspDeInit+0x40>)
 8001cc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <HAL_I2C_MspDeInit+0x44>)
 8001ccc:	f001 f818 	bl	8002d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_I2C_MspDeInit+0x44>)
 8001cd6:	f001 f813 	bl	8002d00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000400 	.word	0x48000400

08001cf0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_QSPI_MspInit+0x7c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d128      	bne.n	8001d64 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6513      	str	r3, [r2, #80]	; 0x50
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_QSPI_MspInit+0x80>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d42:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d46:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d54:	230a      	movs	r3, #10
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_QSPI_MspInit+0x84>)
 8001d60:	f000 fe24 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	a0001000 	.word	0xa0001000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48001000 	.word	0x48001000

08001d78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0a4      	sub	sp, #144	; 0x90
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	2288      	movs	r2, #136	; 0x88
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f009 fe47 	bl	800ba1c <memset>
  if(hrtc->Instance==RTC)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_RTC_MspInit+0x5c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d118      	bne.n	8001dca <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 ffbc 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001db6:	f7ff fe87 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RTC_MspInit+0x60>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_RTC_MspInit+0x60>)
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3790      	adds	r7, #144	; 0x90
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40002800 	.word	0x40002800
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e40:	2306      	movs	r3, #6
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_SPI_MspInit+0x84>)
 8001e4c:	f000 fdae 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40003c00 	.word	0x40003c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000800 	.word	0x48000800

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0ae      	sub	sp, #184	; 0xb8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2288      	movs	r2, #136	; 0x88
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f009 fdc9 	bl	800ba1c <memset>
  if(huart->Instance==USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <HAL_UART_MspInit+0x144>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d143      	bne.n	8001f1c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 ff41 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eac:	f7ff fe0c 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	4a37      	ldr	r2, [pc, #220]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f02:	4619      	mov	r1, r3
 8001f04:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <HAL_UART_MspInit+0x14c>)
 8001f06:	f000 fd51 	bl	80029ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	2025      	movs	r0, #37	; 0x25
 8001f10:	f000 fb96 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f14:	2025      	movs	r0, #37	; 0x25
 8001f16:	f000 fbaf 	bl	8002678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f1a:	e040      	b.n	8001f9e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_UART_MspInit+0x150>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13b      	bne.n	8001f9e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f26:	2304      	movs	r3, #4
 8001f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fef8 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001f3e:	f7ff fdc3 	bl	8001ac8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_UART_MspInit+0x148>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <HAL_UART_MspInit+0x154>)
 8001f9a:	f000 fd07 	bl	80029ac <HAL_GPIO_Init>
}
 8001f9e:	bf00      	nop
 8001fa0:	37b8      	adds	r7, #184	; 0xb8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	48000c00 	.word	0x48000c00

08001fbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ac      	sub	sp, #176	; 0xb0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2288      	movs	r2, #136	; 0x88
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f009 fd1d 	bl	800ba1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fea:	d17c      	bne.n	80020e6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ff2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002002:	2318      	movs	r3, #24
 8002004:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002006:	2307      	movs	r3, #7
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800200e:	2302      	movs	r3, #2
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002012:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fe83 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002028:	f7ff fd4e 	bl	8001ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002062:	f000 fca3 	bl	80029ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002066:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800206a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002080:	230a      	movs	r3, #10
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f000 fc8c 	bl	80029ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80020d0:	f001 ff2c 	bl	8003f2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_PCD_MspInit+0x134>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020e0:	e001      	b.n	80020e6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80020e2:	f001 ff23 	bl	8003f2c <HAL_PWREx_EnableVddUSB>
}
 80020e6:	bf00      	nop
 80020e8:	37b0      	adds	r7, #176	; 0xb0
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08e      	sub	sp, #56	; 0x38
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_InitTick+0xe0>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <HAL_InitTick+0xe0>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_InitTick+0xe0>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800211a:	f107 0210 	add.w	r2, r7, #16
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f002 fd6d 	bl	8004c04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002134:	f002 fd3a 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8002138:	6378      	str	r0, [r7, #52]	; 0x34
 800213a:	e004      	b.n	8002146 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800213c:	f002 fd36 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8002140:	4603      	mov	r3, r0
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_InitTick+0xe4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9b      	lsrs	r3, r3, #18
 8002150:	3b01      	subs	r3, #1
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_InitTick+0xe8>)
 8002156:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <HAL_InitTick+0xec>)
 8002158:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_InitTick+0xe8>)
 800215c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002160:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_InitTick+0xe8>)
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_InitTick+0xe8>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_InitTick+0xe8>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_InitTick+0xe8>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800217a:	4818      	ldr	r0, [pc, #96]	; (80021dc <HAL_InitTick+0xe8>)
 800217c:	f003 fe5d 	bl	8005e3a <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11b      	bne.n	80021c6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800218e:	4813      	ldr	r0, [pc, #76]	; (80021dc <HAL_InitTick+0xe8>)
 8002190:	f003 feb4 	bl	8005efc <HAL_TIM_Base_Start_IT>
 8002194:	4603      	mov	r3, r0
 8002196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800219a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d111      	bne.n	80021c6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021a2:	2036      	movs	r0, #54	; 0x36
 80021a4:	f000 fa68 	bl	8002678 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d808      	bhi.n	80021c0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	2036      	movs	r0, #54	; 0x36
 80021b4:	f000 fa44 	bl	8002640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_InitTick+0xf0>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e002      	b.n	80021c6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3738      	adds	r7, #56	; 0x38
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	20000840 	.word	0x20000840
 80021e0:	40001000 	.word	0x40001000
 80021e4:	20000008 	.word	0x20000008

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002218:	2020      	movs	r0, #32
 800221a:	f000 fe7d 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800221e:	2040      	movs	r0, #64	; 0x40
 8002220:	f000 fe7a 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002224:	2080      	movs	r0, #128	; 0x80
 8002226:	f000 fe77 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800222a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800222e:	f000 fe73 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <USART1_IRQHandler+0x10>)
 800223e:	f004 fa05 	bl	800664c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200001f8 	.word	0x200001f8

0800224c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002250:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002254:	f000 fe60 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002258:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800225c:	f000 fe5c 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 8002260:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002264:	f000 fe58 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002268:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800226c:	f000 fe54 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002270:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002274:	f000 fe50 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM6_DAC_IRQHandler+0x10>)
 8002282:	f003 feab 	bl	8005fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000840 	.word	0x20000840

08002290 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
	return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f2:	605a      	str	r2, [r3, #4]
	return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_isatty>:

int _isatty(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f009 fb22 	bl	800b9ac <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20018000 	.word	0x20018000
 8002394:	00000400 	.word	0x00000400
 8002398:	2000088c 	.word	0x2000088c
 800239c:	20002808 	.word	0x20002808

080023a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <SystemInit+0x20>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <SystemInit+0x20>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c8:	f7ff ffea 	bl	80023a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <LoopForever+0xe>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e4:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <LoopForever+0x16>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f2:	f009 fae1 	bl	800b9b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f6:	f7fe fad1 	bl	800099c <main>

080023fa <LoopForever>:

LoopForever:
    b LoopForever
 80023fa:	e7fe      	b.n	80023fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002408:	0800d488 	.word	0x0800d488
  ldr r2, =_sbss
 800240c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002410:	20002804 	.word	0x20002804

08002414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC1_2_IRQHandler>

08002416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f902 	bl	800262a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002426:	200f      	movs	r0, #15
 8002428:	f7ff fe64 	bl	80020f4 <HAL_InitTick>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	e001      	b.n	800243c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002438:	f7ff fb4c 	bl	8001ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800243c:	79fb      	ldrb	r3, [r7, #7]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000000c 	.word	0x2000000c
 800246c:	20000890 	.word	0x20000890

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000890 	.word	0x20000890

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff ffee 	bl	8002470 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffde 	bl	8002470 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <__NVIC_SetPriorityGrouping>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff4c 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002652:	f7ff ff61 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002656:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6978      	ldr	r0, [r7, #20]
 800265e:	f7ff ffb1 	bl	80025c4 <NVIC_EncodePriority>
 8002662:	4602      	mov	r2, r0
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff80 	bl	8002570 <__NVIC_SetPriority>
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff54 	bl	8002534 <__NVIC_EnableIRQ>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0ac      	b.n	8002800 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8b2 	bl	8002814 <DFSDM_GetChannelFromInstance>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a55      	ldr	r2, [pc, #340]	; (8002808 <HAL_DFSDM_ChannelInit+0x174>)
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e09f      	b.n	8002800 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fa2f 	bl	8001b24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_DFSDM_ChannelInit+0x178>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_DFSDM_ChannelInit+0x178>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_DFSDM_ChannelInit+0x178>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d125      	bne.n	8002724 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026d8:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4c      	ldr	r2, [pc, #304]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026e4:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4948      	ldr	r1, [pc, #288]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a46      	ldr	r2, [pc, #280]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 80026f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80026fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	791b      	ldrb	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002706:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	493f      	ldr	r1, [pc, #252]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002718:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <HAL_DFSDM_ChannelInit+0x17c>)
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002722:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002732:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002742:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002748:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 020f 	bic.w	r2, r2, #15
 8002760:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002788:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f002 0207 	and.w	r2, r2, #7
 80027b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f810 	bl	8002814 <DFSDM_GetChannelFromInstance>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4904      	ldr	r1, [pc, #16]	; (8002808 <HAL_DFSDM_ChannelInit+0x174>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000898 	.word	0x20000898
 800280c:	20000894 	.word	0x20000894
 8002810:	40016000 	.word	0x40016000

08002814 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <DFSDM_GetChannelFromInstance+0x7c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e02b      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <DFSDM_GetChannelFromInstance+0x80>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e024      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <DFSDM_GetChannelFromInstance+0x84>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d102      	bne.n	8002846 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002840:	2302      	movs	r3, #2
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e01d      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <DFSDM_GetChannelFromInstance+0x88>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d102      	bne.n	8002854 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800284e:	2304      	movs	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e016      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d102      	bne.n	8002862 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800285c:	2305      	movs	r3, #5
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e00f      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <DFSDM_GetChannelFromInstance+0x90>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d102      	bne.n	8002870 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800286a:	2306      	movs	r3, #6
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e008      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <DFSDM_GetChannelFromInstance+0x94>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d102      	bne.n	800287e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002878:	2307      	movs	r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e001      	b.n	8002882 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800287e:	2303      	movs	r3, #3
 8002880:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40016000 	.word	0x40016000
 8002894:	40016020 	.word	0x40016020
 8002898:	40016040 	.word	0x40016040
 800289c:	40016080 	.word	0x40016080
 80028a0:	400160a0 	.word	0x400160a0
 80028a4:	400160c0 	.word	0x400160c0
 80028a8:	400160e0 	.word	0x400160e0

080028ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 020e 	bic.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 021c 	and.w	r2, r3, #28
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d005      	beq.n	800294c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e029      	b.n	80029a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020e 	bic.w	r2, r2, #14
 800295a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f003 021c 	and.w	r2, r3, #28
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
    }
  }
  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e17f      	b.n	8002cbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8171 	beq.w	8002cb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d005      	beq.n	80029ec <HAL_GPIO_Init+0x40>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d130      	bne.n	8002a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a22:	2201      	movs	r2, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0201 	and.w	r2, r3, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d118      	bne.n	8002a8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d017      	beq.n	8002ac8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	6939      	ldr	r1, [r7, #16]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80ac 	beq.w	8002cb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <HAL_GPIO_Init+0x330>)
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	4a5e      	ldr	r2, [pc, #376]	; (8002cdc <HAL_GPIO_Init+0x330>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6613      	str	r3, [r2, #96]	; 0x60
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_GPIO_Init+0x330>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b76:	4a5a      	ldr	r2, [pc, #360]	; (8002ce0 <HAL_GPIO_Init+0x334>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x242>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_GPIO_Init+0x338>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x23e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_GPIO_Init+0x33c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x23a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_GPIO_Init+0x340>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x236>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_GPIO_Init+0x344>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x232>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_GPIO_Init+0x348>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x22e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_GPIO_Init+0x34c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x22a>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c00:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_GPIO_Init+0x334>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c32:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c86:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb0:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <HAL_GPIO_Init+0x350>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f ae78 	bne.w	80029bc <HAL_GPIO_Init+0x10>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48001400 	.word	0x48001400
 8002cf8:	48001800 	.word	0x48001800
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d0e:	e0cd      	b.n	8002eac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d10:	2201      	movs	r2, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80c0 	beq.w	8002ea6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d26:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_GPIO_DeInit+0x1c8>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d4e:	d025      	beq.n	8002d9c <HAL_GPIO_DeInit+0x9c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <HAL_GPIO_DeInit+0x1cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01f      	beq.n	8002d98 <HAL_GPIO_DeInit+0x98>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a5d      	ldr	r2, [pc, #372]	; (8002ed0 <HAL_GPIO_DeInit+0x1d0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d019      	beq.n	8002d94 <HAL_GPIO_DeInit+0x94>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_GPIO_DeInit+0x1d4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_GPIO_DeInit+0x90>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_GPIO_DeInit+0x1d8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00d      	beq.n	8002d8c <HAL_GPIO_DeInit+0x8c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <HAL_GPIO_DeInit+0x1dc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_DeInit+0x88>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a59      	ldr	r2, [pc, #356]	; (8002ee0 <HAL_GPIO_DeInit+0x1e0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_GPIO_DeInit+0x84>
 8002d80:	2306      	movs	r3, #6
 8002d82:	e00c      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d84:	2307      	movs	r3, #7
 8002d86:	e00a      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d88:	2305      	movs	r3, #5
 8002d8a:	e008      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e006      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d90:	2303      	movs	r3, #3
 8002d92:	e004      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e002      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_GPIO_DeInit+0x9e>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	f002 0203 	and.w	r2, r2, #3
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	4093      	lsls	r3, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d132      	bne.n	8002e14 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002dae:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	494b      	ldr	r1, [pc, #300]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	4947      	ldr	r1, [pc, #284]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4944      	ldr	r1, [pc, #272]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4940      	ldr	r1, [pc, #256]	; (8002ee4 <HAL_GPIO_DeInit+0x1e4>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002df6:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_GPIO_DeInit+0x1c8>)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	4830      	ldr	r0, [pc, #192]	; (8002ec8 <HAL_GPIO_DeInit+0x1c8>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	3302      	adds	r3, #2
 8002e10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	08d2      	lsrs	r2, r2, #3
 8002e48:	4019      	ands	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2103      	movs	r1, #3
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	2101      	movs	r1, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af2b 	bne.w	8002d10 <HAL_GPIO_DeInit+0x10>
  }
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	48000400 	.word	0x48000400
 8002ed0:	48000800 	.word	0x48000800
 8002ed4:	48000c00 	.word	0x48000c00
 8002ed8:	48001000 	.word	0x48001000
 8002edc:	48001400 	.word	0x48001400
 8002ee0:	48001800 	.word	0x48001800
 8002ee4:	40010400 	.word	0x40010400

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f04:	e002      	b.n	8002f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f806 	bl	8002f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e081      	b.n	8003074 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe fe31 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2224      	movs	r2, #36	; 0x24
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e006      	b.n	8002fe6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fe4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d104      	bne.n	8002ff8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800301a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69d9      	ldr	r1, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e021      	b.n	80030d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe fdfe 	bl	8001ca8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	817b      	strh	r3, [r7, #10]
 80030ee:	460b      	mov	r3, r1
 80030f0:	813b      	strh	r3, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 80f9 	bne.w	80032f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_I2C_Mem_Write+0x34>
 800310a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0ed      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_I2C_Mem_Write+0x4e>
 8003126:	2302      	movs	r3, #2
 8003128:	e0e6      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003132:	f7ff f99d 	bl	8002470 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2319      	movs	r3, #25
 800313e:	2201      	movs	r2, #1
 8003140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fac3 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0d1      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317c:	88f8      	ldrh	r0, [r7, #6]
 800317e:	893a      	ldrh	r2, [r7, #8]
 8003180:	8979      	ldrh	r1, [r7, #10]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4603      	mov	r3, r0
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f9d3 	bl	8003538 <I2C_RequestMemoryWrite>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0a9      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d90e      	bls.n	80031cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	22ff      	movs	r2, #255	; 0xff
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fc2b 	bl	8003a20 <I2C_TransferConfig>
 80031ca:	e00f      	b.n	80031ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	2300      	movs	r3, #0
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fc1a 	bl	8003a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 faad 	bl	8003750 <I2C_WaitOnTXISFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07b      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d034      	beq.n	80032a4 <HAL_I2C_Mem_Write+0x1c8>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d130      	bne.n	80032a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	2200      	movs	r2, #0
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa3f 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e04d      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d90e      	bls.n	8003284 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	b2da      	uxtb	r2, r3
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	2300      	movs	r3, #0
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fbcf 	bl	8003a20 <I2C_TransferConfig>
 8003282:	e00f      	b.n	80032a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fbbe 	bl	8003a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d19e      	bne.n	80031ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa8c 	bl	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01a      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2220      	movs	r2, #32
 80032c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_I2C_Mem_Write+0x224>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	fe00e800 	.word	0xfe00e800

08003304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	460b      	mov	r3, r1
 8003318:	813b      	strh	r3, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	f040 80fd 	bne.w	8003526 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_I2C_Mem_Read+0x34>
 8003332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0f1      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Mem_Read+0x4e>
 800334e:	2302      	movs	r3, #2
 8003350:	e0ea      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800335a:	f7ff f889 	bl	8002470 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2319      	movs	r3, #25
 8003366:	2201      	movs	r2, #1
 8003368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f9af 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0d5      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2222      	movs	r2, #34	; 0x22
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a4:	88f8      	ldrh	r0, [r7, #6]
 80033a6:	893a      	ldrh	r2, [r7, #8]
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4603      	mov	r3, r0
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f913 	bl	80035e0 <I2C_RequestMemoryRead>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0ad      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2bff      	cmp	r3, #255	; 0xff
 80033d4:	d90e      	bls.n	80033f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	8979      	ldrh	r1, [r7, #10]
 80033e4:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_I2C_Mem_Read+0x22c>)
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fb17 	bl	8003a20 <I2C_TransferConfig>
 80033f2:	e00f      	b.n	8003414 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	b2da      	uxtb	r2, r3
 8003404:	8979      	ldrh	r1, [r7, #10]
 8003406:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <HAL_I2C_Mem_Read+0x22c>)
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fb06 	bl	8003a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	2200      	movs	r2, #0
 800341c:	2104      	movs	r1, #4
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f956 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e07c      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d034      	beq.n	80034d4 <HAL_I2C_Mem_Read+0x1d0>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d130      	bne.n	80034d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f927 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e04d      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2bff      	cmp	r3, #255	; 0xff
 8003494:	d90e      	bls.n	80034b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	2300      	movs	r3, #0
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fab7 	bl	8003a20 <I2C_TransferConfig>
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	8979      	ldrh	r1, [r7, #10]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 faa6 	bl	8003a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d19a      	bne.n	8003414 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f974 	bl	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e01a      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2220      	movs	r2, #32
 80034f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_I2C_Mem_Read+0x230>)
 8003506:	400b      	ands	r3, r1
 8003508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	80002400 	.word	0x80002400
 8003534:	fe00e800 	.word	0xfe00e800

08003538 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <I2C_RequestMemoryWrite+0xa4>)
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fa5d 	bl	8003a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	69b9      	ldr	r1, [r7, #24]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f8f0 	bl	8003750 <I2C_WaitOnTXISFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e02c      	b.n	80035d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
 800358a:	e015      	b.n	80035b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b29b      	uxth	r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8d6 	bl	8003750 <I2C_WaitOnTXISFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e012      	b.n	80035d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ae:	893b      	ldrh	r3, [r7, #8]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2200      	movs	r2, #0
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f884 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	80002000 	.word	0x80002000

080035e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <I2C_RequestMemoryRead+0xa4>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fa0a 	bl	8003a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f89d 	bl	8003750 <I2C_WaitOnTXISFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e02c      	b.n	800367a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003626:	893b      	ldrh	r3, [r7, #8]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
 8003630:	e015      	b.n	800365e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	b29b      	uxth	r3, r3
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f883 	bl	8003750 <I2C_WaitOnTXISFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e012      	b.n	800367a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003654:	893b      	ldrh	r3, [r7, #8]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f831 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	80002000 	.word	0x80002000

08003688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d103      	bne.n	80036a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d007      	beq.n	80036c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	619a      	str	r2, [r3, #24]
  }
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	e022      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d01e      	beq.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fec1 	bl	8002470 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d113      	bne.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e00f      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	429a      	cmp	r2, r3
 8003744:	d0cd      	beq.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800375c:	e02c      	b.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f870 	bl	8003848 <I2C_IsErrorOccurred>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02a      	b.n	80037c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d01e      	beq.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fe79 	bl	8002470 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d113      	bne.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d1cb      	bne.n	800375e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037dc:	e028      	b.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f830 	bl	8003848 <I2C_IsErrorOccurred>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e026      	b.n	8003840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe fe3d 	bl	8002470 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d113      	bne.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d1cf      	bne.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d075      	beq.n	8003960 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2210      	movs	r2, #16
 800387a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800387c:	e056      	b.n	800392c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d052      	beq.n	800392c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fdf3 	bl	8002470 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_IsErrorOccurred+0x54>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d147      	bne.n	800392c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038be:	d12e      	bne.n	800391e <I2C_IsErrorOccurred+0xd6>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c6:	d02a      	beq.n	800391e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d027      	beq.n	800391e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038de:	f7fe fdc7 	bl	8002470 <HAL_GetTick>
 80038e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e4:	e01b      	b.n	800391e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038e6:	f7fe fdc3 	bl	8002470 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b19      	cmp	r3, #25
 80038f2:	d914      	bls.n	800391e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b20      	cmp	r3, #32
 800392a:	d1dc      	bne.n	80038e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d003      	beq.n	8003942 <I2C_IsErrorOccurred+0xfa>
 800393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393e:	2b00      	cmp	r3, #0
 8003940:	d09d      	beq.n	800387e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2220      	movs	r2, #32
 8003950:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f043 0308 	orr.w	r3, r3, #8
 800399a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01c      	beq.n	8003a10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff fe56 	bl	8003688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <I2C_IsErrorOccurred+0x1d4>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fe00e800 	.word	0xfe00e800

08003a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	0d5b      	lsrs	r3, r3, #21
 8003a5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <I2C_TransferConfig+0x60>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	43db      	mvns	r3, r3
 8003a64:	ea02 0103 	and.w	r1, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	03ff63ff 	.word	0x03ff63ff

08003a84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d138      	bne.n	8003b0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e032      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d139      	bne.n	8003ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e033      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2224      	movs	r2, #36	; 0x24
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb4:	b08f      	sub	sp, #60	; 0x3c
 8003bb6:	af0a      	add	r7, sp, #40	; 0x28
 8003bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e116      	b.n	8003df2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f9ec 	bl	8001fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 ff8f 	bl	8007b26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	687e      	ldr	r6, [r7, #4]
 8003c10:	466d      	mov	r5, sp
 8003c12:	f106 0410 	add.w	r4, r6, #16
 8003c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c26:	1d33      	adds	r3, r6, #4
 8003c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	f003 ff4f 	bl	8007ace <USB_CoreInit>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0d7      	b.n	8003df2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 ff7d 	bl	8007b48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e04a      	b.n	8003cea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	333d      	adds	r3, #61	; 0x3d
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	333c      	adds	r3, #60	; 0x3c
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	b298      	uxth	r0, r3
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3344      	adds	r3, #68	; 0x44
 8003c90:	4602      	mov	r2, r0
 8003c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3340      	adds	r3, #64	; 0x40
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3348      	adds	r3, #72	; 0x48
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3354      	adds	r3, #84	; 0x54
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3af      	bcc.n	8003c54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	e044      	b.n	8003d84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3301      	adds	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3b5      	bcc.n	8003cfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	687e      	ldr	r6, [r7, #4]
 8003d96:	466d      	mov	r5, sp
 8003d98:	f106 0410 	add.w	r4, r6, #16
 8003d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dac:	1d33      	adds	r3, r6, #4
 8003dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db0:	6838      	ldr	r0, [r7, #0]
 8003db2:	f003 ff15 	bl	8007be0 <USB_DevInit>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e014      	b.n	8003df2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f80a 	bl	8003dfa <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 f8c1 	bl	8007f72 <USB_DevDisconnect>

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	f043 0303 	orr.w	r3, r3, #3
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6013      	str	r3, [r2, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40007000 	.word	0x40007000

08003e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	d130      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e90:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9c:	d038      	beq.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2232      	movs	r2, #50	; 0x32
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0c9b      	lsrs	r3, r3, #18
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec4:	e002      	b.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d102      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f2      	bne.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d110      	bne.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e00f      	b.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d007      	beq.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f08:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40007000 	.word	0x40007000
 8003f24:	20000004 	.word	0x20000004
 8003f28:	431bde83 	.word	0x431bde83

08003f2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3a:	6053      	str	r3, [r2, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40007000 	.word	0x40007000

08003f4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7fe fa8c 	bl	8002470 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e063      	b.n	800402c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd feb9 	bl	8001cf0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003f7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f858 	bl	8004038 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2120      	movs	r1, #32
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f850 	bl	8004054 <QSPI_WaitFlagStateUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d131      	bne.n	8004022 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fc8:	f023 0310 	bic.w	r3, r3, #16
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6852      	ldr	r2, [r2, #4]
 8003fd0:	0611      	lsls	r1, r2, #24
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_QSPI_Init+0xe8>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6912      	ldr	r2, [r2, #16]
 8003fee:	0411      	lsls	r1, r2, #16
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6952      	ldr	r2, [r2, #20]
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6992      	ldr	r2, [r2, #24]
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800402a:	7afb      	ldrb	r3, [r7, #11]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	ffe0f8fe 	.word	0xffe0f8fe

08004038 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004064:	e01a      	b.n	800409c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d016      	beq.n	800409c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fe f9ff 	bl	8002470 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	f043 0201 	orr.w	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e00e      	b.n	80040ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1d6      	bne.n	8004066 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e3ca      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d6:	4b97      	ldr	r3, [pc, #604]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e0:	4b94      	ldr	r3, [pc, #592]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80e4 	beq.w	80042c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_RCC_OscConfig+0x4a>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f040 808b 	bne.w	800421c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 8087 	bne.w	800421c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800410e:	4b89      	ldr	r3, [pc, #548]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e3a2      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_RCC_OscConfig+0x7c>
 8004136:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413e:	e005      	b.n	800414c <HAL_RCC_OscConfig+0x88>
 8004140:	4b7c      	ldr	r3, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	4293      	cmp	r3, r2
 800414e:	d223      	bcs.n	8004198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd87 	bl	8004c68 <RCC_SetFlashLatencyFromMSIRange>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e383      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004164:	4b73      	ldr	r3, [pc, #460]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a72      	ldr	r2, [pc, #456]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	496d      	ldr	r1, [pc, #436]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	4968      	ldr	r1, [pc, #416]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
 8004196:	e025      	b.n	80041e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800419e:	f043 0308 	orr.w	r3, r3, #8
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4960      	ldr	r1, [pc, #384]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	495b      	ldr	r1, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fd47 	bl	8004c68 <RCC_SetFlashLatencyFromMSIRange>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e343      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e4:	f000 fc4a 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	4950      	ldr	r1, [pc, #320]	; (8004338 <HAL_RCC_OscConfig+0x274>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004200:	4a4e      	ldr	r2, [pc, #312]	; (800433c <HAL_RCC_OscConfig+0x278>)
 8004202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd ff73 	bl	80020f4 <HAL_InitTick>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d052      	beq.n	80042be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	e327      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d032      	beq.n	800428a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a42      	ldr	r2, [pc, #264]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004230:	f7fe f91e 	bl	8002470 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004238:	f7fe f91a 	bl	8002470 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e310      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424a:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a36      	ldr	r2, [pc, #216]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800425c:	f043 0308 	orr.w	r3, r3, #8
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4931      	ldr	r1, [pc, #196]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	492c      	ldr	r1, [pc, #176]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	e01a      	b.n	80042c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004296:	f7fe f8eb 	bl	8002470 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429e:	f7fe f8e7 	bl	8002470 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e2dd      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b0:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x1da>
 80042bc:	e000      	b.n	80042c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d074      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x21a>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d10e      	bne.n	80042f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d064      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d160      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e2ba      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x24a>
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e026      	b.n	800435c <HAL_RCC_OscConfig+0x298>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004316:	d115      	bne.n	8004344 <HAL_RCC_OscConfig+0x280>
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800431e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a02      	ldr	r2, [pc, #8]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x298>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	0800d398 	.word	0x0800d398
 800433c:	20000004 	.word	0x20000004
 8004340:	20000008 	.word	0x20000008
 8004344:	4ba0      	ldr	r3, [pc, #640]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a9f      	ldr	r2, [pc, #636]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800434a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a9c      	ldr	r2, [pc, #624]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fe f884 	bl	8002470 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe f880 	bl	8002470 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e276      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437e:	4b92      	ldr	r3, [pc, #584]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x2a8>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe f870 	bl	8002470 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004394:	f7fe f86c 	bl	8002470 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e262      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x2d0>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d060      	beq.n	8004484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x310>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d119      	bne.n	8004402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d116      	bne.n	8004402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d4:	4b7c      	ldr	r3, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x328>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e23f      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	4973      	ldr	r1, [pc, #460]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004400:	e040      	b.n	8004484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440a:	4b6f      	ldr	r3, [pc, #444]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6e      	ldr	r2, [pc, #440]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fe f82b 	bl	8002470 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fe f827 	bl	8002470 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e21d      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004430:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	495f      	ldr	r1, [pc, #380]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	e018      	b.n	8004484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004452:	4b5d      	ldr	r3, [pc, #372]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fe f807 	bl	8002470 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004466:	f7fe f803 	bl	8002470 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1f9      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004478:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03c      	beq.n	800450a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004498:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd ffe2 	bl	8002470 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fd ffde 	bl	8002470 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1d4      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
 80044d0:	e01b      	b.n	800450a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d8:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fd ffc5 	bl	8002470 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fd ffc1 	bl	8002470 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1b7      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fc:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ef      	bne.n	80044ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80a6 	beq.w	8004664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800451c:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10d      	bne.n	8004544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x508>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d118      	bne.n	8004582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_OscConfig+0x508>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x508>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455c:	f7fd ff88 	bl	8002470 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fd ff84 	bl	8002470 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e17a      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_RCC_OscConfig+0x508>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d108      	bne.n	800459c <HAL_RCC_OscConfig+0x4d8>
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459a:	e029      	b.n	80045f0 <HAL_RCC_OscConfig+0x52c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d115      	bne.n	80045d0 <HAL_RCC_OscConfig+0x50c>
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c4:	e014      	b.n	80045f0 <HAL_RCC_OscConfig+0x52c>
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40007000 	.word	0x40007000
 80045d0:	4b9c      	ldr	r3, [pc, #624]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	4a9b      	ldr	r2, [pc, #620]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e0:	4b98      	ldr	r3, [pc, #608]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	4a97      	ldr	r2, [pc, #604]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d016      	beq.n	8004626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd ff3a 	bl	8002470 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd ff36 	bl	8002470 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e12a      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ed      	beq.n	8004600 <HAL_RCC_OscConfig+0x53c>
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fd ff23 	bl	8002470 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd ff1f 	bl	8002470 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e113      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004644:	4b7f      	ldr	r3, [pc, #508]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ed      	bne.n	800462e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80fe 	beq.w	800486a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b02      	cmp	r3, #2
 8004674:	f040 80d0 	bne.w	8004818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004678:	4b72      	ldr	r3, [pc, #456]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	429a      	cmp	r2, r3
 800468a:	d130      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	3b01      	subs	r3, #1
 8004698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d127      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11f      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b8:	2a07      	cmp	r2, #7
 80046ba:	bf14      	ite	ne
 80046bc:	2201      	movne	r2, #1
 80046be:	2200      	moveq	r2, #0
 80046c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	3b01      	subs	r3, #1
 80046e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d06e      	beq.n	80047cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d069      	beq.n	80047c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ad      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004710:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800471c:	f7fd fea8 	bl	8002470 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd fea4 	bl	8002470 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e09a      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004736:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	4b40      	ldr	r3, [pc, #256]	; (8004848 <HAL_RCC_OscConfig+0x784>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004752:	3a01      	subs	r2, #1
 8004754:	0112      	lsls	r2, r2, #4
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800475c:	0212      	lsls	r2, r2, #8
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004764:	0852      	lsrs	r2, r2, #1
 8004766:	3a01      	subs	r2, #1
 8004768:	0552      	lsls	r2, r2, #21
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	3a01      	subs	r2, #1
 8004774:	0652      	lsls	r2, r2, #25
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800477c:	0912      	lsrs	r2, r2, #4
 800477e:	0452      	lsls	r2, r2, #17
 8004780:	430a      	orrs	r2, r1
 8004782:	4930      	ldr	r1, [pc, #192]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004784:	4313      	orrs	r3, r2
 8004786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004794:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047a0:	f7fd fe66 	bl	8002470 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd fe62 	bl	8002470 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e058      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c6:	e050      	b.n	800486a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e04f      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d148      	bne.n	800486a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047f0:	f7fd fe3e 	bl	8002470 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fd fe3a 	bl	8002470 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e030      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x734>
 8004816:	e028      	b.n	800486a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d023      	beq.n	8004866 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a08      	ldr	r2, [pc, #32]	; (8004844 <HAL_RCC_OscConfig+0x780>)
 8004824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fd fe21 	bl	8002470 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004830:	e00c      	b.n	800484c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fd fe1d 	bl	8002470 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d905      	bls.n	800484c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e013      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
 8004844:	40021000 	.word	0x40021000
 8004848:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_OscConfig+0x7b0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ec      	bne.n	8004832 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCC_OscConfig+0x7b0>)
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4905      	ldr	r1, [pc, #20]	; (8004874 <HAL_RCC_OscConfig+0x7b0>)
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <HAL_RCC_OscConfig+0x7b4>)
 8004860:	4013      	ands	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
 8004864:	e001      	b.n	800486a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	feeefffc 	.word	0xfeeefffc

0800487c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0e7      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 0207 	bic.w	r2, r3, #7
 80048a6:	4970      	ldr	r1, [pc, #448]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b6e      	ldr	r3, [pc, #440]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0cf      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d010      	beq.n	80048ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	4b66      	ldr	r3, [pc, #408]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d8:	429a      	cmp	r2, r3
 80048da:	d908      	bls.n	80048ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4960      	ldr	r1, [pc, #384]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04c      	beq.n	8004994 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	4b5a      	ldr	r3, [pc, #360]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d121      	bne.n	8004952 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0a6      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d115      	bne.n	8004952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e09a      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004932:	4b4e      	ldr	r3, [pc, #312]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e08e      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e086      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4943      	ldr	r1, [pc, #268]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd fd84 	bl	8002470 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fd fd80 	bl	8002470 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e06e      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b3a      	ldr	r3, [pc, #232]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d208      	bcs.n	80049c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	492b      	ldr	r1, [pc, #172]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c2:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d210      	bcs.n	80049f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f023 0207 	bic.w	r2, r3, #7
 80049d8:	4923      	ldr	r1, [pc, #140]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCC_ClockConfig+0x1ec>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e036      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4918      	ldr	r1, [pc, #96]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4910      	ldr	r1, [pc, #64]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a30:	f000 f824 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	490b      	ldr	r1, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x1f4>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fb4d 	bl	80020f4 <HAL_InitTick>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40022000 	.word	0x40022000
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0800d398 	.word	0x0800d398
 8004a74:	20000004 	.word	0x20000004
 8004a78:	20000008 	.word	0x20000008

08004a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d121      	bne.n	8004aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d11e      	bne.n	8004aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ab0:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	e005      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004acc:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	e004      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b00:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d134      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0xac>
 8004b20:	e005      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b24:	617b      	str	r3, [r7, #20]
      break;
 8004b26:	e005      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b2a:	617b      	str	r3, [r7, #20]
      break;
 8004b2c:	e002      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	617b      	str	r3, [r7, #20]
      break;
 8004b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b34:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	3301      	adds	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	fb03 f202 	mul.w	r2, r3, r2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	0e5b      	lsrs	r3, r3, #25
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	3301      	adds	r3, #1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b74:	69bb      	ldr	r3, [r7, #24]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3724      	adds	r7, #36	; 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	0800d3b0 	.word	0x0800d3b0
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	007a1200 	.word	0x007a1200

08004b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000004 	.word	0x20000004

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	0800d3a8 	.word	0x0800d3a8

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bdc:	f7ff ffda 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	0800d3a8 	.word	0x0800d3a8

08004c04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	220f      	movs	r2, #15
 8004c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <HAL_RCC_GetClockConfig+0x60>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0207 	and.w	r2, r3, #7
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40022000 	.word	0x40022000

08004c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c80:	f7ff f8f0 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004c84:	6178      	str	r0, [r7, #20]
 8004c86:	e014      	b.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
 8004c94:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca0:	f7ff f8e0 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004ca4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d10b      	bne.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d919      	bls.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc4:	d902      	bls.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e013      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e010      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d902      	bls.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd8:	2303      	movs	r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e00a      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b80      	cmp	r3, #128	; 0x80
 8004ce2:	d102      	bne.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e004      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d101      	bne.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	4909      	ldr	r1, [pc, #36]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40022000 	.word	0x40022000

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d041      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d4c:	d02a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d52:	d824      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d58:	d008      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d5e:	d81e      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d68:	d010      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d6a:	e018      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d6c:	4b86      	ldr	r3, [pc, #536]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a85      	ldr	r2, [pc, #532]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e015      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 facb 	bl	800531c <RCCEx_PLLSAI1_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d8a:	e00c      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3320      	adds	r3, #32
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fbb6 	bl	8005504 <RCCEx_PLLSAI2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	74fb      	strb	r3, [r7, #19]
      break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dac:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	4973      	ldr	r1, [pc, #460]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d041      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ddc:	d02a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de2:	d824      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de8:	d008      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dee:	d81e      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df8:	d010      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dfa:	e018      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a61      	ldr	r2, [pc, #388]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e08:	e015      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fa83 	bl	800531c <RCCEx_PLLSAI1_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e1a:	e00c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3320      	adds	r3, #32
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fb6e 	bl	8005504 <RCCEx_PLLSAI2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	74fb      	strb	r3, [r7, #19]
      break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e3c:	4b52      	ldr	r3, [pc, #328]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4a:	494f      	ldr	r1, [pc, #316]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e52:	e001      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a0 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a40      	ldr	r2, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8c:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3a      	ldr	r2, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fae2 	bl	8002470 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fd fade 	bl	8002470 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ef      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d15c      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01f      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f10:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fd fa9d 	bl	8002470 <HAL_GetTick>
 8004f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f38:	e00b      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fd fa99 	bl	8002470 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f50:	e006      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ec      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f76:	4904      	ldr	r1, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7e:	e009      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b9e      	ldr	r3, [pc, #632]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4a9d      	ldr	r2, [pc, #628]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4b98      	ldr	r3, [pc, #608]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	4994      	ldr	r1, [pc, #592]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	4b8f      	ldr	r3, [pc, #572]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 020c 	bic.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	498c      	ldr	r1, [pc, #560]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff6:	4b87      	ldr	r3, [pc, #540]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4983      	ldr	r1, [pc, #524]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005018:	4b7e      	ldr	r3, [pc, #504]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	497b      	ldr	r1, [pc, #492]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800503a:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	4972      	ldr	r1, [pc, #456]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800505c:	4b6d      	ldr	r3, [pc, #436]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	496a      	ldr	r1, [pc, #424]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800507e:	4b65      	ldr	r3, [pc, #404]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	4961      	ldr	r1, [pc, #388]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a0:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	4959      	ldr	r1, [pc, #356]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	4950      	ldr	r1, [pc, #320]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050e4:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	4948      	ldr	r1, [pc, #288]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	493f      	ldr	r1, [pc, #252]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d028      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	4937      	ldr	r1, [pc, #220]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005146:	d106      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a31      	ldr	r2, [pc, #196]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
 8005154:	e011      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515e:	d10c      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f8d8 	bl	800531c <RCCEx_PLLSAI1_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d028      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005186:	4b23      	ldr	r3, [pc, #140]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	491f      	ldr	r1, [pc, #124]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a4:	d106      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b0:	60d3      	str	r3, [r2, #12]
 80051b2:	e011      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f8a9 	bl	800531c <RCCEx_PLLSAI1_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f2:	4908      	ldr	r1, [pc, #32]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005202:	d109      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a02      	ldr	r2, [pc, #8]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800520e:	60d3      	str	r3, [r2, #12]
 8005210:	e014      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f877 	bl	800531c <RCCEx_PLLSAI1_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005256:	4928      	ldr	r1, [pc, #160]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005266:	d10d      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f854 	bl	800531c <RCCEx_PLLSAI1_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	74bb      	strb	r3, [r7, #18]
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3320      	adds	r3, #32
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f935 	bl	8005504 <RCCEx_PLLSAI2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c2:	490d      	ldr	r1, [pc, #52]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	4904      	ldr	r1, [pc, #16]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000

080052fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	6013      	str	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000

0800531c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800532a:	4b75      	ldr	r3, [pc, #468]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d018      	beq.n	8005368 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005336:	4b72      	ldr	r3, [pc, #456]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0203 	and.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d10d      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
       ||
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800534e:	4b6c      	ldr	r3, [pc, #432]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
       ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d047      	beq.n	80053f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e044      	b.n	80053f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d018      	beq.n	80053a2 <RCCEx_PLLSAI1_Config+0x86>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d825      	bhi.n	80053c0 <RCCEx_PLLSAI1_Config+0xa4>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d002      	beq.n	800537e <RCCEx_PLLSAI1_Config+0x62>
 8005378:	2b02      	cmp	r3, #2
 800537a:	d009      	beq.n	8005390 <RCCEx_PLLSAI1_Config+0x74>
 800537c:	e020      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800537e:	4b60      	ldr	r3, [pc, #384]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538e:	e01a      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005390:	4b5b      	ldr	r3, [pc, #364]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d116      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a0:	e013      	b.n	80053ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053a2:	4b57      	ldr	r3, [pc, #348]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ae:	4b54      	ldr	r3, [pc, #336]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053be:	e006      	b.n	80053ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      break;
 80053c4:	e004      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c6:	bf00      	nop
 80053c8:	e002      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053d6:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	430b      	orrs	r3, r1
 80053ec:	4944      	ldr	r1, [pc, #272]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d17d      	bne.n	80054f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053f8:	4b41      	ldr	r3, [pc, #260]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a40      	ldr	r2, [pc, #256]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fd f834 	bl	8002470 <HAL_GetTick>
 8005408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800540a:	e009      	b.n	8005420 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800540c:	f7fd f830 	bl	8002470 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d902      	bls.n	8005420 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	73fb      	strb	r3, [r7, #15]
        break;
 800541e:	e005      	b.n	800542c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005420:	4b37      	ldr	r3, [pc, #220]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1ef      	bne.n	800540c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d160      	bne.n	80054f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d111      	bne.n	800545c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005438:	4b31      	ldr	r3, [pc, #196]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6892      	ldr	r2, [r2, #8]
 8005448:	0211      	lsls	r1, r2, #8
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	0912      	lsrs	r2, r2, #4
 8005450:	0452      	lsls	r2, r2, #17
 8005452:	430a      	orrs	r2, r1
 8005454:	492a      	ldr	r1, [pc, #168]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]
 800545a:	e027      	b.n	80054ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d112      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005462:	4b27      	ldr	r3, [pc, #156]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800546a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6892      	ldr	r2, [r2, #8]
 8005472:	0211      	lsls	r1, r2, #8
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6912      	ldr	r2, [r2, #16]
 8005478:	0852      	lsrs	r2, r2, #1
 800547a:	3a01      	subs	r2, #1
 800547c:	0552      	lsls	r2, r2, #21
 800547e:	430a      	orrs	r2, r1
 8005480:	491f      	ldr	r1, [pc, #124]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
 8005486:	e011      	b.n	80054ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005488:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6892      	ldr	r2, [r2, #8]
 8005498:	0211      	lsls	r1, r2, #8
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6952      	ldr	r2, [r2, #20]
 800549e:	0852      	lsrs	r2, r2, #1
 80054a0:	3a01      	subs	r2, #1
 80054a2:	0652      	lsls	r2, r2, #25
 80054a4:	430a      	orrs	r2, r1
 80054a6:	4916      	ldr	r1, [pc, #88]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fc ffda 	bl	8002470 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054be:	e009      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c0:	f7fc ffd6 	bl	8002470 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d902      	bls.n	80054d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	73fb      	strb	r3, [r7, #15]
          break;
 80054d2:	e005      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ef      	beq.n	80054c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	4904      	ldr	r1, [pc, #16]	; (8005500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000

08005504 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005512:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800551e:	4b67      	ldr	r3, [pc, #412]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0203 	and.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d10d      	bne.n	800554a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
       ||
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005536:	4b61      	ldr	r3, [pc, #388]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
       ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d047      	beq.n	80055da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	e044      	b.n	80055da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d018      	beq.n	800558a <RCCEx_PLLSAI2_Config+0x86>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d825      	bhi.n	80055a8 <RCCEx_PLLSAI2_Config+0xa4>
 800555c:	2b01      	cmp	r3, #1
 800555e:	d002      	beq.n	8005566 <RCCEx_PLLSAI2_Config+0x62>
 8005560:	2b02      	cmp	r3, #2
 8005562:	d009      	beq.n	8005578 <RCCEx_PLLSAI2_Config+0x74>
 8005564:	e020      	b.n	80055a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005566:	4b55      	ldr	r3, [pc, #340]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11d      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005576:	e01a      	b.n	80055ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005578:	4b50      	ldr	r3, [pc, #320]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e013      	b.n	80055b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800558a:	4b4c      	ldr	r3, [pc, #304]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005596:	4b49      	ldr	r3, [pc, #292]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055a6:	e006      	b.n	80055b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e004      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10d      	bne.n	80055da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055be:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	430b      	orrs	r3, r1
 80055d4:	4939      	ldr	r1, [pc, #228]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d167      	bne.n	80056b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055e0:	4b36      	ldr	r3, [pc, #216]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a35      	ldr	r2, [pc, #212]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fc ff40 	bl	8002470 <HAL_GetTick>
 80055f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055f2:	e009      	b.n	8005608 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055f4:	f7fc ff3c 	bl	8002470 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d902      	bls.n	8005608 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
        break;
 8005606:	e005      	b.n	8005614 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005608:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ef      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d14a      	bne.n	80056b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d111      	bne.n	8005644 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005620:	4b26      	ldr	r3, [pc, #152]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6892      	ldr	r2, [r2, #8]
 8005630:	0211      	lsls	r1, r2, #8
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	0912      	lsrs	r2, r2, #4
 8005638:	0452      	lsls	r2, r2, #17
 800563a:	430a      	orrs	r2, r1
 800563c:	491f      	ldr	r1, [pc, #124]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	614b      	str	r3, [r1, #20]
 8005642:	e011      	b.n	8005668 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800564c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6892      	ldr	r2, [r2, #8]
 8005654:	0211      	lsls	r1, r2, #8
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6912      	ldr	r2, [r2, #16]
 800565a:	0852      	lsrs	r2, r2, #1
 800565c:	3a01      	subs	r2, #1
 800565e:	0652      	lsls	r2, r2, #25
 8005660:	430a      	orrs	r2, r1
 8005662:	4916      	ldr	r1, [pc, #88]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005664:	4313      	orrs	r3, r2
 8005666:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fc fefc 	bl	8002470 <HAL_GetTick>
 8005678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800567a:	e009      	b.n	8005690 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800567c:	f7fc fef8 	bl	8002470 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d902      	bls.n	8005690 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	73fb      	strb	r3, [r7, #15]
          break;
 800568e:	e005      	b.n	800569c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ef      	beq.n	800567c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d06c      	beq.n	80057ac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fb46 	bl	8001d78 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	22ca      	movs	r2, #202	; 0xca
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2253      	movs	r2, #83	; 0x53
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa49 	bl	8005b9c <RTC_EnterInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d14b      	bne.n	80057ac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005726:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6919      	ldr	r1, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	041a      	lsls	r2, r3, #16
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa4d 	bl	8005c04 <RTC_ExitInitMode>
 800576a:	4603      	mov	r3, r0
 800576c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11b      	bne.n	80057ac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0203 	bic.w	r2, r2, #3
 8005782:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b6:	b590      	push	{r4, r7, lr}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_RTC_SetTime+0x1a>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e08b      	b.n	80058e8 <HAL_RTC_SetTime+0x132>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22ca      	movs	r2, #202	; 0xca
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2253      	movs	r2, #83	; 0x53
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f9d3 	bl	8005b9c <RTC_EnterInitMode>
 80057f6:	4603      	mov	r3, r0
 80057f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d163      	bne.n	80058c8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d126      	bne.n	8005854 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2200      	movs	r2, #0
 8005818:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fa2e 	bl	8005c80 <RTC_ByteToBcd2>
 8005824:	4603      	mov	r3, r0
 8005826:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa27 	bl	8005c80 <RTC_ByteToBcd2>
 8005832:	4603      	mov	r3, r0
 8005834:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005836:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fa1f 	bl	8005c80 <RTC_ByteToBcd2>
 8005842:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005844:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e018      	b.n	8005886 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005874:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800587a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	78db      	ldrb	r3, [r3, #3]
 8005880:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005890:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005894:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6899      	ldr	r1, [r3, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f9a0 	bl	8005c04 <RTC_ExitInitMode>
 80058c4:	4603      	mov	r3, r0
 80058c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd90      	pop	{r4, r7, pc}

080058f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800591e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005922:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	0d9b      	lsrs	r3, r3, #22
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11a      	bne.n	800599e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f9a7 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f99e 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	789b      	ldrb	r3, [r3, #2]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f995 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_RTC_SetDate+0x1a>
 80059be:	2302      	movs	r3, #2
 80059c0:	e075      	b.n	8005aae <HAL_RTC_SetDate+0x106>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <HAL_RTC_SetDate+0x4e>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	f023 0310 	bic.w	r3, r3, #16
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	330a      	adds	r3, #10
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11c      	bne.n	8005a36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f93d 	bl	8005c80 <RTC_ByteToBcd2>
 8005a06:	4603      	mov	r3, r0
 8005a08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f936 	bl	8005c80 <RTC_ByteToBcd2>
 8005a14:	4603      	mov	r3, r0
 8005a16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f92e 	bl	8005c80 <RTC_ByteToBcd2>
 8005a24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e00e      	b.n	8005a54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	78db      	ldrb	r3, [r3, #3]
 8005a3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a42:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	22ca      	movs	r2, #202	; 0xca
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2253      	movs	r2, #83	; 0x53
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f899 	bl	8005b9c <RTC_EnterInitMode>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10c      	bne.n	8005a8e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f8bd 	bl	8005c04 <RTC_ExitInitMode>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}

08005ab6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	0b5b      	lsrs	r3, r3, #13
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11a      	bne.n	8005b46 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f8d3 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f8ca 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f8c1 	bl	8005cc0 <RTC_Bcd2ToByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b66:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005b68:	f7fc fc82 	bl	8002470 <HAL_GetTick>
 8005b6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b6e:	e009      	b.n	8005b84 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b70:	f7fc fc7e 	bl	8002470 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b7e:	d901      	bls.n	8005b84 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e007      	b.n	8005b94 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0ee      	beq.n	8005b70 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d120      	bne.n	8005bf8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005bc0:	f7fc fc56 	bl	8002470 <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bc6:	e00d      	b.n	8005be4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bc8:	f7fc fc52 	bl	8002470 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d905      	bls.n	8005be4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2203      	movs	r2, #3
 8005be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <RTC_EnterInitMode+0x5c>
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d1e7      	bne.n	8005bc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005c10:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10c      	bne.n	8005c42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff91 	bl	8005b50 <HAL_RTC_WaitForSynchro>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2203      	movs	r2, #3
 8005c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	e017      	b.n	8005c72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c48:	f023 0320 	bic.w	r3, r3, #32
 8005c4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff7e 	bl	8005b50 <HAL_RTC_WaitForSynchro>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <RTC_ExitInitMode+0x78>)
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40002800 	.word	0x40002800

08005c80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005c92:	e005      	b.n	8005ca0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	3b0a      	subs	r3, #10
 8005c9e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	2b09      	cmp	r3, #9
 8005ca4:	d8f6      	bhi.n	8005c94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b2db      	uxtb	r3, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	091b      	lsrs	r3, r3, #4
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e095      	b.n	8005e32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d16:	d009      	beq.n	8005d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	61da      	str	r2, [r3, #28]
 8005d1e:	e005      	b.n	8005d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f848 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d6c:	d902      	bls.n	8005d74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e002      	b.n	8005d7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d82:	d007      	beq.n	8005d94 <HAL_SPI_Init+0xa0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d8c:	d002      	beq.n	8005d94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	ea42 0103 	orr.w	r1, r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	f003 0204 	and.w	r2, r3, #4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e10:	ea42 0103 	orr.w	r1, r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e049      	b.n	8005ee0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f841 	bl	8005ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 f9f7 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e04f      	b.n	8005fb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a23      	ldr	r2, [pc, #140]	; (8005fc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d018      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_TIM_Base_Start_IT+0x76>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d115      	bne.n	8005f9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d015      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0xb4>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	d011      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	e008      	b.n	8005fb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e000      	b.n	8005fb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	00010007 	.word	0x00010007

08005fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0202 	mvn.w	r2, #2
 8006008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f905 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8f7 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f908 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0204 	mvn.w	r2, #4
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8db 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8cd 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8de 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b08      	cmp	r3, #8
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0208 	mvn.w	r2, #8
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2204      	movs	r2, #4
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8b1 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8a3 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8b4 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d122      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d11b      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2208      	movs	r2, #8
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f887 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f879 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f88a 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0201 	mvn.w	r2, #1
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fb fca2 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f914 	bl	80063b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f907 	bl	80063c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d10e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f838 	bl	8006256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d10e      	bne.n	8006212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d107      	bne.n	8006212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f06f 0220 	mvn.w	r2, #32
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8c7 	bl	80063a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3d      	ldr	r2, [pc, #244]	; (8006384 <TIM_Base_SetConfig+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3b      	ldr	r2, [pc, #236]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <TIM_Base_SetConfig+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <TIM_Base_SetConfig+0x118>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <TIM_Base_SetConfig+0x128>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a26      	ldr	r2, [pc, #152]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00f      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <TIM_Base_SetConfig+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a11      	ldr	r2, [pc, #68]	; (8006394 <TIM_Base_SetConfig+0x128>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a10      	ldr	r2, [pc, #64]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0f      	ldr	r2, [pc, #60]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40013400 	.word	0x40013400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800

080063a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e040      	b.n	8006470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fb fd30 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fc18 	bl	8006c50 <UART_SetConfig>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e022      	b.n	8006470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fec4 	bl	80071c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 ff4b 	bl	8007304 <UART_CheckIdleState>
 800646e:	4603      	mov	r3, r0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800648c:	2b20      	cmp	r3, #32
 800648e:	f040 8082 	bne.w	8006596 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Transmit+0x26>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07a      	b.n	8006598 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Transmit+0x38>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e073      	b.n	8006598 <HAL_UART_Transmit+0x120>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2221      	movs	r2, #33	; 0x21
 80064c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064c6:	f7fb ffd3 	bl	8002470 <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d108      	bne.n	80064f8 <HAL_UART_Transmit+0x80>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e003      	b.n	8006500 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006508:	e02d      	b.n	8006566 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 ff3e 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e039      	b.n	8006598 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	881a      	ldrh	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006536:	b292      	uxth	r2, r2
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	3302      	adds	r3, #2
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e008      	b.n	8006554 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b292      	uxth	r2, r2
 800654c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1cb      	bne.n	800650a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 ff0a 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e005      	b.n	8006598 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e000      	b.n	8006598 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006596:	2302      	movs	r3, #2
  }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d142      	bne.n	800663c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_UART_Receive_IT+0x22>
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e03b      	b.n	800663e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UART_Receive_IT+0x34>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e034      	b.n	800663e <HAL_UART_Receive_IT+0x9e>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_UART_Receive_IT+0xa8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01f      	beq.n	800662c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d018      	beq.n	800662c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	613b      	str	r3, [r7, #16]
   return(result);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	623b      	str	r3, [r7, #32]
 800661a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	69f9      	ldr	r1, [r7, #28]
 800661e:	6a3a      	ldr	r2, [r7, #32]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	61bb      	str	r3, [r7, #24]
   return(result);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	461a      	mov	r2, r3
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 ff74 	bl	8007520 <UART_Start_Receive_IT>
 8006638:	4603      	mov	r3, r0
 800663a:	e000      	b.n	800663e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	3728      	adds	r7, #40	; 0x28
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40008000 	.word	0x40008000

0800664c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b0ba      	sub	sp, #232	; 0xe8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006676:	f640 030f 	movw	r3, #2063	; 0x80f
 800667a:	4013      	ands	r3, r2
 800667c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d115      	bne.n	80066b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00f      	beq.n	80066b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 82a6 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      }
      return;
 80066b2:	e2a0      	b.n	8006bf6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8117 	beq.w	80068ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ce:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_UART_IRQHandler+0x298>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 810a 	beq.w	80068ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_UART_IRQHandler+0xbc>
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <HAL_UART_IRQHandler+0xec>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2202      	movs	r2, #2
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d011      	beq.n	8006768 <HAL_UART_IRQHandler+0x11c>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2204      	movs	r2, #4
 8006756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006784:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800679a:	f043 0208 	orr.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_UART_IRQHandler+0x18a>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 820c 	beq.w	8006bfa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800682a:	2b00      	cmp	r3, #0
 800682c:	d04f      	beq.n	80068ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 ff40 	bl	80076b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d141      	bne.n	80068c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800685c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800686e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800687a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d9      	bne.n	8006842 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	2b00      	cmp	r3, #0
 8006894:	d013      	beq.n	80068be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <HAL_UART_IRQHandler+0x29c>)
 800689c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fc f840 	bl	8002928 <HAL_DMA_Abort_IT>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d017      	beq.n	80068de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	e00f      	b.n	80068de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9b0 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	e00b      	b.n	80068de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9ac 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068cc:	e007      	b.n	80068de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f9a8 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80068dc:	e18d      	b.n	8006bfa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068de:	bf00      	nop
    return;
 80068e0:	e18b      	b.n	8006bfa <HAL_UART_IRQHandler+0x5ae>
 80068e2:	bf00      	nop
 80068e4:	04000120 	.word	0x04000120
 80068e8:	0800777b 	.word	0x0800777b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	f040 8146 	bne.w	8006b82 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 813f 	beq.w	8006b82 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8138 	beq.w	8006b82 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	f040 80b4 	bne.w	8006a92 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006936:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 815f 	beq.w	8006bfe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800694a:	429a      	cmp	r2, r3
 800694c:	f080 8157 	bcs.w	8006bfe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 8085 	bne.w	8006a76 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800699a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1da      	bne.n	800696c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e1      	bne.n	80069b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e3      	bne.n	80069f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a46:	f023 0310 	bic.w	r3, r3, #16
 8006a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e4      	bne.n	8006a36 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fb ff1b 	bl	80028ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8d4 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a90:	e0b5      	b.n	8006bfe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a7 	beq.w	8006c02 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a2 	beq.w	8006c02 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	623b      	str	r3, [r7, #32]
   return(result);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b18:	633a      	str	r2, [r7, #48]	; 0x30
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0310 	bic.w	r3, r3, #16
 8006b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	69b9      	ldr	r1, [r7, #24]
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e4      	bne.n	8006b3e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f85c 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b80:	e03f      	b.n	8006c02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <HAL_UART_IRQHandler+0x560>
 8006b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d008      	beq.n	8006bac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 ff88 	bl	8007aba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006baa:	e02d      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01c      	beq.n	8006c06 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
    }
    return;
 8006bd4:	e017      	b.n	8006c06 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fdd9 	bl	80077a6 <UART_EndTransmit_IT>
    return;
 8006bf4:	e008      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bf6:	bf00      	nop
 8006bf8:	e006      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006bfa:	bf00      	nop
 8006bfc:	e004      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e002      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006c06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c08:	37e8      	adds	r7, #232	; 0xe8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c54:	b08a      	sub	sp, #40	; 0x28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4ba4      	ldr	r3, [pc, #656]	; (8006f10 <UART_SetConfig+0x2c0>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a99      	ldr	r2, [pc, #612]	; (8006f14 <UART_SetConfig+0x2c4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a90      	ldr	r2, [pc, #576]	; (8006f18 <UART_SetConfig+0x2c8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d126      	bne.n	8006d28 <UART_SetConfig+0xd8>
 8006cda:	4b90      	ldr	r3, [pc, #576]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d81b      	bhi.n	8006d20 <UART_SetConfig+0xd0>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0xa0>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d11 	.word	0x08006d11
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e116      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0e:	e112      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d16:	e10e      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e10a      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e106      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a7c      	ldr	r2, [pc, #496]	; (8006f20 <UART_SetConfig+0x2d0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d138      	bne.n	8006da4 <UART_SetConfig+0x154>
 8006d32:	4b7a      	ldr	r3, [pc, #488]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d82d      	bhi.n	8006d9c <UART_SetConfig+0x14c>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0xf8>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006d9d 	.word	0x08006d9d
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006d9d 	.word	0x08006d9d
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006d85 	.word	0x08006d85
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d82:	e0d8      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e0d4      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e0d0      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e0cc      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e0c8      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5e      	ldr	r2, [pc, #376]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d125      	bne.n	8006dfa <UART_SetConfig+0x1aa>
 8006dae:	4b5b      	ldr	r3, [pc, #364]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006db8:	2b30      	cmp	r3, #48	; 0x30
 8006dba:	d016      	beq.n	8006dea <UART_SetConfig+0x19a>
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d818      	bhi.n	8006df2 <UART_SetConfig+0x1a2>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d00a      	beq.n	8006dda <UART_SetConfig+0x18a>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d814      	bhi.n	8006df2 <UART_SetConfig+0x1a2>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <UART_SetConfig+0x182>
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d008      	beq.n	8006de2 <UART_SetConfig+0x192>
 8006dd0:	e00f      	b.n	8006df2 <UART_SetConfig+0x1a2>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd8:	e0ad      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de0:	e0a9      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006de2:	2304      	movs	r3, #4
 8006de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de8:	e0a5      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006dea:	2308      	movs	r3, #8
 8006dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df0:	e0a1      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006df2:	2310      	movs	r3, #16
 8006df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df8:	e09d      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <UART_SetConfig+0x2d8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d125      	bne.n	8006e50 <UART_SetConfig+0x200>
 8006e04:	4b45      	ldr	r3, [pc, #276]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e10:	d016      	beq.n	8006e40 <UART_SetConfig+0x1f0>
 8006e12:	2bc0      	cmp	r3, #192	; 0xc0
 8006e14:	d818      	bhi.n	8006e48 <UART_SetConfig+0x1f8>
 8006e16:	2b80      	cmp	r3, #128	; 0x80
 8006e18:	d00a      	beq.n	8006e30 <UART_SetConfig+0x1e0>
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d814      	bhi.n	8006e48 <UART_SetConfig+0x1f8>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <UART_SetConfig+0x1d8>
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d008      	beq.n	8006e38 <UART_SetConfig+0x1e8>
 8006e26:	e00f      	b.n	8006e48 <UART_SetConfig+0x1f8>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2e:	e082      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e36:	e07e      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e07a      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e076      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e072      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a35      	ldr	r2, [pc, #212]	; (8006f2c <UART_SetConfig+0x2dc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d12a      	bne.n	8006eb0 <UART_SetConfig+0x260>
 8006e5a:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e68:	d01a      	beq.n	8006ea0 <UART_SetConfig+0x250>
 8006e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e6e:	d81b      	bhi.n	8006ea8 <UART_SetConfig+0x258>
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d00c      	beq.n	8006e90 <UART_SetConfig+0x240>
 8006e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7a:	d815      	bhi.n	8006ea8 <UART_SetConfig+0x258>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <UART_SetConfig+0x238>
 8006e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e84:	d008      	beq.n	8006e98 <UART_SetConfig+0x248>
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x258>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8e:	e052      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e90:	2302      	movs	r3, #2
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e96:	e04e      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	e04a      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e046      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e042      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <UART_SetConfig+0x2c4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d13a      	bne.n	8006f30 <UART_SetConfig+0x2e0>
 8006eba:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ec8:	d01a      	beq.n	8006f00 <UART_SetConfig+0x2b0>
 8006eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ece:	d81b      	bhi.n	8006f08 <UART_SetConfig+0x2b8>
 8006ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed4:	d00c      	beq.n	8006ef0 <UART_SetConfig+0x2a0>
 8006ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eda:	d815      	bhi.n	8006f08 <UART_SetConfig+0x2b8>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <UART_SetConfig+0x298>
 8006ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee4:	d008      	beq.n	8006ef8 <UART_SetConfig+0x2a8>
 8006ee6:	e00f      	b.n	8006f08 <UART_SetConfig+0x2b8>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eee:	e022      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef6:	e01e      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efe:	e01a      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f06:	e016      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0e:	e012      	b.n	8006f36 <UART_SetConfig+0x2e6>
 8006f10:	efff69f3 	.word	0xefff69f3
 8006f14:	40008000 	.word	0x40008000
 8006f18:	40013800 	.word	0x40013800
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	40004400 	.word	0x40004400
 8006f24:	40004800 	.word	0x40004800
 8006f28:	40004c00 	.word	0x40004c00
 8006f2c:	40005000 	.word	0x40005000
 8006f30:	2310      	movs	r3, #16
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a9f      	ldr	r2, [pc, #636]	; (80071b8 <UART_SetConfig+0x568>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d17a      	bne.n	8007036 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d824      	bhi.n	8006f92 <UART_SetConfig+0x342>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0x300>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f93 	.word	0x08006f93
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f93 	.word	0x08006f93
 8006f60:	08006f83 	.word	0x08006f83
 8006f64:	08006f93 	.word	0x08006f93
 8006f68:	08006f93 	.word	0x08006f93
 8006f6c:	08006f93 	.word	0x08006f93
 8006f70:	08006f8b 	.word	0x08006f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fd fe1a 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006f78:	61f8      	str	r0, [r7, #28]
        break;
 8006f7a:	e010      	b.n	8006f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f7c:	4b8f      	ldr	r3, [pc, #572]	; (80071bc <UART_SetConfig+0x56c>)
 8006f7e:	61fb      	str	r3, [r7, #28]
        break;
 8006f80:	e00d      	b.n	8006f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f82:	f7fd fd7b 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8006f86:	61f8      	str	r0, [r7, #28]
        break;
 8006f88:	e009      	b.n	8006f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8e:	61fb      	str	r3, [r7, #28]
        break;
 8006f90:	e005      	b.n	8006f9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80fb 	beq.w	800719c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d305      	bcc.n	8006fc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d903      	bls.n	8006fca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fc8:	e0e8      	b.n	800719c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	461c      	mov	r4, r3
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	022b      	lsls	r3, r5, #8
 8006fdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006fe0:	0222      	lsls	r2, r4, #8
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	6849      	ldr	r1, [r1, #4]
 8006fe6:	0849      	lsrs	r1, r1, #1
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4688      	mov	r8, r1
 8006fec:	4681      	mov	r9, r0
 8006fee:	eb12 0a08 	adds.w	sl, r2, r8
 8006ff2:	eb43 0b09 	adc.w	fp, r3, r9
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	4650      	mov	r0, sl
 8007006:	4659      	mov	r1, fp
 8007008:	f7f9 fb1e 	bl	8000648 <__aeabi_uldivmod>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4613      	mov	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701a:	d308      	bcc.n	800702e <UART_SetConfig+0x3de>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007022:	d204      	bcs.n	800702e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	60da      	str	r2, [r3, #12]
 800702c:	e0b6      	b.n	800719c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007034:	e0b2      	b.n	800719c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703e:	d15e      	bne.n	80070fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007044:	2b08      	cmp	r3, #8
 8007046:	d828      	bhi.n	800709a <UART_SetConfig+0x44a>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x400>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007075 	.word	0x08007075
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007085 	.word	0x08007085
 800705c:	0800709b 	.word	0x0800709b
 8007060:	0800708b 	.word	0x0800708b
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800709b 	.word	0x0800709b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007074:	f7fd fd9a 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8007078:	61f8      	str	r0, [r7, #28]
        break;
 800707a:	e014      	b.n	80070a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800707c:	f7fd fdac 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8007080:	61f8      	str	r0, [r7, #28]
        break;
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b4d      	ldr	r3, [pc, #308]	; (80071bc <UART_SetConfig+0x56c>)
 8007086:	61fb      	str	r3, [r7, #28]
        break;
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fd fcf7 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 800708e:	61f8      	str	r0, [r7, #28]
        break;
 8007090:	e009      	b.n	80070a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	61fb      	str	r3, [r7, #28]
        break;
 8007098:	e005      	b.n	80070a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d077      	beq.n	800719c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	005a      	lsls	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	441a      	add	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b0f      	cmp	r3, #15
 80070c6:	d916      	bls.n	80070f6 <UART_SetConfig+0x4a6>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ce:	d212      	bcs.n	80070f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f023 030f 	bic.w	r3, r3, #15
 80070d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	8afb      	ldrh	r3, [r7, #22]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	8afa      	ldrh	r2, [r7, #22]
 80070f2:	60da      	str	r2, [r3, #12]
 80070f4:	e052      	b.n	800719c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070fc:	e04e      	b.n	800719c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007102:	2b08      	cmp	r3, #8
 8007104:	d827      	bhi.n	8007156 <UART_SetConfig+0x506>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x4bc>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	08007157 	.word	0x08007157
 800711c:	08007147 	.word	0x08007147
 8007120:	08007157 	.word	0x08007157
 8007124:	08007157 	.word	0x08007157
 8007128:	08007157 	.word	0x08007157
 800712c:	0800714f 	.word	0x0800714f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fd fd3c 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8007134:	61f8      	str	r0, [r7, #28]
        break;
 8007136:	e014      	b.n	8007162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007138:	f7fd fd4e 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 800713c:	61f8      	str	r0, [r7, #28]
        break;
 800713e:	e010      	b.n	8007162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <UART_SetConfig+0x56c>)
 8007142:	61fb      	str	r3, [r7, #28]
        break;
 8007144:	e00d      	b.n	8007162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007146:	f7fd fc99 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 800714a:	61f8      	str	r0, [r7, #28]
        break;
 800714c:	e009      	b.n	8007162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007152:	61fb      	str	r3, [r7, #28]
        break;
 8007154:	e005      	b.n	8007162 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007160:	bf00      	nop
    }

    if (pclk != 0U)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d019      	beq.n	800719c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	085a      	lsrs	r2, r3, #1
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d909      	bls.n	8007196 <UART_SetConfig+0x546>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d205      	bcs.n	8007196 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e002      	b.n	800719c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3728      	adds	r7, #40	; 0x28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b6:	bf00      	nop
 80071b8:	40008000 	.word	0x40008000
 80071bc:	00f42400 	.word	0x00f42400

080071c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072be:	d10a      	bne.n	80072d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007314:	f7fb f8ac 	bl	8002470 <HAL_GetTick>
 8007318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b08      	cmp	r3, #8
 8007326:	d10e      	bne.n	8007346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f82d 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e023      	b.n	800738e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b04      	cmp	r3, #4
 8007352:	d10e      	bne.n	8007372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f817 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e00d      	b.n	800738e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b09c      	sub	sp, #112	; 0x70
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	4613      	mov	r3, r2
 80073a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	e0a5      	b.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	f000 80a1 	beq.w	80074f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b2:	f7fb f85d 	bl	8002470 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073be:	429a      	cmp	r2, r3
 80073c0:	d302      	bcc.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80073c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d13e      	bne.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073dc:	667b      	str	r3, [r7, #100]	; 0x64
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800741a:	64ba      	str	r2, [r7, #72]	; 0x48
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e067      	b.n	8007516 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d04f      	beq.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007462:	d147      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800746c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
 800748e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	613b      	str	r3, [r7, #16]
   return(result);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074c0:	623a      	str	r2, [r7, #32]
 80074c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e5      	bne.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e010      	b.n	8007516 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	4013      	ands	r3, r2
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	429a      	cmp	r2, r3
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	429a      	cmp	r2, r3
 8007510:	f43f af4a 	beq.w	80073a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3770      	adds	r7, #112	; 0x70
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007520:	b480      	push	{r7}
 8007522:	b097      	sub	sp, #92	; 0x5c
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007552:	d10e      	bne.n	8007572 <UART_Start_Receive_IT+0x52>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <UART_Start_Receive_IT+0x48>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007562:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007566:	e02d      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	22ff      	movs	r2, #255	; 0xff
 800756c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007570:	e028      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10d      	bne.n	8007596 <UART_Start_Receive_IT+0x76>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <UART_Start_Receive_IT+0x6c>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800758a:	e01b      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	227f      	movs	r2, #127	; 0x7f
 8007590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007594:	e016      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800759e:	d10d      	bne.n	80075bc <UART_Start_Receive_IT+0x9c>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <UART_Start_Receive_IT+0x92>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	227f      	movs	r2, #127	; 0x7f
 80075ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075b0:	e008      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	223f      	movs	r2, #63	; 0x3f
 80075b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ba:	e003      	b.n	80075c4 <UART_Start_Receive_IT+0xa4>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2222      	movs	r2, #34	; 0x22
 80075d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80075f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760e:	d107      	bne.n	8007620 <UART_Start_Receive_IT+0x100>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a24      	ldr	r2, [pc, #144]	; (80076ac <UART_Start_Receive_IT+0x18c>)
 800761c:	665a      	str	r2, [r3, #100]	; 0x64
 800761e:	e002      	b.n	8007626 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <UART_Start_Receive_IT+0x190>)
 8007624:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d019      	beq.n	800766a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e6      	bne.n	8007636 <UART_Start_Receive_IT+0x116>
 8007668:	e018      	b.n	800769c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	613b      	str	r3, [r7, #16]
   return(result);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f043 0320 	orr.w	r3, r3, #32
 800767e:	653b      	str	r3, [r7, #80]	; 0x50
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007688:	623b      	str	r3, [r7, #32]
 800768a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	61bb      	str	r3, [r7, #24]
   return(result);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	375c      	adds	r7, #92	; 0x5c
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	0800795b 	.word	0x0800795b
 80076b0:	080077fb 	.word	0x080077fb

080076b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b095      	sub	sp, #84	; 0x54
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076da:	643b      	str	r3, [r7, #64]	; 0x40
 80076dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	64bb      	str	r3, [r7, #72]	; 0x48
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007726:	2b01      	cmp	r3, #1
 8007728:	d118      	bne.n	800775c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	60bb      	str	r3, [r7, #8]
   return(result);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007748:	61bb      	str	r3, [r7, #24]
 800774a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6979      	ldr	r1, [r7, #20]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	613b      	str	r3, [r7, #16]
   return(result);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800776e:	bf00      	nop
 8007770:	3754      	adds	r7, #84	; 0x54
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7ff fa43 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b088      	sub	sp, #32
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	613b      	str	r3, [r7, #16]
   return(result);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fa0f 	bl	8006c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f2:	bf00      	nop
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b096      	sub	sp, #88	; 0x58
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007808:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007810:	2b22      	cmp	r3, #34	; 0x22
 8007812:	f040 8094 	bne.w	800793e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800781c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007820:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007824:	b2d9      	uxtb	r1, r3
 8007826:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800782a:	b2da      	uxtb	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	400a      	ands	r2, r1
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d179      	bne.n	8007952 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007872:	653b      	str	r3, [r7, #80]	; 0x50
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787c:	647b      	str	r3, [r7, #68]	; 0x44
 800787e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800788a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e6      	bne.n	800785e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	623b      	str	r3, [r7, #32]
   return(result);
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	f023 0301 	bic.w	r3, r3, #1
 80078a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b0:	633a      	str	r2, [r7, #48]	; 0x30
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e5      	bne.n	8007890 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d12e      	bne.n	8007936 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	69b9      	ldr	r1, [r7, #24]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	617b      	str	r3, [r7, #20]
   return(result);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d103      	bne.n	8007926 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2210      	movs	r2, #16
 8007924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff f982 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007934:	e00d      	b.n	8007952 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7f9 fcac 	bl	8001294 <HAL_UART_RxCpltCallback>
}
 800793c:	e009      	b.n	8007952 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	8b1b      	ldrh	r3, [r3, #24]
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0208 	orr.w	r2, r2, #8
 800794e:	b292      	uxth	r2, r2
 8007950:	831a      	strh	r2, [r3, #24]
}
 8007952:	bf00      	nop
 8007954:	3758      	adds	r7, #88	; 0x58
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b096      	sub	sp, #88	; 0x58
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007968:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007970:	2b22      	cmp	r3, #34	; 0x22
 8007972:	f040 8094 	bne.w	8007a9e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800797c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007986:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800798a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800798e:	4013      	ands	r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007994:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d179      	bne.n	8007ab2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
 80079de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f023 0301 	bic.w	r3, r3, #1
 8007a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d12e      	bne.n	8007a96 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 0310 	bic.w	r3, r3, #16
 8007a52:	647b      	str	r3, [r7, #68]	; 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d103      	bne.n	8007a86 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2210      	movs	r2, #16
 8007a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff f8d2 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a94:	e00d      	b.n	8007ab2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7f9 fbfc 	bl	8001294 <HAL_UART_RxCpltCallback>
}
 8007a9c:	e009      	b.n	8007ab2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	8b1b      	ldrh	r3, [r3, #24]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0208 	orr.w	r2, r2, #8
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	831a      	strh	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	3758      	adds	r7, #88	; 0x58
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ace:	b084      	sub	sp, #16
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	f107 001c 	add.w	r0, r7, #28
 8007adc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa6f 	bl	8007fd0 <USB_CoreReset>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
 8007b08:	e005      	b.n	8007b16 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b22:	b004      	add	sp, #16
 8007b24:	4770      	bx	lr

08007b26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 0201 	bic.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d115      	bne.n	8007b96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b76:	2001      	movs	r0, #1
 8007b78:	f7fa fc86 	bl	8002488 <HAL_Delay>
      ms++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa16 	bl	8007fb4 <USB_GetMode>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d01e      	beq.n	8007bcc <USB_SetCurrentMode+0x84>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b31      	cmp	r3, #49	; 0x31
 8007b92:	d9f0      	bls.n	8007b76 <USB_SetCurrentMode+0x2e>
 8007b94:	e01a      	b.n	8007bcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d115      	bne.n	8007bc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f7fa fc6d 	bl	8002488 <HAL_Delay>
      ms++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9fd 	bl	8007fb4 <USB_GetMode>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <USB_SetCurrentMode+0x84>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b31      	cmp	r3, #49	; 0x31
 8007bc4:	d9f0      	bls.n	8007ba8 <USB_SetCurrentMode+0x60>
 8007bc6:	e001      	b.n	8007bcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e005      	b.n	8007bd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b32      	cmp	r3, #50	; 0x32
 8007bd0:	d101      	bne.n	8007bd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007be0:	b084      	sub	sp, #16
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	e009      	b.n	8007c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3340      	adds	r3, #64	; 0x40
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3301      	adds	r3, #1
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b0e      	cmp	r3, #14
 8007c18:	d9f2      	bls.n	8007c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d11c      	bne.n	8007c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e005      	b.n	8007c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c80:	461a      	mov	r2, r3
 8007c82:	680b      	ldr	r3, [r1, #0]
 8007c84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c86:	2103      	movs	r1, #3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f959 	bl	8007f40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c8e:	2110      	movs	r1, #16
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8f1 	bl	8007e78 <USB_FlushTxFifo>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f91d 	bl	8007ee0 <USB_FlushRxFifo>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	e043      	b.n	8007d62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf0:	d118      	bne.n	8007d24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	461a      	mov	r2, r3
 8007d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	e013      	b.n	8007d36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	e008      	b.n	8007d36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	461a      	mov	r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	461a      	mov	r2, r3
 8007d44:	2300      	movs	r3, #0
 8007d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	461a      	mov	r2, r3
 8007d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d3b7      	bcc.n	8007cda <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	e043      	b.n	8007df8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d86:	d118      	bne.n	8007dba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e013      	b.n	8007dcc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db0:	461a      	mov	r2, r3
 8007db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e008      	b.n	8007dcc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	2300      	movs	r3, #0
 8007dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dea:	461a      	mov	r2, r3
 8007dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3301      	adds	r3, #1
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3b7      	bcc.n	8007d70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f043 0210 	orr.w	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <USB_DevInit+0x294>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f043 0208 	orr.w	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d107      	bne.n	8007e62 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e5a:	f043 0304 	orr.w	r3, r3, #4
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e6e:	b004      	add	sp, #16
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	803c3800 	.word	0x803c3800

08007e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a13      	ldr	r2, [pc, #76]	; (8007edc <USB_FlushTxFifo+0x64>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e01b      	b.n	8007ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	daf2      	bge.n	8007e86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	019b      	lsls	r3, r3, #6
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a08      	ldr	r2, [pc, #32]	; (8007edc <USB_FlushTxFifo+0x64>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e006      	b.n	8007ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d0f0      	beq.n	8007eb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	00030d40 	.word	0x00030d40

08007ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <USB_FlushRxFifo+0x5c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d901      	bls.n	8007efe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e018      	b.n	8007f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	daf2      	bge.n	8007eec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <USB_FlushRxFifo+0x5c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e006      	b.n	8007f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b10      	cmp	r3, #16
 8007f2c:	d0f0      	beq.n	8007f10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	00030d40 	.word	0x00030d40

08007f40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f60:	4313      	orrs	r3, r2
 8007f62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f8c:	f023 0303 	bic.w	r3, r3, #3
 8007f90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_CoreReset+0x64>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e01b      	b.n	8008026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	daf2      	bge.n	8007fdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f043 0201 	orr.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4a09      	ldr	r2, [pc, #36]	; (8008034 <USB_CoreReset+0x64>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d901      	bls.n	8008018 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e006      	b.n	8008026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d0f0      	beq.n	8008006 <USB_CoreReset+0x36>

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	00030d40 	.word	0x00030d40

08008038 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8008040:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <I2Cx_MspInit+0xa8>)
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <I2Cx_MspInit+0xa8>)
 8008046:	f043 0302 	orr.w	r3, r3, #2
 800804a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <I2Cx_MspInit+0xa8>)
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008058:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800805c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800805e:	2312      	movs	r3, #18
 8008060:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8008062:	2301      	movs	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008066:	2303      	movs	r3, #3
 8008068:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800806a:	2304      	movs	r3, #4
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800806e:	f107 0314 	add.w	r3, r7, #20
 8008072:	4619      	mov	r1, r3
 8008074:	481b      	ldr	r0, [pc, #108]	; (80080e4 <I2Cx_MspInit+0xac>)
 8008076:	f7fa fc99 	bl	80029ac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800807a:	f107 0314 	add.w	r3, r7, #20
 800807e:	4619      	mov	r1, r3
 8008080:	4818      	ldr	r0, [pc, #96]	; (80080e4 <I2Cx_MspInit+0xac>)
 8008082:	f7fa fc93 	bl	80029ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008086:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <I2Cx_MspInit+0xa8>)
 8008088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <I2Cx_MspInit+0xa8>)
 800808c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008090:	6593      	str	r3, [r2, #88]	; 0x58
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <I2Cx_MspInit+0xa8>)
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <I2Cx_MspInit+0xa8>)
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <I2Cx_MspInit+0xa8>)
 80080a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <I2Cx_MspInit+0xa8>)
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <I2Cx_MspInit+0xa8>)
 80080b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80080b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80080b6:	2200      	movs	r2, #0
 80080b8:	210f      	movs	r1, #15
 80080ba:	2021      	movs	r0, #33	; 0x21
 80080bc:	f7fa fac0 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80080c0:	2021      	movs	r0, #33	; 0x21
 80080c2:	f7fa fad9 	bl	8002678 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80080c6:	2200      	movs	r2, #0
 80080c8:	210f      	movs	r1, #15
 80080ca:	2022      	movs	r0, #34	; 0x22
 80080cc:	f7fa fab8 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80080d0:	2022      	movs	r0, #34	; 0x22
 80080d2:	f7fa fad1 	bl	8002678 <HAL_NVIC_EnableIRQ>
}
 80080d6:	bf00      	nop
 80080d8:	3728      	adds	r7, #40	; 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40021000 	.word	0x40021000
 80080e4:	48000400 	.word	0x48000400

080080e8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a12      	ldr	r2, [pc, #72]	; (800813c <I2Cx_Init+0x54>)
 80080f4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a11      	ldr	r2, [pc, #68]	; (8008140 <I2Cx_Init+0x58>)
 80080fa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff ff89 	bl	8008038 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fa ff19 	bl	8002f5e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800812c:	2100      	movs	r1, #0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fb fca8 	bl	8003a84 <HAL_I2CEx_ConfigAnalogFilter>
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40005800 	.word	0x40005800
 8008140:	00702681 	.word	0x00702681

08008144 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af04      	add	r7, sp, #16
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4603      	mov	r3, r0
 8008154:	72fb      	strb	r3, [r7, #11]
 8008156:	460b      	mov	r3, r1
 8008158:	813b      	strh	r3, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008162:	7afb      	ldrb	r3, [r7, #11]
 8008164:	b299      	uxth	r1, r3
 8008166:	88f8      	ldrh	r0, [r7, #6]
 8008168:	893a      	ldrh	r2, [r7, #8]
 800816a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4603      	mov	r3, r0
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7fb f8c2 	bl	8003304 <HAL_I2C_Mem_Read>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d004      	beq.n	8008194 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	4619      	mov	r1, r3
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f832 	bl	80081f8 <I2Cx_Error>
  }
  return status;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b08a      	sub	sp, #40	; 0x28
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	461a      	mov	r2, r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	72fb      	strb	r3, [r7, #11]
 80081b0:	460b      	mov	r3, r1
 80081b2:	813b      	strh	r3, [r7, #8]
 80081b4:	4613      	mov	r3, r2
 80081b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	b299      	uxth	r1, r3
 80081c0:	88f8      	ldrh	r0, [r7, #6]
 80081c2:	893a      	ldrh	r2, [r7, #8]
 80081c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	4603      	mov	r3, r0
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7fa ff81 	bl	80030dc <HAL_I2C_Mem_Write>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	4619      	mov	r1, r3
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f805 	bl	80081f8 <I2Cx_Error>
  }
  return status;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7fa ff39 	bl	800307c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff ff6c 	bl	80080e8 <I2Cx_Init>
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800821c:	4802      	ldr	r0, [pc, #8]	; (8008228 <SENSOR_IO_Init+0x10>)
 800821e:	f7ff ff63 	bl	80080e8 <I2Cx_Init>
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200008b8 	.word	0x200008b8

0800822c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af02      	add	r7, sp, #8
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
 8008236:	460b      	mov	r3, r1
 8008238:	71bb      	strb	r3, [r7, #6]
 800823a:	4613      	mov	r3, r2
 800823c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800823e:	79bb      	ldrb	r3, [r7, #6]
 8008240:	b29a      	uxth	r2, r3
 8008242:	79f9      	ldrb	r1, [r7, #7]
 8008244:	2301      	movs	r3, #1
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	1d7b      	adds	r3, r7, #5
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	2301      	movs	r3, #1
 800824e:	4803      	ldr	r0, [pc, #12]	; (800825c <SENSOR_IO_Write+0x30>)
 8008250:	f7ff ffa5 	bl	800819e <I2Cx_WriteMultiple>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200008b8 	.word	0x200008b8

08008260 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	4603      	mov	r3, r0
 8008268:	460a      	mov	r2, r1
 800826a:	71fb      	strb	r3, [r7, #7]
 800826c:	4613      	mov	r3, r2
 800826e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8008274:	79bb      	ldrb	r3, [r7, #6]
 8008276:	b29a      	uxth	r2, r3
 8008278:	79f9      	ldrb	r1, [r7, #7]
 800827a:	2301      	movs	r3, #1
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	f107 030f 	add.w	r3, r7, #15
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	2301      	movs	r3, #1
 8008286:	4804      	ldr	r0, [pc, #16]	; (8008298 <SENSOR_IO_Read+0x38>)
 8008288:	f7ff ff5c 	bl	8008144 <I2Cx_ReadMultiple>

  return read_value;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200008b8 	.word	0x200008b8

0800829c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	603a      	str	r2, [r7, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
 80082aa:	460b      	mov	r3, r1
 80082ac:	71bb      	strb	r3, [r7, #6]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80082b2:	79bb      	ldrb	r3, [r7, #6]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	79f9      	ldrb	r1, [r7, #7]
 80082b8:	88bb      	ldrh	r3, [r7, #4]
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2301      	movs	r3, #1
 80082c2:	4804      	ldr	r0, [pc, #16]	; (80082d4 <SENSOR_IO_ReadMultiple+0x38>)
 80082c4:	f7ff ff3e 	bl	8008144 <I2Cx_ReadMultiple>
 80082c8:	4603      	mov	r3, r0
 80082ca:	b29b      	uxth	r3, r3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200008b8 	.word	0x200008b8

080082d8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <BSP_HSENSOR_Init+0x38>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	20be      	movs	r0, #190	; 0xbe
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	2bbc      	cmp	r3, #188	; 0xbc
 80082ea:	d002      	beq.n	80082f2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	e009      	b.n	8008306 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80082f2:	4b08      	ldr	r3, [pc, #32]	; (8008314 <BSP_HSENSOR_Init+0x3c>)
 80082f4:	4a06      	ldr	r2, [pc, #24]	; (8008310 <BSP_HSENSOR_Init+0x38>)
 80082f6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <BSP_HSENSOR_Init+0x3c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	20be      	movs	r0, #190	; 0xbe
 8008300:	4798      	blx	r3
    ret = HSENSOR_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8008306:	687b      	ldr	r3, [r7, #4]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000010 	.word	0x20000010
 8008314:	2000090c 	.word	0x2000090c

08008318 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800831c:	4b04      	ldr	r3, [pc, #16]	; (8008330 <BSP_HSENSOR_ReadHumidity+0x18>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	20be      	movs	r0, #190	; 0xbe
 8008324:	4798      	blx	r3
 8008326:	eef0 7a40 	vmov.f32	s15, s0
}
 800832a:	eeb0 0a67 	vmov.f32	s0, s15
 800832e:	bd80      	pop	{r7, pc}
 8008330:	2000090c 	.word	0x2000090c

08008334 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2120      	movs	r1, #32
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff ff8b 	bl	8008260 <SENSOR_IO_Read>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	f023 0304 	bic.w	r3, r3, #4
 8008354:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	f043 0304 	orr.w	r3, r3, #4
 800835c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	f023 0303 	bic.w	r3, r3, #3
 8008364:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008374:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	7bfa      	ldrb	r2, [r7, #15]
 800837c:	2120      	movs	r1, #32
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff ff54 	bl	800822c <SENSOR_IO_Write>
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800839a:	f7ff ff3d 	bl	8008218 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	210f      	movs	r1, #15
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ff5b 	bl	8008260 <SENSOR_IO_Read>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	b2d8      	uxtb	r0, r3
 80083c6:	f107 020c 	add.w	r2, r7, #12
 80083ca:	2302      	movs	r3, #2
 80083cc:	21b0      	movs	r1, #176	; 0xb0
 80083ce:	f7ff ff65 	bl	800829c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80083d2:	7b3b      	ldrb	r3, [r7, #12]
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80083da:	7b7b      	ldrb	r3, [r7, #13]
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	b2d8      	uxtb	r0, r3
 80083e6:	f107 020c 	add.w	r2, r7, #12
 80083ea:	2302      	movs	r3, #2
 80083ec:	21b6      	movs	r1, #182	; 0xb6
 80083ee:	f7ff ff55 	bl	800829c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80083f2:	7b7b      	ldrb	r3, [r7, #13]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	b21a      	sxth	r2, r3
 80083f8:	7b3b      	ldrb	r3, [r7, #12]
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	b2d8      	uxtb	r0, r3
 8008404:	f107 020c 	add.w	r2, r7, #12
 8008408:	2302      	movs	r3, #2
 800840a:	21ba      	movs	r1, #186	; 0xba
 800840c:	f7ff ff46 	bl	800829c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008410:	7b7b      	ldrb	r3, [r7, #13]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	b21a      	sxth	r2, r3
 8008416:	7b3b      	ldrb	r3, [r7, #12]
 8008418:	b21b      	sxth	r3, r3
 800841a:	4313      	orrs	r3, r2
 800841c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	b2d8      	uxtb	r0, r3
 8008422:	f107 020c 	add.w	r2, r7, #12
 8008426:	2302      	movs	r3, #2
 8008428:	21a8      	movs	r1, #168	; 0xa8
 800842a:	f7ff ff37 	bl	800829c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800842e:	7b7b      	ldrb	r3, [r7, #13]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	b21a      	sxth	r2, r3
 8008434:	7b3b      	ldrb	r3, [r7, #12]
 8008436:	b21b      	sxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800843c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008440:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800844e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008452:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008460:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008464:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008468:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800848a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800848e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008492:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800849a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800849e:	edd7 7a04 	vldr	s15, [r7, #16]
 80084a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80084e8 <HTS221_H_ReadHumidity+0x130>
 80084a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ae:	dd01      	ble.n	80084b4 <HTS221_H_ReadHumidity+0xfc>
 80084b0:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <HTS221_H_ReadHumidity+0x134>)
 80084b2:	e00a      	b.n	80084ca <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80084b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80084b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c0:	d502      	bpl.n	80084c8 <HTS221_H_ReadHumidity+0x110>
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	e000      	b.n	80084ca <HTS221_H_ReadHumidity+0x112>
 80084c8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80084ca:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80084cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80084d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80084d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80084dc:	eeb0 0a67 	vmov.f32	s0, s15
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	447a0000 	.word	0x447a0000
 80084ec:	447a0000 	.word	0x447a0000

080084f0 <__NVIC_SetPriority>:
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008500:	2b00      	cmp	r3, #0
 8008502:	db0a      	blt.n	800851a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	b2da      	uxtb	r2, r3
 8008508:	490c      	ldr	r1, [pc, #48]	; (800853c <__NVIC_SetPriority+0x4c>)
 800850a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800850e:	0112      	lsls	r2, r2, #4
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	440b      	add	r3, r1
 8008514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008518:	e00a      	b.n	8008530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	b2da      	uxtb	r2, r3
 800851e:	4908      	ldr	r1, [pc, #32]	; (8008540 <__NVIC_SetPriority+0x50>)
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	3b04      	subs	r3, #4
 8008528:	0112      	lsls	r2, r2, #4
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	440b      	add	r3, r1
 800852e:	761a      	strb	r2, [r3, #24]
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	e000e100 	.word	0xe000e100
 8008540:	e000ed00 	.word	0xe000ed00

08008544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <SysTick_Handler+0x1c>)
 800854a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800854c:	f001 ffda 	bl	800a504 <xTaskGetSchedulerState>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008556:	f002 ffaf 	bl	800b4b8 <xPortSysTickHandler>
  }
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	e000e010 	.word	0xe000e010

08008564 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008568:	2100      	movs	r1, #0
 800856a:	f06f 0004 	mvn.w	r0, #4
 800856e:	f7ff ffbf 	bl	80084f0 <__NVIC_SetPriority>
#endif
}
 8008572:	bf00      	nop
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	603b      	str	r3, [r7, #0]
  return(result);
 8008584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800858a:	f06f 0305 	mvn.w	r3, #5
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	e00c      	b.n	80085ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <osKernelInitialize+0x44>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800859a:	4b08      	ldr	r3, [pc, #32]	; (80085bc <osKernelInitialize+0x44>)
 800859c:	2201      	movs	r2, #1
 800859e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	e002      	b.n	80085ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295
 80085aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085ac:	687b      	ldr	r3, [r7, #4]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000910 	.word	0x20000910

080085c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c6:	f3ef 8305 	mrs	r3, IPSR
 80085ca:	603b      	str	r3, [r7, #0]
  return(result);
 80085cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <osKernelStart+0x1a>
    stat = osErrorISR;
 80085d2:	f06f 0305 	mvn.w	r3, #5
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	e010      	b.n	80085fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <osKernelStart+0x48>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d109      	bne.n	80085f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085e2:	f7ff ffbf 	bl	8008564 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085e6:	4b08      	ldr	r3, [pc, #32]	; (8008608 <osKernelStart+0x48>)
 80085e8:	2202      	movs	r2, #2
 80085ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80085ec:	f001 fb42 	bl	8009c74 <vTaskStartScheduler>
      stat = osOK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	e002      	b.n	80085fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085fc:	687b      	ldr	r3, [r7, #4]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000910 	.word	0x20000910

0800860c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af04      	add	r7, sp, #16
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800861c:	f3ef 8305 	mrs	r3, IPSR
 8008620:	617b      	str	r3, [r7, #20]
  return(result);
 8008622:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008624:	2b00      	cmp	r3, #0
 8008626:	d17e      	bne.n	8008726 <osThreadNew+0x11a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d07b      	beq.n	8008726 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800862e:	2380      	movs	r3, #128	; 0x80
 8008630:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008632:	2318      	movs	r3, #24
 8008634:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d045      	beq.n	80086d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <osThreadNew+0x48>
        name = attr->name;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <osThreadNew+0x6e>
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	2b38      	cmp	r3, #56	; 0x38
 800866c:	d805      	bhi.n	800867a <osThreadNew+0x6e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <osThreadNew+0x72>
        return (NULL);
 800867a:	2300      	movs	r3, #0
 800867c:	e054      	b.n	8008728 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <osThreadNew+0xa8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b5b      	cmp	r3, #91	; 0x5b
 800869c:	d90a      	bls.n	80086b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <osThreadNew+0xa8>
        mem = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e010      	b.n	80086d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10c      	bne.n	80086d6 <osThreadNew+0xca>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <osThreadNew+0xca>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <osThreadNew+0xca>
          mem = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61bb      	str	r3, [r7, #24]
 80086d0:	e001      	b.n	80086d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d110      	bne.n	80086fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086e4:	9202      	str	r2, [sp, #8]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f001 f8e8 	bl	80098c8 <xTaskCreateStatic>
 80086f8:	4603      	mov	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	e013      	b.n	8008726 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d110      	bne.n	8008726 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	b29a      	uxth	r2, r3
 8008708:	f107 0310 	add.w	r3, r7, #16
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f001 f933 	bl	8009982 <xTaskCreate>
 800871c:	4603      	mov	r3, r0
 800871e:	2b01      	cmp	r3, #1
 8008720:	d001      	beq.n	8008726 <osThreadNew+0x11a>
            hTask = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008726:	693b      	ldr	r3, [r7, #16]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3728      	adds	r7, #40	; 0x28
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <osThreadFlagsSet+0x1a>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da03      	bge.n	8008752 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800874a:	f06f 0303 	mvn.w	r3, #3
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e035      	b.n	80087be <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008758:	f3ef 8305 	mrs	r3, IPSR
 800875c:	613b      	str	r3, [r7, #16]
  return(result);
 800875e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01f      	beq.n	80087a4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2300      	movs	r3, #0
 8008770:	2201      	movs	r2, #1
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6978      	ldr	r0, [r7, #20]
 8008776:	f002 f863 	bl	800a840 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	2200      	movs	r2, #0
 8008780:	9200      	str	r2, [sp, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f002 f85a 	bl	800a840 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d015      	beq.n	80087be <osThreadFlagsSet+0x8e>
 8008792:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <osThreadFlagsSet+0x98>)
 8008794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	e00c      	b.n	80087be <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80087a4:	2300      	movs	r3, #0
 80087a6:	2201      	movs	r2, #1
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6978      	ldr	r0, [r7, #20]
 80087ac:	f001 ff90 	bl	800a6d0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6978      	ldr	r0, [r7, #20]
 80087ba:	f001 ff89 	bl	800a6d0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80087be:	68fb      	ldr	r3, [r7, #12]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	; 0x30
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087d8:	f3ef 8305 	mrs	r3, IPSR
 80087dc:	617b      	str	r3, [r7, #20]
  return(result);
 80087de:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80087e4:	f06f 0305 	mvn.w	r3, #5
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ea:	e06b      	b.n	80088c4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da03      	bge.n	80087fa <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80087f2:	f06f 0303 	mvn.w	r3, #3
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f8:	e064      	b.n	80088c4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28
 8008808:	e001      	b.n	800880e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008816:	f001 fb3f 	bl	8009e98 <xTaskGetTickCount>
 800881a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800881c:	f107 0210 	add.w	r2, r7, #16
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008824:	2000      	movs	r0, #0
 8008826:	f001 fef9 	bl	800a61c <xTaskNotifyWait>
 800882a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d137      	bne.n	80088a2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4013      	ands	r3, r2
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883e:	4313      	orrs	r3, r2
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00c      	beq.n	8008866 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	4013      	ands	r3, r2
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d032      	beq.n	80088be <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10f      	bne.n	800887e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800885e:	f06f 0302 	mvn.w	r3, #2
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008864:	e02e      	b.n	80088c4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d128      	bne.n	80088c2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d103      	bne.n	800887e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008876:	f06f 0302 	mvn.w	r3, #2
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800887c:	e022      	b.n	80088c4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800887e:	f001 fb0b 	bl	8009e98 <xTaskGetTickCount>
 8008882:	4602      	mov	r2, r0
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	429a      	cmp	r2, r3
 8008890:	d902      	bls.n	8008898 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
 8008896:	e00e      	b.n	80088b6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
 80088a0:	e009      	b.n	80088b6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80088a8:	f06f 0302 	mvn.w	r3, #2
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ae:	e002      	b.n	80088b6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80088b0:	f06f 0301 	mvn.w	r3, #1
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1af      	bne.n	800881c <osThreadFlagsWait+0x50>
 80088bc:	e002      	b.n	80088c4 <osThreadFlagsWait+0xf8>
            break;
 80088be:	bf00      	nop
 80088c0:	e000      	b.n	80088c4 <osThreadFlagsWait+0xf8>
            break;
 80088c2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d6:	f3ef 8305 	mrs	r3, IPSR
 80088da:	60bb      	str	r3, [r7, #8]
  return(result);
 80088dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <osDelay+0x1c>
    stat = osErrorISR;
 80088e2:	f06f 0305 	mvn.w	r3, #5
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e007      	b.n	80088fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <osDelay+0x2c>
      vTaskDelay(ticks);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f989 	bl	8009c0c <vTaskDelay>
    }
  }

  return (stat);
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af02      	add	r7, sp, #8
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008914:	f3ef 8305 	mrs	r3, IPSR
 8008918:	613b      	str	r3, [r7, #16]
  return(result);
 800891a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800891c:	2b00      	cmp	r3, #0
 800891e:	d15f      	bne.n	80089e0 <osMessageQueueNew+0xdc>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d05c      	beq.n	80089e0 <osMessageQueueNew+0xdc>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d059      	beq.n	80089e0 <osMessageQueueNew+0xdc>
    mem = -1;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295
 8008930:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d029      	beq.n	800898c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d012      	beq.n	8008966 <osMessageQueueNew+0x62>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	2b4f      	cmp	r3, #79	; 0x4f
 8008946:	d90e      	bls.n	8008966 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <osMessageQueueNew+0x62>
        mem = 1;
 8008960:	2301      	movs	r3, #1
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e014      	b.n	8008990 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d110      	bne.n	8008990 <osMessageQueueNew+0x8c>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10c      	bne.n	8008990 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800897a:	2b00      	cmp	r3, #0
 800897c:	d108      	bne.n	8008990 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d104      	bne.n	8008990 <osMessageQueueNew+0x8c>
          mem = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	e001      	b.n	8008990 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d10b      	bne.n	80089ae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691a      	ldr	r2, [r3, #16]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2100      	movs	r1, #0
 80089a0:	9100      	str	r1, [sp, #0]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fa51 	bl	8008e4c <xQueueGenericCreateStatic>
 80089aa:	61f8      	str	r0, [r7, #28]
 80089ac:	e008      	b.n	80089c0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80089b4:	2200      	movs	r2, #0
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fabf 	bl	8008f3c <xQueueGenericCreate>
 80089be:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00c      	beq.n	80089e0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e001      	b.n	80089d8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80089d8:	6979      	ldr	r1, [r7, #20]
 80089da:	69f8      	ldr	r0, [r7, #28]
 80089dc:	f000 ff16 	bl	800980c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80089e0:	69fb      	ldr	r3, [r7, #28]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a04:	f3ef 8305 	mrs	r3, IPSR
 8008a08:	617b      	str	r3, [r7, #20]
  return(result);
 8008a0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d028      	beq.n	8008a62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <osMessageQueuePut+0x36>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <osMessageQueuePut+0x36>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008a22:	f06f 0303 	mvn.w	r3, #3
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e038      	b.n	8008a9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008a2e:	f107 0210 	add.w	r2, r7, #16
 8008a32:	2300      	movs	r3, #0
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	69b8      	ldr	r0, [r7, #24]
 8008a38:	f000 fbdc 	bl	80091f4 <xQueueGenericSendFromISR>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d003      	beq.n	8008a4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008a42:	f06f 0302 	mvn.w	r3, #2
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	e028      	b.n	8008a9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d025      	beq.n	8008a9c <osMessageQueuePut+0xb0>
 8008a50:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <osMessageQueuePut+0xbc>)
 8008a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	e01c      	b.n	8008a9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <osMessageQueuePut+0x82>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008a6e:	f06f 0303 	mvn.w	r3, #3
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e012      	b.n	8008a9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a76:	2300      	movs	r3, #0
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	69b8      	ldr	r0, [r7, #24]
 8008a7e:	f000 fabb 	bl	8008ff8 <xQueueGenericSend>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d009      	beq.n	8008a9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008a8e:	f06f 0301 	mvn.w	r3, #1
 8008a92:	61fb      	str	r3, [r7, #28]
 8008a94:	e002      	b.n	8008a9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008a96:	f06f 0302 	mvn.w	r3, #2
 8008a9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a9c:	69fb      	ldr	r3, [r7, #28]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac2:	f3ef 8305 	mrs	r3, IPSR
 8008ac6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ac8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d028      	beq.n	8008b20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <osMessageQueueGet+0x34>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <osMessageQueueGet+0x34>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ae0:	f06f 0303 	mvn.w	r3, #3
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	e037      	b.n	8008b58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008aec:	f107 0310 	add.w	r3, r7, #16
 8008af0:	461a      	mov	r2, r3
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	69b8      	ldr	r0, [r7, #24]
 8008af6:	f000 fcf9 	bl	80094ec <xQueueReceiveFromISR>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d003      	beq.n	8008b08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008b00:	f06f 0302 	mvn.w	r3, #2
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	e027      	b.n	8008b58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d024      	beq.n	8008b58 <osMessageQueueGet+0xac>
 8008b0e:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <osMessageQueueGet+0xb8>)
 8008b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	e01b      	b.n	8008b58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <osMessageQueueGet+0x80>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d103      	bne.n	8008b34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008b2c:	f06f 0303 	mvn.w	r3, #3
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	e011      	b.n	8008b58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	69b8      	ldr	r0, [r7, #24]
 8008b3a:	f000 fbf7 	bl	800932c <xQueueReceive>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d009      	beq.n	8008b58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008b4a:	f06f 0301 	mvn.w	r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	e002      	b.n	8008b58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008b52:	f06f 0302 	mvn.w	r3, #2
 8008b56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b58:	69fb      	ldr	r3, [r7, #28]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	e000ed04 	.word	0xe000ed04

08008b68 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b74:	f3ef 8305 	mrs	r3, IPSR
 8008b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8008b80:	f06f 0305 	mvn.w	r3, #5
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e00c      	b.n	8008ba2 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8008b8e:	f06f 0303 	mvn.w	r3, #3
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e005      	b.n	8008ba2 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6938      	ldr	r0, [r7, #16]
 8008b9e:	f000 f8ed 	bl	8008d7c <xQueueGenericReset>
  }

  return (stat);
 8008ba2:	697b      	ldr	r3, [r7, #20]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a07      	ldr	r2, [pc, #28]	; (8008bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a06      	ldr	r2, [pc, #24]	; (8008bdc <vApplicationGetIdleTaskMemory+0x30>)
 8008bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2280      	movs	r2, #128	; 0x80
 8008bc8:	601a      	str	r2, [r3, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20000914 	.word	0x20000914
 8008bdc:	20000970 	.word	0x20000970

08008be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8008bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vApplicationGetTimerTaskMemory+0x30>)
 8008bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bfe:	601a      	str	r2, [r3, #0]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000b70 	.word	0x20000b70
 8008c10:	20000bcc 	.word	0x20000bcc

08008c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f103 0208 	add.w	r2, r3, #8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f103 0208 	add.w	r2, r3, #8
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f103 0208 	add.w	r2, r3, #8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	601a      	str	r2, [r3, #0]
}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d103      	bne.n	8008cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e00c      	b.n	8008cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e002      	b.n	8008ce4 <vListInsert+0x2e>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d2f6      	bcs.n	8008cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6892      	ldr	r2, [r2, #8]
 8008d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6852      	ldr	r2, [r2, #4]
 8008d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d103      	bne.n	8008d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	1e5a      	subs	r2, r3, #1
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008da6:	f002 faf5 	bl	800b394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	68f9      	ldr	r1, [r7, #12]
 8008dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	441a      	add	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d114      	bne.n	8008e26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01a      	beq.n	8008e3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3310      	adds	r3, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 f9bd 	bl	800a188 <xTaskRemoveFromEventList>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d012      	beq.n	8008e3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <xQueueGenericReset+0xcc>)
 8008e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	e009      	b.n	8008e3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fef2 	bl	8008c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3324      	adds	r3, #36	; 0x24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff feed 	bl	8008c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e3a:	f002 fadb 	bl	800b3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e3e:	2301      	movs	r3, #1
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	; 0x38
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xQueueGenericCreateStatic+0x52>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <xQueueGenericCreateStatic+0x56>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <xQueueGenericCreateStatic+0x58>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <xQueueGenericCreateStatic+0x7e>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <xQueueGenericCreateStatic+0x82>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <xQueueGenericCreateStatic+0x84>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	61fb      	str	r3, [r7, #28]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eea:	2350      	movs	r3, #80	; 0x50
 8008eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b50      	cmp	r3, #80	; 0x50
 8008ef2:	d00a      	beq.n	8008f0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	61bb      	str	r3, [r7, #24]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4613      	mov	r3, r2
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f83f 	bl	8008fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3730      	adds	r7, #48	; 0x30
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	; 0x28
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
 8008f6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3350      	adds	r3, #80	; 0x50
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fb2f 	bl	800b5d8 <pvPortMalloc>
 8008f7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d011      	beq.n	8008fa6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	3350      	adds	r3, #80	; 0x50
 8008f8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f94:	79fa      	ldrb	r2, [r7, #7]
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f805 	bl	8008fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	e002      	b.n	8008fd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fde:	2101      	movs	r1, #1
 8008fe0:	69b8      	ldr	r0, [r7, #24]
 8008fe2:	f7ff fecb 	bl	8008d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009006:	2300      	movs	r3, #0
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueGenericSend+0x32>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <xQueueGenericSend+0x40>
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <xQueueGenericSend+0x44>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <xQueueGenericSend+0x46>
 800903c:	2300      	movs	r3, #0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <xQueueGenericSend+0x60>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d103      	bne.n	8009066 <xQueueGenericSend+0x6e>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <xQueueGenericSend+0x72>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <xQueueGenericSend+0x74>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xQueueGenericSend+0x8e>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009086:	f001 fa3d 	bl	800a504 <xTaskGetSchedulerState>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <xQueueGenericSend+0x9e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <xQueueGenericSend+0xa2>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <xQueueGenericSend+0xa4>
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	61fb      	str	r3, [r7, #28]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090b6:	f002 f96d 	bl	800b394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <xQueueGenericSend+0xd4>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d129      	bne.n	8009120 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d2:	f000 fa8b 	bl	80095ec <prvCopyDataToQueue>
 80090d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	3324      	adds	r3, #36	; 0x24
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f84f 	bl	800a188 <xTaskRemoveFromEventList>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d013      	beq.n	8009118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090f0:	4b3f      	ldr	r3, [pc, #252]	; (80091f0 <xQueueGenericSend+0x1f8>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	e00a      	b.n	8009118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009108:	4b39      	ldr	r3, [pc, #228]	; (80091f0 <xQueueGenericSend+0x1f8>)
 800910a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009118:	f002 f96c 	bl	800b3f4 <vPortExitCritical>
				return pdPASS;
 800911c:	2301      	movs	r3, #1
 800911e:	e063      	b.n	80091e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d103      	bne.n	800912e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009126:	f002 f965 	bl	800b3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800912a:	2300      	movs	r3, #0
 800912c:	e05c      	b.n	80091e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f889 	bl	800a250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800913e:	2301      	movs	r3, #1
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009142:	f002 f957 	bl	800b3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009146:	f000 fdfb 	bl	8009d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800914a:	f002 f923 	bl	800b394 <vPortEnterCritical>
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009154:	b25b      	sxtb	r3, r3
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d103      	bne.n	8009164 <xQueueGenericSend+0x16c>
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800916a:	b25b      	sxtb	r3, r3
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	d103      	bne.n	800917a <xQueueGenericSend+0x182>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800917a:	f002 f93b 	bl	800b3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800917e:	1d3a      	adds	r2, r7, #4
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f001 f878 	bl	800a27c <xTaskCheckForTimeOut>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d124      	bne.n	80091dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009194:	f000 fb22 	bl	80097dc <prvIsQueueFull>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d018      	beq.n	80091d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	3310      	adds	r3, #16
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 ff9e 	bl	800a0e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ae:	f000 faad 	bl	800970c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091b2:	f000 fdd3 	bl	8009d5c <xTaskResumeAll>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f af7c 	bne.w	80090b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <xQueueGenericSend+0x1f8>)
 80091c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	e772      	b.n	80090b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091d2:	f000 fa9b 	bl	800970c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091d6:	f000 fdc1 	bl	8009d5c <xTaskResumeAll>
 80091da:	e76c      	b.n	80090b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091de:	f000 fa95 	bl	800970c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091e2:	f000 fdbb 	bl	8009d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3738      	adds	r7, #56	; 0x38
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b090      	sub	sp, #64	; 0x40
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d103      	bne.n	8009230 <xQueueGenericSendFromISR+0x3c>
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <xQueueGenericSendFromISR+0x40>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <xQueueGenericSendFromISR+0x42>
 8009234:	2300      	movs	r3, #0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800924c:	bf00      	nop
 800924e:	e7fe      	b.n	800924e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d103      	bne.n	800925e <xQueueGenericSendFromISR+0x6a>
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	2b01      	cmp	r3, #1
 800925c:	d101      	bne.n	8009262 <xQueueGenericSendFromISR+0x6e>
 800925e:	2301      	movs	r3, #1
 8009260:	e000      	b.n	8009264 <xQueueGenericSendFromISR+0x70>
 8009262:	2300      	movs	r3, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	623b      	str	r3, [r7, #32]
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800927e:	f002 f96b 	bl	800b558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009282:	f3ef 8211 	mrs	r2, BASEPRI
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	61fa      	str	r2, [r7, #28]
 8009298:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800929a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d302      	bcc.n	80092b0 <xQueueGenericSendFromISR+0xbc>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d12f      	bne.n	8009310 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092c6:	f000 f991 	bl	80095ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d112      	bne.n	80092fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d016      	beq.n	800930a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 ff51 	bl	800a188 <xTaskRemoveFromEventList>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00e      	beq.n	800930a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e007      	b.n	800930a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092fe:	3301      	adds	r3, #1
 8009300:	b2db      	uxtb	r3, r3
 8009302:	b25a      	sxtb	r2, r3
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800930a:	2301      	movs	r3, #1
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800930e:	e001      	b.n	8009314 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009316:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800931e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009322:	4618      	mov	r0, r3
 8009324:	3740      	adds	r7, #64	; 0x40
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	; 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009338:	2300      	movs	r3, #0
 800933a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <xQueueReceive+0x30>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	623b      	str	r3, [r7, #32]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d103      	bne.n	800936a <xQueueReceive+0x3e>
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <xQueueReceive+0x42>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueReceive+0x44>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <xQueueReceive+0x5e>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61fb      	str	r3, [r7, #28]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800938a:	f001 f8bb 	bl	800a504 <xTaskGetSchedulerState>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <xQueueReceive+0x6e>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <xQueueReceive+0x72>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueReceive+0x74>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueReceive+0x8e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61bb      	str	r3, [r7, #24]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093ba:	f001 ffeb 	bl	800b394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d01f      	beq.n	800940a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ce:	f000 f977 	bl	80096c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	1e5a      	subs	r2, r3, #1
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00f      	beq.n	8009402 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	3310      	adds	r3, #16
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fece 	bl	800a188 <xTaskRemoveFromEventList>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d007      	beq.n	8009402 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093f2:	4b3d      	ldr	r3, [pc, #244]	; (80094e8 <xQueueReceive+0x1bc>)
 80093f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009402:	f001 fff7 	bl	800b3f4 <vPortExitCritical>
				return pdPASS;
 8009406:	2301      	movs	r3, #1
 8009408:	e069      	b.n	80094de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009410:	f001 fff0 	bl	800b3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009414:	2300      	movs	r3, #0
 8009416:	e062      	b.n	80094de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800941e:	f107 0310 	add.w	r3, r7, #16
 8009422:	4618      	mov	r0, r3
 8009424:	f000 ff14 	bl	800a250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009428:	2301      	movs	r3, #1
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800942c:	f001 ffe2 	bl	800b3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009430:	f000 fc86 	bl	8009d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009434:	f001 ffae 	bl	800b394 <vPortEnterCritical>
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800943e:	b25b      	sxtb	r3, r3
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d103      	bne.n	800944e <xQueueReceive+0x122>
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009454:	b25b      	sxtb	r3, r3
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d103      	bne.n	8009464 <xQueueReceive+0x138>
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009464:	f001 ffc6 	bl	800b3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009468:	1d3a      	adds	r2, r7, #4
 800946a:	f107 0310 	add.w	r3, r7, #16
 800946e:	4611      	mov	r1, r2
 8009470:	4618      	mov	r0, r3
 8009472:	f000 ff03 	bl	800a27c <xTaskCheckForTimeOut>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d123      	bne.n	80094c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800947c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947e:	f000 f997 	bl	80097b0 <prvIsQueueEmpty>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d017      	beq.n	80094b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	3324      	adds	r3, #36	; 0x24
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fe29 	bl	800a0e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009498:	f000 f938 	bl	800970c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800949c:	f000 fc5e 	bl	8009d5c <xTaskResumeAll>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d189      	bne.n	80093ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <xQueueReceive+0x1bc>)
 80094a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	e780      	b.n	80093ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ba:	f000 f927 	bl	800970c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094be:	f000 fc4d 	bl	8009d5c <xTaskResumeAll>
 80094c2:	e77a      	b.n	80093ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c6:	f000 f921 	bl	800970c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ca:	f000 fc47 	bl	8009d5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d0:	f000 f96e 	bl	80097b0 <prvIsQueueEmpty>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f43f af6f 	beq.w	80093ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3730      	adds	r7, #48	; 0x30
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	623b      	str	r3, [r7, #32]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <xQueueReceiveFromISR+0x3a>
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <xQueueReceiveFromISR+0x3e>
 8009526:	2301      	movs	r3, #1
 8009528:	e000      	b.n	800952c <xQueueReceiveFromISR+0x40>
 800952a:	2300      	movs	r3, #0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	61fb      	str	r3, [r7, #28]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009546:	f002 f807 	bl	800b558 <vPortValidateInterruptPriority>
	__asm volatile
 800954a:	f3ef 8211 	mrs	r2, BASEPRI
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	61ba      	str	r2, [r7, #24]
 8009560:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009562:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02f      	beq.n	80095d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009580:	f000 f89e 	bl	80096c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800958c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d112      	bne.n	80095bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d016      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	3310      	adds	r3, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fdf0 	bl	800a188 <xTaskRemoveFromEventList>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e007      	b.n	80095cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c0:	3301      	adds	r3, #1
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	b25a      	sxtb	r2, r3
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80095cc:	2301      	movs	r3, #1
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
 80095d0:	e001      	b.n	80095d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f383 8811 	msr	BASEPRI, r3
}
 80095e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3738      	adds	r7, #56	; 0x38
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d14d      	bne.n	80096ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 ff92 	bl	800a540 <xTaskPriorityDisinherit>
 800961c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	e043      	b.n	80096ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d119      	bne.n	8009660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6858      	ldr	r0, [r3, #4]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	461a      	mov	r2, r3
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	f002 f9e2 	bl	800ba00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d32b      	bcc.n	80096ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	605a      	str	r2, [r3, #4]
 800965e:	e026      	b.n	80096ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68d8      	ldr	r0, [r3, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009668:	461a      	mov	r2, r3
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	f002 f9c8 	bl	800ba00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009678:	425b      	negs	r3, r3
 800967a:	441a      	add	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d207      	bcs.n	800969c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009694:	425b      	negs	r3, r3
 8009696:	441a      	add	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d105      	bne.n	80096ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096b6:	697b      	ldr	r3, [r7, #20]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d018      	beq.n	8009704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	441a      	add	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d303      	bcc.n	80096f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68d9      	ldr	r1, [r3, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	461a      	mov	r2, r3
 80096fe:	6838      	ldr	r0, [r7, #0]
 8009700:	f002 f97e 	bl	800ba00 <memcpy>
	}
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009714:	f001 fe3e 	bl	800b394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800971e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009720:	e011      	b.n	8009746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d012      	beq.n	8009750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3324      	adds	r3, #36	; 0x24
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fd2a 	bl	800a188 <xTaskRemoveFromEventList>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800973a:	f000 fe01 	bl	800a340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	3b01      	subs	r3, #1
 8009742:	b2db      	uxtb	r3, r3
 8009744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dce9      	bgt.n	8009722 <prvUnlockQueue+0x16>
 800974e:	e000      	b.n	8009752 <prvUnlockQueue+0x46>
					break;
 8009750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	22ff      	movs	r2, #255	; 0xff
 8009756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800975a:	f001 fe4b 	bl	800b3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800975e:	f001 fe19 	bl	800b394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800976a:	e011      	b.n	8009790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d012      	beq.n	800979a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3310      	adds	r3, #16
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fd05 	bl	800a188 <xTaskRemoveFromEventList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009784:	f000 fddc 	bl	800a340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	3b01      	subs	r3, #1
 800978c:	b2db      	uxtb	r3, r3
 800978e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009794:	2b00      	cmp	r3, #0
 8009796:	dce9      	bgt.n	800976c <prvUnlockQueue+0x60>
 8009798:	e000      	b.n	800979c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800979a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	22ff      	movs	r2, #255	; 0xff
 80097a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097a4:	f001 fe26 	bl	800b3f4 <vPortExitCritical>
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097b8:	f001 fdec 	bl	800b394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097c4:	2301      	movs	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e001      	b.n	80097ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097ce:	f001 fe11 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 80097d2:	68fb      	ldr	r3, [r7, #12]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097e4:	f001 fdd6 	bl	800b394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d102      	bne.n	80097fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097f4:	2301      	movs	r3, #1
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	e001      	b.n	80097fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097fe:	f001 fdf9 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	e014      	b.n	8009846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800981c:	4a0f      	ldr	r2, [pc, #60]	; (800985c <vQueueAddToRegistry+0x50>)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10b      	bne.n	8009840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009828:	490c      	ldr	r1, [pc, #48]	; (800985c <vQueueAddToRegistry+0x50>)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009832:	4a0a      	ldr	r2, [pc, #40]	; (800985c <vQueueAddToRegistry+0x50>)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4413      	add	r3, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800983e:	e006      	b.n	800984e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b07      	cmp	r3, #7
 800984a:	d9e7      	bls.n	800981c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	20000fcc 	.word	0x20000fcc

08009860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009870:	f001 fd90 	bl	800b394 <vPortEnterCritical>
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800987a:	b25b      	sxtb	r3, r3
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d103      	bne.n	800988a <vQueueWaitForMessageRestricted+0x2a>
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009890:	b25b      	sxtb	r3, r3
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d103      	bne.n	80098a0 <vQueueWaitForMessageRestricted+0x40>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098a0:	f001 fda8 	bl	800b3f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fc3b 	bl	800a130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098ba:	6978      	ldr	r0, [r7, #20]
 80098bc:	f7ff ff26 	bl	800970c <prvUnlockQueue>
	}
 80098c0:	bf00      	nop
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08e      	sub	sp, #56	; 0x38
 80098cc:	af04      	add	r7, sp, #16
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	623b      	str	r3, [r7, #32]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xTaskCreateStatic+0x46>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	61fb      	str	r3, [r7, #28]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800990e:	235c      	movs	r3, #92	; 0x5c
 8009910:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b5c      	cmp	r3, #92	; 0x5c
 8009916:	d00a      	beq.n	800992e <xTaskCreateStatic+0x66>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	61bb      	str	r3, [r7, #24]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800992e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01e      	beq.n	8009974 <xTaskCreateStatic+0xac>
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01b      	beq.n	8009974 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	2202      	movs	r2, #2
 800994a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800994e:	2300      	movs	r3, #0
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	9302      	str	r3, [sp, #8]
 8009956:	f107 0314 	add.w	r3, r7, #20
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f850 	bl	8009a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800996c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800996e:	f000 f8dd 	bl	8009b2c <prvAddNewTaskToReadyList>
 8009972:	e001      	b.n	8009978 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009978:	697b      	ldr	r3, [r7, #20]
	}
 800997a:	4618      	mov	r0, r3
 800997c:	3728      	adds	r7, #40	; 0x28
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009982:	b580      	push	{r7, lr}
 8009984:	b08c      	sub	sp, #48	; 0x30
 8009986:	af04      	add	r7, sp, #16
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	4613      	mov	r3, r2
 8009990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fe1e 	bl	800b5d8 <pvPortMalloc>
 800999c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00e      	beq.n	80099c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099a4:	205c      	movs	r0, #92	; 0x5c
 80099a6:	f001 fe17 	bl	800b5d8 <pvPortMalloc>
 80099aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30
 80099b8:	e005      	b.n	80099c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099ba:	6978      	ldr	r0, [r7, #20]
 80099bc:	f001 fed8 	bl	800b770 <vPortFree>
 80099c0:	e001      	b.n	80099c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d017      	beq.n	80099fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099d4:	88fa      	ldrh	r2, [r7, #6]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 f80e 	bl	8009a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099f0:	69f8      	ldr	r0, [r7, #28]
 80099f2:	f000 f89b 	bl	8009b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099f6:	2301      	movs	r3, #1
 80099f8:	61bb      	str	r3, [r7, #24]
 80099fa:	e002      	b.n	8009a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a02:	69bb      	ldr	r3, [r7, #24]
	}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	461a      	mov	r2, r3
 8009a24:	21a5      	movs	r1, #165	; 0xa5
 8009a26:	f001 fff9 	bl	800ba1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a34:	3b01      	subs	r3, #1
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	f023 0307 	bic.w	r3, r3, #7
 8009a42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	617b      	str	r3, [r7, #20]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d01f      	beq.n	8009aaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	e012      	b.n	8009a96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	7819      	ldrb	r1, [r3, #0]
 8009a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3334      	adds	r3, #52	; 0x34
 8009a80:	460a      	mov	r2, r1
 8009a82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	3301      	adds	r3, #1
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d9e9      	bls.n	8009a70 <prvInitialiseNewTask+0x64>
 8009a9c:	e000      	b.n	8009aa0 <prvInitialiseNewTask+0x94>
			{
				break;
 8009a9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aa8:	e003      	b.n	8009ab2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	2b37      	cmp	r3, #55	; 0x37
 8009ab6:	d901      	bls.n	8009abc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ab8:	2337      	movs	r3, #55	; 0x37
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	2200      	movs	r2, #0
 8009acc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff f8be 	bl	8008c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	3318      	adds	r3, #24
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff f8b9 	bl	8008c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	2200      	movs	r2, #0
 8009afc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	68f9      	ldr	r1, [r7, #12]
 8009b0a:	69b8      	ldr	r0, [r7, #24]
 8009b0c:	f001 fb16 	bl	800b13c <pxPortInitialiseStack>
 8009b10:	4602      	mov	r2, r0
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b22:	bf00      	nop
 8009b24:	3720      	adds	r7, #32
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b34:	f001 fc2e 	bl	800b394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b38:	4b2d      	ldr	r3, [pc, #180]	; (8009bf0 <prvAddNewTaskToReadyList+0xc4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	4a2c      	ldr	r2, [pc, #176]	; (8009bf0 <prvAddNewTaskToReadyList+0xc4>)
 8009b40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b42:	4b2c      	ldr	r3, [pc, #176]	; (8009bf4 <prvAddNewTaskToReadyList+0xc8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b4a:	4a2a      	ldr	r2, [pc, #168]	; (8009bf4 <prvAddNewTaskToReadyList+0xc8>)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b50:	4b27      	ldr	r3, [pc, #156]	; (8009bf0 <prvAddNewTaskToReadyList+0xc4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d110      	bne.n	8009b7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b58:	f000 fc16 	bl	800a388 <prvInitialiseTaskLists>
 8009b5c:	e00d      	b.n	8009b7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b5e:	4b26      	ldr	r3, [pc, #152]	; (8009bf8 <prvAddNewTaskToReadyList+0xcc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b66:	4b23      	ldr	r3, [pc, #140]	; (8009bf4 <prvAddNewTaskToReadyList+0xc8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d802      	bhi.n	8009b7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b74:	4a1f      	ldr	r2, [pc, #124]	; (8009bf4 <prvAddNewTaskToReadyList+0xc8>)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b7a:	4b20      	ldr	r3, [pc, #128]	; (8009bfc <prvAddNewTaskToReadyList+0xd0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <prvAddNewTaskToReadyList+0xd0>)
 8009b82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b84:	4b1d      	ldr	r3, [pc, #116]	; (8009bfc <prvAddNewTaskToReadyList+0xd0>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <prvAddNewTaskToReadyList+0xd4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d903      	bls.n	8009ba0 <prvAddNewTaskToReadyList+0x74>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	4a18      	ldr	r2, [pc, #96]	; (8009c00 <prvAddNewTaskToReadyList+0xd4>)
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4a15      	ldr	r2, [pc, #84]	; (8009c04 <prvAddNewTaskToReadyList+0xd8>)
 8009bae:	441a      	add	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f7ff f859 	bl	8008c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009bbc:	f001 fc1a 	bl	800b3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bc0:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <prvAddNewTaskToReadyList+0xcc>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00e      	beq.n	8009be6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <prvAddNewTaskToReadyList+0xc8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d207      	bcs.n	8009be6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bd6:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <prvAddNewTaskToReadyList+0xdc>)
 8009bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200014e0 	.word	0x200014e0
 8009bf4:	2000100c 	.word	0x2000100c
 8009bf8:	200014ec 	.word	0x200014ec
 8009bfc:	200014fc 	.word	0x200014fc
 8009c00:	200014e8 	.word	0x200014e8
 8009c04:	20001010 	.word	0x20001010
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d017      	beq.n	8009c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <vTaskDelay+0x60>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <vTaskDelay+0x30>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60bb      	str	r3, [r7, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c3c:	f000 f880 	bl	8009d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c40:	2100      	movs	r1, #0
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fed8 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c48:	f000 f888 	bl	8009d5c <xTaskResumeAll>
 8009c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c54:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <vTaskDelay+0x64>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c64:	bf00      	nop
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20001508 	.word	0x20001508
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c82:	463a      	mov	r2, r7
 8009c84:	1d39      	adds	r1, r7, #4
 8009c86:	f107 0308 	add.w	r3, r7, #8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe ff8e 	bl	8008bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	9202      	str	r2, [sp, #8]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	4921      	ldr	r1, [pc, #132]	; (8009d28 <vTaskStartScheduler+0xb4>)
 8009ca4:	4821      	ldr	r0, [pc, #132]	; (8009d2c <vTaskStartScheduler+0xb8>)
 8009ca6:	f7ff fe0f 	bl	80098c8 <xTaskCreateStatic>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a20      	ldr	r2, [pc, #128]	; (8009d30 <vTaskStartScheduler+0xbc>)
 8009cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009cb0:	4b1f      	ldr	r3, [pc, #124]	; (8009d30 <vTaskStartScheduler+0xbc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e001      	b.n	8009cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d102      	bne.n	8009cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cc8:	f000 feea 	bl	800aaa0 <xTimerCreateTimerTask>
 8009ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d116      	bne.n	8009d02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	613b      	str	r3, [r7, #16]
}
 8009ce6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ce8:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <vTaskStartScheduler+0xc0>)
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295
 8009cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cf0:	4b11      	ldr	r3, [pc, #68]	; (8009d38 <vTaskStartScheduler+0xc4>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cf6:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <vTaskStartScheduler+0xc8>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cfc:	f001 faa8 	bl	800b250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d00:	e00e      	b.n	8009d20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d10a      	bne.n	8009d20 <vTaskStartScheduler+0xac>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	60fb      	str	r3, [r7, #12]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <vTaskStartScheduler+0xaa>
}
 8009d20:	bf00      	nop
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	0800d2e4 	.word	0x0800d2e4
 8009d2c:	0800a359 	.word	0x0800a359
 8009d30:	20001504 	.word	0x20001504
 8009d34:	20001500 	.word	0x20001500
 8009d38:	200014ec 	.word	0x200014ec
 8009d3c:	200014e4 	.word	0x200014e4

08009d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d40:	b480      	push	{r7}
 8009d42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <vTaskSuspendAll+0x18>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a03      	ldr	r2, [pc, #12]	; (8009d58 <vTaskSuspendAll+0x18>)
 8009d4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d4e:	bf00      	nop
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	20001508 	.word	0x20001508

08009d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d6a:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <xTaskResumeAll+0x118>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	603b      	str	r3, [r7, #0]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d88:	f001 fb04 	bl	800b394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d8c:	4b39      	ldr	r3, [pc, #228]	; (8009e74 <xTaskResumeAll+0x118>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	4a38      	ldr	r2, [pc, #224]	; (8009e74 <xTaskResumeAll+0x118>)
 8009d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <xTaskResumeAll+0x118>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d162      	bne.n	8009e64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d9e:	4b36      	ldr	r3, [pc, #216]	; (8009e78 <xTaskResumeAll+0x11c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d05e      	beq.n	8009e64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009da6:	e02f      	b.n	8009e08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da8:	4b34      	ldr	r3, [pc, #208]	; (8009e7c <xTaskResumeAll+0x120>)
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3318      	adds	r3, #24
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe ffb7 	bl	8008d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe ffb2 	bl	8008d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc8:	4b2d      	ldr	r3, [pc, #180]	; (8009e80 <xTaskResumeAll+0x124>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d903      	bls.n	8009dd8 <xTaskResumeAll+0x7c>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	4a2a      	ldr	r2, [pc, #168]	; (8009e80 <xTaskResumeAll+0x124>)
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a27      	ldr	r2, [pc, #156]	; (8009e84 <xTaskResumeAll+0x128>)
 8009de6:	441a      	add	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7fe ff3d 	bl	8008c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df8:	4b23      	ldr	r3, [pc, #140]	; (8009e88 <xTaskResumeAll+0x12c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d302      	bcc.n	8009e08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e02:	4b22      	ldr	r3, [pc, #136]	; (8009e8c <xTaskResumeAll+0x130>)
 8009e04:	2201      	movs	r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e08:	4b1c      	ldr	r3, [pc, #112]	; (8009e7c <xTaskResumeAll+0x120>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1cb      	bne.n	8009da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e16:	f000 fb55 	bl	800a4c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e1a:	4b1d      	ldr	r3, [pc, #116]	; (8009e90 <xTaskResumeAll+0x134>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d010      	beq.n	8009e48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e26:	f000 f847 	bl	8009eb8 <xTaskIncrementTick>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e30:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <xTaskResumeAll+0x130>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f1      	bne.n	8009e26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009e42:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <xTaskResumeAll+0x134>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e48:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <xTaskResumeAll+0x130>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e50:	2301      	movs	r3, #1
 8009e52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e54:	4b0f      	ldr	r3, [pc, #60]	; (8009e94 <xTaskResumeAll+0x138>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e64:	f001 fac6 	bl	800b3f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e68:	68bb      	ldr	r3, [r7, #8]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001508 	.word	0x20001508
 8009e78:	200014e0 	.word	0x200014e0
 8009e7c:	200014a0 	.word	0x200014a0
 8009e80:	200014e8 	.word	0x200014e8
 8009e84:	20001010 	.word	0x20001010
 8009e88:	2000100c 	.word	0x2000100c
 8009e8c:	200014f4 	.word	0x200014f4
 8009e90:	200014f0 	.word	0x200014f0
 8009e94:	e000ed04 	.word	0xe000ed04

08009e98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <xTaskGetTickCount+0x1c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ea4:	687b      	ldr	r3, [r7, #4]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	200014e4 	.word	0x200014e4

08009eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec2:	4b4f      	ldr	r3, [pc, #316]	; (800a000 <xTaskIncrementTick+0x148>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f040 808f 	bne.w	8009fea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ecc:	4b4d      	ldr	r3, [pc, #308]	; (800a004 <xTaskIncrementTick+0x14c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ed4:	4a4b      	ldr	r2, [pc, #300]	; (800a004 <xTaskIncrementTick+0x14c>)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d120      	bne.n	8009f22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ee0:	4b49      	ldr	r3, [pc, #292]	; (800a008 <xTaskIncrementTick+0x150>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <xTaskIncrementTick+0x48>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	603b      	str	r3, [r7, #0]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <xTaskIncrementTick+0x46>
 8009f00:	4b41      	ldr	r3, [pc, #260]	; (800a008 <xTaskIncrementTick+0x150>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	4b41      	ldr	r3, [pc, #260]	; (800a00c <xTaskIncrementTick+0x154>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a3f      	ldr	r2, [pc, #252]	; (800a008 <xTaskIncrementTick+0x150>)
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	4a3f      	ldr	r2, [pc, #252]	; (800a00c <xTaskIncrementTick+0x154>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	4b3e      	ldr	r3, [pc, #248]	; (800a010 <xTaskIncrementTick+0x158>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a3d      	ldr	r2, [pc, #244]	; (800a010 <xTaskIncrementTick+0x158>)
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	f000 fad1 	bl	800a4c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f22:	4b3c      	ldr	r3, [pc, #240]	; (800a014 <xTaskIncrementTick+0x15c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d349      	bcc.n	8009fc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f2c:	4b36      	ldr	r3, [pc, #216]	; (800a008 <xTaskIncrementTick+0x150>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f36:	4b37      	ldr	r3, [pc, #220]	; (800a014 <xTaskIncrementTick+0x15c>)
 8009f38:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3c:	601a      	str	r2, [r3, #0]
					break;
 8009f3e:	e03f      	b.n	8009fc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f40:	4b31      	ldr	r3, [pc, #196]	; (800a008 <xTaskIncrementTick+0x150>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d203      	bcs.n	8009f60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f58:	4a2e      	ldr	r2, [pc, #184]	; (800a014 <xTaskIncrementTick+0x15c>)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f5e:	e02f      	b.n	8009fc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fedf 	bl	8008d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d004      	beq.n	8009f7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	3318      	adds	r3, #24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fed6 	bl	8008d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4b25      	ldr	r3, [pc, #148]	; (800a018 <xTaskIncrementTick+0x160>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d903      	bls.n	8009f90 <xTaskIncrementTick+0xd8>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a22      	ldr	r2, [pc, #136]	; (800a018 <xTaskIncrementTick+0x160>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a1f      	ldr	r2, [pc, #124]	; (800a01c <xTaskIncrementTick+0x164>)
 8009f9e:	441a      	add	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fe61 	bl	8008c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4b1b      	ldr	r3, [pc, #108]	; (800a020 <xTaskIncrementTick+0x168>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d3b8      	bcc.n	8009f2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fbe:	e7b5      	b.n	8009f2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fc0:	4b17      	ldr	r3, [pc, #92]	; (800a020 <xTaskIncrementTick+0x168>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4915      	ldr	r1, [pc, #84]	; (800a01c <xTaskIncrementTick+0x164>)
 8009fc8:	4613      	mov	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d901      	bls.n	8009fdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fdc:	4b11      	ldr	r3, [pc, #68]	; (800a024 <xTaskIncrementTick+0x16c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d007      	beq.n	8009ff4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	e004      	b.n	8009ff4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <xTaskIncrementTick+0x170>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	4a0d      	ldr	r2, [pc, #52]	; (800a028 <xTaskIncrementTick+0x170>)
 8009ff2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20001508 	.word	0x20001508
 800a004:	200014e4 	.word	0x200014e4
 800a008:	20001498 	.word	0x20001498
 800a00c:	2000149c 	.word	0x2000149c
 800a010:	200014f8 	.word	0x200014f8
 800a014:	20001500 	.word	0x20001500
 800a018:	200014e8 	.word	0x200014e8
 800a01c:	20001010 	.word	0x20001010
 800a020:	2000100c 	.word	0x2000100c
 800a024:	200014f4 	.word	0x200014f4
 800a028:	200014f0 	.word	0x200014f0

0800a02c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a032:	4b28      	ldr	r3, [pc, #160]	; (800a0d4 <vTaskSwitchContext+0xa8>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a03a:	4b27      	ldr	r3, [pc, #156]	; (800a0d8 <vTaskSwitchContext+0xac>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a040:	e041      	b.n	800a0c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a042:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <vTaskSwitchContext+0xac>)
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a048:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <vTaskSwitchContext+0xb0>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e010      	b.n	800a072 <vTaskSwitchContext+0x46>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <vTaskSwitchContext+0x40>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	607b      	str	r3, [r7, #4]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <vTaskSwitchContext+0x3e>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3b01      	subs	r3, #1
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	491b      	ldr	r1, [pc, #108]	; (800a0e0 <vTaskSwitchContext+0xb4>)
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0e4      	beq.n	800a050 <vTaskSwitchContext+0x24>
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4a13      	ldr	r2, [pc, #76]	; (800a0e0 <vTaskSwitchContext+0xb4>)
 800a092:	4413      	add	r3, r2
 800a094:	60bb      	str	r3, [r7, #8]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	605a      	str	r2, [r3, #4]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d104      	bne.n	800a0b6 <vTaskSwitchContext+0x8a>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <vTaskSwitchContext+0xb8>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	4a06      	ldr	r2, [pc, #24]	; (800a0dc <vTaskSwitchContext+0xb0>)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6013      	str	r3, [r2, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20001508 	.word	0x20001508
 800a0d8:	200014f4 	.word	0x200014f4
 800a0dc:	200014e8 	.word	0x200014e8
 800a0e0:	20001010 	.word	0x20001010
 800a0e4:	2000100c 	.word	0x2000100c

0800a0e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	60fb      	str	r3, [r7, #12]
}
 800a10a:	bf00      	nop
 800a10c:	e7fe      	b.n	800a10c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <vTaskPlaceOnEventList+0x44>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3318      	adds	r3, #24
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7fe fdcd 	bl	8008cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a11c:	2101      	movs	r1, #1
 800a11e:	6838      	ldr	r0, [r7, #0]
 800a120:	f000 fc6a 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	2000100c 	.word	0x2000100c

0800a130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	617b      	str	r3, [r7, #20]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <vTaskPlaceOnEventListRestricted+0x54>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3318      	adds	r3, #24
 800a15e:	4619      	mov	r1, r3
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7fe fd84 	bl	8008c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	68b8      	ldr	r0, [r7, #8]
 800a176:	f000 fc3f 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
	}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000100c 	.word	0x2000100c

0800a188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10a      	bne.n	800a1b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	3318      	adds	r3, #24
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe fdb5 	bl	8008d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1be:	4b1e      	ldr	r3, [pc, #120]	; (800a238 <xTaskRemoveFromEventList+0xb0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d11d      	bne.n	800a202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fdac 	bl	8008d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b19      	ldr	r3, [pc, #100]	; (800a23c <xTaskRemoveFromEventList+0xb4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d903      	bls.n	800a1e4 <xTaskRemoveFromEventList+0x5c>
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a16      	ldr	r2, [pc, #88]	; (800a23c <xTaskRemoveFromEventList+0xb4>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <xTaskRemoveFromEventList+0xb8>)
 800a1f2:	441a      	add	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fe fd37 	bl	8008c6e <vListInsertEnd>
 800a200:	e005      	b.n	800a20e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	3318      	adds	r3, #24
 800a206:	4619      	mov	r1, r3
 800a208:	480e      	ldr	r0, [pc, #56]	; (800a244 <xTaskRemoveFromEventList+0xbc>)
 800a20a:	f7fe fd30 	bl	8008c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <xTaskRemoveFromEventList+0xc0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	429a      	cmp	r2, r3
 800a21a:	d905      	bls.n	800a228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a21c:	2301      	movs	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <xTaskRemoveFromEventList+0xc4>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	e001      	b.n	800a22c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a22c:	697b      	ldr	r3, [r7, #20]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20001508 	.word	0x20001508
 800a23c:	200014e8 	.word	0x200014e8
 800a240:	20001010 	.word	0x20001010
 800a244:	200014a0 	.word	0x200014a0
 800a248:	2000100c 	.word	0x2000100c
 800a24c:	200014f4 	.word	0x200014f4

0800a250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <vTaskInternalSetTimeOutState+0x24>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <vTaskInternalSetTimeOutState+0x28>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	605a      	str	r2, [r3, #4]
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	200014f8 	.word	0x200014f8
 800a278:	200014e4 	.word	0x200014e4

0800a27c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	613b      	str	r3, [r7, #16]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	60fb      	str	r3, [r7, #12]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a2be:	f001 f869 	bl	800b394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <xTaskCheckForTimeOut+0xbc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d102      	bne.n	800a2e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e023      	b.n	800a32a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <xTaskCheckForTimeOut+0xc0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d007      	beq.n	800a2fe <xTaskCheckForTimeOut+0x82>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d302      	bcc.n	800a2fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	61fb      	str	r3, [r7, #28]
 800a2fc:	e015      	b.n	800a32a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	429a      	cmp	r2, r3
 800a306:	d20b      	bcs.n	800a320 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ff9b 	bl	800a250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	e004      	b.n	800a32a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a326:	2301      	movs	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a32a:	f001 f863 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 800a32e:	69fb      	ldr	r3, [r7, #28]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	200014e4 	.word	0x200014e4
 800a33c:	200014f8 	.word	0x200014f8

0800a340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a344:	4b03      	ldr	r3, [pc, #12]	; (800a354 <vTaskMissedYield+0x14>)
 800a346:	2201      	movs	r2, #1
 800a348:	601a      	str	r2, [r3, #0]
}
 800a34a:	bf00      	nop
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	200014f4 	.word	0x200014f4

0800a358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a360:	f000 f852 	bl	800a408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a364:	4b06      	ldr	r3, [pc, #24]	; (800a380 <prvIdleTask+0x28>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d9f9      	bls.n	800a360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <prvIdleTask+0x2c>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a37c:	e7f0      	b.n	800a360 <prvIdleTask+0x8>
 800a37e:	bf00      	nop
 800a380:	20001010 	.word	0x20001010
 800a384:	e000ed04 	.word	0xe000ed04

0800a388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a38e:	2300      	movs	r3, #0
 800a390:	607b      	str	r3, [r7, #4]
 800a392:	e00c      	b.n	800a3ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4a12      	ldr	r2, [pc, #72]	; (800a3e8 <prvInitialiseTaskLists+0x60>)
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fc36 	bl	8008c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b37      	cmp	r3, #55	; 0x37
 800a3b2:	d9ef      	bls.n	800a394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3b4:	480d      	ldr	r0, [pc, #52]	; (800a3ec <prvInitialiseTaskLists+0x64>)
 800a3b6:	f7fe fc2d 	bl	8008c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3ba:	480d      	ldr	r0, [pc, #52]	; (800a3f0 <prvInitialiseTaskLists+0x68>)
 800a3bc:	f7fe fc2a 	bl	8008c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3c0:	480c      	ldr	r0, [pc, #48]	; (800a3f4 <prvInitialiseTaskLists+0x6c>)
 800a3c2:	f7fe fc27 	bl	8008c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3c6:	480c      	ldr	r0, [pc, #48]	; (800a3f8 <prvInitialiseTaskLists+0x70>)
 800a3c8:	f7fe fc24 	bl	8008c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3cc:	480b      	ldr	r0, [pc, #44]	; (800a3fc <prvInitialiseTaskLists+0x74>)
 800a3ce:	f7fe fc21 	bl	8008c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <prvInitialiseTaskLists+0x78>)
 800a3d4:	4a05      	ldr	r2, [pc, #20]	; (800a3ec <prvInitialiseTaskLists+0x64>)
 800a3d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <prvInitialiseTaskLists+0x7c>)
 800a3da:	4a05      	ldr	r2, [pc, #20]	; (800a3f0 <prvInitialiseTaskLists+0x68>)
 800a3dc:	601a      	str	r2, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001010 	.word	0x20001010
 800a3ec:	20001470 	.word	0x20001470
 800a3f0:	20001484 	.word	0x20001484
 800a3f4:	200014a0 	.word	0x200014a0
 800a3f8:	200014b4 	.word	0x200014b4
 800a3fc:	200014cc 	.word	0x200014cc
 800a400:	20001498 	.word	0x20001498
 800a404:	2000149c 	.word	0x2000149c

0800a408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a40e:	e019      	b.n	800a444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a410:	f000 ffc0 	bl	800b394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a414:	4b10      	ldr	r3, [pc, #64]	; (800a458 <prvCheckTasksWaitingTermination+0x50>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe fc81 	bl	8008d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <prvCheckTasksWaitingTermination+0x54>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	4a0b      	ldr	r2, [pc, #44]	; (800a45c <prvCheckTasksWaitingTermination+0x54>)
 800a42e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a430:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3b01      	subs	r3, #1
 800a436:	4a0a      	ldr	r2, [pc, #40]	; (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a43a:	f000 ffdb 	bl	800b3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f810 	bl	800a464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e1      	bne.n	800a410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	200014b4 	.word	0x200014b4
 800a45c:	200014e0 	.word	0x200014e0
 800a460:	200014c8 	.word	0x200014c8

0800a464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a472:	2b00      	cmp	r3, #0
 800a474:	d108      	bne.n	800a488 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 f978 	bl	800b770 <vPortFree>
				vPortFree( pxTCB );
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 f975 	bl	800b770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a486:	e018      	b.n	800a4ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d103      	bne.n	800a49a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 f96c 	bl	800b770 <vPortFree>
	}
 800a498:	e00f      	b.n	800a4ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d00a      	beq.n	800a4ba <prvDeleteTCB+0x56>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	60fb      	str	r3, [r7, #12]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <prvDeleteTCB+0x54>
	}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <prvResetNextTaskUnblockTime+0x38>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4d4:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <prvResetNextTaskUnblockTime+0x3c>)
 800a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4dc:	e008      	b.n	800a4f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <prvResetNextTaskUnblockTime+0x38>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	4a04      	ldr	r2, [pc, #16]	; (800a500 <prvResetNextTaskUnblockTime+0x3c>)
 800a4ee:	6013      	str	r3, [r2, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20001498 	.word	0x20001498
 800a500:	20001500 	.word	0x20001500

0800a504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a50a:	4b0b      	ldr	r3, [pc, #44]	; (800a538 <xTaskGetSchedulerState+0x34>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d102      	bne.n	800a518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a512:	2301      	movs	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	e008      	b.n	800a52a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a518:	4b08      	ldr	r3, [pc, #32]	; (800a53c <xTaskGetSchedulerState+0x38>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d102      	bne.n	800a526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a520:	2302      	movs	r3, #2
 800a522:	607b      	str	r3, [r7, #4]
 800a524:	e001      	b.n	800a52a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a526:	2300      	movs	r3, #0
 800a528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a52a:	687b      	ldr	r3, [r7, #4]
	}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	200014ec 	.word	0x200014ec
 800a53c:	20001508 	.word	0x20001508

0800a540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d056      	beq.n	800a604 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a556:	4b2e      	ldr	r3, [pc, #184]	; (800a610 <xTaskPriorityDisinherit+0xd0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d00a      	beq.n	800a576 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60bb      	str	r3, [r7, #8]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a598:	1e5a      	subs	r2, r3, #1
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d02c      	beq.n	800a604 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d128      	bne.n	800a604 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fbb6 	bl	8008d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	4b0f      	ldr	r3, [pc, #60]	; (800a614 <xTaskPriorityDisinherit+0xd4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d903      	bls.n	800a5e4 <xTaskPriorityDisinherit+0xa4>
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <xTaskPriorityDisinherit+0xd4>)
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4a09      	ldr	r2, [pc, #36]	; (800a618 <xTaskPriorityDisinherit+0xd8>)
 800a5f2:	441a      	add	r2, r3
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f7fe fb37 	bl	8008c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a604:	697b      	ldr	r3, [r7, #20]
	}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	2000100c 	.word	0x2000100c
 800a614:	200014e8 	.word	0x200014e8
 800a618:	20001010 	.word	0x20001010

0800a61c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a62a:	f000 feb3 	bl	800b394 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a62e:	4b26      	ldr	r3, [pc, #152]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d01a      	beq.n	800a672 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a63c:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	43d2      	mvns	r2, r2
 800a646:	400a      	ands	r2, r1
 800a648:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00b      	beq.n	800a672 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a65a:	2101      	movs	r1, #1
 800a65c:	6838      	ldr	r0, [r7, #0]
 800a65e:	f000 f9cb 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a662:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <xTaskNotifyWait+0xb0>)
 800a664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a672:	f000 febf 	bl	800b3f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a676:	f000 fe8d 	bl	800b394 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a680:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a68a:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	d002      	beq.n	800a69e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a698:	2300      	movs	r3, #0
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e008      	b.n	800a6b0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	43d2      	mvns	r2, r2
 800a6a8:	400a      	ands	r2, r1
 800a6aa:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <xTaskNotifyWait+0xac>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800a6ba:	f000 fe9b 	bl	800b3f4 <vPortExitCritical>

		return xReturn;
 800a6be:	697b      	ldr	r3, [r7, #20]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	2000100c 	.word	0x2000100c
 800a6cc:	e000ed04 	.word	0xe000ed04

0800a6d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <xTaskGenericNotify+0x30>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	61bb      	str	r3, [r7, #24]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a704:	f000 fe46 	bl	800b394 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a71c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2202      	movs	r2, #2
 800a722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d828      	bhi.n	800a77e <xTaskGenericNotify+0xae>
 800a72c:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <xTaskGenericNotify+0x64>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a79f 	.word	0x0800a79f
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a757 	.word	0x0800a757
 800a740:	0800a763 	.word	0x0800a763
 800a744:	0800a76b 	.word	0x0800a76b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	431a      	orrs	r2, r3
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a754:	e026      	b.n	800a7a4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a760:	e020      	b.n	800a7a4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a768:	e01c      	b.n	800a7a4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a76a:	7ffb      	ldrb	r3, [r7, #31]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d003      	beq.n	800a778 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a776:	e015      	b.n	800a7a4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800a778:	2300      	movs	r3, #0
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a77c:	e012      	b.n	800a7a4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	d00c      	beq.n	800a7a2 <xTaskGenericNotify+0xd2>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	617b      	str	r3, [r7, #20]
}
 800a79a:	bf00      	nop
 800a79c:	e7fe      	b.n	800a79c <xTaskGenericNotify+0xcc>
					break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <xTaskGenericNotify+0xd4>

					break;
 800a7a2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d13a      	bne.n	800a820 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe faba 	bl	8008d28 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <xTaskGenericNotify+0x160>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d903      	bls.n	800a7c8 <xTaskGenericNotify+0xf8>
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	4a1a      	ldr	r2, [pc, #104]	; (800a830 <xTaskGenericNotify+0x160>)
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	6a3b      	ldr	r3, [r7, #32]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4a17      	ldr	r2, [pc, #92]	; (800a834 <xTaskGenericNotify+0x164>)
 800a7d6:	441a      	add	r2, r3
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f7fe fa45 	bl	8008c6e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00a      	beq.n	800a802 <xTaskGenericNotify+0x132>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	613b      	str	r3, [r7, #16]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <xTaskGenericNotify+0x168>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d907      	bls.n	800a820 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a810:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <xTaskGenericNotify+0x16c>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a820:	f000 fde8 	bl	800b3f4 <vPortExitCritical>

		return xReturn;
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a826:	4618      	mov	r0, r3
 800a828:	3728      	adds	r7, #40	; 0x28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200014e8 	.word	0x200014e8
 800a834:	20001010 	.word	0x20001010
 800a838:	2000100c 	.word	0x2000100c
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08e      	sub	sp, #56	; 0x38
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	4613      	mov	r3, r2
 800a84e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a850:	2301      	movs	r3, #1
 800a852:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a870:	f000 fe72 	bl	800b558 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a878:	f3ef 8211 	mrs	r2, BASEPRI
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	623a      	str	r2, [r7, #32]
 800a88e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a890:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a8a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d828      	bhi.n	800a90c <xTaskGenericNotifyFromISR+0xcc>
 800a8ba:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <xTaskGenericNotifyFromISR+0x80>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a92d 	.word	0x0800a92d
 800a8c4:	0800a8d5 	.word	0x0800a8d5
 800a8c8:	0800a8e3 	.word	0x0800a8e3
 800a8cc:	0800a8ef 	.word	0x0800a8ef
 800a8d0:	0800a8f7 	.word	0x0800a8f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a8e0:	e027      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a8ec:	e021      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a8f4:	e01d      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d003      	beq.n	800a906 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a904:	e015      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800a906:	2300      	movs	r3, #0
 800a908:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a90a:	e012      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d00c      	beq.n	800a930 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	61bb      	str	r3, [r7, #24]
}
 800a928:	bf00      	nop
 800a92a:	e7fe      	b.n	800a92a <xTaskGenericNotifyFromISR+0xea>
					break;
 800a92c:	bf00      	nop
 800a92e:	e000      	b.n	800a932 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800a930:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a936:	2b01      	cmp	r3, #1
 800a938:	d146      	bne.n	800a9c8 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	617b      	str	r3, [r7, #20]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a958:	4b21      	ldr	r3, [pc, #132]	; (800a9e0 <xTaskGenericNotifyFromISR+0x1a0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d11d      	bne.n	800a99c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	3304      	adds	r3, #4
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe f9df 	bl	8008d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96e:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <xTaskGenericNotifyFromISR+0x1a4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d903      	bls.n	800a97e <xTaskGenericNotifyFromISR+0x13e>
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	4a1a      	ldr	r2, [pc, #104]	; (800a9e4 <xTaskGenericNotifyFromISR+0x1a4>)
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <xTaskGenericNotifyFromISR+0x1a8>)
 800a98c:	441a      	add	r2, r3
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	3304      	adds	r3, #4
 800a992:	4619      	mov	r1, r3
 800a994:	4610      	mov	r0, r2
 800a996:	f7fe f96a 	bl	8008c6e <vListInsertEnd>
 800a99a:	e005      	b.n	800a9a8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	3318      	adds	r3, #24
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4812      	ldr	r0, [pc, #72]	; (800a9ec <xTaskGenericNotifyFromISR+0x1ac>)
 800a9a4:	f7fe f963 	bl	8008c6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <xTaskGenericNotifyFromISR+0x1b0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d908      	bls.n	800a9c8 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9be:	2201      	movs	r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a9c2:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	f383 8811 	msr	BASEPRI, r3
}
 800a9d2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3738      	adds	r7, #56	; 0x38
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20001508 	.word	0x20001508
 800a9e4:	200014e8 	.word	0x200014e8
 800a9e8:	20001010 	.word	0x20001010
 800a9ec:	200014a0 	.word	0x200014a0
 800a9f0:	2000100c 	.word	0x2000100c
 800a9f4:	200014f4 	.word	0x200014f4

0800a9f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b21      	ldr	r3, [pc, #132]	; (800aa88 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa08:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe f98a 	bl	8008d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10a      	bne.n	800aa32 <prvAddCurrentTaskToDelayedList+0x3a>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d007      	beq.n	800aa32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa22:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4819      	ldr	r0, [pc, #100]	; (800aa90 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa2c:	f7fe f91f 	bl	8008c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa30:	e026      	b.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4413      	add	r3, r2
 800aa38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d209      	bcs.n	800aa5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa4a:	4b12      	ldr	r3, [pc, #72]	; (800aa94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fe f92d 	bl	8008cb6 <vListInsert>
}
 800aa5c:	e010      	b.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	f7fe f923 	bl	8008cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa70:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d202      	bcs.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa7a:	4a08      	ldr	r2, [pc, #32]	; (800aa9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200014e4 	.word	0x200014e4
 800aa8c:	2000100c 	.word	0x2000100c
 800aa90:	200014cc 	.word	0x200014cc
 800aa94:	2000149c 	.word	0x2000149c
 800aa98:	20001498 	.word	0x20001498
 800aa9c:	20001500 	.word	0x20001500

0800aaa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	; 0x28
 800aaa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaaa:	f000 fb07 	bl	800b0bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aaae:	4b1c      	ldr	r3, [pc, #112]	; (800ab20 <xTimerCreateTimerTask+0x80>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d021      	beq.n	800aafa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	f107 030c 	add.w	r3, r7, #12
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe f889 	bl	8008be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	9202      	str	r2, [sp, #8]
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	2302      	movs	r3, #2
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	2300      	movs	r3, #0
 800aade:	460a      	mov	r2, r1
 800aae0:	4910      	ldr	r1, [pc, #64]	; (800ab24 <xTimerCreateTimerTask+0x84>)
 800aae2:	4811      	ldr	r0, [pc, #68]	; (800ab28 <xTimerCreateTimerTask+0x88>)
 800aae4:	f7fe fef0 	bl	80098c8 <xTaskCreateStatic>
 800aae8:	4603      	mov	r3, r0
 800aaea:	4a10      	ldr	r2, [pc, #64]	; (800ab2c <xTimerCreateTimerTask+0x8c>)
 800aaec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaee:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <xTimerCreateTimerTask+0x8c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab16:	697b      	ldr	r3, [r7, #20]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	2000153c 	.word	0x2000153c
 800ab24:	0800d2ec 	.word	0x0800d2ec
 800ab28:	0800ac65 	.word	0x0800ac65
 800ab2c:	20001540 	.word	0x20001540

0800ab30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	; 0x28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	623b      	str	r3, [r7, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab5e:	4b1a      	ldr	r3, [pc, #104]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d02a      	beq.n	800abbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	dc18      	bgt.n	800abaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab78:	f7ff fcc4 	bl	800a504 <xTaskGetSchedulerState>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d109      	bne.n	800ab96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	f107 0110 	add.w	r1, r7, #16
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8e:	f7fe fa33 	bl	8008ff8 <xQueueGenericSend>
 800ab92:	6278      	str	r0, [r7, #36]	; 0x24
 800ab94:	e012      	b.n	800abbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f107 0110 	add.w	r1, r7, #16
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7fe fa29 	bl	8008ff8 <xQueueGenericSend>
 800aba6:	6278      	str	r0, [r7, #36]	; 0x24
 800aba8:	e008      	b.n	800abbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <xTimerGenericCommand+0x98>)
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	f107 0110 	add.w	r1, r7, #16
 800abb2:	2300      	movs	r3, #0
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	f7fe fb1d 	bl	80091f4 <xQueueGenericSendFromISR>
 800abba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3728      	adds	r7, #40	; 0x28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	2000153c 	.word	0x2000153c

0800abcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd6:	4b22      	ldr	r3, [pc, #136]	; (800ac60 <prvProcessExpiredTimer+0x94>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe f89f 	bl	8008d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d022      	beq.n	800ac3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	699a      	ldr	r2, [r3, #24]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	18d1      	adds	r1, r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	6978      	ldr	r0, [r7, #20]
 800ac06:	f000 f8d1 	bl	800adac <prvInsertTimerInActiveList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01f      	beq.n	800ac50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac10:	2300      	movs	r3, #0
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	2300      	movs	r3, #0
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff ff88 	bl	800ab30 <xTimerGenericCommand>
 800ac20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d113      	bne.n	800ac50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	60fb      	str	r3, [r7, #12]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	6978      	ldr	r0, [r7, #20]
 800ac56:	4798      	blx	r3
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20001534 	.word	0x20001534

0800ac64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f857 	bl	800ad24 <prvGetNextExpireTime>
 800ac76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f803 	bl	800ac88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac82:	f000 f8d5 	bl	800ae30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac86:	e7f1      	b.n	800ac6c <prvTimerTask+0x8>

0800ac88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac92:	f7ff f855 	bl	8009d40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 f866 	bl	800ad6c <prvSampleTimeNow>
 800aca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d130      	bne.n	800ad0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <prvProcessTimerOrBlockTask+0x3c>
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d806      	bhi.n	800acc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acb6:	f7ff f851 	bl	8009d5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff85 	bl	800abcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acc2:	e024      	b.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <prvProcessTimerOrBlockTask+0x90>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <prvProcessTimerOrBlockTask+0x50>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <prvProcessTimerOrBlockTask+0x52>
 800acd8:	2300      	movs	r3, #0
 800acda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acdc:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <prvProcessTimerOrBlockTask+0x94>)
 800acde:	6818      	ldr	r0, [r3, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4619      	mov	r1, r3
 800acea:	f7fe fdb9 	bl	8009860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acee:	f7ff f835 	bl	8009d5c <xTaskResumeAll>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acf8:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <prvProcessTimerOrBlockTask+0x98>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
}
 800ad08:	e001      	b.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad0a:	f7ff f827 	bl	8009d5c <xTaskResumeAll>
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001538 	.word	0x20001538
 800ad1c:	2000153c 	.word	0x2000153c
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad2c:	4b0e      	ldr	r3, [pc, #56]	; (800ad68 <prvGetNextExpireTime+0x44>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <prvGetNextExpireTime+0x16>
 800ad36:	2201      	movs	r2, #1
 800ad38:	e000      	b.n	800ad3c <prvGetNextExpireTime+0x18>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <prvGetNextExpireTime+0x44>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e001      	b.n	800ad58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad58:	68fb      	ldr	r3, [r7, #12]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20001534 	.word	0x20001534

0800ad6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad74:	f7ff f890 	bl	8009e98 <xTaskGetTickCount>
 800ad78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <prvSampleTimeNow+0x3c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d205      	bcs.n	800ad90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad84:	f000 f936 	bl	800aff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	e002      	b.n	800ad96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad96:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <prvSampleTimeNow+0x3c>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20001544 	.word	0x20001544

0800adac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	429a      	cmp	r2, r3
 800add0:	d812      	bhi.n	800adf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	429a      	cmp	r2, r3
 800adde:	d302      	bcc.n	800ade6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ade0:	2301      	movs	r3, #1
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	e01b      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ade6:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <prvInsertTimerInActiveList+0x7c>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fd ff60 	bl	8008cb6 <vListInsert>
 800adf6:	e012      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d206      	bcs.n	800ae0e <prvInsertTimerInActiveList+0x62>
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d302      	bcc.n	800ae0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e007      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae0e:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <prvInsertTimerInActiveList+0x80>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3304      	adds	r3, #4
 800ae16:	4619      	mov	r1, r3
 800ae18:	4610      	mov	r0, r2
 800ae1a:	f7fd ff4c 	bl	8008cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae1e:	697b      	ldr	r3, [r7, #20]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20001538 	.word	0x20001538
 800ae2c:	20001534 	.word	0x20001534

0800ae30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08e      	sub	sp, #56	; 0x38
 800ae34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae36:	e0ca      	b.n	800afce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da18      	bge.n	800ae70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae3e:	1d3b      	adds	r3, r7, #4
 800ae40:	3304      	adds	r3, #4
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	61fb      	str	r3, [r7, #28]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae66:	6850      	ldr	r0, [r2, #4]
 800ae68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae6a:	6892      	ldr	r2, [r2, #8]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f2c0 80aa 	blt.w	800afcc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d004      	beq.n	800ae8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fd ff4d 	bl	8008d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae8e:	463b      	mov	r3, r7
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff ff6b 	bl	800ad6c <prvSampleTimeNow>
 800ae96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b09      	cmp	r3, #9
 800ae9c:	f200 8097 	bhi.w	800afce <prvProcessReceivedCommands+0x19e>
 800aea0:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <prvProcessReceivedCommands+0x78>)
 800aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea6:	bf00      	nop
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800af45 	.word	0x0800af45
 800aeb8:	0800af59 	.word	0x0800af59
 800aebc:	0800afa3 	.word	0x0800afa3
 800aec0:	0800aed1 	.word	0x0800aed1
 800aec4:	0800aed1 	.word	0x0800aed1
 800aec8:	0800af45 	.word	0x0800af45
 800aecc:	0800af59 	.word	0x0800af59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	18d1      	adds	r1, r2, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef0:	f7ff ff5c 	bl	800adac <prvInsertTimerInActiveList>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d069      	beq.n	800afce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d05e      	beq.n	800afce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	441a      	add	r2, r3
 800af18:	2300      	movs	r3, #0
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	2300      	movs	r3, #0
 800af1e:	2100      	movs	r1, #0
 800af20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af22:	f7ff fe05 	bl	800ab30 <xTimerGenericCommand>
 800af26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d14f      	bne.n	800afce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	61bb      	str	r3, [r7, #24]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af4a:	f023 0301 	bic.w	r3, r3, #1
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af56:	e03a      	b.n	800afce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5e:	f043 0301 	orr.w	r3, r3, #1
 800af62:	b2da      	uxtb	r2, r3
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	617b      	str	r3, [r7, #20]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	18d1      	adds	r1, r2, r3
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af9c:	f7ff ff06 	bl	800adac <prvInsertTimerInActiveList>
					break;
 800afa0:	e015      	b.n	800afce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800afb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afb2:	f000 fbdd 	bl	800b770 <vPortFree>
 800afb6:	e00a      	b.n	800afce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afca:	e000      	b.n	800afce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800afcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afce:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <prvProcessReceivedCommands+0x1c0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1d39      	adds	r1, r7, #4
 800afd4:	2200      	movs	r2, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe f9a8 	bl	800932c <xQueueReceive>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f47f af2a 	bne.w	800ae38 <prvProcessReceivedCommands+0x8>
	}
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	3730      	adds	r7, #48	; 0x30
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	2000153c 	.word	0x2000153c

0800aff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800affa:	e048      	b.n	800b08e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b006:	4b2b      	ldr	r3, [pc, #172]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3304      	adds	r3, #4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fd fe87 	bl	8008d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d02e      	beq.n	800b08e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4413      	add	r3, r2
 800b038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d90e      	bls.n	800b060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b04e:	4b19      	ldr	r3, [pc, #100]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3304      	adds	r3, #4
 800b056:	4619      	mov	r1, r3
 800b058:	4610      	mov	r0, r2
 800b05a:	f7fd fe2c 	bl	8008cb6 <vListInsert>
 800b05e:	e016      	b.n	800b08e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b060:	2300      	movs	r3, #0
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2300      	movs	r3, #0
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	2100      	movs	r1, #0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fd60 	bl	800ab30 <xTimerGenericCommand>
 800b070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	603b      	str	r3, [r7, #0]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b08e:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1b1      	bne.n	800affc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b098:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b09e:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <prvSwitchTimerLists+0xc4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a04      	ldr	r2, [pc, #16]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b0a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0a6:	4a04      	ldr	r2, [pc, #16]	; (800b0b8 <prvSwitchTimerLists+0xc4>)
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	6013      	str	r3, [r2, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20001534 	.word	0x20001534
 800b0b8:	20001538 	.word	0x20001538

0800b0bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0c2:	f000 f967 	bl	800b394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0c6:	4b15      	ldr	r3, [pc, #84]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d120      	bne.n	800b110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0ce:	4814      	ldr	r0, [pc, #80]	; (800b120 <prvCheckForValidListAndQueue+0x64>)
 800b0d0:	f7fd fda0 	bl	8008c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0d4:	4813      	ldr	r0, [pc, #76]	; (800b124 <prvCheckForValidListAndQueue+0x68>)
 800b0d6:	f7fd fd9d 	bl	8008c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <prvCheckForValidListAndQueue+0x6c>)
 800b0dc:	4a10      	ldr	r2, [pc, #64]	; (800b120 <prvCheckForValidListAndQueue+0x64>)
 800b0de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0e0:	4b12      	ldr	r3, [pc, #72]	; (800b12c <prvCheckForValidListAndQueue+0x70>)
 800b0e2:	4a10      	ldr	r2, [pc, #64]	; (800b124 <prvCheckForValidListAndQueue+0x68>)
 800b0e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	4b11      	ldr	r3, [pc, #68]	; (800b130 <prvCheckForValidListAndQueue+0x74>)
 800b0ec:	4a11      	ldr	r2, [pc, #68]	; (800b134 <prvCheckForValidListAndQueue+0x78>)
 800b0ee:	2110      	movs	r1, #16
 800b0f0:	200a      	movs	r0, #10
 800b0f2:	f7fd feab 	bl	8008e4c <xQueueGenericCreateStatic>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4a08      	ldr	r2, [pc, #32]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0fc:	4b07      	ldr	r3, [pc, #28]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	490b      	ldr	r1, [pc, #44]	; (800b138 <prvCheckForValidListAndQueue+0x7c>)
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe fb7e 	bl	800980c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b110:	f000 f970 	bl	800b3f4 <vPortExitCritical>
}
 800b114:	bf00      	nop
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	2000153c 	.word	0x2000153c
 800b120:	2000150c 	.word	0x2000150c
 800b124:	20001520 	.word	0x20001520
 800b128:	20001534 	.word	0x20001534
 800b12c:	20001538 	.word	0x20001538
 800b130:	200015e8 	.word	0x200015e8
 800b134:	20001548 	.word	0x20001548
 800b138:	0800d2f4 	.word	0x0800d2f4

0800b13c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3b04      	subs	r3, #4
 800b14c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3b04      	subs	r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0201 	bic.w	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3b04      	subs	r3, #4
 800b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b16c:	4a0c      	ldr	r2, [pc, #48]	; (800b1a0 <pxPortInitialiseStack+0x64>)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3b14      	subs	r3, #20
 800b176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3b04      	subs	r3, #4
 800b182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f06f 0202 	mvn.w	r2, #2
 800b18a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3b20      	subs	r3, #32
 800b190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b192:	68fb      	ldr	r3, [r7, #12]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	0800b1a5 	.word	0x0800b1a5

0800b1a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ae:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <prvTaskExitError+0x54>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d00a      	beq.n	800b1ce <prvTaskExitError+0x2a>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	60fb      	str	r3, [r7, #12]
}
 800b1ca:	bf00      	nop
 800b1cc:	e7fe      	b.n	800b1cc <prvTaskExitError+0x28>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	60bb      	str	r3, [r7, #8]
}
 800b1e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1e2:	bf00      	nop
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0fc      	beq.n	800b1e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	2000001c 	.word	0x2000001c
 800b1fc:	00000000 	.word	0x00000000

0800b200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <pxCurrentTCBConst2>)
 800b202:	6819      	ldr	r1, [r3, #0]
 800b204:	6808      	ldr	r0, [r1, #0]
 800b206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	f380 8809 	msr	PSP, r0
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f04f 0000 	mov.w	r0, #0
 800b216:	f380 8811 	msr	BASEPRI, r0
 800b21a:	4770      	bx	lr
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst2>:
 800b220:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b228:	4808      	ldr	r0, [pc, #32]	; (800b24c <prvPortStartFirstTask+0x24>)
 800b22a:	6800      	ldr	r0, [r0, #0]
 800b22c:	6800      	ldr	r0, [r0, #0]
 800b22e:	f380 8808 	msr	MSP, r0
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8814 	msr	CONTROL, r0
 800b23a:	b662      	cpsie	i
 800b23c:	b661      	cpsie	f
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	df00      	svc	0
 800b248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b24a:	bf00      	nop
 800b24c:	e000ed08 	.word	0xe000ed08

0800b250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b256:	4b46      	ldr	r3, [pc, #280]	; (800b370 <xPortStartScheduler+0x120>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a46      	ldr	r2, [pc, #280]	; (800b374 <xPortStartScheduler+0x124>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d10a      	bne.n	800b276 <xPortStartScheduler+0x26>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	613b      	str	r3, [r7, #16]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b276:	4b3e      	ldr	r3, [pc, #248]	; (800b370 <xPortStartScheduler+0x120>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a3f      	ldr	r2, [pc, #252]	; (800b378 <xPortStartScheduler+0x128>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d10a      	bne.n	800b296 <xPortStartScheduler+0x46>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	60fb      	str	r3, [r7, #12]
}
 800b292:	bf00      	nop
 800b294:	e7fe      	b.n	800b294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b296:	4b39      	ldr	r3, [pc, #228]	; (800b37c <xPortStartScheduler+0x12c>)
 800b298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	22ff      	movs	r2, #255	; 0xff
 800b2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	4b31      	ldr	r3, [pc, #196]	; (800b380 <xPortStartScheduler+0x130>)
 800b2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2be:	4b31      	ldr	r3, [pc, #196]	; (800b384 <xPortStartScheduler+0x134>)
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2c4:	e009      	b.n	800b2da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b2c6:	4b2f      	ldr	r3, [pc, #188]	; (800b384 <xPortStartScheduler+0x134>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	4a2d      	ldr	r2, [pc, #180]	; (800b384 <xPortStartScheduler+0x134>)
 800b2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e2:	2b80      	cmp	r3, #128	; 0x80
 800b2e4:	d0ef      	beq.n	800b2c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2e6:	4b27      	ldr	r3, [pc, #156]	; (800b384 <xPortStartScheduler+0x134>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f1c3 0307 	rsb	r3, r3, #7
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d00a      	beq.n	800b308 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <xPortStartScheduler+0x134>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <xPortStartScheduler+0x134>)
 800b310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <xPortStartScheduler+0x134>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b31a:	4a1a      	ldr	r2, [pc, #104]	; (800b384 <xPortStartScheduler+0x134>)
 800b31c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	b2da      	uxtb	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b326:	4b18      	ldr	r3, [pc, #96]	; (800b388 <xPortStartScheduler+0x138>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <xPortStartScheduler+0x138>)
 800b32c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b332:	4b15      	ldr	r3, [pc, #84]	; (800b388 <xPortStartScheduler+0x138>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a14      	ldr	r2, [pc, #80]	; (800b388 <xPortStartScheduler+0x138>)
 800b338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b33c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b33e:	f000 f8dd 	bl	800b4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <xPortStartScheduler+0x13c>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b348:	f000 f8fc 	bl	800b544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b34c:	4b10      	ldr	r3, [pc, #64]	; (800b390 <xPortStartScheduler+0x140>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a0f      	ldr	r2, [pc, #60]	; (800b390 <xPortStartScheduler+0x140>)
 800b352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b358:	f7ff ff66 	bl	800b228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b35c:	f7fe fe66 	bl	800a02c <vTaskSwitchContext>
	prvTaskExitError();
 800b360:	f7ff ff20 	bl	800b1a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	e000ed00 	.word	0xe000ed00
 800b374:	410fc271 	.word	0x410fc271
 800b378:	410fc270 	.word	0x410fc270
 800b37c:	e000e400 	.word	0xe000e400
 800b380:	20001638 	.word	0x20001638
 800b384:	2000163c 	.word	0x2000163c
 800b388:	e000ed20 	.word	0xe000ed20
 800b38c:	2000001c 	.word	0x2000001c
 800b390:	e000ef34 	.word	0xe000ef34

0800b394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	607b      	str	r3, [r7, #4]
}
 800b3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	4a0d      	ldr	r2, [pc, #52]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3b8:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d10f      	bne.n	800b3e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <vPortEnterCritical+0x5c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	603b      	str	r3, [r7, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <vPortEnterCritical+0x4a>
	}
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	2000001c 	.word	0x2000001c
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <vPortExitCritical+0x50>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <vPortExitCritical+0x24>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	607b      	str	r3, [r7, #4]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <vPortExitCritical+0x50>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4a09      	ldr	r2, [pc, #36]	; (800b444 <vPortExitCritical+0x50>)
 800b420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b422:	4b08      	ldr	r3, [pc, #32]	; (800b444 <vPortExitCritical+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <vPortExitCritical+0x42>
 800b42a:	2300      	movs	r3, #0
 800b42c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f383 8811 	msr	BASEPRI, r3
}
 800b434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	2000001c 	.word	0x2000001c
	...

0800b450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b450:	f3ef 8009 	mrs	r0, PSP
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <pxCurrentTCBConst>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f01e 0f10 	tst.w	lr, #16
 800b460:	bf08      	it	eq
 800b462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	6010      	str	r0, [r2, #0]
 800b46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b474:	f380 8811 	msr	BASEPRI, r0
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f7fe fdd4 	bl	800a02c <vTaskSwitchContext>
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f380 8811 	msr	BASEPRI, r0
 800b48c:	bc09      	pop	{r0, r3}
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	6808      	ldr	r0, [r1, #0]
 800b492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b496:	f01e 0f10 	tst.w	lr, #16
 800b49a:	bf08      	it	eq
 800b49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4a0:	f380 8809 	msr	PSP, r0
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d2:	f7fe fcf1 	bl	8009eb8 <xTaskIncrementTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <xPortSysTickHandler+0x40>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f383 8811 	msr	BASEPRI, r3
}
 800b4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b500:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b506:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <vPortSetupTimerInterrupt+0x38>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b50c:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <vPortSetupTimerInterrupt+0x3c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0a      	ldr	r2, [pc, #40]	; (800b53c <vPortSetupTimerInterrupt+0x40>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	099b      	lsrs	r3, r3, #6
 800b518:	4a09      	ldr	r2, [pc, #36]	; (800b540 <vPortSetupTimerInterrupt+0x44>)
 800b51a:	3b01      	subs	r3, #1
 800b51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51e:	4b04      	ldr	r3, [pc, #16]	; (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b520:	2207      	movs	r2, #7
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	e000e010 	.word	0xe000e010
 800b534:	e000e018 	.word	0xe000e018
 800b538:	20000004 	.word	0x20000004
 800b53c:	10624dd3 	.word	0x10624dd3
 800b540:	e000e014 	.word	0xe000e014

0800b544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b554 <vPortEnableVFP+0x10>
 800b548:	6801      	ldr	r1, [r0, #0]
 800b54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b54e:	6001      	str	r1, [r0, #0]
 800b550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b552:	bf00      	nop
 800b554:	e000ed88 	.word	0xe000ed88

0800b558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b55e:	f3ef 8305 	mrs	r3, IPSR
 800b562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d914      	bls.n	800b594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b56a:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <vPortValidateInterruptPriority+0x70>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b574:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <vPortValidateInterruptPriority+0x74>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	7afa      	ldrb	r2, [r7, #11]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d20a      	bcs.n	800b594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	607b      	str	r3, [r7, #4]
}
 800b590:	bf00      	nop
 800b592:	e7fe      	b.n	800b592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b594:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <vPortValidateInterruptPriority+0x78>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b59c:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <vPortValidateInterruptPriority+0x7c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d90a      	bls.n	800b5ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	603b      	str	r3, [r7, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <vPortValidateInterruptPriority+0x60>
	}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	e000e3f0 	.word	0xe000e3f0
 800b5cc:	20001638 	.word	0x20001638
 800b5d0:	e000ed0c 	.word	0xe000ed0c
 800b5d4:	2000163c 	.word	0x2000163c

0800b5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	; 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5e4:	f7fe fbac 	bl	8009d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5e8:	4b5b      	ldr	r3, [pc, #364]	; (800b758 <pvPortMalloc+0x180>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5f0:	f000 f920 	bl	800b834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5f4:	4b59      	ldr	r3, [pc, #356]	; (800b75c <pvPortMalloc+0x184>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f040 8093 	bne.w	800b728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01d      	beq.n	800b644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b608:	2208      	movs	r2, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4413      	add	r3, r2
 800b60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f003 0307 	and.w	r3, r3, #7
 800b616:	2b00      	cmp	r3, #0
 800b618:	d014      	beq.n	800b644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f023 0307 	bic.w	r3, r3, #7
 800b620:	3308      	adds	r3, #8
 800b622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <pvPortMalloc+0x6c>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	617b      	str	r3, [r7, #20]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d06e      	beq.n	800b728 <pvPortMalloc+0x150>
 800b64a:	4b45      	ldr	r3, [pc, #276]	; (800b760 <pvPortMalloc+0x188>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d869      	bhi.n	800b728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b654:	4b43      	ldr	r3, [pc, #268]	; (800b764 <pvPortMalloc+0x18c>)
 800b656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b658:	4b42      	ldr	r3, [pc, #264]	; (800b764 <pvPortMalloc+0x18c>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b65e:	e004      	b.n	800b66a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	429a      	cmp	r2, r3
 800b672:	d903      	bls.n	800b67c <pvPortMalloc+0xa4>
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f1      	bne.n	800b660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <pvPortMalloc+0x180>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	429a      	cmp	r2, r3
 800b684:	d050      	beq.n	800b728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2208      	movs	r2, #8
 800b68c:	4413      	add	r3, r2
 800b68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	2308      	movs	r3, #8
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d91f      	bls.n	800b6e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	613b      	str	r3, [r7, #16]
}
 800b6cc:	bf00      	nop
 800b6ce:	e7fe      	b.n	800b6ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6e2:	69b8      	ldr	r0, [r7, #24]
 800b6e4:	f000 f908 	bl	800b8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6e8:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <pvPortMalloc+0x188>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	4a1b      	ldr	r2, [pc, #108]	; (800b760 <pvPortMalloc+0x188>)
 800b6f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6f6:	4b1a      	ldr	r3, [pc, #104]	; (800b760 <pvPortMalloc+0x188>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4b1b      	ldr	r3, [pc, #108]	; (800b768 <pvPortMalloc+0x190>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d203      	bcs.n	800b70a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b702:	4b17      	ldr	r3, [pc, #92]	; (800b760 <pvPortMalloc+0x188>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a18      	ldr	r2, [pc, #96]	; (800b768 <pvPortMalloc+0x190>)
 800b708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <pvPortMalloc+0x184>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	431a      	orrs	r2, r3
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <pvPortMalloc+0x194>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	4a11      	ldr	r2, [pc, #68]	; (800b76c <pvPortMalloc+0x194>)
 800b726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b728:	f7fe fb18 	bl	8009d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <pvPortMalloc+0x174>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	60fb      	str	r3, [r7, #12]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <pvPortMalloc+0x172>
	return pvReturn;
 800b74c:	69fb      	ldr	r3, [r7, #28]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3728      	adds	r7, #40	; 0x28
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200027dc 	.word	0x200027dc
 800b75c:	200027f0 	.word	0x200027f0
 800b760:	200027e0 	.word	0x200027e0
 800b764:	200027d4 	.word	0x200027d4
 800b768:	200027e4 	.word	0x200027e4
 800b76c:	200027e8 	.word	0x200027e8

0800b770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d04d      	beq.n	800b81e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b782:	2308      	movs	r3, #8
 800b784:	425b      	negs	r3, r3
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4413      	add	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	4b24      	ldr	r3, [pc, #144]	; (800b828 <vPortFree+0xb8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4013      	ands	r3, r2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <vPortFree+0x44>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	60fb      	str	r3, [r7, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00a      	beq.n	800b7d2 <vPortFree+0x62>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	60bb      	str	r3, [r7, #8]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b14      	ldr	r3, [pc, #80]	; (800b828 <vPortFree+0xb8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01e      	beq.n	800b81e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11a      	bne.n	800b81e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <vPortFree+0xb8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	401a      	ands	r2, r3
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7f8:	f7fe faa2 	bl	8009d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <vPortFree+0xbc>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4413      	add	r3, r2
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <vPortFree+0xbc>)
 800b808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b80a:	6938      	ldr	r0, [r7, #16]
 800b80c:	f000 f874 	bl	800b8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <vPortFree+0xc0>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3301      	adds	r3, #1
 800b816:	4a06      	ldr	r2, [pc, #24]	; (800b830 <vPortFree+0xc0>)
 800b818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b81a:	f7fe fa9f 	bl	8009d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b81e:	bf00      	nop
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200027f0 	.word	0x200027f0
 800b82c:	200027e0 	.word	0x200027e0
 800b830:	200027ec 	.word	0x200027ec

0800b834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b83a:	f241 1394 	movw	r3, #4500	; 0x1194
 800b83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b840:	4b27      	ldr	r3, [pc, #156]	; (800b8e0 <prvHeapInit+0xac>)
 800b842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	4a1f      	ldr	r2, [pc, #124]	; (800b8e0 <prvHeapInit+0xac>)
 800b864:	4413      	add	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b86c:	4a1d      	ldr	r2, [pc, #116]	; (800b8e4 <prvHeapInit+0xb0>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b872:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <prvHeapInit+0xb0>)
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	4413      	add	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b880:	2208      	movs	r2, #8
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0307 	bic.w	r3, r3, #7
 800b88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <prvHeapInit+0xb4>)
 800b894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b896:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <prvHeapInit+0xb4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <prvHeapInit+0xb8>)
 800b8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <prvHeapInit+0xbc>)
 800b8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <prvHeapInit+0xc0>)
 800b8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	20001640 	.word	0x20001640
 800b8e4:	200027d4 	.word	0x200027d4
 800b8e8:	200027dc 	.word	0x200027dc
 800b8ec:	200027e4 	.word	0x200027e4
 800b8f0:	200027e0 	.word	0x200027e0
 800b8f4:	200027f0 	.word	0x200027f0

0800b8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b900:	4b28      	ldr	r3, [pc, #160]	; (800b9a4 <prvInsertBlockIntoFreeList+0xac>)
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	e002      	b.n	800b90c <prvInsertBlockIntoFreeList+0x14>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d8f7      	bhi.n	800b906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d108      	bne.n	800b93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	441a      	add	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d118      	bne.n	800b980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d00d      	beq.n	800b976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	441a      	add	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e008      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b976:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	e003      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d002      	beq.n	800b996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b996:	bf00      	nop
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	200027d4 	.word	0x200027d4
 800b9a8:	200027dc 	.word	0x200027dc

0800b9ac <__errno>:
 800b9ac:	4b01      	ldr	r3, [pc, #4]	; (800b9b4 <__errno+0x8>)
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20000020 	.word	0x20000020

0800b9b8 <__libc_init_array>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4d0d      	ldr	r5, [pc, #52]	; (800b9f0 <__libc_init_array+0x38>)
 800b9bc:	4c0d      	ldr	r4, [pc, #52]	; (800b9f4 <__libc_init_array+0x3c>)
 800b9be:	1b64      	subs	r4, r4, r5
 800b9c0:	10a4      	asrs	r4, r4, #2
 800b9c2:	2600      	movs	r6, #0
 800b9c4:	42a6      	cmp	r6, r4
 800b9c6:	d109      	bne.n	800b9dc <__libc_init_array+0x24>
 800b9c8:	4d0b      	ldr	r5, [pc, #44]	; (800b9f8 <__libc_init_array+0x40>)
 800b9ca:	4c0c      	ldr	r4, [pc, #48]	; (800b9fc <__libc_init_array+0x44>)
 800b9cc:	f001 fa46 	bl	800ce5c <_init>
 800b9d0:	1b64      	subs	r4, r4, r5
 800b9d2:	10a4      	asrs	r4, r4, #2
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	42a6      	cmp	r6, r4
 800b9d8:	d105      	bne.n	800b9e6 <__libc_init_array+0x2e>
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e0:	4798      	blx	r3
 800b9e2:	3601      	adds	r6, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__libc_init_array+0xc>
 800b9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ea:	4798      	blx	r3
 800b9ec:	3601      	adds	r6, #1
 800b9ee:	e7f2      	b.n	800b9d6 <__libc_init_array+0x1e>
 800b9f0:	0800d480 	.word	0x0800d480
 800b9f4:	0800d480 	.word	0x0800d480
 800b9f8:	0800d480 	.word	0x0800d480
 800b9fc:	0800d484 	.word	0x0800d484

0800ba00 <memcpy>:
 800ba00:	440a      	add	r2, r1
 800ba02:	4291      	cmp	r1, r2
 800ba04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba08:	d100      	bne.n	800ba0c <memcpy+0xc>
 800ba0a:	4770      	bx	lr
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba16:	4291      	cmp	r1, r2
 800ba18:	d1f9      	bne.n	800ba0e <memcpy+0xe>
 800ba1a:	bd10      	pop	{r4, pc}

0800ba1c <memset>:
 800ba1c:	4402      	add	r2, r0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d100      	bne.n	800ba26 <memset+0xa>
 800ba24:	4770      	bx	lr
 800ba26:	f803 1b01 	strb.w	r1, [r3], #1
 800ba2a:	e7f9      	b.n	800ba20 <memset+0x4>

0800ba2c <iprintf>:
 800ba2c:	b40f      	push	{r0, r1, r2, r3}
 800ba2e:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <iprintf+0x2c>)
 800ba30:	b513      	push	{r0, r1, r4, lr}
 800ba32:	681c      	ldr	r4, [r3, #0]
 800ba34:	b124      	cbz	r4, 800ba40 <iprintf+0x14>
 800ba36:	69a3      	ldr	r3, [r4, #24]
 800ba38:	b913      	cbnz	r3, 800ba40 <iprintf+0x14>
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fa92 	bl	800bf64 <__sinit>
 800ba40:	ab05      	add	r3, sp, #20
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	68a1      	ldr	r1, [r4, #8]
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 fdf7 	bl	800c63c <_vfiprintf_r>
 800ba4e:	b002      	add	sp, #8
 800ba50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba54:	b004      	add	sp, #16
 800ba56:	4770      	bx	lr
 800ba58:	20000020 	.word	0x20000020

0800ba5c <_puts_r>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	460e      	mov	r6, r1
 800ba60:	4605      	mov	r5, r0
 800ba62:	b118      	cbz	r0, 800ba6c <_puts_r+0x10>
 800ba64:	6983      	ldr	r3, [r0, #24]
 800ba66:	b90b      	cbnz	r3, 800ba6c <_puts_r+0x10>
 800ba68:	f000 fa7c 	bl	800bf64 <__sinit>
 800ba6c:	69ab      	ldr	r3, [r5, #24]
 800ba6e:	68ac      	ldr	r4, [r5, #8]
 800ba70:	b913      	cbnz	r3, 800ba78 <_puts_r+0x1c>
 800ba72:	4628      	mov	r0, r5
 800ba74:	f000 fa76 	bl	800bf64 <__sinit>
 800ba78:	4b2c      	ldr	r3, [pc, #176]	; (800bb2c <_puts_r+0xd0>)
 800ba7a:	429c      	cmp	r4, r3
 800ba7c:	d120      	bne.n	800bac0 <_puts_r+0x64>
 800ba7e:	686c      	ldr	r4, [r5, #4]
 800ba80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba82:	07db      	lsls	r3, r3, #31
 800ba84:	d405      	bmi.n	800ba92 <_puts_r+0x36>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	0598      	lsls	r0, r3, #22
 800ba8a:	d402      	bmi.n	800ba92 <_puts_r+0x36>
 800ba8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba8e:	f000 fb07 	bl	800c0a0 <__retarget_lock_acquire_recursive>
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	0719      	lsls	r1, r3, #28
 800ba96:	d51d      	bpl.n	800bad4 <_puts_r+0x78>
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	b1db      	cbz	r3, 800bad4 <_puts_r+0x78>
 800ba9c:	3e01      	subs	r6, #1
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800baa4:	3b01      	subs	r3, #1
 800baa6:	60a3      	str	r3, [r4, #8]
 800baa8:	bb39      	cbnz	r1, 800bafa <_puts_r+0x9e>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da38      	bge.n	800bb20 <_puts_r+0xc4>
 800baae:	4622      	mov	r2, r4
 800bab0:	210a      	movs	r1, #10
 800bab2:	4628      	mov	r0, r5
 800bab4:	f000 f87c 	bl	800bbb0 <__swbuf_r>
 800bab8:	3001      	adds	r0, #1
 800baba:	d011      	beq.n	800bae0 <_puts_r+0x84>
 800babc:	250a      	movs	r5, #10
 800babe:	e011      	b.n	800bae4 <_puts_r+0x88>
 800bac0:	4b1b      	ldr	r3, [pc, #108]	; (800bb30 <_puts_r+0xd4>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	d101      	bne.n	800baca <_puts_r+0x6e>
 800bac6:	68ac      	ldr	r4, [r5, #8]
 800bac8:	e7da      	b.n	800ba80 <_puts_r+0x24>
 800baca:	4b1a      	ldr	r3, [pc, #104]	; (800bb34 <_puts_r+0xd8>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	bf08      	it	eq
 800bad0:	68ec      	ldreq	r4, [r5, #12]
 800bad2:	e7d5      	b.n	800ba80 <_puts_r+0x24>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 f8bc 	bl	800bc54 <__swsetup_r>
 800badc:	2800      	cmp	r0, #0
 800bade:	d0dd      	beq.n	800ba9c <_puts_r+0x40>
 800bae0:	f04f 35ff 	mov.w	r5, #4294967295
 800bae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bae6:	07da      	lsls	r2, r3, #31
 800bae8:	d405      	bmi.n	800baf6 <_puts_r+0x9a>
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	059b      	lsls	r3, r3, #22
 800baee:	d402      	bmi.n	800baf6 <_puts_r+0x9a>
 800baf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baf2:	f000 fad6 	bl	800c0a2 <__retarget_lock_release_recursive>
 800baf6:	4628      	mov	r0, r5
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	da04      	bge.n	800bb08 <_puts_r+0xac>
 800bafe:	69a2      	ldr	r2, [r4, #24]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	dc06      	bgt.n	800bb12 <_puts_r+0xb6>
 800bb04:	290a      	cmp	r1, #10
 800bb06:	d004      	beq.n	800bb12 <_puts_r+0xb6>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	6022      	str	r2, [r4, #0]
 800bb0e:	7019      	strb	r1, [r3, #0]
 800bb10:	e7c5      	b.n	800ba9e <_puts_r+0x42>
 800bb12:	4622      	mov	r2, r4
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 f84b 	bl	800bbb0 <__swbuf_r>
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d1bf      	bne.n	800ba9e <_puts_r+0x42>
 800bb1e:	e7df      	b.n	800bae0 <_puts_r+0x84>
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	250a      	movs	r5, #10
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	6022      	str	r2, [r4, #0]
 800bb28:	701d      	strb	r5, [r3, #0]
 800bb2a:	e7db      	b.n	800bae4 <_puts_r+0x88>
 800bb2c:	0800d404 	.word	0x0800d404
 800bb30:	0800d424 	.word	0x0800d424
 800bb34:	0800d3e4 	.word	0x0800d3e4

0800bb38 <puts>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <puts+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f7ff bf8d 	b.w	800ba5c <_puts_r>
 800bb42:	bf00      	nop
 800bb44:	20000020 	.word	0x20000020

0800bb48 <sniprintf>:
 800bb48:	b40c      	push	{r2, r3}
 800bb4a:	b530      	push	{r4, r5, lr}
 800bb4c:	4b17      	ldr	r3, [pc, #92]	; (800bbac <sniprintf+0x64>)
 800bb4e:	1e0c      	subs	r4, r1, #0
 800bb50:	681d      	ldr	r5, [r3, #0]
 800bb52:	b09d      	sub	sp, #116	; 0x74
 800bb54:	da08      	bge.n	800bb68 <sniprintf+0x20>
 800bb56:	238b      	movs	r3, #139	; 0x8b
 800bb58:	602b      	str	r3, [r5, #0]
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	b01d      	add	sp, #116	; 0x74
 800bb60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb64:	b002      	add	sp, #8
 800bb66:	4770      	bx	lr
 800bb68:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb70:	bf14      	ite	ne
 800bb72:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb76:	4623      	moveq	r3, r4
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb80:	9002      	str	r0, [sp, #8]
 800bb82:	9006      	str	r0, [sp, #24]
 800bb84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb8a:	ab21      	add	r3, sp, #132	; 0x84
 800bb8c:	a902      	add	r1, sp, #8
 800bb8e:	4628      	mov	r0, r5
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	f000 fc29 	bl	800c3e8 <_svfiprintf_r>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	bfbc      	itt	lt
 800bb9a:	238b      	movlt	r3, #139	; 0x8b
 800bb9c:	602b      	strlt	r3, [r5, #0]
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	d0dd      	beq.n	800bb5e <sniprintf+0x16>
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	e7d9      	b.n	800bb5e <sniprintf+0x16>
 800bbaa:	bf00      	nop
 800bbac:	20000020 	.word	0x20000020

0800bbb0 <__swbuf_r>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	460e      	mov	r6, r1
 800bbb4:	4614      	mov	r4, r2
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	b118      	cbz	r0, 800bbc2 <__swbuf_r+0x12>
 800bbba:	6983      	ldr	r3, [r0, #24]
 800bbbc:	b90b      	cbnz	r3, 800bbc2 <__swbuf_r+0x12>
 800bbbe:	f000 f9d1 	bl	800bf64 <__sinit>
 800bbc2:	4b21      	ldr	r3, [pc, #132]	; (800bc48 <__swbuf_r+0x98>)
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	d12b      	bne.n	800bc20 <__swbuf_r+0x70>
 800bbc8:	686c      	ldr	r4, [r5, #4]
 800bbca:	69a3      	ldr	r3, [r4, #24]
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	071a      	lsls	r2, r3, #28
 800bbd2:	d52f      	bpl.n	800bc34 <__swbuf_r+0x84>
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	b36b      	cbz	r3, 800bc34 <__swbuf_r+0x84>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	6820      	ldr	r0, [r4, #0]
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	6963      	ldr	r3, [r4, #20]
 800bbe0:	b2f6      	uxtb	r6, r6
 800bbe2:	4283      	cmp	r3, r0
 800bbe4:	4637      	mov	r7, r6
 800bbe6:	dc04      	bgt.n	800bbf2 <__swbuf_r+0x42>
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4628      	mov	r0, r5
 800bbec:	f000 f926 	bl	800be3c <_fflush_r>
 800bbf0:	bb30      	cbnz	r0, 800bc40 <__swbuf_r+0x90>
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	6022      	str	r2, [r4, #0]
 800bbfe:	701e      	strb	r6, [r3, #0]
 800bc00:	6963      	ldr	r3, [r4, #20]
 800bc02:	3001      	adds	r0, #1
 800bc04:	4283      	cmp	r3, r0
 800bc06:	d004      	beq.n	800bc12 <__swbuf_r+0x62>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	07db      	lsls	r3, r3, #31
 800bc0c:	d506      	bpl.n	800bc1c <__swbuf_r+0x6c>
 800bc0e:	2e0a      	cmp	r6, #10
 800bc10:	d104      	bne.n	800bc1c <__swbuf_r+0x6c>
 800bc12:	4621      	mov	r1, r4
 800bc14:	4628      	mov	r0, r5
 800bc16:	f000 f911 	bl	800be3c <_fflush_r>
 800bc1a:	b988      	cbnz	r0, 800bc40 <__swbuf_r+0x90>
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc20:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <__swbuf_r+0x9c>)
 800bc22:	429c      	cmp	r4, r3
 800bc24:	d101      	bne.n	800bc2a <__swbuf_r+0x7a>
 800bc26:	68ac      	ldr	r4, [r5, #8]
 800bc28:	e7cf      	b.n	800bbca <__swbuf_r+0x1a>
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <__swbuf_r+0xa0>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	bf08      	it	eq
 800bc30:	68ec      	ldreq	r4, [r5, #12]
 800bc32:	e7ca      	b.n	800bbca <__swbuf_r+0x1a>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 f80c 	bl	800bc54 <__swsetup_r>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d0cb      	beq.n	800bbd8 <__swbuf_r+0x28>
 800bc40:	f04f 37ff 	mov.w	r7, #4294967295
 800bc44:	e7ea      	b.n	800bc1c <__swbuf_r+0x6c>
 800bc46:	bf00      	nop
 800bc48:	0800d404 	.word	0x0800d404
 800bc4c:	0800d424 	.word	0x0800d424
 800bc50:	0800d3e4 	.word	0x0800d3e4

0800bc54 <__swsetup_r>:
 800bc54:	4b32      	ldr	r3, [pc, #200]	; (800bd20 <__swsetup_r+0xcc>)
 800bc56:	b570      	push	{r4, r5, r6, lr}
 800bc58:	681d      	ldr	r5, [r3, #0]
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	b125      	cbz	r5, 800bc6a <__swsetup_r+0x16>
 800bc60:	69ab      	ldr	r3, [r5, #24]
 800bc62:	b913      	cbnz	r3, 800bc6a <__swsetup_r+0x16>
 800bc64:	4628      	mov	r0, r5
 800bc66:	f000 f97d 	bl	800bf64 <__sinit>
 800bc6a:	4b2e      	ldr	r3, [pc, #184]	; (800bd24 <__swsetup_r+0xd0>)
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	d10f      	bne.n	800bc90 <__swsetup_r+0x3c>
 800bc70:	686c      	ldr	r4, [r5, #4]
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc78:	0719      	lsls	r1, r3, #28
 800bc7a:	d42c      	bmi.n	800bcd6 <__swsetup_r+0x82>
 800bc7c:	06dd      	lsls	r5, r3, #27
 800bc7e:	d411      	bmi.n	800bca4 <__swsetup_r+0x50>
 800bc80:	2309      	movs	r3, #9
 800bc82:	6033      	str	r3, [r6, #0]
 800bc84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8e:	e03e      	b.n	800bd0e <__swsetup_r+0xba>
 800bc90:	4b25      	ldr	r3, [pc, #148]	; (800bd28 <__swsetup_r+0xd4>)
 800bc92:	429c      	cmp	r4, r3
 800bc94:	d101      	bne.n	800bc9a <__swsetup_r+0x46>
 800bc96:	68ac      	ldr	r4, [r5, #8]
 800bc98:	e7eb      	b.n	800bc72 <__swsetup_r+0x1e>
 800bc9a:	4b24      	ldr	r3, [pc, #144]	; (800bd2c <__swsetup_r+0xd8>)
 800bc9c:	429c      	cmp	r4, r3
 800bc9e:	bf08      	it	eq
 800bca0:	68ec      	ldreq	r4, [r5, #12]
 800bca2:	e7e6      	b.n	800bc72 <__swsetup_r+0x1e>
 800bca4:	0758      	lsls	r0, r3, #29
 800bca6:	d512      	bpl.n	800bcce <__swsetup_r+0x7a>
 800bca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcaa:	b141      	cbz	r1, 800bcbe <__swsetup_r+0x6a>
 800bcac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb0:	4299      	cmp	r1, r3
 800bcb2:	d002      	beq.n	800bcba <__swsetup_r+0x66>
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f000 fa5b 	bl	800c170 <_free_r>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	6363      	str	r3, [r4, #52]	; 0x34
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	6923      	ldr	r3, [r4, #16]
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	f043 0308 	orr.w	r3, r3, #8
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	b94b      	cbnz	r3, 800bcee <__swsetup_r+0x9a>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce4:	d003      	beq.n	800bcee <__swsetup_r+0x9a>
 800bce6:	4621      	mov	r1, r4
 800bce8:	4630      	mov	r0, r6
 800bcea:	f000 fa01 	bl	800c0f0 <__smakebuf_r>
 800bcee:	89a0      	ldrh	r0, [r4, #12]
 800bcf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcf4:	f010 0301 	ands.w	r3, r0, #1
 800bcf8:	d00a      	beq.n	800bd10 <__swsetup_r+0xbc>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60a3      	str	r3, [r4, #8]
 800bcfe:	6963      	ldr	r3, [r4, #20]
 800bd00:	425b      	negs	r3, r3
 800bd02:	61a3      	str	r3, [r4, #24]
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	b943      	cbnz	r3, 800bd1a <__swsetup_r+0xc6>
 800bd08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd0c:	d1ba      	bne.n	800bc84 <__swsetup_r+0x30>
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	0781      	lsls	r1, r0, #30
 800bd12:	bf58      	it	pl
 800bd14:	6963      	ldrpl	r3, [r4, #20]
 800bd16:	60a3      	str	r3, [r4, #8]
 800bd18:	e7f4      	b.n	800bd04 <__swsetup_r+0xb0>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7f7      	b.n	800bd0e <__swsetup_r+0xba>
 800bd1e:	bf00      	nop
 800bd20:	20000020 	.word	0x20000020
 800bd24:	0800d404 	.word	0x0800d404
 800bd28:	0800d424 	.word	0x0800d424
 800bd2c:	0800d3e4 	.word	0x0800d3e4

0800bd30 <__sflush_r>:
 800bd30:	898a      	ldrh	r2, [r1, #12]
 800bd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd36:	4605      	mov	r5, r0
 800bd38:	0710      	lsls	r0, r2, #28
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	d458      	bmi.n	800bdf0 <__sflush_r+0xc0>
 800bd3e:	684b      	ldr	r3, [r1, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dc05      	bgt.n	800bd50 <__sflush_r+0x20>
 800bd44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dc02      	bgt.n	800bd50 <__sflush_r+0x20>
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd52:	2e00      	cmp	r6, #0
 800bd54:	d0f9      	beq.n	800bd4a <__sflush_r+0x1a>
 800bd56:	2300      	movs	r3, #0
 800bd58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd5c:	682f      	ldr	r7, [r5, #0]
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	d032      	beq.n	800bdc8 <__sflush_r+0x98>
 800bd62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	075a      	lsls	r2, r3, #29
 800bd68:	d505      	bpl.n	800bd76 <__sflush_r+0x46>
 800bd6a:	6863      	ldr	r3, [r4, #4]
 800bd6c:	1ac0      	subs	r0, r0, r3
 800bd6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd70:	b10b      	cbz	r3, 800bd76 <__sflush_r+0x46>
 800bd72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd74:	1ac0      	subs	r0, r0, r3
 800bd76:	2300      	movs	r3, #0
 800bd78:	4602      	mov	r2, r0
 800bd7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd7c:	6a21      	ldr	r1, [r4, #32]
 800bd7e:	4628      	mov	r0, r5
 800bd80:	47b0      	blx	r6
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	d106      	bne.n	800bd96 <__sflush_r+0x66>
 800bd88:	6829      	ldr	r1, [r5, #0]
 800bd8a:	291d      	cmp	r1, #29
 800bd8c:	d82c      	bhi.n	800bde8 <__sflush_r+0xb8>
 800bd8e:	4a2a      	ldr	r2, [pc, #168]	; (800be38 <__sflush_r+0x108>)
 800bd90:	40ca      	lsrs	r2, r1
 800bd92:	07d6      	lsls	r6, r2, #31
 800bd94:	d528      	bpl.n	800bde8 <__sflush_r+0xb8>
 800bd96:	2200      	movs	r2, #0
 800bd98:	6062      	str	r2, [r4, #4]
 800bd9a:	04d9      	lsls	r1, r3, #19
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	d504      	bpl.n	800bdac <__sflush_r+0x7c>
 800bda2:	1c42      	adds	r2, r0, #1
 800bda4:	d101      	bne.n	800bdaa <__sflush_r+0x7a>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b903      	cbnz	r3, 800bdac <__sflush_r+0x7c>
 800bdaa:	6560      	str	r0, [r4, #84]	; 0x54
 800bdac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdae:	602f      	str	r7, [r5, #0]
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	d0ca      	beq.n	800bd4a <__sflush_r+0x1a>
 800bdb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	d002      	beq.n	800bdc2 <__sflush_r+0x92>
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f000 f9d7 	bl	800c170 <_free_r>
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	6360      	str	r0, [r4, #52]	; 0x34
 800bdc6:	e7c1      	b.n	800bd4c <__sflush_r+0x1c>
 800bdc8:	6a21      	ldr	r1, [r4, #32]
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b0      	blx	r6
 800bdd0:	1c41      	adds	r1, r0, #1
 800bdd2:	d1c7      	bne.n	800bd64 <__sflush_r+0x34>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0c4      	beq.n	800bd64 <__sflush_r+0x34>
 800bdda:	2b1d      	cmp	r3, #29
 800bddc:	d001      	beq.n	800bde2 <__sflush_r+0xb2>
 800bdde:	2b16      	cmp	r3, #22
 800bde0:	d101      	bne.n	800bde6 <__sflush_r+0xb6>
 800bde2:	602f      	str	r7, [r5, #0]
 800bde4:	e7b1      	b.n	800bd4a <__sflush_r+0x1a>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	e7ad      	b.n	800bd4c <__sflush_r+0x1c>
 800bdf0:	690f      	ldr	r7, [r1, #16]
 800bdf2:	2f00      	cmp	r7, #0
 800bdf4:	d0a9      	beq.n	800bd4a <__sflush_r+0x1a>
 800bdf6:	0793      	lsls	r3, r2, #30
 800bdf8:	680e      	ldr	r6, [r1, #0]
 800bdfa:	bf08      	it	eq
 800bdfc:	694b      	ldreq	r3, [r1, #20]
 800bdfe:	600f      	str	r7, [r1, #0]
 800be00:	bf18      	it	ne
 800be02:	2300      	movne	r3, #0
 800be04:	eba6 0807 	sub.w	r8, r6, r7
 800be08:	608b      	str	r3, [r1, #8]
 800be0a:	f1b8 0f00 	cmp.w	r8, #0
 800be0e:	dd9c      	ble.n	800bd4a <__sflush_r+0x1a>
 800be10:	6a21      	ldr	r1, [r4, #32]
 800be12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be14:	4643      	mov	r3, r8
 800be16:	463a      	mov	r2, r7
 800be18:	4628      	mov	r0, r5
 800be1a:	47b0      	blx	r6
 800be1c:	2800      	cmp	r0, #0
 800be1e:	dc06      	bgt.n	800be2e <__sflush_r+0xfe>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be26:	81a3      	strh	r3, [r4, #12]
 800be28:	f04f 30ff 	mov.w	r0, #4294967295
 800be2c:	e78e      	b.n	800bd4c <__sflush_r+0x1c>
 800be2e:	4407      	add	r7, r0
 800be30:	eba8 0800 	sub.w	r8, r8, r0
 800be34:	e7e9      	b.n	800be0a <__sflush_r+0xda>
 800be36:	bf00      	nop
 800be38:	20400001 	.word	0x20400001

0800be3c <_fflush_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	690b      	ldr	r3, [r1, #16]
 800be40:	4605      	mov	r5, r0
 800be42:	460c      	mov	r4, r1
 800be44:	b913      	cbnz	r3, 800be4c <_fflush_r+0x10>
 800be46:	2500      	movs	r5, #0
 800be48:	4628      	mov	r0, r5
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	b118      	cbz	r0, 800be56 <_fflush_r+0x1a>
 800be4e:	6983      	ldr	r3, [r0, #24]
 800be50:	b90b      	cbnz	r3, 800be56 <_fflush_r+0x1a>
 800be52:	f000 f887 	bl	800bf64 <__sinit>
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <_fflush_r+0x6c>)
 800be58:	429c      	cmp	r4, r3
 800be5a:	d11b      	bne.n	800be94 <_fflush_r+0x58>
 800be5c:	686c      	ldr	r4, [r5, #4]
 800be5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0ef      	beq.n	800be46 <_fflush_r+0xa>
 800be66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be68:	07d0      	lsls	r0, r2, #31
 800be6a:	d404      	bmi.n	800be76 <_fflush_r+0x3a>
 800be6c:	0599      	lsls	r1, r3, #22
 800be6e:	d402      	bmi.n	800be76 <_fflush_r+0x3a>
 800be70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be72:	f000 f915 	bl	800c0a0 <__retarget_lock_acquire_recursive>
 800be76:	4628      	mov	r0, r5
 800be78:	4621      	mov	r1, r4
 800be7a:	f7ff ff59 	bl	800bd30 <__sflush_r>
 800be7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be80:	07da      	lsls	r2, r3, #31
 800be82:	4605      	mov	r5, r0
 800be84:	d4e0      	bmi.n	800be48 <_fflush_r+0xc>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	059b      	lsls	r3, r3, #22
 800be8a:	d4dd      	bmi.n	800be48 <_fflush_r+0xc>
 800be8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8e:	f000 f908 	bl	800c0a2 <__retarget_lock_release_recursive>
 800be92:	e7d9      	b.n	800be48 <_fflush_r+0xc>
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <_fflush_r+0x70>)
 800be96:	429c      	cmp	r4, r3
 800be98:	d101      	bne.n	800be9e <_fflush_r+0x62>
 800be9a:	68ac      	ldr	r4, [r5, #8]
 800be9c:	e7df      	b.n	800be5e <_fflush_r+0x22>
 800be9e:	4b04      	ldr	r3, [pc, #16]	; (800beb0 <_fflush_r+0x74>)
 800bea0:	429c      	cmp	r4, r3
 800bea2:	bf08      	it	eq
 800bea4:	68ec      	ldreq	r4, [r5, #12]
 800bea6:	e7da      	b.n	800be5e <_fflush_r+0x22>
 800bea8:	0800d404 	.word	0x0800d404
 800beac:	0800d424 	.word	0x0800d424
 800beb0:	0800d3e4 	.word	0x0800d3e4

0800beb4 <std>:
 800beb4:	2300      	movs	r3, #0
 800beb6:	b510      	push	{r4, lr}
 800beb8:	4604      	mov	r4, r0
 800beba:	e9c0 3300 	strd	r3, r3, [r0]
 800bebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bec2:	6083      	str	r3, [r0, #8]
 800bec4:	8181      	strh	r1, [r0, #12]
 800bec6:	6643      	str	r3, [r0, #100]	; 0x64
 800bec8:	81c2      	strh	r2, [r0, #14]
 800beca:	6183      	str	r3, [r0, #24]
 800becc:	4619      	mov	r1, r3
 800bece:	2208      	movs	r2, #8
 800bed0:	305c      	adds	r0, #92	; 0x5c
 800bed2:	f7ff fda3 	bl	800ba1c <memset>
 800bed6:	4b05      	ldr	r3, [pc, #20]	; (800beec <std+0x38>)
 800bed8:	6263      	str	r3, [r4, #36]	; 0x24
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <std+0x3c>)
 800bedc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bede:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <std+0x40>)
 800bee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <std+0x44>)
 800bee4:	6224      	str	r4, [r4, #32]
 800bee6:	6323      	str	r3, [r4, #48]	; 0x30
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	bf00      	nop
 800beec:	0800cbe5 	.word	0x0800cbe5
 800bef0:	0800cc07 	.word	0x0800cc07
 800bef4:	0800cc3f 	.word	0x0800cc3f
 800bef8:	0800cc63 	.word	0x0800cc63

0800befc <_cleanup_r>:
 800befc:	4901      	ldr	r1, [pc, #4]	; (800bf04 <_cleanup_r+0x8>)
 800befe:	f000 b8af 	b.w	800c060 <_fwalk_reent>
 800bf02:	bf00      	nop
 800bf04:	0800be3d 	.word	0x0800be3d

0800bf08 <__sfmoreglue>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	2268      	movs	r2, #104	; 0x68
 800bf0c:	1e4d      	subs	r5, r1, #1
 800bf0e:	4355      	muls	r5, r2
 800bf10:	460e      	mov	r6, r1
 800bf12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf16:	f000 f997 	bl	800c248 <_malloc_r>
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	b140      	cbz	r0, 800bf30 <__sfmoreglue+0x28>
 800bf1e:	2100      	movs	r1, #0
 800bf20:	e9c0 1600 	strd	r1, r6, [r0]
 800bf24:	300c      	adds	r0, #12
 800bf26:	60a0      	str	r0, [r4, #8]
 800bf28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf2c:	f7ff fd76 	bl	800ba1c <memset>
 800bf30:	4620      	mov	r0, r4
 800bf32:	bd70      	pop	{r4, r5, r6, pc}

0800bf34 <__sfp_lock_acquire>:
 800bf34:	4801      	ldr	r0, [pc, #4]	; (800bf3c <__sfp_lock_acquire+0x8>)
 800bf36:	f000 b8b3 	b.w	800c0a0 <__retarget_lock_acquire_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	200027f5 	.word	0x200027f5

0800bf40 <__sfp_lock_release>:
 800bf40:	4801      	ldr	r0, [pc, #4]	; (800bf48 <__sfp_lock_release+0x8>)
 800bf42:	f000 b8ae 	b.w	800c0a2 <__retarget_lock_release_recursive>
 800bf46:	bf00      	nop
 800bf48:	200027f5 	.word	0x200027f5

0800bf4c <__sinit_lock_acquire>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__sinit_lock_acquire+0x8>)
 800bf4e:	f000 b8a7 	b.w	800c0a0 <__retarget_lock_acquire_recursive>
 800bf52:	bf00      	nop
 800bf54:	200027f6 	.word	0x200027f6

0800bf58 <__sinit_lock_release>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sinit_lock_release+0x8>)
 800bf5a:	f000 b8a2 	b.w	800c0a2 <__retarget_lock_release_recursive>
 800bf5e:	bf00      	nop
 800bf60:	200027f6 	.word	0x200027f6

0800bf64 <__sinit>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	4604      	mov	r4, r0
 800bf68:	f7ff fff0 	bl	800bf4c <__sinit_lock_acquire>
 800bf6c:	69a3      	ldr	r3, [r4, #24]
 800bf6e:	b11b      	cbz	r3, 800bf78 <__sinit+0x14>
 800bf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf74:	f7ff bff0 	b.w	800bf58 <__sinit_lock_release>
 800bf78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf7c:	6523      	str	r3, [r4, #80]	; 0x50
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <__sinit+0x68>)
 800bf80:	4a13      	ldr	r2, [pc, #76]	; (800bfd0 <__sinit+0x6c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf86:	42a3      	cmp	r3, r4
 800bf88:	bf04      	itt	eq
 800bf8a:	2301      	moveq	r3, #1
 800bf8c:	61a3      	streq	r3, [r4, #24]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f000 f820 	bl	800bfd4 <__sfp>
 800bf94:	6060      	str	r0, [r4, #4]
 800bf96:	4620      	mov	r0, r4
 800bf98:	f000 f81c 	bl	800bfd4 <__sfp>
 800bf9c:	60a0      	str	r0, [r4, #8]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 f818 	bl	800bfd4 <__sfp>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	60e0      	str	r0, [r4, #12]
 800bfa8:	2104      	movs	r1, #4
 800bfaa:	6860      	ldr	r0, [r4, #4]
 800bfac:	f7ff ff82 	bl	800beb4 <std>
 800bfb0:	68a0      	ldr	r0, [r4, #8]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	2109      	movs	r1, #9
 800bfb6:	f7ff ff7d 	bl	800beb4 <std>
 800bfba:	68e0      	ldr	r0, [r4, #12]
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	2112      	movs	r1, #18
 800bfc0:	f7ff ff78 	bl	800beb4 <std>
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	61a3      	str	r3, [r4, #24]
 800bfc8:	e7d2      	b.n	800bf70 <__sinit+0xc>
 800bfca:	bf00      	nop
 800bfcc:	0800d3e0 	.word	0x0800d3e0
 800bfd0:	0800befd 	.word	0x0800befd

0800bfd4 <__sfp>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	4607      	mov	r7, r0
 800bfd8:	f7ff ffac 	bl	800bf34 <__sfp_lock_acquire>
 800bfdc:	4b1e      	ldr	r3, [pc, #120]	; (800c058 <__sfp+0x84>)
 800bfde:	681e      	ldr	r6, [r3, #0]
 800bfe0:	69b3      	ldr	r3, [r6, #24]
 800bfe2:	b913      	cbnz	r3, 800bfea <__sfp+0x16>
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff ffbd 	bl	800bf64 <__sinit>
 800bfea:	3648      	adds	r6, #72	; 0x48
 800bfec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	d503      	bpl.n	800bffc <__sfp+0x28>
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	b30b      	cbz	r3, 800c03c <__sfp+0x68>
 800bff8:	6836      	ldr	r6, [r6, #0]
 800bffa:	e7f7      	b.n	800bfec <__sfp+0x18>
 800bffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c000:	b9d5      	cbnz	r5, 800c038 <__sfp+0x64>
 800c002:	4b16      	ldr	r3, [pc, #88]	; (800c05c <__sfp+0x88>)
 800c004:	60e3      	str	r3, [r4, #12]
 800c006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c00a:	6665      	str	r5, [r4, #100]	; 0x64
 800c00c:	f000 f847 	bl	800c09e <__retarget_lock_init_recursive>
 800c010:	f7ff ff96 	bl	800bf40 <__sfp_lock_release>
 800c014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c01c:	6025      	str	r5, [r4, #0]
 800c01e:	61a5      	str	r5, [r4, #24]
 800c020:	2208      	movs	r2, #8
 800c022:	4629      	mov	r1, r5
 800c024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c028:	f7ff fcf8 	bl	800ba1c <memset>
 800c02c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c034:	4620      	mov	r0, r4
 800c036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c038:	3468      	adds	r4, #104	; 0x68
 800c03a:	e7d9      	b.n	800bff0 <__sfp+0x1c>
 800c03c:	2104      	movs	r1, #4
 800c03e:	4638      	mov	r0, r7
 800c040:	f7ff ff62 	bl	800bf08 <__sfmoreglue>
 800c044:	4604      	mov	r4, r0
 800c046:	6030      	str	r0, [r6, #0]
 800c048:	2800      	cmp	r0, #0
 800c04a:	d1d5      	bne.n	800bff8 <__sfp+0x24>
 800c04c:	f7ff ff78 	bl	800bf40 <__sfp_lock_release>
 800c050:	230c      	movs	r3, #12
 800c052:	603b      	str	r3, [r7, #0]
 800c054:	e7ee      	b.n	800c034 <__sfp+0x60>
 800c056:	bf00      	nop
 800c058:	0800d3e0 	.word	0x0800d3e0
 800c05c:	ffff0001 	.word	0xffff0001

0800c060 <_fwalk_reent>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	4606      	mov	r6, r0
 800c066:	4688      	mov	r8, r1
 800c068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c06c:	2700      	movs	r7, #0
 800c06e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c072:	f1b9 0901 	subs.w	r9, r9, #1
 800c076:	d505      	bpl.n	800c084 <_fwalk_reent+0x24>
 800c078:	6824      	ldr	r4, [r4, #0]
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	d1f7      	bne.n	800c06e <_fwalk_reent+0xe>
 800c07e:	4638      	mov	r0, r7
 800c080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c084:	89ab      	ldrh	r3, [r5, #12]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d907      	bls.n	800c09a <_fwalk_reent+0x3a>
 800c08a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c08e:	3301      	adds	r3, #1
 800c090:	d003      	beq.n	800c09a <_fwalk_reent+0x3a>
 800c092:	4629      	mov	r1, r5
 800c094:	4630      	mov	r0, r6
 800c096:	47c0      	blx	r8
 800c098:	4307      	orrs	r7, r0
 800c09a:	3568      	adds	r5, #104	; 0x68
 800c09c:	e7e9      	b.n	800c072 <_fwalk_reent+0x12>

0800c09e <__retarget_lock_init_recursive>:
 800c09e:	4770      	bx	lr

0800c0a0 <__retarget_lock_acquire_recursive>:
 800c0a0:	4770      	bx	lr

0800c0a2 <__retarget_lock_release_recursive>:
 800c0a2:	4770      	bx	lr

0800c0a4 <__swhatbuf_r>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	460e      	mov	r6, r1
 800c0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	b096      	sub	sp, #88	; 0x58
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	461d      	mov	r5, r3
 800c0b4:	da08      	bge.n	800c0c8 <__swhatbuf_r+0x24>
 800c0b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	602a      	str	r2, [r5, #0]
 800c0be:	061a      	lsls	r2, r3, #24
 800c0c0:	d410      	bmi.n	800c0e4 <__swhatbuf_r+0x40>
 800c0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c6:	e00e      	b.n	800c0e6 <__swhatbuf_r+0x42>
 800c0c8:	466a      	mov	r2, sp
 800c0ca:	f000 fdf1 	bl	800ccb0 <_fstat_r>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	dbf1      	blt.n	800c0b6 <__swhatbuf_r+0x12>
 800c0d2:	9a01      	ldr	r2, [sp, #4]
 800c0d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0dc:	425a      	negs	r2, r3
 800c0de:	415a      	adcs	r2, r3
 800c0e0:	602a      	str	r2, [r5, #0]
 800c0e2:	e7ee      	b.n	800c0c2 <__swhatbuf_r+0x1e>
 800c0e4:	2340      	movs	r3, #64	; 0x40
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	b016      	add	sp, #88	; 0x58
 800c0ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0f0 <__smakebuf_r>:
 800c0f0:	898b      	ldrh	r3, [r1, #12]
 800c0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0f4:	079d      	lsls	r5, r3, #30
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	d507      	bpl.n	800c10c <__smakebuf_r+0x1c>
 800c0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	6123      	str	r3, [r4, #16]
 800c104:	2301      	movs	r3, #1
 800c106:	6163      	str	r3, [r4, #20]
 800c108:	b002      	add	sp, #8
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	ab01      	add	r3, sp, #4
 800c10e:	466a      	mov	r2, sp
 800c110:	f7ff ffc8 	bl	800c0a4 <__swhatbuf_r>
 800c114:	9900      	ldr	r1, [sp, #0]
 800c116:	4605      	mov	r5, r0
 800c118:	4630      	mov	r0, r6
 800c11a:	f000 f895 	bl	800c248 <_malloc_r>
 800c11e:	b948      	cbnz	r0, 800c134 <__smakebuf_r+0x44>
 800c120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c124:	059a      	lsls	r2, r3, #22
 800c126:	d4ef      	bmi.n	800c108 <__smakebuf_r+0x18>
 800c128:	f023 0303 	bic.w	r3, r3, #3
 800c12c:	f043 0302 	orr.w	r3, r3, #2
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	e7e3      	b.n	800c0fc <__smakebuf_r+0xc>
 800c134:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <__smakebuf_r+0x7c>)
 800c136:	62b3      	str	r3, [r6, #40]	; 0x28
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	6020      	str	r0, [r4, #0]
 800c13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	9b00      	ldr	r3, [sp, #0]
 800c144:	6163      	str	r3, [r4, #20]
 800c146:	9b01      	ldr	r3, [sp, #4]
 800c148:	6120      	str	r0, [r4, #16]
 800c14a:	b15b      	cbz	r3, 800c164 <__smakebuf_r+0x74>
 800c14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c150:	4630      	mov	r0, r6
 800c152:	f000 fdbf 	bl	800ccd4 <_isatty_r>
 800c156:	b128      	cbz	r0, 800c164 <__smakebuf_r+0x74>
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	f023 0303 	bic.w	r3, r3, #3
 800c15e:	f043 0301 	orr.w	r3, r3, #1
 800c162:	81a3      	strh	r3, [r4, #12]
 800c164:	89a0      	ldrh	r0, [r4, #12]
 800c166:	4305      	orrs	r5, r0
 800c168:	81a5      	strh	r5, [r4, #12]
 800c16a:	e7cd      	b.n	800c108 <__smakebuf_r+0x18>
 800c16c:	0800befd 	.word	0x0800befd

0800c170 <_free_r>:
 800c170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c172:	2900      	cmp	r1, #0
 800c174:	d044      	beq.n	800c200 <_free_r+0x90>
 800c176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17a:	9001      	str	r0, [sp, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f1a1 0404 	sub.w	r4, r1, #4
 800c182:	bfb8      	it	lt
 800c184:	18e4      	addlt	r4, r4, r3
 800c186:	f000 fde1 	bl	800cd4c <__malloc_lock>
 800c18a:	4a1e      	ldr	r2, [pc, #120]	; (800c204 <_free_r+0x94>)
 800c18c:	9801      	ldr	r0, [sp, #4]
 800c18e:	6813      	ldr	r3, [r2, #0]
 800c190:	b933      	cbnz	r3, 800c1a0 <_free_r+0x30>
 800c192:	6063      	str	r3, [r4, #4]
 800c194:	6014      	str	r4, [r2, #0]
 800c196:	b003      	add	sp, #12
 800c198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c19c:	f000 bddc 	b.w	800cd58 <__malloc_unlock>
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	d908      	bls.n	800c1b6 <_free_r+0x46>
 800c1a4:	6825      	ldr	r5, [r4, #0]
 800c1a6:	1961      	adds	r1, r4, r5
 800c1a8:	428b      	cmp	r3, r1
 800c1aa:	bf01      	itttt	eq
 800c1ac:	6819      	ldreq	r1, [r3, #0]
 800c1ae:	685b      	ldreq	r3, [r3, #4]
 800c1b0:	1949      	addeq	r1, r1, r5
 800c1b2:	6021      	streq	r1, [r4, #0]
 800c1b4:	e7ed      	b.n	800c192 <_free_r+0x22>
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	b10b      	cbz	r3, 800c1c0 <_free_r+0x50>
 800c1bc:	42a3      	cmp	r3, r4
 800c1be:	d9fa      	bls.n	800c1b6 <_free_r+0x46>
 800c1c0:	6811      	ldr	r1, [r2, #0]
 800c1c2:	1855      	adds	r5, r2, r1
 800c1c4:	42a5      	cmp	r5, r4
 800c1c6:	d10b      	bne.n	800c1e0 <_free_r+0x70>
 800c1c8:	6824      	ldr	r4, [r4, #0]
 800c1ca:	4421      	add	r1, r4
 800c1cc:	1854      	adds	r4, r2, r1
 800c1ce:	42a3      	cmp	r3, r4
 800c1d0:	6011      	str	r1, [r2, #0]
 800c1d2:	d1e0      	bne.n	800c196 <_free_r+0x26>
 800c1d4:	681c      	ldr	r4, [r3, #0]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	6053      	str	r3, [r2, #4]
 800c1da:	4421      	add	r1, r4
 800c1dc:	6011      	str	r1, [r2, #0]
 800c1de:	e7da      	b.n	800c196 <_free_r+0x26>
 800c1e0:	d902      	bls.n	800c1e8 <_free_r+0x78>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	6003      	str	r3, [r0, #0]
 800c1e6:	e7d6      	b.n	800c196 <_free_r+0x26>
 800c1e8:	6825      	ldr	r5, [r4, #0]
 800c1ea:	1961      	adds	r1, r4, r5
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	bf04      	itt	eq
 800c1f0:	6819      	ldreq	r1, [r3, #0]
 800c1f2:	685b      	ldreq	r3, [r3, #4]
 800c1f4:	6063      	str	r3, [r4, #4]
 800c1f6:	bf04      	itt	eq
 800c1f8:	1949      	addeq	r1, r1, r5
 800c1fa:	6021      	streq	r1, [r4, #0]
 800c1fc:	6054      	str	r4, [r2, #4]
 800c1fe:	e7ca      	b.n	800c196 <_free_r+0x26>
 800c200:	b003      	add	sp, #12
 800c202:	bd30      	pop	{r4, r5, pc}
 800c204:	200027f8 	.word	0x200027f8

0800c208 <sbrk_aligned>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4e0e      	ldr	r6, [pc, #56]	; (800c244 <sbrk_aligned+0x3c>)
 800c20c:	460c      	mov	r4, r1
 800c20e:	6831      	ldr	r1, [r6, #0]
 800c210:	4605      	mov	r5, r0
 800c212:	b911      	cbnz	r1, 800c21a <sbrk_aligned+0x12>
 800c214:	f000 fcd6 	bl	800cbc4 <_sbrk_r>
 800c218:	6030      	str	r0, [r6, #0]
 800c21a:	4621      	mov	r1, r4
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 fcd1 	bl	800cbc4 <_sbrk_r>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	d00a      	beq.n	800c23c <sbrk_aligned+0x34>
 800c226:	1cc4      	adds	r4, r0, #3
 800c228:	f024 0403 	bic.w	r4, r4, #3
 800c22c:	42a0      	cmp	r0, r4
 800c22e:	d007      	beq.n	800c240 <sbrk_aligned+0x38>
 800c230:	1a21      	subs	r1, r4, r0
 800c232:	4628      	mov	r0, r5
 800c234:	f000 fcc6 	bl	800cbc4 <_sbrk_r>
 800c238:	3001      	adds	r0, #1
 800c23a:	d101      	bne.n	800c240 <sbrk_aligned+0x38>
 800c23c:	f04f 34ff 	mov.w	r4, #4294967295
 800c240:	4620      	mov	r0, r4
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	200027fc 	.word	0x200027fc

0800c248 <_malloc_r>:
 800c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24c:	1ccd      	adds	r5, r1, #3
 800c24e:	f025 0503 	bic.w	r5, r5, #3
 800c252:	3508      	adds	r5, #8
 800c254:	2d0c      	cmp	r5, #12
 800c256:	bf38      	it	cc
 800c258:	250c      	movcc	r5, #12
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	4607      	mov	r7, r0
 800c25e:	db01      	blt.n	800c264 <_malloc_r+0x1c>
 800c260:	42a9      	cmp	r1, r5
 800c262:	d905      	bls.n	800c270 <_malloc_r+0x28>
 800c264:	230c      	movs	r3, #12
 800c266:	603b      	str	r3, [r7, #0]
 800c268:	2600      	movs	r6, #0
 800c26a:	4630      	mov	r0, r6
 800c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c270:	4e2e      	ldr	r6, [pc, #184]	; (800c32c <_malloc_r+0xe4>)
 800c272:	f000 fd6b 	bl	800cd4c <__malloc_lock>
 800c276:	6833      	ldr	r3, [r6, #0]
 800c278:	461c      	mov	r4, r3
 800c27a:	bb34      	cbnz	r4, 800c2ca <_malloc_r+0x82>
 800c27c:	4629      	mov	r1, r5
 800c27e:	4638      	mov	r0, r7
 800c280:	f7ff ffc2 	bl	800c208 <sbrk_aligned>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	4604      	mov	r4, r0
 800c288:	d14d      	bne.n	800c326 <_malloc_r+0xde>
 800c28a:	6834      	ldr	r4, [r6, #0]
 800c28c:	4626      	mov	r6, r4
 800c28e:	2e00      	cmp	r6, #0
 800c290:	d140      	bne.n	800c314 <_malloc_r+0xcc>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	4631      	mov	r1, r6
 800c296:	4638      	mov	r0, r7
 800c298:	eb04 0803 	add.w	r8, r4, r3
 800c29c:	f000 fc92 	bl	800cbc4 <_sbrk_r>
 800c2a0:	4580      	cmp	r8, r0
 800c2a2:	d13a      	bne.n	800c31a <_malloc_r+0xd2>
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	3503      	adds	r5, #3
 800c2a8:	1a6d      	subs	r5, r5, r1
 800c2aa:	f025 0503 	bic.w	r5, r5, #3
 800c2ae:	3508      	adds	r5, #8
 800c2b0:	2d0c      	cmp	r5, #12
 800c2b2:	bf38      	it	cc
 800c2b4:	250c      	movcc	r5, #12
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ffa5 	bl	800c208 <sbrk_aligned>
 800c2be:	3001      	adds	r0, #1
 800c2c0:	d02b      	beq.n	800c31a <_malloc_r+0xd2>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	442b      	add	r3, r5
 800c2c6:	6023      	str	r3, [r4, #0]
 800c2c8:	e00e      	b.n	800c2e8 <_malloc_r+0xa0>
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	1b52      	subs	r2, r2, r5
 800c2ce:	d41e      	bmi.n	800c30e <_malloc_r+0xc6>
 800c2d0:	2a0b      	cmp	r2, #11
 800c2d2:	d916      	bls.n	800c302 <_malloc_r+0xba>
 800c2d4:	1961      	adds	r1, r4, r5
 800c2d6:	42a3      	cmp	r3, r4
 800c2d8:	6025      	str	r5, [r4, #0]
 800c2da:	bf18      	it	ne
 800c2dc:	6059      	strne	r1, [r3, #4]
 800c2de:	6863      	ldr	r3, [r4, #4]
 800c2e0:	bf08      	it	eq
 800c2e2:	6031      	streq	r1, [r6, #0]
 800c2e4:	5162      	str	r2, [r4, r5]
 800c2e6:	604b      	str	r3, [r1, #4]
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f104 060b 	add.w	r6, r4, #11
 800c2ee:	f000 fd33 	bl	800cd58 <__malloc_unlock>
 800c2f2:	f026 0607 	bic.w	r6, r6, #7
 800c2f6:	1d23      	adds	r3, r4, #4
 800c2f8:	1af2      	subs	r2, r6, r3
 800c2fa:	d0b6      	beq.n	800c26a <_malloc_r+0x22>
 800c2fc:	1b9b      	subs	r3, r3, r6
 800c2fe:	50a3      	str	r3, [r4, r2]
 800c300:	e7b3      	b.n	800c26a <_malloc_r+0x22>
 800c302:	6862      	ldr	r2, [r4, #4]
 800c304:	42a3      	cmp	r3, r4
 800c306:	bf0c      	ite	eq
 800c308:	6032      	streq	r2, [r6, #0]
 800c30a:	605a      	strne	r2, [r3, #4]
 800c30c:	e7ec      	b.n	800c2e8 <_malloc_r+0xa0>
 800c30e:	4623      	mov	r3, r4
 800c310:	6864      	ldr	r4, [r4, #4]
 800c312:	e7b2      	b.n	800c27a <_malloc_r+0x32>
 800c314:	4634      	mov	r4, r6
 800c316:	6876      	ldr	r6, [r6, #4]
 800c318:	e7b9      	b.n	800c28e <_malloc_r+0x46>
 800c31a:	230c      	movs	r3, #12
 800c31c:	603b      	str	r3, [r7, #0]
 800c31e:	4638      	mov	r0, r7
 800c320:	f000 fd1a 	bl	800cd58 <__malloc_unlock>
 800c324:	e7a1      	b.n	800c26a <_malloc_r+0x22>
 800c326:	6025      	str	r5, [r4, #0]
 800c328:	e7de      	b.n	800c2e8 <_malloc_r+0xa0>
 800c32a:	bf00      	nop
 800c32c:	200027f8 	.word	0x200027f8

0800c330 <__ssputs_r>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	688e      	ldr	r6, [r1, #8]
 800c336:	429e      	cmp	r6, r3
 800c338:	4682      	mov	sl, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	4690      	mov	r8, r2
 800c33e:	461f      	mov	r7, r3
 800c340:	d838      	bhi.n	800c3b4 <__ssputs_r+0x84>
 800c342:	898a      	ldrh	r2, [r1, #12]
 800c344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c348:	d032      	beq.n	800c3b0 <__ssputs_r+0x80>
 800c34a:	6825      	ldr	r5, [r4, #0]
 800c34c:	6909      	ldr	r1, [r1, #16]
 800c34e:	eba5 0901 	sub.w	r9, r5, r1
 800c352:	6965      	ldr	r5, [r4, #20]
 800c354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c35c:	3301      	adds	r3, #1
 800c35e:	444b      	add	r3, r9
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	429d      	cmp	r5, r3
 800c364:	bf38      	it	cc
 800c366:	461d      	movcc	r5, r3
 800c368:	0553      	lsls	r3, r2, #21
 800c36a:	d531      	bpl.n	800c3d0 <__ssputs_r+0xa0>
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7ff ff6b 	bl	800c248 <_malloc_r>
 800c372:	4606      	mov	r6, r0
 800c374:	b950      	cbnz	r0, 800c38c <__ssputs_r+0x5c>
 800c376:	230c      	movs	r3, #12
 800c378:	f8ca 3000 	str.w	r3, [sl]
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38c:	6921      	ldr	r1, [r4, #16]
 800c38e:	464a      	mov	r2, r9
 800c390:	f7ff fb36 	bl	800ba00 <memcpy>
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39e:	81a3      	strh	r3, [r4, #12]
 800c3a0:	6126      	str	r6, [r4, #16]
 800c3a2:	6165      	str	r5, [r4, #20]
 800c3a4:	444e      	add	r6, r9
 800c3a6:	eba5 0509 	sub.w	r5, r5, r9
 800c3aa:	6026      	str	r6, [r4, #0]
 800c3ac:	60a5      	str	r5, [r4, #8]
 800c3ae:	463e      	mov	r6, r7
 800c3b0:	42be      	cmp	r6, r7
 800c3b2:	d900      	bls.n	800c3b6 <__ssputs_r+0x86>
 800c3b4:	463e      	mov	r6, r7
 800c3b6:	6820      	ldr	r0, [r4, #0]
 800c3b8:	4632      	mov	r2, r6
 800c3ba:	4641      	mov	r1, r8
 800c3bc:	f000 fcac 	bl	800cd18 <memmove>
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	1b9b      	subs	r3, r3, r6
 800c3c4:	60a3      	str	r3, [r4, #8]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	4433      	add	r3, r6
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7db      	b.n	800c388 <__ssputs_r+0x58>
 800c3d0:	462a      	mov	r2, r5
 800c3d2:	f000 fcc7 	bl	800cd64 <_realloc_r>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d1e1      	bne.n	800c3a0 <__ssputs_r+0x70>
 800c3dc:	6921      	ldr	r1, [r4, #16]
 800c3de:	4650      	mov	r0, sl
 800c3e0:	f7ff fec6 	bl	800c170 <_free_r>
 800c3e4:	e7c7      	b.n	800c376 <__ssputs_r+0x46>
	...

0800c3e8 <_svfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4698      	mov	r8, r3
 800c3ee:	898b      	ldrh	r3, [r1, #12]
 800c3f0:	061b      	lsls	r3, r3, #24
 800c3f2:	b09d      	sub	sp, #116	; 0x74
 800c3f4:	4607      	mov	r7, r0
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	d50e      	bpl.n	800c41a <_svfiprintf_r+0x32>
 800c3fc:	690b      	ldr	r3, [r1, #16]
 800c3fe:	b963      	cbnz	r3, 800c41a <_svfiprintf_r+0x32>
 800c400:	2140      	movs	r1, #64	; 0x40
 800c402:	f7ff ff21 	bl	800c248 <_malloc_r>
 800c406:	6028      	str	r0, [r5, #0]
 800c408:	6128      	str	r0, [r5, #16]
 800c40a:	b920      	cbnz	r0, 800c416 <_svfiprintf_r+0x2e>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e0d1      	b.n	800c5ba <_svfiprintf_r+0x1d2>
 800c416:	2340      	movs	r3, #64	; 0x40
 800c418:	616b      	str	r3, [r5, #20]
 800c41a:	2300      	movs	r3, #0
 800c41c:	9309      	str	r3, [sp, #36]	; 0x24
 800c41e:	2320      	movs	r3, #32
 800c420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c424:	f8cd 800c 	str.w	r8, [sp, #12]
 800c428:	2330      	movs	r3, #48	; 0x30
 800c42a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5d4 <_svfiprintf_r+0x1ec>
 800c42e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c432:	f04f 0901 	mov.w	r9, #1
 800c436:	4623      	mov	r3, r4
 800c438:	469a      	mov	sl, r3
 800c43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43e:	b10a      	cbz	r2, 800c444 <_svfiprintf_r+0x5c>
 800c440:	2a25      	cmp	r2, #37	; 0x25
 800c442:	d1f9      	bne.n	800c438 <_svfiprintf_r+0x50>
 800c444:	ebba 0b04 	subs.w	fp, sl, r4
 800c448:	d00b      	beq.n	800c462 <_svfiprintf_r+0x7a>
 800c44a:	465b      	mov	r3, fp
 800c44c:	4622      	mov	r2, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff ff6d 	bl	800c330 <__ssputs_r>
 800c456:	3001      	adds	r0, #1
 800c458:	f000 80aa 	beq.w	800c5b0 <_svfiprintf_r+0x1c8>
 800c45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45e:	445a      	add	r2, fp
 800c460:	9209      	str	r2, [sp, #36]	; 0x24
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80a2 	beq.w	800c5b0 <_svfiprintf_r+0x1c8>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295
 800c472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c476:	f10a 0a01 	add.w	sl, sl, #1
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c482:	931a      	str	r3, [sp, #104]	; 0x68
 800c484:	4654      	mov	r4, sl
 800c486:	2205      	movs	r2, #5
 800c488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48c:	4851      	ldr	r0, [pc, #324]	; (800c5d4 <_svfiprintf_r+0x1ec>)
 800c48e:	f7f3 fea7 	bl	80001e0 <memchr>
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	b9d8      	cbnz	r0, 800c4ce <_svfiprintf_r+0xe6>
 800c496:	06d0      	lsls	r0, r2, #27
 800c498:	bf44      	itt	mi
 800c49a:	2320      	movmi	r3, #32
 800c49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a0:	0711      	lsls	r1, r2, #28
 800c4a2:	bf44      	itt	mi
 800c4a4:	232b      	movmi	r3, #43	; 0x2b
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b0:	d015      	beq.n	800c4de <_svfiprintf_r+0xf6>
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f04f 0c0a 	mov.w	ip, #10
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4c2:	3b30      	subs	r3, #48	; 0x30
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d94e      	bls.n	800c566 <_svfiprintf_r+0x17e>
 800c4c8:	b1b0      	cbz	r0, 800c4f8 <_svfiprintf_r+0x110>
 800c4ca:	9207      	str	r2, [sp, #28]
 800c4cc:	e014      	b.n	800c4f8 <_svfiprintf_r+0x110>
 800c4ce:	eba0 0308 	sub.w	r3, r0, r8
 800c4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	46a2      	mov	sl, r4
 800c4dc:	e7d2      	b.n	800c484 <_svfiprintf_r+0x9c>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	1d19      	adds	r1, r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	9103      	str	r1, [sp, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	425b      	neglt	r3, r3
 800c4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f0:	9307      	strge	r3, [sp, #28]
 800c4f2:	9307      	strlt	r3, [sp, #28]
 800c4f4:	bfb8      	it	lt
 800c4f6:	9204      	strlt	r2, [sp, #16]
 800c4f8:	7823      	ldrb	r3, [r4, #0]
 800c4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c4fc:	d10c      	bne.n	800c518 <_svfiprintf_r+0x130>
 800c4fe:	7863      	ldrb	r3, [r4, #1]
 800c500:	2b2a      	cmp	r3, #42	; 0x2a
 800c502:	d135      	bne.n	800c570 <_svfiprintf_r+0x188>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	9203      	str	r2, [sp, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bfb8      	it	lt
 800c510:	f04f 33ff 	movlt.w	r3, #4294967295
 800c514:	3402      	adds	r4, #2
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5e4 <_svfiprintf_r+0x1fc>
 800c51c:	7821      	ldrb	r1, [r4, #0]
 800c51e:	2203      	movs	r2, #3
 800c520:	4650      	mov	r0, sl
 800c522:	f7f3 fe5d 	bl	80001e0 <memchr>
 800c526:	b140      	cbz	r0, 800c53a <_svfiprintf_r+0x152>
 800c528:	2340      	movs	r3, #64	; 0x40
 800c52a:	eba0 000a 	sub.w	r0, r0, sl
 800c52e:	fa03 f000 	lsl.w	r0, r3, r0
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	4303      	orrs	r3, r0
 800c536:	3401      	adds	r4, #1
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53e:	4826      	ldr	r0, [pc, #152]	; (800c5d8 <_svfiprintf_r+0x1f0>)
 800c540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c544:	2206      	movs	r2, #6
 800c546:	f7f3 fe4b 	bl	80001e0 <memchr>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d038      	beq.n	800c5c0 <_svfiprintf_r+0x1d8>
 800c54e:	4b23      	ldr	r3, [pc, #140]	; (800c5dc <_svfiprintf_r+0x1f4>)
 800c550:	bb1b      	cbnz	r3, 800c59a <_svfiprintf_r+0x1b2>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	3307      	adds	r3, #7
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	3308      	adds	r3, #8
 800c55c:	9303      	str	r3, [sp, #12]
 800c55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c560:	4433      	add	r3, r6
 800c562:	9309      	str	r3, [sp, #36]	; 0x24
 800c564:	e767      	b.n	800c436 <_svfiprintf_r+0x4e>
 800c566:	fb0c 3202 	mla	r2, ip, r2, r3
 800c56a:	460c      	mov	r4, r1
 800c56c:	2001      	movs	r0, #1
 800c56e:	e7a5      	b.n	800c4bc <_svfiprintf_r+0xd4>
 800c570:	2300      	movs	r3, #0
 800c572:	3401      	adds	r4, #1
 800c574:	9305      	str	r3, [sp, #20]
 800c576:	4619      	mov	r1, r3
 800c578:	f04f 0c0a 	mov.w	ip, #10
 800c57c:	4620      	mov	r0, r4
 800c57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c582:	3a30      	subs	r2, #48	; 0x30
 800c584:	2a09      	cmp	r2, #9
 800c586:	d903      	bls.n	800c590 <_svfiprintf_r+0x1a8>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d0c5      	beq.n	800c518 <_svfiprintf_r+0x130>
 800c58c:	9105      	str	r1, [sp, #20]
 800c58e:	e7c3      	b.n	800c518 <_svfiprintf_r+0x130>
 800c590:	fb0c 2101 	mla	r1, ip, r1, r2
 800c594:	4604      	mov	r4, r0
 800c596:	2301      	movs	r3, #1
 800c598:	e7f0      	b.n	800c57c <_svfiprintf_r+0x194>
 800c59a:	ab03      	add	r3, sp, #12
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	462a      	mov	r2, r5
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <_svfiprintf_r+0x1f8>)
 800c5a2:	a904      	add	r1, sp, #16
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f3af 8000 	nop.w
 800c5aa:	1c42      	adds	r2, r0, #1
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	d1d6      	bne.n	800c55e <_svfiprintf_r+0x176>
 800c5b0:	89ab      	ldrh	r3, [r5, #12]
 800c5b2:	065b      	lsls	r3, r3, #25
 800c5b4:	f53f af2c 	bmi.w	800c410 <_svfiprintf_r+0x28>
 800c5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ba:	b01d      	add	sp, #116	; 0x74
 800c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c0:	ab03      	add	r3, sp, #12
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <_svfiprintf_r+0x1f8>)
 800c5c8:	a904      	add	r1, sp, #16
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	f000 f9d4 	bl	800c978 <_printf_i>
 800c5d0:	e7eb      	b.n	800c5aa <_svfiprintf_r+0x1c2>
 800c5d2:	bf00      	nop
 800c5d4:	0800d444 	.word	0x0800d444
 800c5d8:	0800d44e 	.word	0x0800d44e
 800c5dc:	00000000 	.word	0x00000000
 800c5e0:	0800c331 	.word	0x0800c331
 800c5e4:	0800d44a 	.word	0x0800d44a

0800c5e8 <__sfputc_r>:
 800c5e8:	6893      	ldr	r3, [r2, #8]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	b410      	push	{r4}
 800c5f0:	6093      	str	r3, [r2, #8]
 800c5f2:	da08      	bge.n	800c606 <__sfputc_r+0x1e>
 800c5f4:	6994      	ldr	r4, [r2, #24]
 800c5f6:	42a3      	cmp	r3, r4
 800c5f8:	db01      	blt.n	800c5fe <__sfputc_r+0x16>
 800c5fa:	290a      	cmp	r1, #10
 800c5fc:	d103      	bne.n	800c606 <__sfputc_r+0x1e>
 800c5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c602:	f7ff bad5 	b.w	800bbb0 <__swbuf_r>
 800c606:	6813      	ldr	r3, [r2, #0]
 800c608:	1c58      	adds	r0, r3, #1
 800c60a:	6010      	str	r0, [r2, #0]
 800c60c:	7019      	strb	r1, [r3, #0]
 800c60e:	4608      	mov	r0, r1
 800c610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <__sfputs_r>:
 800c616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	4614      	mov	r4, r2
 800c61e:	18d5      	adds	r5, r2, r3
 800c620:	42ac      	cmp	r4, r5
 800c622:	d101      	bne.n	800c628 <__sfputs_r+0x12>
 800c624:	2000      	movs	r0, #0
 800c626:	e007      	b.n	800c638 <__sfputs_r+0x22>
 800c628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c62c:	463a      	mov	r2, r7
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ffda 	bl	800c5e8 <__sfputc_r>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d1f3      	bne.n	800c620 <__sfputs_r+0xa>
 800c638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c63c <_vfiprintf_r>:
 800c63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	460d      	mov	r5, r1
 800c642:	b09d      	sub	sp, #116	; 0x74
 800c644:	4614      	mov	r4, r2
 800c646:	4698      	mov	r8, r3
 800c648:	4606      	mov	r6, r0
 800c64a:	b118      	cbz	r0, 800c654 <_vfiprintf_r+0x18>
 800c64c:	6983      	ldr	r3, [r0, #24]
 800c64e:	b90b      	cbnz	r3, 800c654 <_vfiprintf_r+0x18>
 800c650:	f7ff fc88 	bl	800bf64 <__sinit>
 800c654:	4b89      	ldr	r3, [pc, #548]	; (800c87c <_vfiprintf_r+0x240>)
 800c656:	429d      	cmp	r5, r3
 800c658:	d11b      	bne.n	800c692 <_vfiprintf_r+0x56>
 800c65a:	6875      	ldr	r5, [r6, #4]
 800c65c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c65e:	07d9      	lsls	r1, r3, #31
 800c660:	d405      	bmi.n	800c66e <_vfiprintf_r+0x32>
 800c662:	89ab      	ldrh	r3, [r5, #12]
 800c664:	059a      	lsls	r2, r3, #22
 800c666:	d402      	bmi.n	800c66e <_vfiprintf_r+0x32>
 800c668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c66a:	f7ff fd19 	bl	800c0a0 <__retarget_lock_acquire_recursive>
 800c66e:	89ab      	ldrh	r3, [r5, #12]
 800c670:	071b      	lsls	r3, r3, #28
 800c672:	d501      	bpl.n	800c678 <_vfiprintf_r+0x3c>
 800c674:	692b      	ldr	r3, [r5, #16]
 800c676:	b9eb      	cbnz	r3, 800c6b4 <_vfiprintf_r+0x78>
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff faea 	bl	800bc54 <__swsetup_r>
 800c680:	b1c0      	cbz	r0, 800c6b4 <_vfiprintf_r+0x78>
 800c682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c684:	07dc      	lsls	r4, r3, #31
 800c686:	d50e      	bpl.n	800c6a6 <_vfiprintf_r+0x6a>
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	b01d      	add	sp, #116	; 0x74
 800c68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c692:	4b7b      	ldr	r3, [pc, #492]	; (800c880 <_vfiprintf_r+0x244>)
 800c694:	429d      	cmp	r5, r3
 800c696:	d101      	bne.n	800c69c <_vfiprintf_r+0x60>
 800c698:	68b5      	ldr	r5, [r6, #8]
 800c69a:	e7df      	b.n	800c65c <_vfiprintf_r+0x20>
 800c69c:	4b79      	ldr	r3, [pc, #484]	; (800c884 <_vfiprintf_r+0x248>)
 800c69e:	429d      	cmp	r5, r3
 800c6a0:	bf08      	it	eq
 800c6a2:	68f5      	ldreq	r5, [r6, #12]
 800c6a4:	e7da      	b.n	800c65c <_vfiprintf_r+0x20>
 800c6a6:	89ab      	ldrh	r3, [r5, #12]
 800c6a8:	0598      	lsls	r0, r3, #22
 800c6aa:	d4ed      	bmi.n	800c688 <_vfiprintf_r+0x4c>
 800c6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ae:	f7ff fcf8 	bl	800c0a2 <__retarget_lock_release_recursive>
 800c6b2:	e7e9      	b.n	800c688 <_vfiprintf_r+0x4c>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b8:	2320      	movs	r3, #32
 800c6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c2:	2330      	movs	r3, #48	; 0x30
 800c6c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c888 <_vfiprintf_r+0x24c>
 800c6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6cc:	f04f 0901 	mov.w	r9, #1
 800c6d0:	4623      	mov	r3, r4
 800c6d2:	469a      	mov	sl, r3
 800c6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d8:	b10a      	cbz	r2, 800c6de <_vfiprintf_r+0xa2>
 800c6da:	2a25      	cmp	r2, #37	; 0x25
 800c6dc:	d1f9      	bne.n	800c6d2 <_vfiprintf_r+0x96>
 800c6de:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e2:	d00b      	beq.n	800c6fc <_vfiprintf_r+0xc0>
 800c6e4:	465b      	mov	r3, fp
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f7ff ff93 	bl	800c616 <__sfputs_r>
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	f000 80aa 	beq.w	800c84a <_vfiprintf_r+0x20e>
 800c6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f8:	445a      	add	r2, fp
 800c6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800c6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80a2 	beq.w	800c84a <_vfiprintf_r+0x20e>
 800c706:	2300      	movs	r3, #0
 800c708:	f04f 32ff 	mov.w	r2, #4294967295
 800c70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c710:	f10a 0a01 	add.w	sl, sl, #1
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71c:	931a      	str	r3, [sp, #104]	; 0x68
 800c71e:	4654      	mov	r4, sl
 800c720:	2205      	movs	r2, #5
 800c722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c726:	4858      	ldr	r0, [pc, #352]	; (800c888 <_vfiprintf_r+0x24c>)
 800c728:	f7f3 fd5a 	bl	80001e0 <memchr>
 800c72c:	9a04      	ldr	r2, [sp, #16]
 800c72e:	b9d8      	cbnz	r0, 800c768 <_vfiprintf_r+0x12c>
 800c730:	06d1      	lsls	r1, r2, #27
 800c732:	bf44      	itt	mi
 800c734:	2320      	movmi	r3, #32
 800c736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c73a:	0713      	lsls	r3, r2, #28
 800c73c:	bf44      	itt	mi
 800c73e:	232b      	movmi	r3, #43	; 0x2b
 800c740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c744:	f89a 3000 	ldrb.w	r3, [sl]
 800c748:	2b2a      	cmp	r3, #42	; 0x2a
 800c74a:	d015      	beq.n	800c778 <_vfiprintf_r+0x13c>
 800c74c:	9a07      	ldr	r2, [sp, #28]
 800c74e:	4654      	mov	r4, sl
 800c750:	2000      	movs	r0, #0
 800c752:	f04f 0c0a 	mov.w	ip, #10
 800c756:	4621      	mov	r1, r4
 800c758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75c:	3b30      	subs	r3, #48	; 0x30
 800c75e:	2b09      	cmp	r3, #9
 800c760:	d94e      	bls.n	800c800 <_vfiprintf_r+0x1c4>
 800c762:	b1b0      	cbz	r0, 800c792 <_vfiprintf_r+0x156>
 800c764:	9207      	str	r2, [sp, #28]
 800c766:	e014      	b.n	800c792 <_vfiprintf_r+0x156>
 800c768:	eba0 0308 	sub.w	r3, r0, r8
 800c76c:	fa09 f303 	lsl.w	r3, r9, r3
 800c770:	4313      	orrs	r3, r2
 800c772:	9304      	str	r3, [sp, #16]
 800c774:	46a2      	mov	sl, r4
 800c776:	e7d2      	b.n	800c71e <_vfiprintf_r+0xe2>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	1d19      	adds	r1, r3, #4
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	9103      	str	r1, [sp, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	bfbb      	ittet	lt
 800c784:	425b      	neglt	r3, r3
 800c786:	f042 0202 	orrlt.w	r2, r2, #2
 800c78a:	9307      	strge	r3, [sp, #28]
 800c78c:	9307      	strlt	r3, [sp, #28]
 800c78e:	bfb8      	it	lt
 800c790:	9204      	strlt	r2, [sp, #16]
 800c792:	7823      	ldrb	r3, [r4, #0]
 800c794:	2b2e      	cmp	r3, #46	; 0x2e
 800c796:	d10c      	bne.n	800c7b2 <_vfiprintf_r+0x176>
 800c798:	7863      	ldrb	r3, [r4, #1]
 800c79a:	2b2a      	cmp	r3, #42	; 0x2a
 800c79c:	d135      	bne.n	800c80a <_vfiprintf_r+0x1ce>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	1d1a      	adds	r2, r3, #4
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	9203      	str	r2, [sp, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bfb8      	it	lt
 800c7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ae:	3402      	adds	r4, #2
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c898 <_vfiprintf_r+0x25c>
 800c7b6:	7821      	ldrb	r1, [r4, #0]
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	f7f3 fd10 	bl	80001e0 <memchr>
 800c7c0:	b140      	cbz	r0, 800c7d4 <_vfiprintf_r+0x198>
 800c7c2:	2340      	movs	r3, #64	; 0x40
 800c7c4:	eba0 000a 	sub.w	r0, r0, sl
 800c7c8:	fa03 f000 	lsl.w	r0, r3, r0
 800c7cc:	9b04      	ldr	r3, [sp, #16]
 800c7ce:	4303      	orrs	r3, r0
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d8:	482c      	ldr	r0, [pc, #176]	; (800c88c <_vfiprintf_r+0x250>)
 800c7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7de:	2206      	movs	r2, #6
 800c7e0:	f7f3 fcfe 	bl	80001e0 <memchr>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d03f      	beq.n	800c868 <_vfiprintf_r+0x22c>
 800c7e8:	4b29      	ldr	r3, [pc, #164]	; (800c890 <_vfiprintf_r+0x254>)
 800c7ea:	bb1b      	cbnz	r3, 800c834 <_vfiprintf_r+0x1f8>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	3307      	adds	r3, #7
 800c7f0:	f023 0307 	bic.w	r3, r3, #7
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	9303      	str	r3, [sp, #12]
 800c7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fa:	443b      	add	r3, r7
 800c7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fe:	e767      	b.n	800c6d0 <_vfiprintf_r+0x94>
 800c800:	fb0c 3202 	mla	r2, ip, r2, r3
 800c804:	460c      	mov	r4, r1
 800c806:	2001      	movs	r0, #1
 800c808:	e7a5      	b.n	800c756 <_vfiprintf_r+0x11a>
 800c80a:	2300      	movs	r3, #0
 800c80c:	3401      	adds	r4, #1
 800c80e:	9305      	str	r3, [sp, #20]
 800c810:	4619      	mov	r1, r3
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	4620      	mov	r0, r4
 800c818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81c:	3a30      	subs	r2, #48	; 0x30
 800c81e:	2a09      	cmp	r2, #9
 800c820:	d903      	bls.n	800c82a <_vfiprintf_r+0x1ee>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0c5      	beq.n	800c7b2 <_vfiprintf_r+0x176>
 800c826:	9105      	str	r1, [sp, #20]
 800c828:	e7c3      	b.n	800c7b2 <_vfiprintf_r+0x176>
 800c82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82e:	4604      	mov	r4, r0
 800c830:	2301      	movs	r3, #1
 800c832:	e7f0      	b.n	800c816 <_vfiprintf_r+0x1da>
 800c834:	ab03      	add	r3, sp, #12
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	462a      	mov	r2, r5
 800c83a:	4b16      	ldr	r3, [pc, #88]	; (800c894 <_vfiprintf_r+0x258>)
 800c83c:	a904      	add	r1, sp, #16
 800c83e:	4630      	mov	r0, r6
 800c840:	f3af 8000 	nop.w
 800c844:	4607      	mov	r7, r0
 800c846:	1c78      	adds	r0, r7, #1
 800c848:	d1d6      	bne.n	800c7f8 <_vfiprintf_r+0x1bc>
 800c84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c84c:	07d9      	lsls	r1, r3, #31
 800c84e:	d405      	bmi.n	800c85c <_vfiprintf_r+0x220>
 800c850:	89ab      	ldrh	r3, [r5, #12]
 800c852:	059a      	lsls	r2, r3, #22
 800c854:	d402      	bmi.n	800c85c <_vfiprintf_r+0x220>
 800c856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c858:	f7ff fc23 	bl	800c0a2 <__retarget_lock_release_recursive>
 800c85c:	89ab      	ldrh	r3, [r5, #12]
 800c85e:	065b      	lsls	r3, r3, #25
 800c860:	f53f af12 	bmi.w	800c688 <_vfiprintf_r+0x4c>
 800c864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c866:	e711      	b.n	800c68c <_vfiprintf_r+0x50>
 800c868:	ab03      	add	r3, sp, #12
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	462a      	mov	r2, r5
 800c86e:	4b09      	ldr	r3, [pc, #36]	; (800c894 <_vfiprintf_r+0x258>)
 800c870:	a904      	add	r1, sp, #16
 800c872:	4630      	mov	r0, r6
 800c874:	f000 f880 	bl	800c978 <_printf_i>
 800c878:	e7e4      	b.n	800c844 <_vfiprintf_r+0x208>
 800c87a:	bf00      	nop
 800c87c:	0800d404 	.word	0x0800d404
 800c880:	0800d424 	.word	0x0800d424
 800c884:	0800d3e4 	.word	0x0800d3e4
 800c888:	0800d444 	.word	0x0800d444
 800c88c:	0800d44e 	.word	0x0800d44e
 800c890:	00000000 	.word	0x00000000
 800c894:	0800c617 	.word	0x0800c617
 800c898:	0800d44a 	.word	0x0800d44a

0800c89c <_printf_common>:
 800c89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	4699      	mov	r9, r3
 800c8a4:	688a      	ldr	r2, [r1, #8]
 800c8a6:	690b      	ldr	r3, [r1, #16]
 800c8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	bfb8      	it	lt
 800c8b0:	4613      	movlt	r3, r2
 800c8b2:	6033      	str	r3, [r6, #0]
 800c8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	b10a      	cbz	r2, 800c8c2 <_printf_common+0x26>
 800c8be:	3301      	adds	r3, #1
 800c8c0:	6033      	str	r3, [r6, #0]
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	0699      	lsls	r1, r3, #26
 800c8c6:	bf42      	ittt	mi
 800c8c8:	6833      	ldrmi	r3, [r6, #0]
 800c8ca:	3302      	addmi	r3, #2
 800c8cc:	6033      	strmi	r3, [r6, #0]
 800c8ce:	6825      	ldr	r5, [r4, #0]
 800c8d0:	f015 0506 	ands.w	r5, r5, #6
 800c8d4:	d106      	bne.n	800c8e4 <_printf_common+0x48>
 800c8d6:	f104 0a19 	add.w	sl, r4, #25
 800c8da:	68e3      	ldr	r3, [r4, #12]
 800c8dc:	6832      	ldr	r2, [r6, #0]
 800c8de:	1a9b      	subs	r3, r3, r2
 800c8e0:	42ab      	cmp	r3, r5
 800c8e2:	dc26      	bgt.n	800c932 <_printf_common+0x96>
 800c8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8e8:	1e13      	subs	r3, r2, #0
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	bf18      	it	ne
 800c8ee:	2301      	movne	r3, #1
 800c8f0:	0692      	lsls	r2, r2, #26
 800c8f2:	d42b      	bmi.n	800c94c <_printf_common+0xb0>
 800c8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	47c0      	blx	r8
 800c8fe:	3001      	adds	r0, #1
 800c900:	d01e      	beq.n	800c940 <_printf_common+0xa4>
 800c902:	6823      	ldr	r3, [r4, #0]
 800c904:	68e5      	ldr	r5, [r4, #12]
 800c906:	6832      	ldr	r2, [r6, #0]
 800c908:	f003 0306 	and.w	r3, r3, #6
 800c90c:	2b04      	cmp	r3, #4
 800c90e:	bf08      	it	eq
 800c910:	1aad      	subeq	r5, r5, r2
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	6922      	ldr	r2, [r4, #16]
 800c916:	bf0c      	ite	eq
 800c918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c91c:	2500      	movne	r5, #0
 800c91e:	4293      	cmp	r3, r2
 800c920:	bfc4      	itt	gt
 800c922:	1a9b      	subgt	r3, r3, r2
 800c924:	18ed      	addgt	r5, r5, r3
 800c926:	2600      	movs	r6, #0
 800c928:	341a      	adds	r4, #26
 800c92a:	42b5      	cmp	r5, r6
 800c92c:	d11a      	bne.n	800c964 <_printf_common+0xc8>
 800c92e:	2000      	movs	r0, #0
 800c930:	e008      	b.n	800c944 <_printf_common+0xa8>
 800c932:	2301      	movs	r3, #1
 800c934:	4652      	mov	r2, sl
 800c936:	4649      	mov	r1, r9
 800c938:	4638      	mov	r0, r7
 800c93a:	47c0      	blx	r8
 800c93c:	3001      	adds	r0, #1
 800c93e:	d103      	bne.n	800c948 <_printf_common+0xac>
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c948:	3501      	adds	r5, #1
 800c94a:	e7c6      	b.n	800c8da <_printf_common+0x3e>
 800c94c:	18e1      	adds	r1, r4, r3
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	2030      	movs	r0, #48	; 0x30
 800c952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c956:	4422      	add	r2, r4
 800c958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c960:	3302      	adds	r3, #2
 800c962:	e7c7      	b.n	800c8f4 <_printf_common+0x58>
 800c964:	2301      	movs	r3, #1
 800c966:	4622      	mov	r2, r4
 800c968:	4649      	mov	r1, r9
 800c96a:	4638      	mov	r0, r7
 800c96c:	47c0      	blx	r8
 800c96e:	3001      	adds	r0, #1
 800c970:	d0e6      	beq.n	800c940 <_printf_common+0xa4>
 800c972:	3601      	adds	r6, #1
 800c974:	e7d9      	b.n	800c92a <_printf_common+0x8e>
	...

0800c978 <_printf_i>:
 800c978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	7e0f      	ldrb	r7, [r1, #24]
 800c97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c980:	2f78      	cmp	r7, #120	; 0x78
 800c982:	4691      	mov	r9, r2
 800c984:	4680      	mov	r8, r0
 800c986:	460c      	mov	r4, r1
 800c988:	469a      	mov	sl, r3
 800c98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c98e:	d807      	bhi.n	800c9a0 <_printf_i+0x28>
 800c990:	2f62      	cmp	r7, #98	; 0x62
 800c992:	d80a      	bhi.n	800c9aa <_printf_i+0x32>
 800c994:	2f00      	cmp	r7, #0
 800c996:	f000 80d8 	beq.w	800cb4a <_printf_i+0x1d2>
 800c99a:	2f58      	cmp	r7, #88	; 0x58
 800c99c:	f000 80a3 	beq.w	800cae6 <_printf_i+0x16e>
 800c9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9a8:	e03a      	b.n	800ca20 <_printf_i+0xa8>
 800c9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ae:	2b15      	cmp	r3, #21
 800c9b0:	d8f6      	bhi.n	800c9a0 <_printf_i+0x28>
 800c9b2:	a101      	add	r1, pc, #4	; (adr r1, 800c9b8 <_printf_i+0x40>)
 800c9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b8:	0800ca11 	.word	0x0800ca11
 800c9bc:	0800ca25 	.word	0x0800ca25
 800c9c0:	0800c9a1 	.word	0x0800c9a1
 800c9c4:	0800c9a1 	.word	0x0800c9a1
 800c9c8:	0800c9a1 	.word	0x0800c9a1
 800c9cc:	0800c9a1 	.word	0x0800c9a1
 800c9d0:	0800ca25 	.word	0x0800ca25
 800c9d4:	0800c9a1 	.word	0x0800c9a1
 800c9d8:	0800c9a1 	.word	0x0800c9a1
 800c9dc:	0800c9a1 	.word	0x0800c9a1
 800c9e0:	0800c9a1 	.word	0x0800c9a1
 800c9e4:	0800cb31 	.word	0x0800cb31
 800c9e8:	0800ca55 	.word	0x0800ca55
 800c9ec:	0800cb13 	.word	0x0800cb13
 800c9f0:	0800c9a1 	.word	0x0800c9a1
 800c9f4:	0800c9a1 	.word	0x0800c9a1
 800c9f8:	0800cb53 	.word	0x0800cb53
 800c9fc:	0800c9a1 	.word	0x0800c9a1
 800ca00:	0800ca55 	.word	0x0800ca55
 800ca04:	0800c9a1 	.word	0x0800c9a1
 800ca08:	0800c9a1 	.word	0x0800c9a1
 800ca0c:	0800cb1b 	.word	0x0800cb1b
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	602a      	str	r2, [r5, #0]
 800ca18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca20:	2301      	movs	r3, #1
 800ca22:	e0a3      	b.n	800cb6c <_printf_i+0x1f4>
 800ca24:	6820      	ldr	r0, [r4, #0]
 800ca26:	6829      	ldr	r1, [r5, #0]
 800ca28:	0606      	lsls	r6, r0, #24
 800ca2a:	f101 0304 	add.w	r3, r1, #4
 800ca2e:	d50a      	bpl.n	800ca46 <_printf_i+0xce>
 800ca30:	680e      	ldr	r6, [r1, #0]
 800ca32:	602b      	str	r3, [r5, #0]
 800ca34:	2e00      	cmp	r6, #0
 800ca36:	da03      	bge.n	800ca40 <_printf_i+0xc8>
 800ca38:	232d      	movs	r3, #45	; 0x2d
 800ca3a:	4276      	negs	r6, r6
 800ca3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca40:	485e      	ldr	r0, [pc, #376]	; (800cbbc <_printf_i+0x244>)
 800ca42:	230a      	movs	r3, #10
 800ca44:	e019      	b.n	800ca7a <_printf_i+0x102>
 800ca46:	680e      	ldr	r6, [r1, #0]
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca4e:	bf18      	it	ne
 800ca50:	b236      	sxthne	r6, r6
 800ca52:	e7ef      	b.n	800ca34 <_printf_i+0xbc>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	6820      	ldr	r0, [r4, #0]
 800ca58:	1d19      	adds	r1, r3, #4
 800ca5a:	6029      	str	r1, [r5, #0]
 800ca5c:	0601      	lsls	r1, r0, #24
 800ca5e:	d501      	bpl.n	800ca64 <_printf_i+0xec>
 800ca60:	681e      	ldr	r6, [r3, #0]
 800ca62:	e002      	b.n	800ca6a <_printf_i+0xf2>
 800ca64:	0646      	lsls	r6, r0, #25
 800ca66:	d5fb      	bpl.n	800ca60 <_printf_i+0xe8>
 800ca68:	881e      	ldrh	r6, [r3, #0]
 800ca6a:	4854      	ldr	r0, [pc, #336]	; (800cbbc <_printf_i+0x244>)
 800ca6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ca6e:	bf0c      	ite	eq
 800ca70:	2308      	moveq	r3, #8
 800ca72:	230a      	movne	r3, #10
 800ca74:	2100      	movs	r1, #0
 800ca76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca7a:	6865      	ldr	r5, [r4, #4]
 800ca7c:	60a5      	str	r5, [r4, #8]
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	bfa2      	ittt	ge
 800ca82:	6821      	ldrge	r1, [r4, #0]
 800ca84:	f021 0104 	bicge.w	r1, r1, #4
 800ca88:	6021      	strge	r1, [r4, #0]
 800ca8a:	b90e      	cbnz	r6, 800ca90 <_printf_i+0x118>
 800ca8c:	2d00      	cmp	r5, #0
 800ca8e:	d04d      	beq.n	800cb2c <_printf_i+0x1b4>
 800ca90:	4615      	mov	r5, r2
 800ca92:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca96:	fb03 6711 	mls	r7, r3, r1, r6
 800ca9a:	5dc7      	ldrb	r7, [r0, r7]
 800ca9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caa0:	4637      	mov	r7, r6
 800caa2:	42bb      	cmp	r3, r7
 800caa4:	460e      	mov	r6, r1
 800caa6:	d9f4      	bls.n	800ca92 <_printf_i+0x11a>
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d10b      	bne.n	800cac4 <_printf_i+0x14c>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	07de      	lsls	r6, r3, #31
 800cab0:	d508      	bpl.n	800cac4 <_printf_i+0x14c>
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	4299      	cmp	r1, r3
 800cab8:	bfde      	ittt	le
 800caba:	2330      	movle	r3, #48	; 0x30
 800cabc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cac4:	1b52      	subs	r2, r2, r5
 800cac6:	6122      	str	r2, [r4, #16]
 800cac8:	f8cd a000 	str.w	sl, [sp]
 800cacc:	464b      	mov	r3, r9
 800cace:	aa03      	add	r2, sp, #12
 800cad0:	4621      	mov	r1, r4
 800cad2:	4640      	mov	r0, r8
 800cad4:	f7ff fee2 	bl	800c89c <_printf_common>
 800cad8:	3001      	adds	r0, #1
 800cada:	d14c      	bne.n	800cb76 <_printf_i+0x1fe>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295
 800cae0:	b004      	add	sp, #16
 800cae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae6:	4835      	ldr	r0, [pc, #212]	; (800cbbc <_printf_i+0x244>)
 800cae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caec:	6829      	ldr	r1, [r5, #0]
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800caf4:	6029      	str	r1, [r5, #0]
 800caf6:	061d      	lsls	r5, r3, #24
 800caf8:	d514      	bpl.n	800cb24 <_printf_i+0x1ac>
 800cafa:	07df      	lsls	r7, r3, #31
 800cafc:	bf44      	itt	mi
 800cafe:	f043 0320 	orrmi.w	r3, r3, #32
 800cb02:	6023      	strmi	r3, [r4, #0]
 800cb04:	b91e      	cbnz	r6, 800cb0e <_printf_i+0x196>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	f023 0320 	bic.w	r3, r3, #32
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	2310      	movs	r3, #16
 800cb10:	e7b0      	b.n	800ca74 <_printf_i+0xfc>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	f043 0320 	orr.w	r3, r3, #32
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	2378      	movs	r3, #120	; 0x78
 800cb1c:	4828      	ldr	r0, [pc, #160]	; (800cbc0 <_printf_i+0x248>)
 800cb1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb22:	e7e3      	b.n	800caec <_printf_i+0x174>
 800cb24:	0659      	lsls	r1, r3, #25
 800cb26:	bf48      	it	mi
 800cb28:	b2b6      	uxthmi	r6, r6
 800cb2a:	e7e6      	b.n	800cafa <_printf_i+0x182>
 800cb2c:	4615      	mov	r5, r2
 800cb2e:	e7bb      	b.n	800caa8 <_printf_i+0x130>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	6826      	ldr	r6, [r4, #0]
 800cb34:	6961      	ldr	r1, [r4, #20]
 800cb36:	1d18      	adds	r0, r3, #4
 800cb38:	6028      	str	r0, [r5, #0]
 800cb3a:	0635      	lsls	r5, r6, #24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	d501      	bpl.n	800cb44 <_printf_i+0x1cc>
 800cb40:	6019      	str	r1, [r3, #0]
 800cb42:	e002      	b.n	800cb4a <_printf_i+0x1d2>
 800cb44:	0670      	lsls	r0, r6, #25
 800cb46:	d5fb      	bpl.n	800cb40 <_printf_i+0x1c8>
 800cb48:	8019      	strh	r1, [r3, #0]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	4615      	mov	r5, r2
 800cb50:	e7ba      	b.n	800cac8 <_printf_i+0x150>
 800cb52:	682b      	ldr	r3, [r5, #0]
 800cb54:	1d1a      	adds	r2, r3, #4
 800cb56:	602a      	str	r2, [r5, #0]
 800cb58:	681d      	ldr	r5, [r3, #0]
 800cb5a:	6862      	ldr	r2, [r4, #4]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7f3 fb3e 	bl	80001e0 <memchr>
 800cb64:	b108      	cbz	r0, 800cb6a <_printf_i+0x1f2>
 800cb66:	1b40      	subs	r0, r0, r5
 800cb68:	6060      	str	r0, [r4, #4]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb74:	e7a8      	b.n	800cac8 <_printf_i+0x150>
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	47d0      	blx	sl
 800cb80:	3001      	adds	r0, #1
 800cb82:	d0ab      	beq.n	800cadc <_printf_i+0x164>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	079b      	lsls	r3, r3, #30
 800cb88:	d413      	bmi.n	800cbb2 <_printf_i+0x23a>
 800cb8a:	68e0      	ldr	r0, [r4, #12]
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	4298      	cmp	r0, r3
 800cb90:	bfb8      	it	lt
 800cb92:	4618      	movlt	r0, r3
 800cb94:	e7a4      	b.n	800cae0 <_printf_i+0x168>
 800cb96:	2301      	movs	r3, #1
 800cb98:	4632      	mov	r2, r6
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	47d0      	blx	sl
 800cba0:	3001      	adds	r0, #1
 800cba2:	d09b      	beq.n	800cadc <_printf_i+0x164>
 800cba4:	3501      	adds	r5, #1
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	9903      	ldr	r1, [sp, #12]
 800cbaa:	1a5b      	subs	r3, r3, r1
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dcf2      	bgt.n	800cb96 <_printf_i+0x21e>
 800cbb0:	e7eb      	b.n	800cb8a <_printf_i+0x212>
 800cbb2:	2500      	movs	r5, #0
 800cbb4:	f104 0619 	add.w	r6, r4, #25
 800cbb8:	e7f5      	b.n	800cba6 <_printf_i+0x22e>
 800cbba:	bf00      	nop
 800cbbc:	0800d455 	.word	0x0800d455
 800cbc0:	0800d466 	.word	0x0800d466

0800cbc4 <_sbrk_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d06      	ldr	r5, [pc, #24]	; (800cbe0 <_sbrk_r+0x1c>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	f7f5 fbb0 	bl	8002334 <_sbrk>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_sbrk_r+0x1a>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_sbrk_r+0x1a>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	20002800 	.word	0x20002800

0800cbe4 <__sread>:
 800cbe4:	b510      	push	{r4, lr}
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	f000 f8ea 	bl	800cdc4 <_read_r>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	bfab      	itete	ge
 800cbf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbf6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbf8:	181b      	addge	r3, r3, r0
 800cbfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbfe:	bfac      	ite	ge
 800cc00:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc02:	81a3      	strhlt	r3, [r4, #12]
 800cc04:	bd10      	pop	{r4, pc}

0800cc06 <__swrite>:
 800cc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	461f      	mov	r7, r3
 800cc0c:	898b      	ldrh	r3, [r1, #12]
 800cc0e:	05db      	lsls	r3, r3, #23
 800cc10:	4605      	mov	r5, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	4616      	mov	r6, r2
 800cc16:	d505      	bpl.n	800cc24 <__swrite+0x1e>
 800cc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f000 f868 	bl	800ccf4 <_lseek_r>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	4632      	mov	r2, r6
 800cc32:	463b      	mov	r3, r7
 800cc34:	4628      	mov	r0, r5
 800cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	f000 b817 	b.w	800cc6c <_write_r>

0800cc3e <__sseek>:
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	460c      	mov	r4, r1
 800cc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc46:	f000 f855 	bl	800ccf4 <_lseek_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	bf15      	itete	ne
 800cc50:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc5a:	81a3      	strheq	r3, [r4, #12]
 800cc5c:	bf18      	it	ne
 800cc5e:	81a3      	strhne	r3, [r4, #12]
 800cc60:	bd10      	pop	{r4, pc}

0800cc62 <__sclose>:
 800cc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc66:	f000 b813 	b.w	800cc90 <_close_r>
	...

0800cc6c <_write_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	; (800cc8c <_write_r+0x20>)
 800cc70:	4604      	mov	r4, r0
 800cc72:	4608      	mov	r0, r1
 800cc74:	4611      	mov	r1, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	602a      	str	r2, [r5, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f7f4 faba 	bl	80011f4 <_write>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_write_r+0x1e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_write_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	20002800 	.word	0x20002800

0800cc90 <_close_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d06      	ldr	r5, [pc, #24]	; (800ccac <_close_r+0x1c>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f5 fb15 	bl	80022ca <_close>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_close_r+0x1a>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_close_r+0x1a>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20002800 	.word	0x20002800

0800ccb0 <_fstat_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	; (800ccd0 <_fstat_r+0x20>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	f7f5 fb10 	bl	80022e2 <_fstat>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d102      	bne.n	800cccc <_fstat_r+0x1c>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b103      	cbz	r3, 800cccc <_fstat_r+0x1c>
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
 800ccce:	bf00      	nop
 800ccd0:	20002800 	.word	0x20002800

0800ccd4 <_isatty_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	; (800ccf0 <_isatty_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f5 fb0f 	bl	8002302 <_isatty>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_isatty_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_isatty_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	20002800 	.word	0x20002800

0800ccf4 <_lseek_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4d07      	ldr	r5, [pc, #28]	; (800cd14 <_lseek_r+0x20>)
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	4608      	mov	r0, r1
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	2200      	movs	r2, #0
 800cd00:	602a      	str	r2, [r5, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	f7f5 fb08 	bl	8002318 <_lseek>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_lseek_r+0x1e>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_lseek_r+0x1e>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	20002800 	.word	0x20002800

0800cd18 <memmove>:
 800cd18:	4288      	cmp	r0, r1
 800cd1a:	b510      	push	{r4, lr}
 800cd1c:	eb01 0402 	add.w	r4, r1, r2
 800cd20:	d902      	bls.n	800cd28 <memmove+0x10>
 800cd22:	4284      	cmp	r4, r0
 800cd24:	4623      	mov	r3, r4
 800cd26:	d807      	bhi.n	800cd38 <memmove+0x20>
 800cd28:	1e43      	subs	r3, r0, #1
 800cd2a:	42a1      	cmp	r1, r4
 800cd2c:	d008      	beq.n	800cd40 <memmove+0x28>
 800cd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd36:	e7f8      	b.n	800cd2a <memmove+0x12>
 800cd38:	4402      	add	r2, r0
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	428a      	cmp	r2, r1
 800cd3e:	d100      	bne.n	800cd42 <memmove+0x2a>
 800cd40:	bd10      	pop	{r4, pc}
 800cd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd4a:	e7f7      	b.n	800cd3c <memmove+0x24>

0800cd4c <__malloc_lock>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	; (800cd54 <__malloc_lock+0x8>)
 800cd4e:	f7ff b9a7 	b.w	800c0a0 <__retarget_lock_acquire_recursive>
 800cd52:	bf00      	nop
 800cd54:	200027f4 	.word	0x200027f4

0800cd58 <__malloc_unlock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__malloc_unlock+0x8>)
 800cd5a:	f7ff b9a2 	b.w	800c0a2 <__retarget_lock_release_recursive>
 800cd5e:	bf00      	nop
 800cd60:	200027f4 	.word	0x200027f4

0800cd64 <_realloc_r>:
 800cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd68:	4680      	mov	r8, r0
 800cd6a:	4614      	mov	r4, r2
 800cd6c:	460e      	mov	r6, r1
 800cd6e:	b921      	cbnz	r1, 800cd7a <_realloc_r+0x16>
 800cd70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	4611      	mov	r1, r2
 800cd76:	f7ff ba67 	b.w	800c248 <_malloc_r>
 800cd7a:	b92a      	cbnz	r2, 800cd88 <_realloc_r+0x24>
 800cd7c:	f7ff f9f8 	bl	800c170 <_free_r>
 800cd80:	4625      	mov	r5, r4
 800cd82:	4628      	mov	r0, r5
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	f000 f82e 	bl	800cde8 <_malloc_usable_size_r>
 800cd8c:	4284      	cmp	r4, r0
 800cd8e:	4607      	mov	r7, r0
 800cd90:	d802      	bhi.n	800cd98 <_realloc_r+0x34>
 800cd92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd96:	d812      	bhi.n	800cdbe <_realloc_r+0x5a>
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	f7ff fa54 	bl	800c248 <_malloc_r>
 800cda0:	4605      	mov	r5, r0
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d0ed      	beq.n	800cd82 <_realloc_r+0x1e>
 800cda6:	42bc      	cmp	r4, r7
 800cda8:	4622      	mov	r2, r4
 800cdaa:	4631      	mov	r1, r6
 800cdac:	bf28      	it	cs
 800cdae:	463a      	movcs	r2, r7
 800cdb0:	f7fe fe26 	bl	800ba00 <memcpy>
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f7ff f9da 	bl	800c170 <_free_r>
 800cdbc:	e7e1      	b.n	800cd82 <_realloc_r+0x1e>
 800cdbe:	4635      	mov	r5, r6
 800cdc0:	e7df      	b.n	800cd82 <_realloc_r+0x1e>
	...

0800cdc4 <_read_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	; (800cde4 <_read_r+0x20>)
 800cdc8:	4604      	mov	r4, r0
 800cdca:	4608      	mov	r0, r1
 800cdcc:	4611      	mov	r1, r2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	602a      	str	r2, [r5, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f7f5 fa5c 	bl	8002290 <_read>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d102      	bne.n	800cde2 <_read_r+0x1e>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	b103      	cbz	r3, 800cde2 <_read_r+0x1e>
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	20002800 	.word	0x20002800

0800cde8 <_malloc_usable_size_r>:
 800cde8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdec:	1f18      	subs	r0, r3, #4
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bfbc      	itt	lt
 800cdf2:	580b      	ldrlt	r3, [r1, r0]
 800cdf4:	18c0      	addlt	r0, r0, r3
 800cdf6:	4770      	bx	lr

0800cdf8 <trunc>:
 800cdf8:	ec51 0b10 	vmov	r0, r1, d0
 800cdfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ce04:	2b13      	cmp	r3, #19
 800ce06:	b5d0      	push	{r4, r6, r7, lr}
 800ce08:	460c      	mov	r4, r1
 800ce0a:	dc10      	bgt.n	800ce2e <trunc+0x36>
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	bfa5      	ittet	ge
 800ce10:	4a11      	ldrge	r2, [pc, #68]	; (800ce58 <trunc+0x60>)
 800ce12:	fa42 f303 	asrge.w	r3, r2, r3
 800ce16:	2100      	movlt	r1, #0
 800ce18:	2100      	movge	r1, #0
 800ce1a:	bfb9      	ittee	lt
 800ce1c:	2000      	movlt	r0, #0
 800ce1e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800ce22:	2000      	movge	r0, #0
 800ce24:	ea24 0103 	bicge.w	r1, r4, r3
 800ce28:	ec41 0b10 	vmov	d0, r0, r1
 800ce2c:	bdd0      	pop	{r4, r6, r7, pc}
 800ce2e:	2b33      	cmp	r3, #51	; 0x33
 800ce30:	dd08      	ble.n	800ce44 <trunc+0x4c>
 800ce32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce36:	d1f7      	bne.n	800ce28 <trunc+0x30>
 800ce38:	ee10 2a10 	vmov	r2, s0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	f7f3 fa25 	bl	800028c <__adddf3>
 800ce42:	e7f1      	b.n	800ce28 <trunc+0x30>
 800ce44:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ce48:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4c:	fa23 f202 	lsr.w	r2, r3, r2
 800ce50:	ea20 0602 	bic.w	r6, r0, r2
 800ce54:	4630      	mov	r0, r6
 800ce56:	e7e7      	b.n	800ce28 <trunc+0x30>
 800ce58:	000fffff 	.word	0x000fffff

0800ce5c <_init>:
 800ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5e:	bf00      	nop
 800ce60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce62:	bc08      	pop	{r3}
 800ce64:	469e      	mov	lr, r3
 800ce66:	4770      	bx	lr

0800ce68 <_fini>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr
